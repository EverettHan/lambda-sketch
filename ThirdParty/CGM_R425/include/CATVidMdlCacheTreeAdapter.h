//===================================================================
// COPYRIGHT Dassault Systemes 2012/03/07
//===================================================================
// CATVidMdlCacheTreeAdapter.h
// Header definition of class CATVidMdlCacheTreeAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/03/07 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATVidMdlCacheTreeAdapter_H
#define CATVidMdlCacheTreeAdapter_H

#include <VisuDialog.h>
#include <CATVidMdlTreeAdapter.h>
#include <CATVidMdlTreeItem.h>
#include <CATBaseUnknown.h>
#include <CATBaseUnknown_var.h>
#include <CATSysSimpleHashTable.h>

/** @ingroup groupVidModelViewModel
 * This CID model adapter is used for creating dynamic tree model.
 * It stores the data in a cache memory when they are first created 
 * (at expansion of their parent).
 * In order to display this model with the CATVidCtlTreeView control,
 * you need to use introspectable objects OR to build introspectable objects
 * from your CATBaseUnknown_var data item (see Usage).
 * 
 * @par Advantage of this adapter:
 * The cache tree will store a pointer on the parent of each node, so that the
 * user does not need to reimplement a GetParentData method.
 * After beeing created once, tree data will be read directly from the cache. It aims at fasten 
 * the manipulation of the tree when tree data are slow to access.
 *
 * @par Inconvenient of this adapter:
 * It stores a lot of data in memory.
 *
 * @par Usage
 * In order to use this model adapter, you have to derive from it and to reimplement
 * the virtual methods GetChild and GetChildrenCount.
 * You can chose to build and return your introspectable objects directly in the GetChildren 
 * method (returns a list of datablocks for instance) OR you can chose to reimplement the 
 * GetIntrospectable method (build an introspectable from a CATBaseUnknown_var by filling
 * a datablock for instance).
 *
 * If your GetChild method does not return all the time the same instance of the data item stored 
 * in your model (e.g. you build your introspectable in the GetChild method), you must
 * reimplement CATVidMdlCacheTreeAdapter::_IsEqual method in order to inform the model how to compare two data items
 * (e.g. compare two unique properties such as a path, ...).
 *
 * @par Example
 * You can find an example or reimplementation of this class in 
 * VisuImmersiveDialog.tst\VIDTreeViewSamples.m\src\CATVidMdlDirectoryBrowser.cpp
 * 
 */
class ExportedByVisuDialog CATVidMdlCacheTreeAdapter: public CATVidMdlTreeAdapter
{
  CATDeclareClass;
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATVidMdlCacheTreeAdapter ();
  virtual ~CATVidMdlCacheTreeAdapter ();
  /**
   * Get the list of children of your CATBaseUnknown_var item.
   *
   * @param i_parent the parent item.
   * @return the list of children under i_parent (!!! if not introspectable, please reimplement the method GetIntrospectable)
   */
  virtual CATSYPDynArray<CATBaseUnknown_var> GetChildren(const CATBaseUnknown_var & i_parent) = 0;

	//Adding a new method providing i_pIndex data...to manage partial expand.
	//Default behavior is just to call above GetChildren method.
	//Client wishing handle partial expand need to implement GetChildren(const CATBaseUnknown_var & i_parent, CATVidMdlIndex * i_pIndex).
  /**
   * Get the list of children of your CATBaseUnknown_var item.
   *
   * @param i_parent the parent item.
   * @return the list of children under i_parent (!!! if not introspectable, please reimplement the method GetIntrospectable)
   */
  virtual CATSYPDynArray<CATBaseUnknown_var> GetChildren(const CATBaseUnknown_var & i_parent, CATVidMdlIndex & i_parentIndex);

  /**
   * Get the number of children under a given CATBaseUnknown_var item.
   *
   * @param i_parent the parent item.
   * @return the number of children under i_parent.
   */
  virtual int GetChildrenCount(const CATBaseUnknown_var & i_parent) = 0;

	//Adding a new method providing i_pIndex data...to manage partial expand.
	//Default behavior is just to call above GetChildrenCount method.
	//Client wishing handle partial expand need to implement GetChildrenCount(const CATBaseUnknown_var & i_parent, CATVidMdlIndex * i_pIndex).
	/**
	* Get the number of children under a given CATBaseUnknown_var item.
	*
	* @param i_parent the parent item.
	* @return the number of children under i_parent.
	*/
	virtual int GetChildrenCount(const CATBaseUnknown_var & i_parent, CATVidMdlIndex & i_parentIndex);

  /**
   * @copydoc CATIVidMdl#GetIntrospectable
   */
  virtual CATISYPIntrospectable_var GetIntrospectable(const CATBaseUnknown_var & i_item);

  /**
   * Set the root element data with the given CATBaseUnknown_var.
   *
   * @param i_root the new root element data to install in the model.
   */
  void SetRootData(const CATBaseUnknown_var & i_root, int i_Column = 0);
  /**
   * @return the root element data.
   */
  CATBaseUnknown_var GetRootData(int i_Column = 0) const;

  /**
   * @copydoc CATIVidMdl#HasIndex
   */
  virtual int HasIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#CreateIndex
   */
  virtual CATVidMdlIndex CreateIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetParent
   */
  virtual CATVidMdlIndex GetParent(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetRowCount
   */
  virtual int GetRowCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetColumnCount
   */
  virtual int GetColumnCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetElement
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#SetElement
   */
  virtual CATBoolean SetElement(const CATVidMdlIndex & i_index, const CATBaseUnknown_var & i_value);
  /**
   * @copydoc CATIVidMdl#GetRoot
   */
  virtual CATVidMdlIndex GetRoot(int i_Column = 0);
  /**
   * @copydoc CATIVidMdl#Reset
   */
  virtual void Reset();
  /**
   * @copydoc CATIVidMdl#Update
   *
   * @note if reimplemented, do not forget to call CATVidMdlCacheTreeAdapter::Update() method.
   */
  virtual void Update(const CATVidMdlIndex & i_parent = CATVidMdlIndex());
  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();
  /**
   * Get the model item referenced by the given index.
   *
   * @return the CATVidMdlTreeItem item referenced by the given index, if none, return the root element.
   */
  CATVidMdlTreeItem * GetItemFromIndex(const CATVidMdlIndex & i_index);  

  CATVidMdlIndex GetNextBuiltIndex(const CATVidMdlIndex& i_index);

protected:

  //This array is used to keep temporary in memory the model items.(whereas they are dereferenced by the model).
  //If we do not force this memory keeping, CATVidMdlAdapter::Reset() call lead to "dispose" the view.
  //Particularly, it consists in remove some event handlers which can have been instanciated from a data block of a DB factory.
  //The remove of these handlers cannot be done if model item (datablock) has been removed.
  //So just during the method duration, we keep the model items in this array.
  virtual CATSYPDynArray<CATBaseUnknown_var> KeepItemsTemporaryInMemory();

  virtual void GetAllIndexesFromRoot(CATVidMdlTreeItem * i_pItem, int i_column, CATSYPDynArray<CATVidMdlIndex> & oindexesList);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidMdlCacheTreeAdapter (CATVidMdlCacheTreeAdapter &);
  CATVidMdlCacheTreeAdapter& operator=(CATVidMdlCacheTreeAdapter&);

  /**
  * @copydoc CATIVidMdl#_IsEqual
  */
  virtual CATBoolean _IsEqual(const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);

private:
  CATVidMdlTreeItem * _rootElement;
  int _deactivateCacheUpdate;
};

//-----------------------------------------------------------------------

#endif
