//===================================================================
// COPYRIGHT Dassault Systemes 2012/06/14
//===================================================================
// CATV3DManipulatorParameters.h
// Header definition of class CATV3DManipulatorParameters
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/06/14 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATV3DManipulatorParameters_H
#define CATV3DManipulatorParameters_H

#include <VisuImmersive3D.h>
#include <CATMathDirection.h>
#include <CATMathPlane.h>
#include <CATMathLine.h>
#include <CATMathPoint.h>
#include <CATSYPDeclareEnumFactory.h>

/**
 * Class that defines the parameters of the @c CATV3DGPManipulator.
 *
 * @par Role
 * This is a class of values which only purpose is to define the nature
 * and the geometry properties of the V3D GP manipulator.
 *
 * @ingroup V3DGP
 */
class ExportedByVisuImmersive3D CATV3DManipulatorParameters
{
public:
  /** Constructor*/
  CATV3DManipulatorParameters ();
  /** Constructor*/
  CATV3DManipulatorParameters (const CATV3DManipulatorParameters &);
  /** Operator =*/
  const CATV3DManipulatorParameters& operator=(const CATV3DManipulatorParameters&);
  /** Destructor*/
  virtual ~CATV3DManipulatorParameters ();

  /**
   * Defines the different types of 3D manipulations available
   *
   * @param NoManipulation             The manipulator does no specific work
   * @param DirectionTranslation       The manipulator contrains its position along a given direction during the manipulation
   * @param PlaneTranslation           The manipulator contrains its position along a given plane during the manipulation
   * @param LineRotation               The manipulator contrains its position on a circle normal to a given axis
   * @param PointRotation              The manipulator contrains its position on a sphere centered on a given point
   * @param FrontestPlaneTranslation   The manipulator contrains its position along a plane parallel to the screen
   **/
  enum ManipulationType {
    NoManipulation=0,
    DirectionTranslation,
    PlaneTranslation,
    LineRotation,
    PointRotation,
    FrontestPlaneTranslation,
  };

  /** Sets the type of manipulation (see ManipulationType).*/
  void SetManipulationType(const ManipulationType& i_type);

  /** @return the type of manipulation (see ManipulationType).*/
  const ManipulationType& GetManipulationType() const;

  /** Sets the relative direction of DirectionTranslation.*/
  void SetTranslationDirection( const CATMathDirection &i_axis);

  /** @return the relative direction of DirectionTranslation.*/
  const CATMathDirection& GetTranslationDirection() const;

  /** Sets the relative direction of FlipDirection.*/
  void SetFlipDirection( const CATMathDirection &i_axis);

  /** @return the relative direction of FlipDirection.*/
  const CATMathDirection& GetFlipDirection() const;

  /** Sets the relative plane of PlaneTranslation.*/
  void SetTranslationPlane( const CATMathPlane &i_plane);

  /** @return the relative plane of PlaneTranslation.*/
  const CATMathPlane& GetTranslationPlane() const;

  /** Sets the relative line of LineRotation.*/
  void SetRotationLine( const CATMathLine &i_line);

  /** @return the relative line of LineRotation.*/
  const CATMathLine& GetRotationLine() const;

  /** Sets the relative point of PointRotation.*/
  void SetRotationPoint( const CATMathPoint &i_point);

  /** @return the relative point of PointRotation.*/
  const CATMathPoint& GetRotationPoint() const;

  /** Sets TODO.*/
  void SetUseAbsolutePositionFlag(CATBoolean i_useVectorFlag);
  /** @return TODO.*/
  CATBoolean GetUseAbsolutePositionFlag() const;
  
  /**
   * Sets the useAbsoluteParamterFlag.
   * Indicate if the parameter are absolute and should not been multiply by the position matrix when applied to a manipulator 
   */
  void SetAbsoluteParametersFlag(CATBoolean i_useVectorFlag);
  /** @return the useAbsoluteParamterFlag.*/
  CATBoolean GetAbsoluteParametersFlag() const;

  // Sets the increment value for given Axis
  // iAxis==0 : x axis
  // iAxis==1 : y axis
  // iAxis==2 : z axis
  void SetTranslationIncrement(const int& iAxis, const double& iIncrement);
  const double& GetTranslationIncrement() const;
  const int& GetIncrementAxis() const;

  void SetRotationIncrement(const double& iIncrement);
  const double& GetRotationIncrement() const;

  void SetStepActivation(const CATBoolean& iActivated);
  const CATBoolean& GetStepActivation() const;

  void SetScaleFactor(const double &iScaleFactor);
  const double& GetScaleFactor() const;

private:
  ManipulationType _manipulationType;
  CATMathDirection _translationDirection;
  CATMathDirection _FlipDirection;
  CATMathPlane _translationPlane;
  CATMathLine _rotationLine;
  CATMathPoint _rotationPoint;

  double _ScaleFactor, _RotationIncrement, _TranslationIncrement;
  CATBoolean _StepActivation;
  int _IncrementAxis;

  unsigned int _useAbsolutePositionFlag   : 1;
  unsigned int _absoluteParametersFlag    : 31;
};

//------------------------------------------------------------------------------
// $(fclass) : operator ==
//------------------------------------------------------------------------------
inline int operator == (const CATV3DManipulatorParameters &i_constaints1, const CATV3DManipulatorParameters &i_constaints2)
{
  CATMathLine intersectionLine = CATMathLine();
  double paramOnOtherLine = 0, paramOnThisLine = 0;
  int diagnosis = 0;
  return ( i_constaints1.GetManipulationType() == i_constaints2.GetManipulationType() &&
           i_constaints1.GetTranslationDirection().IsParallel(i_constaints2.GetTranslationDirection()) &&
           i_constaints1.GetFlipDirection().IsParallel(i_constaints2.GetFlipDirection()) &&
           i_constaints1.GetTranslationPlane().Intersect(i_constaints2.GetTranslationPlane(), intersectionLine) == 2 &&
           i_constaints1.GetRotationLine().DistanceTo(i_constaints2.GetRotationLine(), paramOnOtherLine, paramOnThisLine, diagnosis) == 2 &&
           i_constaints1.GetRotationPoint().DistanceTo(i_constaints2.GetRotationPoint()) == 0 &&
           i_constaints1.GetTranslationIncrement() == i_constaints2.GetTranslationIncrement() &&
           i_constaints1.GetIncrementAxis() == i_constaints2.GetIncrementAxis() &&
           i_constaints1.GetRotationIncrement() == i_constaints2.GetRotationIncrement() &&
           i_constaints1.GetStepActivation() == i_constaints2.GetStepActivation() &&
           i_constaints1.GetScaleFactor() == i_constaints2.GetScaleFactor());
}

CATSYP_DECLARE_ENUMFACTORY (ExportedByVisuImmersive3D, CATV3DManipulatorParameters__ManipulationType);

#endif
