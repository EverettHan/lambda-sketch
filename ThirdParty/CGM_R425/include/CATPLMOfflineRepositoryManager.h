//===================================================================
// COPYRIGHT Dassault Systemes 2015/03/25
//===================================================================
// CATPLMOfflineRepositoryManager.cpp
// Header definition of class CATPLMOfflineRepositoryManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/03/25 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMOfflineRepositoryManager_H
#define CATPLMOfflineRepositoryManager_H

#include "CATPLMOfflineContentBase.h"
#include "CATPLMIDCollections.h"
#include "CATLISTV_CATPLMID.h"
#include "CATIPLMRecordRead.h"
#include "CATOmxSR.h"
#include "CATIOmyOfflineContentRepository.h"
#include "CATPLMOfflineContentIdentifier.h"
#include "CATOmxMutex.h"
#include "CATIOmyIncidentCollector.h"
#include "CATPLMCacheId.h"
#include "CATOmxQIPtr.h"
#include "CATPLMSessionDataSourceStatus.h"
#include "CATOmxList.h"
#include "CATOmxDefaultCollecManager.h"
#include "CATOmxCollecManager.h"
#include "CATUuid.h"
#include "CATOmyAsserts.h"
class CATPLMOfflineContentImlManager;
class CATWOmxBinaryStream;
class CATOmyVVSURLConnectionHolder;
class CATPLMStreamDescriptor;
class CATVVSUrl;
class CATPLMIDHashTable;
class CATOmbComponentSDs;
class CATLISTV(CATComponentId);
class CATProxySpace;
class CATIPLMCompRecordReadSet;
class CATIPLMOfflineApplicationLoader;
class CATPLMRecordReadAdapterImpl;
class CATPLMCEStampProxy;
template <> CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMCEStampProxy>::manager () ;
typedef CATOmxOHMap<CATPLMID, CATPLMCEStampProxy> CATPLMIDCEStampMap;

//-----------------------------------------------------------------------
// Repository d'offline contents pour les offline favorites
//----------------------------------------------------------------------
class ExportedByCATPLMOfflineContentBase CATPLMOfflineRepositoryManager : public CATIOmyOfflineContentRepository
{
  CATDeclareClass; 

public:

  class ExportedByCATPLMOfflineContentBase TransactionHandle : public CATOmxSharable
  {
    friend class CATPLMOfflineRepositoryManager;
    CATBoolean _bAbort;
    CATOmxSR<CATPLMOfflineContentImlManager> _spImlMan;
    CATOmxQIPtr<CATIPLMOfflineApplicationLoader> _spApplicationLoader;
    
    inline CATOmxSR<CATPLMOfflineContentImlManager> GetImlManager();
    inline CATOmxSR<CATIPLMOfflineApplicationLoader> GetL1Cache();
    inline HRESULT Abort() { _bAbort = TRUE; return S_OK ; }

    CATBoolean _validity;
  public :
    TransactionHandle();
    ~TransactionHandle();
    CATBoolean IsValid() { return _validity; }
  };

// Standard constructors and destructors
// -------------------------------------
CATPLMOfflineRepositoryManager ();
CATPLMOfflineRepositoryManager (CATOmxSR<TransactionHandle> &ispTrans/*, CATOmxSR<CATIOmyIncidentCollector> &ispIncidentCollector*/);
CATPLMOfflineRepositoryManager (CATOmxSR<CATIOmyIncidentCollector> &ispIncidentCollector);
virtual ~CATPLMOfflineRepositoryManager ();

HRESULT GetCEStamp(const CATPLMID &iPLMID, CATPLMCEStamp &oCEStamp) const;
HRESULT GetAggregatedByRelation(const CATPLMID &iSource, CATPLMID &oRelated) const;
HRESULT GetInstantiatesRelation(const CATPLMID &iSource, CATPLMID &oRelated) const;

//Filters to have integrity in iml model
HRESULT EnforceIntegrityOnCreatedFromIml(CATPLMIDOSet &ioToMakeConsistant) const;

//Say the record in modified in sessions, compared to the database
HRESULT SetInSessionLayer(const CATIPLMRecordRead &iRecord);
//These are the same as in collab : mem.tos attributes
HRESULT SetDataSourceStatus(const CATPLMID &iId, const CATUnicodeString &iDataSourceStatus);
HRESULT SetMemoryState(const CATPLMID &iId, const CATBinary &iMemoryState);
HRESULT GetDataSourceStatus(const CATPLMID &iId, CATUnicodeString &oDataSourceStatus, CATPLMID &oOldPid) const;
HRESULT GetMemoryState(const CATPLMID &iId, CATBinary &oMemoryState) const;

HRESULT OfflineContentExists(const CATPLMID &iInfosId);
HRESULT SearchOfflineContent(const CATPLMID &iInfosId, CATPLMOfflineContentIdentifier &oIdentifier);
HRESULT Save(const CATPLMOfflineContentIdentifier &id, const CATPLMID &iInfoId, const CATPLMIDOSet &iContentIds, CATWOmxBinaryStream &iMetadata);

//Attributes including CEStamp, strong relations
HRESULT SaveAttributes(const CATPLMIDOSet &toSave);
HRESULT RetrieveAttributes(const CATPLMIDs &toRetrieve);
HRESULT ListOfflineContents(CATPLMOfflineContentIdentifiersSet &oOfflineIdSet);
HRESULT Remove(const CATPLMOfflineContentIdentifier &id);

HRESULT CreateNewContent(const CATPLMID &iUserId, CATPLMOfflineContentIdentifier &oIdentifier);

HRESULT GetInfos(const CATPLMID &iUserId, CATPLMID &oInfo);
HRESULT GetContent(const CATPLMID &iUserId, CATPLMIDs &oContent);
HRESULT GetContent(const CATPLMID &iUserId, CATPLMIDOSet &oContent);
HRESULT GetAllInfosAsSimples(CATPLMIDOSet &oSimples);

HRESULT UpdateContent(const CATPLMOfflineContentIdentifier &iId, const CATPLMIDOSet &iNewContent, CATPLMIDOSet &oAdded);

HRESULT GetInfos(const CATPLMOfflineContentIdentifier &iId, CATPLMID &oInfo);
HRESULT GetContent(const CATPLMOfflineContentIdentifier &iId, CATPLMIDOSet &oContent);
HRESULT GetContent(const CATPLMOfflineContentIdentifier &iId, CATPLMIDs &oContent);

HRESULT SetMetadata(const CATPLMOfflineContentIdentifier &iId, CATWOmxBinaryStream &iStream);
HRESULT GetMetadata(const CATPLMOfflineContentIdentifier &iId, CATWOmxBinaryStream &oStream);

HRESULT HasBeenModified(const CATPLMOfflineContentIdentifier &id);
HRESULT Synchronise(const CATPLMOfflineContentIdentifier &iId);
HRESULT GetModifiedAndDeleted(const CATPLMIDOSet &iId, CATPLMIDOSet &oModified);
CATBoolean IsModifiedOrDeleted(const CATPLMID &iId);

HRESULT GetCreated(CATPLMIDOSet &oCreated) const;
HRESULT GetDeleted(CATPLMIDOSet &oDeleted) const;

//HRESULT StartImlTransaction(CATOmxSR<CATPLMOfflineRepositoryManager::TransactionHandle> &oTransactionHandle);
HRESULT UpdateSessionLayer(CATOmxSR<CATIPLMRecordRead> iRecordRead);
HRESULT FlushFromMemTOS(const CATLISTV(CATComponentId) &iObjectsToFlush); 
HRESULT MergeSDs(CATOmxSR<CATPLMRecordReadAdapterImpl> &iOldAndMerged, const CATOmxQIPtr<CATIPLMRecordRead> &iNew);

HRESULT GetPioIdentifier(CATUuid &oId) const;
HRESULT SetPioIdentifier(const CATUuid &iId);


static CATOmx::mutex & mutex() { static CATOmx::mutex sMutex; return sMutex;}
static HRESULT GetMemTOSPath(CATUnicodeString &oPath);
static HRESULT GetUFOPath(CATUnicodeString &oPath);
static CATUnicodeString& GetImlPath();

//Pour l'interface CATIOmyOfflineContentRepository. Il faudrait surement faire mieux !
//J'ai fait cette methode ici car j'ai rendu la classe transactionnelle OU non transactionnelle apres
HRESULT GetL1Cache(CATOmxSR<CATIPLMOfflineApplicationLoader> &oL1Cache) const 
{ 
  CHK_AND_RET_HR_M(_spImlTrans, "No L1 cache because no transaction started"); //TODO : creation a la volee
  oL1Cache = _spImlTrans->GetL1Cache(); 
  return S_OK;
}

HRESULT Abort() { return _spImlTrans ? _spImlTrans->Abort() : S_FALSE;}

private:
CATOmxSR<CATIOmyIncidentCollector> _spIncidentCollector;
CATOmxSR<TransactionHandle> _spImlTrans;
inline CATOmxSR<CATPLMOfflineContentImlManager> GetImlMan() const;
static HRESULT GetStoragePath(CATUnicodeString &oPath);
HRESULT QueryL1Cache(const CATPLMIDs &iPid, CATOmxSR<CATIPLMCompRecordReadSet> &oResult);
HRESULT WriteCEStamp(const CATIPLMRecordRead &iRecord, CATOmxSR<CATPLMOfflineContentImlManager> &ispImlMan);
HRESULT WriteStrongRelations(const CATIPLMRecordRead &iRecord, CATOmxSR<CATPLMOfflineContentImlManager> &ispImlMan);
HRESULT WriteAndReserveStreams(CATOmxSR<CATIPLMRecordRead> &iRecord, CATPLMIDHashTable& ioHash);

HRESULT SaveAttributesAndStreams(const CATPLMIDs &iPid);
HRESULT DeclareStreamToLock(CATOmxSR<CATIPLMRecordRead> &iRecord, 
                            CATOmxSR<CATPLMStreamDescriptor> &iSDes, 
                            CATOmbComponentSDs *ipSDs);

HRESULT QueryCacheIdsFromOffline(const CATPLMIDs &iPids, CATPLMCacheIdMap &oCacheIds);

HRESULT GetStatus(CATOmxSR<CATPLMOfflineContentImlManager> ispImlMan, const CATPLMID &iPid, CATPLMSessionDataSourceStatus &oStatus, CATPLMID &iOldPid);
HRESULT Remove(const CATPLMIDCEStampMap &iElementsRemoved);
/*inline*/ CATIPLMRecordRead ** SafePtrPtr(CATOmxSR<CATIPLMRecordRead> & ioRecordSR)
{
  ioRecordSR = NULL;
  return &ioRecordSR;
} 

};

//-----------------------------------------------------------------------

#endif
