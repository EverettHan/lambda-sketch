// COPYRIGHT Dassault Systemes 2002
//===================================================================
//
// CATP2PEndPoint.h
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2002  Creation: Code generated by the CAA wizard  jnm
//===================================================================
#ifndef CATP2PEndPoint_H
#define CATP2PEndPoint_H

#include "CATP2PCore.h"
#include "CATBaseUnknown.h"
#include "CATErrorDef.h"


class CATP2PService;
class CATCommand;
class CATP2PPeerInfo;
class CATUnicodeString;
//
class CATP2PPeer;

class CATHashDicoS;
class CATP2PHeader;

//extern "C" 
struct CATP2PHeaderFixedPart;
class CATP2PEndPointInfo;


class ExportedByCATP2PCore CATP2PEndPoint : public CATBaseUnknown
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
     CATP2PEndPoint ();
     virtual ~CATP2PEndPoint ();

	 virtual HRESULT Initialize(const char* adr, int port)=0;
	 HRESULT Initialize();

	 virtual int IsUnicast()=0;
	 virtual int IsMulticast()=0;
	
	 virtual HRESULT SendToGroup(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size)=0;
	 virtual HRESULT SendToPeer(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATP2PEndPointInfo* destination, CATP2PPeerInfo* remotePeerInfo)=0;

	 CATP2PEndPointInfo* GetEndPointInfo() {return _endPointInfo;	}


	 static void P2PRcvCB(int iFd, void *Cmd, CATP2PEndPoint *ToCall); 

	 
                      

  protected :

	  //gestion du cb de recpetion de message en provenance de la socket du endpoint
	  HRESULT InstallP2PCB(int fd);
	  HRESULT RemoveP2PCB(int fd);

	  // methode de reception
	  virtual HRESULT ReceiveData()=0;

	  HRESULT Dispatch(char*& buffer);


      HRESULT SplitAndSend(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATP2PEndPointInfo* destination = NULL, CATP2PPeerInfo* remotePeerInfo = NULL);

	  CATP2PPeer* _peer;
    CATP2PEndPointInfo* _endPointInfo; // pour le stream/unstream uniquement=> htonlisé

	  // info pour configurer la couches reseau
	  char* _mAddress;
      int	_mPort;
 
 
  int _splitSize;
  int _splitLimit;


  private:
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  CATP2PEndPoint (CATP2PEndPoint &);
  CATP2PEndPoint& operator=(CATP2PEndPoint&);

  // internal methods

  //Dispatch to peer
  HRESULT Dispatch(CATP2PHeader& header);

  // Splitted message reception called by Dipatch
  HRESULT MessageGroupTreatment(char*& buffer, CATP2PHeaderFixedPart*& head);

  // 2 methodes à implémenter si on veut supporter le split
  virtual HRESULT SendData(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size, CATP2PEndPointInfo* destination,  CATP2PPeerInfo* remotePeerInfo)=0;
  virtual HRESULT BuildMessage(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size, CATP2PHeader& head)=0;

  CATCommand* _RefCB;

  // for splitted message support, created if needed, detroyed afterwards.
  CATHashDicoS* _senderList;
  

 
};

//-----------------------------------------------------------------------

#endif
