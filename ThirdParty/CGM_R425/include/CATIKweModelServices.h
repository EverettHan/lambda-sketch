// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIKweModelServices.h
// This interface is used to access a set of services provided by the KnowledgeModeler
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  FRH
//===================================================================
#ifndef CATIKweModelServices_H
#define CATIKweModelServices_H

/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */


#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"
#include "CATICkeRelationForwards.h"


class CATIParmPublisher_var;
class CATICkeParmFactory_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATIKweModelServices;
#else
extern "C" const IID IID_CATIKweModelServices;
#endif

//------------------------------------------------------------------

/**
* Interface providing a set of services of the Knowledge Modeler.
*
* <br><b>Role</b>: This interface is mono implemented. It is obtained from CATCkeGlobalFunctions::GetModelServices() method.
* <p>
* @href CATCkeGlobalFunctions
*/
class ExportedByCATLifSpecs CATIKweModelServices : public CATBaseUnknown
{
	CATDeclareInterface;

public:

	/**
	* Type of Set.
	* @param Parameter
	*   This set contains parameters.
	* @param Relation
	*   This set contains Relations.
	* @param Optimization
	*   This set contains optimizations.
	* @param RuleBase
	*   This set contains Rulebases.
	*/

	enum SetType
	{
		Parameter = 0,
		Relation = 1,
		Optimization = 2,
		RuleBase = 3,
		Macro = 4,
		LinkedRuleBase = 5,
		ExternalParameter = 6,
		PythonScript = 7
	};

	/**
	* Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.<br>
	* It is dedicated to applications which create parameters,relations,optimizations or rulebase and want to see
	* them in the parameter set, relation set, optimization set and rulebase set (in the tree view).<br>
	* If the Set does not exist and iRoot is a representation reference, it is created if argument iForceCreation is true.<br>
	* If the Set does not exist and iRoot is a reference with a current engineering specification, it is created if argument iForceCreation is true.<br>
	* @param iSetType to choose the type of set (Parameter, relation, optimization or rulebase).
	* @param iRoot The root object is where the set will be appended.
	* @param iForceCreation to force the creation of set if it doesn't exist.
	* @return ParameterSet,RelationSet,OptimizationSet,RuleBaseSet returned depending on the iSetType.<br>
	* All those objects are in fact CATIParmPublisher_var.
	*/
	virtual CATBaseUnknown_var GetCurrentSet(const CATIKweModelServices::SetType iSetType,
		const CATIParmPublisher_var& iRoot,
		const int iForceCreation = 0) = 0;

	/**
	* Get the current set : ParameterSet,RelationSet,OptimizationSet,RuleBaseSet.<br>
	* It is dedicated to applications which create parameters,relations,optimizations or rulebase and want to see
	* them in the parameter set, relation set, optimization set and rulebase set (in the tree view).<br>
	* If the Set does not exist and iRoot is a representation reference, it is created if argument iForceCreation is true.<br>
	* If the Set does not exist and iRoot is a reference with a current engineering specification, it is created if argument iForceCreation is true.<br>
	* If the Set does not exist and iRoot is a reference without a current engineering specification, a Knowledge engineering representation and
	* the set are created if argument iForceCreation is true. The representation is added to bag.<br>
	* @param iSetType to choose the type of set (Parameter, relation, optimization or rulebase).
	* @param iRoot The root object is where the set will be appended.
	* @param iForceCreation to force the creation of set if it doesn't exist.
	* @param pBag a pointer to an existing CATOmbLifeCycleRootsBag.
	* @return ParameterSet,RelationSet,OptimizationSet,RuleBaseSet returned depending on the iSetType.<br>
	* All those objects are in fact CATIParmPublisher_var.
	*/
	virtual CATBaseUnknown_var GetCurrentSetWithRepRef(const CATIKweModelServices::SetType iSetType,
		const CATIParmPublisher_var& iRoot,
		const int iForceSetCreation,
		void* pBag) = 0;

	/**
	 * Retrieves the list of visible literals from a CATIParmPublisher.
	 * uses VisitChildren on CATIParmPublisher and filters the NotSeen literals<br>
	 * @param iRoot  root object
	 * @param iListToBeFilled: literals are added to this list already allocated
	 * @param iRecursive  indicates if we only scan the direct children or all the children
	 * @param withFeatures  indicates if we scan the CATICkeFeature or not
	 */
	virtual void VisibleParms(const CATIParmPublisher_var& iRoot,
		CATCkeListOf(Parm)& iListToBeFilled,
		const CATCke::Boolean      iRecursive = 1,
		int withFeatures = 0) = 0;


	// how to get all relationss that belong (in a direct way or not) to a feature
	//-----------------------------------

		/**
		* Retrieves the list of visible relations from a CATIParmPublisher.
		* uses VisitChildren on CATIParmPublisher and filters the non expressional relation
		* @param iRoot  root object
		* @param iListToBeFilled  relations are added to this list already allocated
		 * @param  iRecursive  indicates if we only scan the direct children or all the children
		*/
	virtual void VisibleRelations(const CATIParmPublisher_var iRoot,
		CATCkeListOf(Relation)& iListToBeFilled,
		const CATCke::Boolean     iRecursive = 1) = 0;


	/**
	 * Tries to find a parameter by its name.
	 * @param iRoot : root object
	 * @param iParameterName : name of the parameter.
	 * @param iRecursive : indicates if we only scan the direct children or all the children
	 * @return the parameter found
	 */
	virtual CATICkeParm_var FindParm(const CATIParmPublisher_var& iRoot,
		const CATUnicodeString& iParameterName,
		const CATCke::Boolean        iRecursive = 1) = 0;



	/** Adds an object to the current set.<br>
	 *  It is not a recommended method. Please use GetCurrentSet instead.<br>
	 *  @param iSetType kind of set of object
	 *  @param iRoot root object
	 *  @param iObjectToAdd object to add
	*/
	virtual	void AddToCurrentSet(const CATIKweModelServices::SetType iSetType, const CATIParmPublisher_var& iRoot, const CATBaseUnknown_var& iObjectToAdd) = 0;


	/**
	 * Returns the Knowledge container where you will create parameters for example.<br>
	 * It is not a recommended method. Please use GetCurrentSet instead.<br>
	 * @param iRoot root object
	 * @param iForceCreation to force the creation of the Knowledge container.
	 * @return Knowledge container
	 */
	virtual	CATICkeParmFactory_var GetKnowledgeContainer(const CATBaseUnknown_var& iRoot, const int iForceCreation) = 0;

};
CATDeclareHandler(CATIKweModelServices, CATBaseUnknown);

#endif
