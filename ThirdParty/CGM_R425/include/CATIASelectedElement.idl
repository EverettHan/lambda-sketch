#ifndef CATIASelectedElement_IDL
#define CATIASelectedElement_IDL
/*IDLREP*/ 
/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */
// COPYRIGHT DASSAULT SYSTEMES 1998-2008
//--------------------------------------------------------------------------
// SelectedElement Object
// mcf - 2000
// qay - 2008 - V6
//--------------------------------------------------------------------------

#include "CATIABase.idl"
#include "CATSafeArray.idl"

interface CATIAReference;
 
/**
  * Abstract object which allows manipulating an element selected during a selection operation.
  * @see CATIASelection#SelectElement. 
  */
interface CATIASelectedElement : CATIABase
{
  /**
   * Returns the filter string that the selected element matched during the selection operation.
   * <br><b>Note</b>: This property returns a string describing the first of the filters passed as the iFilterType
   * parameter of interactive selection operations that the selected element fulfilled. This string constant may be
   * an automation object name corresponding to the iFilterType parameter, or a @href CATSelectionFilter value
   * name. 
   * @sample
   * <pre>
   * Set Selection = CATIA.ActiveEditor.Selection
   * ' We ask the user to select a Prism or a Hole
   * ReDim InputObjectType(1)
   * InputObjectType(0) = "Prism"
   * InputObjectType(1) = "Hole"
   * Status = Selection.SelectElement(InputObjectType, "Select a prism or a hole", True)
   * If (Status = "Cancel") Then Exit Sub
   * AutomationType = Selection.Item(1).Type</pre>
   * If the user selects a Pad, the script <tt>AutomationType</tt> variable will contain <tt>"Prism"</tt>
   * and not <tt>"Pad"</tt>, as <tt>"Prism"</tt> was the first filter that the Pad matched (Pads' fathers are Prisms).
   * <br><p>Therefore, you may also want to use VB's native TypeName function instead of this property to get the actual type of the selected element: in this case, <tt>MsgBox TypeName(Selection.Item(1).Value)</tt> will display Pad.
   */
#pragma PROPERTY Type
    HRESULT get_Type(inout /*IDLRETVAL*/ CATBSTR oType);

    /**
     * Returns the coordinates of the pick point.  
     * @param oPoint
     * The coordinates of the pick point, i.e. the hit between the geometric object and the cursor.</br> 
     * The length of this parameter can be 2 or 3. <br>
     * @sample
     * This example retrieves the coordinates of the pick point in the
     * array myArray:
     *<pre>
     * Dim oSelElem As SelectedElement
     * Set oSelElem = CATIA.ActiveEditor.Selection.Item(1)
     * ReDim myArray(2)
     * oSelElem.GetCoordinates myArray
     *</pre>
     */
    HRESULT GetCoordinates(inout CATSafeArrayVariant ioPoint);

    /**
    * Returns the actual selected automation object. 
    */
#pragma PROPERTY Value
    HRESULT get_Value(out /*IDLRETVAL*/ CATBaseDispatch oObject);

    /**
     * Returns a Reference version of the Value property.
    * <br><b>Role</b>: Returns a @href CATIAReference version of @href #Value .
     */
#pragma PROPERTY Reference
    HRESULT get_Reference(out /*IDLRETVAL*/ CATIAReference oReference);

   /**
    * Returns the leaf product instance which aggregates this selected element in the specification tree.
    * <br><b>Role</b>: The @href CATIABase returned is a @href CATIAVPMRepInstance , @href CATIAVPMInstance or @href CATIAVPMReference if a product appears in the
    * specification tree, in the path corresponding to the current selection, or a fake @href CATIABase whose
    * @href CATIABase#Name property is equal to "InvalidLeafProduct" otherwise.</br>
    * Used in combination with @href CATIABase#Parent property (which enables navigation in the object
    * structure), the script can browse the path of the selected element.
    * @sample
    * This example supposes that a product structure similar to the following one be opened:
    * <pre>
    *  +------------+ 
    *  !Product55228!                                                  <- VPMReference
    *  +------------+
    *      !
    *      +- Representation55228 (instance hidden)
    *      !
    *      +- Product55227 (Product55227.1)                            <- VPMReference (VPMInstance)
    *            !
    *            +- Product55226 (Product55226.1)                      <- VPMReference (VPMInstance)
    *                  !
    *                  +- Representation55226 (instance hidden)        <- Part/VPMRepReference (VPMRepInstance)
    *                            !
    *                            +- PartBody
    *                                  !
    *                                  +- Pad.1                        <- Select the Pad
    * </pre> 
    *
    * The leaf product instance in this case is Representation55226.1 (adheres to CATIAVPMRepInstance).<br>
    * <br>
    * The script asks the user to select a feature. It then browses the specification tree with a bottom-up approach starting from the selected element, and displays message boxes containing the names and types of the automation objects.
    * When the bottom-up approach cannot continue, a top-down approach is started from the root product, to display the names, types, and abcissa of the encountered products.
    * <pre>
    * Option Explicit
    *
    * Sub CATMain()
    * 
    *   Dim Selection
    *   Set Selection = CATIA.ActiveEditor.Selection
    * 
    *   'We ask the user to select a feature
    *   Dim Status, InputObjectType(0)
    *   InputObjectType(0) = "AnyObject" 
    *   Status = Selection.SelectElement(InputObjectType, "Select a feature", False)
    *   If (Status = "Cancel") Then Exit Sub
    * 
    *   Dim Feature, LeafProduct
    *   Set Feature = Selection.Item(1).Value
    *   Set LeafProduct = Selection.Item(1).LeafProduct
    *   MsgBox "Selected feature name = " & Feature.Name & "; type = " & TypeName(Feature)
    *   MsgBox "Corresponding LeafProduct name = " & LeafProduct.Name & "; type = " & TypeName(LeafProduct)
    * 
    *   If (LeafProduct.Name="InvalidLeafProduct") Then Exit Sub
    * 
    *   Dim BottomUp, WholeTreeProcessed, Node, NextNode
    *   BottomUp = True
    *   WholeTreeProcessed = False
    *   Set Node = Feature
    * 
    *   MsgBox "**** Starting bottom-up browsing ****"
    * 
    *   Dim Position, AxisComponentsArray(11)
    *   
    *   On Error Resume Next
    *   Do While (Not WholeTreeProcessed)
    *     MsgBox "Current node name = " & Node.Name & "; type = " & TypeName(Node)
    *     
    *     'We determine the next automation tree Node or product
    *     If (BottomUp) Then
    *       Err.Clear
    *       Set NextNode = Node.Parent      'this method will fail for representations (no parent defined because of multirepresentation capability)
    *       If (Err.Number <> 0) Then
    *         On Error GoTo 0              'deactivate error handler
    *
    *         'Bottom-up browsing cannot go upper than the representation. Then start a top-down approach starting from the root product.
    *         'VPM editor must be active for top-down browsing
    *         If TypeName(CATIA.ActiveEditor.ActiveObject) <> "VPMReference" Then Exit Sub
    *
    *         Dim oContext
    *         Set oContext= CATIA.ActiveEditor.GetService("PLMProductContext")
    *         Set NextNode = oContext.RootOccurrence
    *         BottomUp = False
    *         MsgBox "**** Bottom-up browsing ended. Starting top-down browsing. ****"
    *       End If
    *     Else
    *       If TypeName(Node) = "VPMOccurrence" Then
    *         'Our current node is a VPMOccurrence. We display its abscissa in the tree
    *         Set Position = Node.Position
    *         Call Position.GetComponents(AxisComponentsArray)    'Format: (x0,x1,x2) (y3,y4,y5) (z6,z7,z8) (o9,o10,o11)
    *         MsgBox "Position of the current VPMOccurrence = " & AxisComponentsArray(9)
    *       End If
    *       
    *       'Can we find our leaf product among the VPMRepInstances aggregated under the current VPMReference?
    *       'If so, break the loop
    *       Dim ReferenceNode
    *       If TypeName(Node) = "VPMRootOccurrence" Then
    *         Set ReferenceNode = Node.ReferenceRootOccurrenceOf
    *       Else
    *         Set ReferenceNode = Node.InstanceOccurrenceOf.ReferenceInstanceOf
    *       End If
    *       If (ReferenceNode.RepInstances.Count > 0) Then    
    *         Dim oRepInstance
    *         For Each oRepInstance In ReferenceNode.RepInstances
    *           If (oRepInstance.Name = LeafProduct.Name) Then
    *             WholeTreeProcessed = True
    *             MsgBox "**** Found the leaf product under " & Node.Name & ". End of loop. ****"
    *             Exit For
    *           End If
    *         Next
    *       End If
    *       
    *       'Otherwise, go down a VPMOccurrence level (in this example, we do not support multiple occurrences, but a recursive approach would make it easily)
    *       If (Not WholeTreeProcessed) Then
    *         Set NextNode = Node.Occurrences.Item(1)
    *       End If
    *     End If
    *     
    *     Set Node = NextNode
    *   Loop
    * 
    * End Sub
    * </pre>
    * The following message boxes should be displayed:
    * <pre>
    *     Selected feature name = Pad.1; type = Pad
    *     Corresponding LeafProduct name = Representation55226.1; type = VPMRepInstance
    *     **** Starting bottom-up browsing ****
    *     Current node name = Pad.1; type = Pad
    *     Current node name = Shapes; type = Shapes
    *     Current node name = PartBody; type = Body
    *     Current node name = Bodies; type = Bodies
    *     Current node name = Representation55226 --- IN_WORK; type = Part
    *     Current node name = ---Representation55226; type = VPMRepReference
    *     **** Bottom-up browsing ended. Starting top-down browsing. ****
    *     Current node name = ---Product55228; type = VPMRootOccurrence
    *     Current node name = ---Product55227.2; type = VPMOccurrence
    *     Position of the current VPMOccurrence = 0
    *     Current node name = ---Product55226.1; type = VPMOccurrence
    *     Position of the current VPMOccurrence = 0
    *     **** Found the leaf product under Product55226.1. End of loop. ****
    * </pre>
    */
#pragma PROPERTY LeafProduct
    HRESULT get_LeafProduct(out /*IDLRETVAL*/ CATIABase oProduct);

};

// Interface Name : CATIASelectedElement
#pragma ID CATIASelectedElement "DCE:6ef9ead4-7378-11d4-85b400508b675233"
  
#pragma DUAL CATIASelectedElement

// VB Object Name : SelectedElement
#pragma ID SelectedElement "DCE:82cca884-7378-11d4-85b400508b675233"
#pragma ALIAS CATIASelectedElement SelectedElement

#endif
