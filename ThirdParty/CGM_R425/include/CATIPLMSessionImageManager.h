// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMSessionImageManager.h
// Define the CATIPLMSessionImageManager interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2009  Creation: Code generated by the CAA wizard  PJQ
//===================================================================
#ifndef CATIPLMSessionImageManager_H
#define CATIPLMSessionImageManager_H

/**
 * @level Private
 * @usage U1
 */

#include "CATOMYBaseSession.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATOmxSR.h"
#include "CATOmyBSCTypeDefs.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYBaseSession IID IID_CATIPLMSessionImageManager;
#else
extern "C" const IID IID_CATIPLMSessionImageManager;
#endif

class CATProxySpace;
class CATProxySpaceImageAssistant;
class CATIPLMCompSaveTransaction;
class CATIAdpErrorMonitor;
class CATPLMBag;
class CATUnicodeString;
class CATIAdpErrorMonitor;

//------------------------------------------------------------------
class ExportedByCATOMYBaseSession CATIPLMSessionImageManager : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Check that the current authentified user matches the image's one
  * @return S_OK if the login infos are mathing
  *         E_FAIL if there are differences. Those are registered in the optionnal errorMonitor
  */
  virtual HRESULT CheckLoginInfo() = 0;

  /**
  * Returns the status of the OpenImage (Restore) operation
  * @return S_OK if the image has been successfully restored
  *         S_FALSE if no image has been restored
  *         E_FAIL if the restoration failed
  */
  virtual HRESULT OpenImage() = 0;

  /**
  * Initialize the various managers related to user interface,
  * such as editors manager and snapshot manager.
  * @returns
  *      S_OK if the managers have been initialized,
  *      S_FALSE if they haven't benn initialized because they shouldn't (for example, if Local Save is not active)
  *      E_FAIL if an error occured during initialization.
  */
  virtual HRESULT InitUIManagers() = 0;

  /**
  * @param [out] oSynchroOK TRUE if a LocalSave transaction can be performed
  * @param [out] oSynchroOK FALSE if no localsave transaction can be performed (localsave not activated or in OpenImage context)
  */
  virtual HRESULT PrepareLocalSaveTransaction(CATBoolean & oSynchroOK) = 0;

  /**
  * @param [in] iLSTransOK
  */
  virtual HRESULT EndLocalSaveTransaction(CATProxySpace & iWS,
                                          const LocalSaveTransaction::Status iLocalSaveTransactionStatus, CATProxySpaceImageAssistant & iImageAssistant) = 0;
  virtual HRESULT EndLocalSaveTransaction(CATProxySpace & iWS,
                                          const LocalSaveTransaction::Status iLocalSaveTransactionStatus, CATProxySpaceImageAssistant & iImageAssistant,
                                          int iNbCompsInSession, int iNbCompsDirty) = 0;


                                        /**
                                        * Creates a LocalSaveTransaction on the right provider
                                        */
  virtual HRESULT GetLocalSaveTransaction(CATProxySpaceImageAssistant & iWSImage, CATIPLMCompSaveTransaction *& oLSTransaction) = 0;

  /**
  * Renvoit FALSE s'il n'est pas necessaire de creer une transaction vide (validante) au cas ou rien n'est dirty
  * en LOG localSave.
  */
  virtual CATBoolean NeedsToCreateNewTransaction(CATProxySpaceImageAssistant & iWSImage, int iNbComponentsInSession) const = 0;

  /*
  * Attache un bag externe. Necessaire s'il n'y a pas d'editeur
  */
  virtual HRESULT AttachBag(CATPLMBag &ioBag) = 0;
  virtual HRESULT DetachBag() = 0;

  /*
  * Rend le lifecycle
  */
  virtual HRESULT RemoveComponents() = 0;

  /*
  * Met le SIM en mode d'ouverture d'image avant de faire le CATSysLogonDone
  */
  virtual HRESULT LogonDone(char* iProviderName) = 0;

  /*
  * Disable editors stream manager
  */
  virtual HRESULT DisableUIManagers() = 0;

  /**
   * Set current transaction name after restore
   */
  virtual HRESULT SetCurrentTransactionAfterRestore(const CATUnicodeString & iName) = 0;

  /**
  * Get the current error monitor
  */
  virtual CATOmxSR<CATIAdpErrorMonitor>& GetErrorMonitor() = 0;
};
CATDeclareHandler(CATIPLMSessionImageManager, CATBaseUnknown);
//------------------------------------------------------------------

#endif
