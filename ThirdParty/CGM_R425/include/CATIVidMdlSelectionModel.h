//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/10/27
//===================================================================
// CATIVidMdlSelectionModel.h
// Header definition of class CATIVidMdlSelectionModel
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/10/27 Creation: Code generated by the 3DS wizard  VV6
//===================================================================
#ifndef CATIVidMdlSelectionModel_H
#define CATIVidMdlSelectionModel_H

#include <VisuDialog.h>
#include <CATBaseUnknown.h>
#include <CATVid.h>

class CATVidMdlIndex;
class CATIVidMdl_var;
template <class T> class CATSYPArray;
class CATSYPEvent;
class CATSYPEventHandler;


extern ExportedByVisuDialog  IID IID_CATIVidMdlSelectionModel ;

/** @ingroup groupVidModelViewView
 * Interface that defines the member functions that a selection model
 * must exposed to be used by a model / view component.
 *
 * @par Definition
 * A selection model is responsible to store all the selected items of
 * a given model. So, a selection model instance can only be associated
 * to one model at a time. However, since a model can be displayed by several
 * views, a selection model can be shared among those different views.
 *
 * A selection model is also responsible to store the current index
 * of the model. This current index is mainly used for keyboard navigation.
 *
 * The selection is able to emit events as soon as a new element is selected.
 * This is useful to keep synchronize several views that share the same model
 * and selection model. When a data item is selected inside a view, all the views
 * that display the same model will be automatically updated reflecting the change
 * in selection.
 *
 * @par Import remarks on modifying the content of the selection model
 * Modifying the content of a selection model using code is possible using
 * member functions as CATIVidMdlSelectionModel#ClearSelection,
 * CATIVidMdlSelectionModel#Add, CATIVidMdlSelectionModel#Remove or
 * CATIVidMdlSelectionModel#Select. Those functions will act on the selection
 * model by altering it without checking the selection mode property of the
 * views associated to this selection model. So, if a view displays the content
 * of a list model and allows only a single element to be selected at a time by
 * setting the SelectionMode property to CATVid#SingleElement, by modifying
 * the content of the selection model directly, you can select several items at
 * resulting from a time. The property SelectionMode of a view only constraints
 * the selection the user interaction.
 *
 * A basic selection model is provided by CID called CATVidMdlSelectionModel.
 * This selection model implements this interface and will fulfill all basic needs
 * regarding selection.
 *
 * If this selection model doesn't fulfill all your requirements, you can provide
 * your own implementation of this interface. However, it's mandatory to use
 * the associated adapter called CATVidMdlSelectionModelAdapter to do so.
 */
class ExportedByVisuDialog CATIVidMdlSelectionModel : public CATBaseUnknown
{
CATDeclareInterface;

public:

  /**
   * Indicates whether at least one item is selected.
   *
   * @return 1 if at least one item is selected, 0 otherwise.
   */
  virtual int HasSelection() const = 0;

  /**
   * Indicates whether there is no items selected or not.
   *
   * @return 1 if the selection is empty, 0 otherwise.
   */
  virtual int IsEmptySelection() const = 0;

  /**
   * Indicates whether the given item is selected or not.
   *
   * @param i_index the index of the item to look for.
   *
   * @return 1 if the item is selected, 0 otherwise.
   */
  virtual int IsItemSelected(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "") const = 0;

  /**
   * Retrieves the list of selected items (through their model index).
   *
   * @param o_selectedItems list of selected items
   */
  virtual void GetSelectedItems(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems) = 0;

  /**
  * Retrieves the list of selected items (through their model index).
  *
  * @param o_selectedItems list of selected items
  *
  * @param o_selectedColumnsIDs list of selected columns Ids.
  */
  virtual void GetSelectedItems(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems, CATSYPDynArray<CATUnicodeString> & o_selectedColumnsIDs) = 0;

  /**
  * Retrieves the list of selected items (through their model index), but through the leaf proxy model.
	* Warning, o_selectedItems can content some invalid indexes!!!
	* For example, a source model has an index selected, but this index is filtered by its only proxy model. In this case, only index returned by the method will be invalid.
  *
  * @param o_selectedItems list of selected items
  *
  * @param o_selectedColumnsIDs list of selected columns Ids.
  */
  virtual void GetSelectedItemsInLeafProxyModel(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems, CATSYPDynArray<CATUnicodeString> & o_selectedColumnsIDs) = 0;

  /**
   * Retrieve the number of currently selected items.
   *
   * @return the number of currently selected items
   */
  virtual unsigned int GetNumberOfSelectedItems() const = 0;

  /**
  * deprecated...need to be removed when SWXBaseUI implementation will remove its method implementation.
  */
  //virtual void Select(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVid::SelectionFlag i_selectionFlag) = 0;
  
  /**
  * Modify the selection model by adding or removing the i_indexes collection
  * depending on the value of the given selection flag.
  *
  * @param i_indexes the collection of indexes to select or unselect
  *
  * @param i_selectionFlag the flag that indicates how to process the given
  * collection of indexes.  
  */
  virtual void Select(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVid::SelectionFlag i_selectionFlag) = 0;

  /**
  * Modify the selection model by adding or removing the i_indexes collection
  * depending on the value of the given selection flag.
  *
  * @param i_indexes the collection of indexes to select or unselect
  *
  * @param i_selectionFlag the flag that indicates how to process the given
  * collection of indexes.
  *
  * @param icolumnId the Id of column user wish select. (only useful for multi-columns case.)
  * Optional argument. If not specified, whole row will be selected in multi-column case.
  */
  virtual void Select(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVid::SelectionFlag i_selectionFlag, const CATSYPDynArray<CATUnicodeString>  & i_selectedColumnID) = 0;

  /**
   * Adds the given item represented by a model index to the list of selected
   * items.
   *
   * @param i_index the model index that references the item to select.
   *
   * @param i_ColumnID the id of added column.
   */
  virtual void Add(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "") = 0;

  /**
   * Removes from the selection model the given item represented by
   * a model index.
   *
   * @param i_index the model index that references the item to remove
   * from the selection model.
   *
   * @param i_ColumnID the id of removed column.
   */
  virtual void Remove(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "") = 0;

  /**
   * Remove all the selected items.
   */
  virtual void ClearSelection() = 0;

  /**
   * Retrieve the model component associated to this selection model.
   *
   * @return an handler on the associated model or NULL_var if the
   * selection model is not yet associated to a model.
   */
  virtual const CATIVidMdl_var & GetModel() const = 0;

  /**
  * Retrieve the last modified item by selection.
  *
  * @param the last item that has been modified by selection.
  *  
  */
  virtual CATVidMdlIndex GetLastModifiedItem() const = 0;

  /**
   * Retrieve the last modified item by selection.
   *
   * @param the last item that has been modified by selection.
   *
   * @param i_ColumnID the Id of last column modified by selection.
   */
  virtual CATVidMdlIndex GetLastModifiedItem(CATUnicodeString & o_ColumnID) const = 0;

  /**
   * Set the last modified item.
   *
   * @param i_ColumnID the Id of last column modified by selection.
   */
  virtual void SetLastModifiedItem(CATVidMdlIndex idx, const CATUnicodeString i_ColumnID = "") = 0;

  /**
   * Registers on the selection model the given handler for the given event.
   *
   * @param i_pEvent the event to which the registered event handler must react.
   *
   * @param i_pHandler the event handler to call when an event i_pEvent is raised.
   *
   * @param i_handleConsumedEvents flag that indicates whether consumed events must
   * treated or not (if == 0)
   */
  virtual int AddHandler(CATSYPEvent * i_pEvent, CATSYPEventHandler * i_pHandler, int i_handleConsumedEvents = 0) = 0;

  /**
   * Removes the given handler that is associated to the given event.
   *
   * @param i_pEvent the event to which the event handler to remove is associated.
   *
   * @param i_pHandler the event handler to remove.
   */
  virtual int RemoveHandler(CATSYPEvent * i_pEvent, CATSYPEventHandler * i_pHandler) = 0;

  /**
  * Get the model index that points to the current item.
  * The current item is used to navigate through the items using
  * the keyboard.
  *
  * @returns the model index that points to the current item, or an
  * invalid model index if no current index is set.
  */
  virtual CATVidMdlIndex GetCurrentIndex() const = 0;

  /**
   * Get the model index that points to the current item.
   * The current item is used to navigate through the items using
   * the keyboard.
   *
   * @param o_ColumnID the current columnID
   *
   * @returns the model index that points to the current item, or an
   * invalid model index if no current index is set.
   */
  virtual CATVidMdlIndex GetCurrentIndex(CATUnicodeString & o_ColumnID) const = 0;

  /**
   * Set i_index as the current index of this selection model.
   *
   * @param i_index the new current index
   */
  virtual void SetCurrentIndex(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "") = 0;

};

CATDeclareHandler( CATIVidMdlSelectionModel, CATBaseUnknown );

#endif
