// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIAVisualizationSettingAtt.idl
// Automation interface for the VisualizationSettingAtt element
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2004  Creation: Code generated by the CAA wizard  ywg
//
//  Notice:
//  When deliver this interface the following file should also be delivered:
//  - CATIAApplicationFrame\VE0TOPT.m\LocalInterfaces\CATVizVisualizationAutoSettingCtrl.h
//  - CATIAApplicationFrame\VE0TOPT.m\src\CATVizVisualizationAutoSettingCtrl.cpp
//===================================================================
#ifndef CATIAVisualizationSettingAtt_IDL
#define CATIAVisualizationSettingAtt_IDL

#include "CATIASettingController.idl"
#include "CATVariant.idl"
#include "CATSafeArray.idl"
#include "CATBSTR.idl"
#include "CATBackFaceCullingMode.idl"
#include "CATTransparencyMode.idl"
#include "CATFullSceneAntiAliasingModeEnum.idl"
#include "CATSLIModeEnum.idl"

#include "CATGraphicsAPI.idl"

// Putting your explanations in the following "JavaDoc"-like comment will enable mkdcidl to document your class.
/**
 * The interface to access a CATIAVisualizationSettingAtt.
 */
interface CATIAVisualizationSettingAtt : CATIASettingController
{

//=======================================================================================================

    // **************************************************************
    // Methods for Visualization tab page
    // **************************************************************

#pragma PROPERTY ColorBackgroundMode
    /**
     * Returns the ColorBackgroundMode parameter.
     */
     HRESULT get_ColorBackgroundMode ( out /*IDLRETVAL*/ boolean oColorBackgroundMode );
    /**
     * Sets the ColorBackgroundMode parameter.
     */
     HRESULT put_ColorBackgroundMode ( in                boolean iColorBackgroundMode );
    /**
     * Retrieves information about the ColorBackgroundMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetColorBackgroundModeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the ColorBackgroundMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetColorBackgroundModeLock ( in  boolean iLocked );

//#pragma PROPERTY BackgroundRGB
    /**
     * Returns the BackgroundRGB parameter.
     */
     HRESULT GetBackgroundRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the BackgroundRGB parameter.
     */
     HRESULT SetBackgroundRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the BackgroundRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetBackgroundRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the BackgroundRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetBackgroundRGBLock ( in  boolean iLocked );

//#pragma PROPERTY NoShowBackgroundRGB
    /**
     * Retrieves the No Show Background Color setting attribute value.
     * <br><b>Role</b>: The No Show Background Color setting attribute manages the backgraound color of no show space
     * @param ioR, ioG, ioB [inout]
     *   The Red, Green, Blue components of the No Show Background Color setting attribute value
     * @return
     *   S_OK if the No Show Background Color setting attribute value
     *   is successfully retrieved, and E_FAIL otherwise
     */
     HRESULT GetNoShowBackgroundRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the No Show Background Color setting attribute value.
     * <br><b>Role</b>: The No Show Background Color setting attribute manages the backgraound color of no show space
     * @param iR, iG, iB [in]
     *   The Red, Green, Blue components of the No Show Background Color setting attribute value
     *   <br><b>Legal values</b>: between 0 and 255
     * @return
     *   S_OK if the No Show Background Color setting attribute value
     *   is successfully set, and E_FAIL otherwise
     */
     HRESULT SetNoShowBackgroundRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves the No Show Background Color setting attribute information.
     * @param ioAdminLevel, ioLocked [inout] and oModified [out]
     *   The No Show Background Color setting attribute information
     * @return
     *   S_OK if the No Show Background Color setting attribute
     *   information is successfully retrieved, and E_FAIL otherwise
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetNoShowBackgroundRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the No Show Background Color setting attribute.
     * <br><b>Role</b>: Locks or unlocks the No Show Background Color setting attribute
     * if the operation is allowed in the current administrated environment.
     * In user mode this method will always return E_FAIL.
     * @param iLocked [in]
     *   A flag to indicate whether the No Show Background Color setting attribute should be locked.
     *   <br><b>Legal values</b>:
     *     <br><tt>TRUE</tt> to lock
     *     <br><tt>FALSE</tt> to unlock
     * @return
     *   S_OK if the No Show Background Color setting attribute
     *   is successfully locked or unlocked, and E_FAIL otherwise
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetNoShowBackgroundRGBLock ( in  boolean iLocked );

//#pragma PROPERTY SelectedElementRGB
    /**
     * Returns the SelectedElementRGB parameter.
     */
     HRESULT GetSelectedElementRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the SelectedElementRGB parameter.
     */
     HRESULT SetSelectedElementRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the SelectedElementRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetSelectedElementRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the SelectedElementRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetSelectedElementRGBLock ( in  boolean iLocked );

     /**
     * Returns the advanced SelectedElementRGB parameter.
     */
     HRESULT GetAdvancedSelectedElementRGB(inout long ioR, inout long ioG, inout long ioB);
     /**
     * Sets the advanced SelectedElementRGB parameter.
     */
     HRESULT SetAdvancedSelectedElementRGB(in    long  iR, in    long  iG, in    long  iB);

//#pragma PROPERTY SelectedEdgeRGB
    /**
     * Returns the SelectedEdgeRGB parameter.
     */
     HRESULT GetSelectedEdgeRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the SelectedEdgeRGB parameter.
     */
     HRESULT SetSelectedEdgeRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the SelectedEdgeRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetSelectedEdgeRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the SelectedEdgeRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetSelectedEdgeRGBLock ( in  boolean iLocked );

//#pragma PROPERTY PreselectedElementRGB
    /**
     * Returns the PreselectedElementRGB parameter.
     */
     HRESULT GetPreselectedElementRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the PreselectedElementRGB parameter.
     */
     HRESULT SetPreselectedElementRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the PreselectedElementRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetPreselectedElementRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the PreselectedElementRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetPreselectedElementRGBLock ( in  boolean iLocked );

     /**
     * Returns the advanced SelectedElementRGB parameter.
     */
     HRESULT GetAdvancedPreSelectedElementRGB(inout long ioR, inout long ioG, inout long ioB);
     /**
     * Sets the advanced SelectedElementRGB parameter.
     */
     HRESULT SetAdvancedPreSelectedElementRGB(in    long  iR, in    long  iG, in    long  iB);

#pragma PROPERTY PreselectedElementLinetype
    /**
     * Returns the PreselectedElementLinetype parameter.
     */
     HRESULT get_PreselectedElementLinetype ( out /*IDLRETVAL*/ long oPreselectedElementLinetype );
    /**
     * Sets the PreselectedElementLinetype parameter.
     */
     HRESULT put_PreselectedElementLinetype ( in                long iPreselectedElementLinetype );
    /**
     * Retrieves information about the PreselectedElementLinetype setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetPreselectedElementLinetypeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the PreselectedElementLinetype setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetPreselectedElementLinetypeLock ( in  boolean iLocked );

//#pragma PROPERTY UnderIntensifiedRGB
    /**
     * Returns the UnderIntensifiedRGB parameter.
     */
     HRESULT GetUnderIntensifiedRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the UnderIntensifiedRGB parameter.
     */
     HRESULT SetUnderIntensifiedRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the UnderIntensifiedRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetUnderIntensifiedRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the UnderIntensifiedRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetUnderIntensifiedRGBLock ( in  boolean iLocked );

//#pragma PROPERTY UpdateNeededRGB
    /**
     * Returns the UpdateNeededRGB parameter.
     */
     HRESULT GetUpdateNeededRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the UpdateNeededRGB parameter.
     */
     HRESULT SetUpdateNeededRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the UpdateNeededRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetUpdateNeededRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the UpdateNeededRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetUpdateNeededRGBLock ( in  boolean iLocked );

//#pragma PROPERTY HandlesRGB
    /**
     * Returns the HandlesRGB parameter.
     */
     HRESULT GetHandlesRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the HandlesRGB parameter.
     */
     HRESULT SetHandlesRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the HandlesRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetHandlesRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the HandlesRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetHandlesRGBLock ( in  boolean iLocked );

#pragma PROPERTY BorderEdgesMode
    /**
     * Returns the BorderEdgesMode parameter.
     */
     HRESULT get_BorderEdgesMode ( out /*IDLRETVAL*/ boolean oBorderEdgesMode );
    /**
     * Sets the BorderEdgesMode parameter.
     */
     HRESULT put_BorderEdgesMode ( in                boolean iBorderEdgesMode );
    /**
     * Retrieves information about the BorderEdgesMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetBorderEdgesModeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the BorderEdgesMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetBorderEdgesModeLock ( in  boolean iLocked );

//#pragma PROPERTY BorderEdgesRGB
    /**
     * Returns the BorderEdgesRGB parameter.
     */
     HRESULT GetBorderEdgesRGB ( inout long ioR, inout long ioG, inout long ioB );
    /**
     * Sets the BorderEdgesRGB parameter.
     */
     HRESULT SetBorderEdgesRGB ( in    long  iR, in    long  iG, in    long  iB );
    /**
     * Retrieves information about the BorderEdgesRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetBorderEdgesRGBInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the BorderEdgesRGB setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetBorderEdgesRGBLock ( in  boolean iLocked );

#pragma PROPERTY BorderEdgesThickness
    /**
     * Returns the BorderEdgesThickness parameter.
     */
     HRESULT get_BorderEdgesThickness ( out /*IDLRETVAL*/ long oBorderEdgesThickness );
    /**
     * Sets the BorderEdgesThickness parameter.
     */
     HRESULT put_BorderEdgesThickness ( in                long iBorderEdgesThickness );
    /**
     * Retrieves information about the BorderEdgesThickness setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetBorderEdgesThicknessInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the BorderEdgesThickness setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetBorderEdgesThicknessLock ( in  boolean iLocked );

#pragma PROPERTY HighlightMode
    /**
     * Returns the HighlightMode parameter.
     */
     HRESULT get_HighlightMode ( out /*IDLRETVAL*/ long oHighlightMode );
    /**
     * Sets the get_HighlightMode parameter.
     */
     HRESULT put_HighlightMode ( in                long iHighlightMode );
    /**
     * Retrieves information about the HighlightMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetHighlightModeInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the HighlightMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetHighlightModeLock ( in  boolean iLocked );

#pragma PROPERTY PreHighlightMode
    /**
     * Returns the PreHighlightMode parameter.
     */
     HRESULT get_PreHighlightMode ( out /*IDLRETVAL*/ long oPreHighlightMode );
    /**
     * Sets the get_HighlightMode parameter.
     */
     HRESULT put_PreHighlightMode ( in                long iPreHighlightMode );
    /**
     * Retrieves information about the PreHighlightMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetPreHighlightModeInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the PreHighlightMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetPreHighlightModeLock ( in  boolean iLocked );

#pragma PROPERTY AllZBufferElementMode
    /**
     * Returns the AllZBufferElementMode parameter.
     */
     HRESULT get_AllZBufferElementMode ( out /*IDLRETVAL*/ boolean oAllZBufferElementMode );
    /**
     * Sets the AllZBufferElementMode parameter.
     */
     HRESULT put_AllZBufferElementMode ( in                boolean iAllZBufferElementMode );
    /**
     * Retrieves information about the AllZBufferElementMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAllZBufferElementModeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AllZBufferElementMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAllZBufferElementModeLock ( in  boolean iLocked );

#pragma PROPERTY AntiAliasingMode
    /**
     * Returns the AntiAliasingMode parameter.
     */
     HRESULT get_AntiAliasingMode ( out /*IDLRETVAL*/ boolean oAntiAliasingMode );
    /**
     * Sets the AntiAliasingMode parameter.
     */
     HRESULT put_AntiAliasingMode ( in                boolean iAntiAliasingMode );
    /**
     * Retrieves information about the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAntiAliasingModeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAntiAliasingModeLock ( in  boolean iLocked );

#pragma PROPERTY AntiAliasingOffset
    /**
     * Returns the AntiAliasingOffset parameter.
     */
     HRESULT get_AntiAliasingOffset ( out /*IDLRETVAL*/ double oAntiAliasingOffset );
    /**
     * Sets the AntiAliasingOffset parameter.
     */
     HRESULT put_AntiAliasingOffset ( in                double iAntiAliasingOffset );
    /**
     * Retrieves information about the AntiAliasingOffset setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAntiAliasingOffsetInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AntiAliasingOffset setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAntiAliasingOffsetLock ( in  boolean iLocked );

#pragma PROPERTY EdgeHighCurvatureStepThresholdActivated
    HRESULT get_EdgeHighCurvatureStepThresholdActivated (out /*IDLRETVAL*/ boolean oActivateCurvatureStepDetectionMode);

    HRESULT put_EdgeHighCurvatureStepThresholdActivated (in boolean iActivateCurvatureStepDetectionMode);

    HRESULT GetEdgeHighCurvatureStepThresholdActivatedInfo (inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);

    HRESULT SetEdgeHighCurvatureStepThresholdActivatedLock (in boolean iLocked) ;

#pragma PROPERTY EdgeHighCurvatureStepThreshold
    HRESULT get_EdgeHighCurvatureStepThreshold (out /*IDLRETVAL*/ double oCurvatureStepThreshold);

    HRESULT put_EdgeHighCurvatureStepThreshold (in double iCurvatureStepThreshold);

    HRESULT GetEdgeHighCurvatureStepThresholdInfo (inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);

    HRESULT SetEdgeHighCurvatureStepThresholdLock (in boolean iLocked);


#pragma PROPERTY FullSceneAntiAliasingMode
    /**
     * Returns the AntiAliasingMode parameter.
     */
     HRESULT get_FullSceneAntiAliasingMode ( out /*IDLRETVAL*/ CATFullSceneAntiAliasingMode oFullSceneAntiAliasingMode );
    /**
     * Sets the AntiAliasingMode parameter.
     */
     HRESULT put_FullSceneAntiAliasingMode ( in                CATFullSceneAntiAliasingMode iFullSceneAntiAliasingMode );
    /**
     * Retrieves information about the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetFullSceneAntiAliasingModeInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetFullSceneAntiAliasingModeLock ( in  boolean iLocked );

    /**
     * Sets the AAOnSSAO mode
     */
     HRESULT put_AAOnSSAO ( in  boolean iMode );

    /**
     * Retrieves information about the AAOnSSAO setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAAOnSSAOInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AAOnSSAO setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAAOnSSAOLock ( in  boolean iLocked );


    /**
     * Sets the AADynamic mode
     */
     HRESULT put_AADynamic ( in  boolean iMode );

    /**
     * Retrieves information about the AADynamic setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAADynamicInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the AADynamic setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAADynamicLock ( in  boolean iLocked );

#pragma PROPERTY OutlinesDynamic

    /**
     * Sets the OutlinesDynamic mode
     */
     HRESULT put_OutlinesDynamic ( in  boolean iMode );

    /**
     * Retrieves information about the OutlinesDynamic setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetOutlinesDynamicInfo ( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the OutlinesDynamic setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetOutlinesDynamicLock ( in  boolean iLocked );


#pragma PROPERTY DisplayCurrentScale
    /**
     * Returns the SetStereoModeLock parameter.
     */
     HRESULT get_DisplayCurrentScale ( out /*IDLRETVAL*/ boolean oDisplayCurrentScale );
    /**
     * Sets the SetStereoModeLock parameter.
     */
     HRESULT put_DisplayCurrentScale ( in                boolean iDisplayCurrentScale );
    /**
     * Retrieves information about the SetStereoModeLock setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDisplayCurrentScaleInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the SetStereoModeLock setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDisplayCurrentScaleLock ( in  boolean iLocked );

#pragma PROPERTY SLIMode
    /**
    * Returns the SLIMode parameter.
    */
    HRESULT get_SLIMode(out /*IDLRETVAL*/ CATSLIMode oSLIMode);
    /**
    * Sets the SLIMode parameter.
    */
    HRESULT put_SLIMode(in                CATSLIMode iSLIMode);
    /**
    * Retrieves information about the SLIMode setting parameter.
    * <br>Refer to @href CATIASettingController for a detailed description.
    */
    HRESULT GetSLIModeInfo(inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
    * Locks or unlocks the SLIMode setting parameter.
    * <br>Refer to @href CATIASettingController for a detailed description.
    */
    HRESULT SetSLIModeLock(in  boolean iLocked);


#pragma PROPERTY StaticBatchingMode
    // StaticBatchingMode
    /**
    * Returns the NavigIconMode parameter.
    */
    HRESULT get_StaticBatchingMode(out /*IDLRETVAL*/ boolean ioStaticBatchingMode);
    /**
    * Sets the NavigIconMode parameter.
    */
    HRESULT put_StaticBatchingMode(in                boolean  iStaticBatchingMode);
    /**
    * Retrieves information about the NavigIconMode setting parameter.
    */
    HRESULT GetStaticBatchingModeInfo(inout CATBSTR  ioAdminLevel, inout CATBSTR  ioLocked, out /*IDLRETVAL*/ boolean  oModified);
    /**
    * Locks or unlocks the NavigIconMode setting parameter.
    */
    HRESULT SetStaticBatchingModeLock(in boolean   iLocked);

#pragma PROPERTY UnloadMemoryFromGPU
    // UnloadMemoryFromGPU
    /**
    * Returns the NavigIconMode parameter.
    */
    HRESULT get_UnloadMemoryFromGPU(out /*IDLRETVAL*/ boolean ioUnloadMemoryFromGPU);
    /**
    * Sets the NavigIconMode parameter.
    */
    HRESULT put_UnloadMemoryFromGPU(in                boolean  iUnloadMemoryFromGPU);
    /**
    * Retrieves information about the NavigIconMode setting parameter.
    */
    HRESULT GetUnloadMemoryFromGPUInfo(inout CATBSTR  ioAdminLevel, inout CATBSTR  ioLocked, out /*IDLRETVAL*/ boolean  oModified);
    /**
    * Locks or unlocks the NavigIconMode setting parameter.
    */
    HRESULT SetUnloadMemoryFromGPULock(in boolean   iLocked);


#pragma PROPERTY MeshCompressionNormalEnable
    // MeshCompressionNormalEnable
    /**
    * Returns the NavigIconMode parameter.
    */
    HRESULT get_MeshCompressionNormalEnable(out /*IDLRETVAL*/ boolean ioMeshCompressionNormalEnable);
    /**
    * Sets the NavigIconMode parameter.
    */
    HRESULT put_MeshCompressionNormalEnable(in                boolean  iMeshCompressionNormalEnable);
    /**
    * Retrieves information about the NavigIconMode setting parameter.
    */
    HRESULT GetMeshCompressionNormalEnableInfo(inout CATBSTR  ioAdminLevel, inout CATBSTR  ioLocked, out /*IDLRETVAL*/ boolean  oModified);
    /**
    * Locks or unlocks the NavigIconMode setting parameter.
    */
    HRESULT SetMeshCompressionNormalEnableLock(in boolean   iLocked);


    // **************************************************************
    // Methods for Navigation tab page
    // **************************************************************
    // --------------------------------------------------------------
    // Selection frame
    // --------------------------------------------------------------
#pragma PROPERTY PreSelectionMode
    /**
     * Returns the PreSelectionMode parameter.
     */
    // PreSelectionMode
    HRESULT get_PreSelectionMode( out /*IDLRETVAL*/ boolean ioPreSelectionMode) ;
    /**
     * Sets the PreSelectionMode parameter.
     */
    HRESULT put_PreSelectionMode( in                boolean  iPreSelectionMode) ;
    /**
     * Retrieves information about the PreSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetPreSelectionModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the PreSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetPreSelectionModeLock( in boolean   iLocked ) ;

#pragma PROPERTY OtherSelectionTimeoutActivity
    /**
     * Returns the OtherSelectionTimeoutActivity parameter.
     */
    // OtherSelectionTimeoutActivity
    HRESULT get_OtherSelectionTimeoutActivity( out /*IDLRETVAL*/ boolean ioOtherSelectionTimeoutActivity) ;
    /**
     * Sets the OtherSelectionTimeoutActivity parameter.
     */
    HRESULT put_OtherSelectionTimeoutActivity( in                boolean  iOtherSelectionTimeoutActivity) ;
    /**
     * Retrieves information about the OtherSelectionTimeoutActivity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetOtherSelectionTimeoutActivityInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the OtherSelectionTimeoutActivity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetOtherSelectionTimeoutActivityLock( in boolean   iLocked ) ;

#pragma PROPERTY OtherSelectionTimeout
    // OtherSelectionTimeout
    /**
     * Returns the OtherSelectionTimeout parameter.
     */
    HRESULT get_OtherSelectionTimeout( out /*IDLRETVAL*/ double ioOtherSelectionTimeout ) ;
    /**
     * Sets the OtherSelectionTimeout parameter.
     */
    HRESULT put_OtherSelectionTimeout( in                double  iOtherSelectionTimeout ) ;
    /**
     * Retrieves information about the OtherSelectionTimeout setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetOtherSelectionTimeoutInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the OtherSelectionTimeout setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetOtherSelectionTimeoutLock( in boolean   iLocked ) ;

#pragma PROPERTY PreSelNavigatorStartedByArrowKeys
    /**
     * Returns the PreSelNavigatorStartedByArrowKeys parameter.
     */
    // PreSelNavigatorStartedByArrowKeys
    HRESULT get_PreSelNavigatorStartedByArrowKeys( out /*IDLRETVAL*/ boolean ioPreSelNavigatorStartedByArrowKeys) ;
    /**
     * Sets the PreSelNavigatorStartedByArrowKeys parameter.
     */
    HRESULT put_PreSelNavigatorStartedByArrowKeys( in                boolean  iPreSelNavigatorStartedByArrowKeys) ;
    /**
     * Retrieves information about the PreSelNavigatorStartedByArrowKeys setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetPreSelNavigatorStartedByArrowKeysInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the PreSelNavigatorStartedByArrowKeys setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetPreSelNavigatorStartedByArrowKeysLock( in boolean   iLocked ) ;


#pragma PROPERTY HighlightActivation
    // HighlightActivation
    /**
     * Returns the HighlightActivation parameter.
     */
    HRESULT get_HighlightActivation( out /*IDLRETVAL*/ boolean ioHighlightActivation) ;
    /**
     * Sets the HighlightActivation parameter.
     */
    HRESULT put_HighlightActivation( in                boolean  iHighlightActivation) ;
    /**
     * Retrieves information about the HighlightActivation setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetHighlightActivationInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the HighlightActivation setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetHighlightActivationLock( in boolean   iLocked ) ;


#pragma PROPERTY NoZBufferSelectionMode
    // NoZBufferSelectionMode
    /**
     * Returns the NoZBufferSelectionMode parameter.
     */
    HRESULT get_NoZBufferSelectionMode( out /*IDLRETVAL*/ boolean ioNoZBufferSelectionMode) ;
    /**
     * Sets the NoZBufferSelectionMode parameter.
     */
    HRESULT put_NoZBufferSelectionMode( in                boolean  iNoZBufferSelectionMode) ;
    /**
     * Retrieves information about the NoZBufferSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetNoZBufferSelectionModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the NoZBufferSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetNoZBufferSelectionModeLock( in boolean   iLocked ) ;

#pragma PROPERTY BoundingBoxSelectionMode
    // BoundingBoxSelectionMode
    /**
     * Returns the BoundingBoxSelectionMode parameter.
     */
    HRESULT get_BoundingBoxSelectionMode( out /*IDLRETVAL*/ boolean ioBoundingBoxSelectionMode) ;
    /**
     * Sets the BoundingBoxSelectionMode parameter.
     */
    HRESULT put_BoundingBoxSelectionMode( in                boolean  iBoundingBoxSelectionMode) ;
    /**
     * Retrieves information about the BoundingBoxSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetBoundingBoxSelectionModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the BoundingBoxSelectionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetBoundingBoxSelectionModeLock( in boolean   iLocked ) ;

#pragma PROPERTY MaxSelectionMove
    // MaxSelectionMove
    /**
     * Returns the MaxSelectionMove parameter.
     */
    HRESULT get_MaxSelectionMove( out /*IDLRETVAL*/ long ioMaxSelectionMove ) ;
    /**
     * Sets the MaxSelectionMove parameter.
     */
    HRESULT put_MaxSelectionMove( in                long  iMaxSelectionMove)  ;
    /**
     * Retrieves information about the MaxSelectionMove setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetMaxSelectionMoveInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the MaxSelectionMove setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetMaxSelectionMoveLock( in boolean   iLocked ) ;

#pragma PROPERTY DisplayDrillList
    // DisplayDrillList
    /**
     * Returns the DisplayDrillList parameter.
     */
    HRESULT get_DisplayDrillList( out /*IDLRETVAL*/ boolean ioDisplayDrillList) ;
    /**
     * Sets the DisplayDrillList parameter.
     */
    HRESULT put_DisplayDrillList( in                boolean  iDisplayDrillList) ;
    /**
     * Retrieves information about the DisplayDrillList setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetDisplayDrillListInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the DisplayDrillList setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetDisplayDrillListLock( in boolean   iLocked ) ;

#pragma PROPERTY AuxiliaryDrillViewer
    // AuxiliaryDrillViewer
    /**
     * Returns the AuxiliaryDrillViewer parameter.
     */
    HRESULT get_AuxiliaryDrillViewer( out /*IDLRETVAL*/ boolean ioAuxiliaryDrillViewer) ;
    /**
     * Sets the AuxiliaryDrillViewer parameter.
     */
    HRESULT put_AuxiliaryDrillViewer( in                boolean  iAuxiliaryDrillViewer) ;
    /**
     * Retrieves information about the AuxiliaryDrillViewer setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetAuxiliaryDrillViewerInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the AuxiliaryDrillViewer setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetAuxiliaryDrillViewerLock( in boolean   iLocked ) ;

#pragma PROPERTY FaceHLDrill
    // FaceHLDrill
    /**
     * Returns the FaceHLDrill parameter.
     */
    HRESULT get_FaceHLDrill( out /*IDLRETVAL*/ boolean ioFaceHLDrill) ;
    /**
     * Sets the FaceHLDrill parameter.
     */
    HRESULT put_FaceHLDrill( in                boolean  iFaceHLDrill) ;
    /**
     * Retrieves information about the FaceHLDrill setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFaceHLDrillInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FaceHLDrill setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFaceHLDrillLock( in boolean   iLocked ) ;

#pragma PROPERTY DisplayImmersiveDrillViewer
    // DisplayImmersiveDrillViewer
    /**
     * Returns the DisplayImmersiveDrillViewer parameter.
     */
    HRESULT get_DisplayImmersiveDrillViewer( out /*IDLRETVAL*/ boolean ioDisplayImmersiveDrillViewer) ;
    /**
     * Sets the DisplayImmersiveDrillViewer parameter.
     */
    HRESULT put_DisplayImmersiveDrillViewer( in                boolean  iDisplayImmersiveDrillViewer) ;
    /**
     * Retrieves information about the DisplayImmersiveDrillViewer setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetDisplayImmersiveDrillViewerInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the DisplayImmersiveDrillViewer setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetDisplayImmersiveDrillViewerLock( in boolean   iLocked ) ;

    // --------------------------------------------------------------
    // Navigation frame
    // --------------------------------------------------------------
#pragma PROPERTY Gravity
    // Gravity
    /**
     * Returns the Gravity parameter.
     */
    HRESULT get_Gravity( out /*IDLRETVAL*/ boolean ioGravity) ;
    /**
     * Sets the Gravity parameter.
     */
    HRESULT put_Gravity( in                boolean  iGravity) ;
    /**
     * Retrieves information about the Gravity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetGravityInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the Gravity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetGravityLock( in boolean   iLocked ) ;

#pragma PROPERTY GravityAxis
    // GravityAxis
    /**
     * Returns the GravityAxis parameter.
     */
    HRESULT get_GravityAxis( out /*IDLRETVAL*/ long ioGravityAxis ) ;
    /**
     * Sets the GravityAxis parameter.
     */
    HRESULT put_GravityAxis( in                long  iGravityAxis)  ;
    /**
     * Retrieves information about the GravityAxis setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetGravityAxisInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the GravityAxis setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetGravityAxisLock( in boolean   iLocked ) ;

#pragma PROPERTY FollowGroundMode
    // FollowGroundMode
    /**
     * Returns the FollowGroundMode parameter.
     */
    HRESULT get_FollowGroundMode( out /*IDLRETVAL*/ boolean ioFollowGroundMode) ;
    /**
     * Sets the FollowGroundMode parameter.
     */
    HRESULT put_FollowGroundMode( in                boolean  iFollowGroundMode) ;
    /**
     * Retrieves information about the FollowGroundMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFollowGroundModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FollowGroundMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFollowGroundModeLock( in boolean   iLocked ) ;

#pragma PROPERTY FollowGroundAltitude
    // FollowGroundAltitude
    /**
     * Returns the FollowGroundAltitude parameter.
     */
    HRESULT get_FollowGroundAltitude( out /*IDLRETVAL*/ double ioFollowGroundAltitude) ;
    /**
     * Sets the FollowGroundAltitude parameter.
     */
    HRESULT put_FollowGroundAltitude( in                double  iFollowGroundAltitude) ;
    /**
     * Retrieves information about the FollowGroundAltitude setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFollowGroundAltitudeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FollowGroundAltitude setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFollowGroundAltitudeLock( in boolean   iLocked ) ;

#pragma PROPERTY ViewpointAnimationMode
    // ViewpointAnimationMode
    /**
     * Returns the ViewpointAnimationMode parameter.
     */
    HRESULT get_ViewpointAnimationMode( out /*IDLRETVAL*/ boolean ioViewpointAnimationMode) ;
    /**
     * Sets the ViewpointAnimationMode parameter.
     */
    HRESULT put_ViewpointAnimationMode( in                boolean  iViewpointAnimationMode) ;
    /**
     * Retrieves information about the ViewpointAnimationMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetViewpointAnimationModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the ViewpointAnimationMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetViewpointAnimationModeLock( in boolean   iLocked ) ;

#pragma PROPERTY RotationSphereMode
    // RotationSphereMode
    /**
     * Returns the RotationSphereMode parameter.
     */
    HRESULT get_RotationSphereMode( out /*IDLRETVAL*/ boolean ioRotationSphereMode) ;
    /**
     * Sets the RotationSphereMode parameter.
     */
    HRESULT put_RotationSphereMode( in                boolean  iRotationSphereMode) ;
    /**
     * Retrieves information about the RotationSphereMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetRotationSphereModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the RotationSphereMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetRotationSphereModeLock( in boolean   iLocked ) ;

    // --------------------------------------------------------------
    // FlyAndWalk frame
    // --------------------------------------------------------------
    #pragma PROPERTY MouseFreeMode
    // MouseFreeMode
    /**
     * Returns the MouseFreeMode parameter.
     */
    HRESULT get_MouseFreeMode( out /*IDLRETVAL*/ boolean ioMouseFreeMode) ;
    /**
     * Sets the MouseFreeMode parameter.
     */
    HRESULT put_MouseFreeMode( in                boolean  iMouseFreeMode) ;
    /**
     * Retrieves information about the MouseFreeMode setting parameter.
     */
    HRESULT GetMouseFreeModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the MouseFreeMode setting parameter.
     */
    HRESULT SetMouseFreeModeLock( in boolean   iLocked ) ;

    //--------------------------------------------------------------

     #pragma PROPERTY NavigIconMode
    // NavigIconMode
    /**
     * Returns the NavigIconMode parameter.
     */
    HRESULT get_NavigIconMode( out /*IDLRETVAL*/ boolean ioNavigIconMode) ;
    /**
     * Sets the NavigIconMode parameter.
     */
    HRESULT put_NavigIconMode( in                boolean  iNavigIconMode) ;
    /**
     * Retrieves information about the NavigIconMode setting parameter.
     */
    HRESULT GetNavigIconModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the NavigIconMode setting parameter.
     */
    HRESULT SetNavigIconModeLock( in boolean   iLocked ) ;

  //-----------------------------------------------
#pragma PROPERTY FlyCollisionMode
    // FlyCollisionMode
    /**
     * Returns the FlyCollisionMode parameter.
     */
    HRESULT get_FlyCollisionMode( out /*IDLRETVAL*/ boolean ioFlyCollisionMode) ;
    /**
     * Sets the FlyCollisionMode parameter.
     */
    HRESULT put_FlyCollisionMode( in                boolean  iFlyCollisionMode) ;
    /**
     * Retrieves information about the FlyCollisionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlyCollisionModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlyCollisionMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlyCollisionModeLock( in boolean   iLocked ) ;

#pragma PROPERTY FlyCollisionType
    // FlyCollisionType
    /**
     * Returns the FlyCollisionType parameter.
     */
    HRESULT get_FlyCollisionType( out /*IDLRETVAL*/ long ioFlyCollisionType ) ;
    /**
     * Sets the FlyCollisionType parameter.
     */
    HRESULT put_FlyCollisionType( in                long  iFlyCollisionType)  ;
    /**
     * Retrieves information about the FlyCollisionType setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlyCollisionTypeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlyCollisionType setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlyCollisionTypeLock( in boolean   iLocked ) ;

#pragma PROPERTY FlyCollisionSphereRadius
    // FlyCollisionSphereRadius
    /**
     * Returns the FlyCollisionSphereRadius parameter.
     */
    HRESULT get_FlyCollisionSphereRadius( out /*IDLRETVAL*/ double ioFlyCollisionSphereRadius) ;
    /**
     * Sets the FlyCollisionSphereRadius parameter.
     */
    HRESULT put_FlyCollisionSphereRadius( in                double  iFlyCollisionSphereRadius) ;
    /**
     * Retrieves information about the FlyCollisionSphereRadius setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlyCollisionSphereRadiusInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlyCollisionSphereRadius setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlyCollisionSphereRadiusLock( in boolean   iLocked ) ;

#pragma PROPERTY FlySensitivity
    // FlySensitivity
    /**
     * Returns the FlySensitivity parameter.
     */
    HRESULT get_FlySensitivity( out /*IDLRETVAL*/ long ioFlySensitivity ) ;
    /**
     * Sets the FlySensitivity parameter.
     */
    HRESULT put_FlySensitivity( in                long  iFlySensitivity)  ;
    /**
     * Retrieves information about the FlySensitivity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlySensitivityInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlySensitivity setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlySensitivityLock( in boolean   iLocked ) ;

#pragma PROPERTY FlySpeedMode
    // FlySpeedMode
    /**
     * Returns the FlySpeedMode parameter.
     */
    HRESULT get_FlySpeedMode( out /*IDLRETVAL*/ long ioFlySpeedMode ) ;
    /**
     * Sets the FlySpeedMode parameter.
     */
    HRESULT put_FlySpeedMode( in                long  iFlySpeedMode)  ;
    /**
     * Retrieves information about the FlySpeedMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlySpeedModeInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlySpeedMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlySpeedModeLock( in boolean   iLocked ) ;

#pragma PROPERTY FlySpeed
    // FlySpeed
    /**
     * Returns the FlySpeed parameter.
     */
    HRESULT get_FlySpeed( out /*IDLRETVAL*/ long ioFlySpeed ) ;
    /**
     * Sets the FlySpeed parameter.
     */
    HRESULT put_FlySpeed( in                long  iFlySpeed)  ;
    /**
     * Retrieves information about the FlySpeed setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetFlySpeedInfo( inout CATBSTR  ioAdminLevel  , inout CATBSTR  ioLocked  ,  out /*IDLRETVAL*/ boolean  oModified )   ;
    /**
     * Locks or unlocks the FlySpeed setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetFlySpeedLock( in boolean   iLocked ) ;

    // --------------------------------------------------------------
    // MouseSpeed frame
    // --------------------------------------------------------------
#pragma PROPERTY MouseSpeedValue
    // MouseSpeedValue
    /**
     * Returns the MouseSpeedValue parameter.
     */
    HRESULT get_MouseSpeedValue( out /*IDLRETVAL*/ long ioMouseSpeedValue ) ;
    /**
     * Sets the MouseSpeedValue parameter.
     */
    HRESULT put_MouseSpeedValue( in                long  iMouseSpeedValue)  ;
    /**
     * Retrieves information about the MouseSpeedValue setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT GetMouseSpeedValueInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the MouseSpeedValue setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
    HRESULT SetMouseSpeedValueLock( in boolean   iLocked ) ;

    // --------------------------------------------------------------
    // KeyboardRotationAngle frame
    // --------------------------------------------------------------
#pragma PROPERTY KeyboardRotationAngleValue
	// KeyboardRotationAngleValue
    /**
     * Retrieves the angle value for rotations operated through key combinations.
     */
     HRESULT get_KeyboardRotationAngleValue( out /*IDLRETVAL*/ long ioKeyboardRotationAngleValue ) ;
    /**
     * Sets the angle value for rotations operated through key combinations.
     */
     HRESULT put_KeyboardRotationAngleValue( in                long  iKeyboardRotationAngleValue)  ;
    /**
     * Retrieves information about the KeyboardRotationAngleValue setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetKeyboardRotationAngleValueInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the KeyboardRotationAngleValue setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetKeyboardRotationAngleValueLock( in boolean   iLocked ) ;

  // **************************************************************
  // Methods for Performances tab page
  // **************************************************************
     // --------------------------------------------------------------
     // Occlusion frame
     // --------------------------------------------------------------
#pragma PROPERTY OcclusionCullingMode
     // OcclusionCullingMode
    /**
     * Returns the OcclusionCullingMode parameter.
     */
     HRESULT get_OcclusionCullingMode( out /*IDLRETVAL*/ boolean ioOcclusionCullingMode) ;
    /**
     * Sets the OcclusionCullingMode parameter.
     */
     HRESULT put_OcclusionCullingMode( in                boolean  iOcclusionCullingMode) ;
    /**
     * Retrieves information about the OcclusionCullingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetOcclusionCullingModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the OcclusionCullingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetOcclusionCullingModeLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // Accuracy frame
     // --------------------------------------------------------------
#pragma PROPERTY Viz3DAccuracyMode
     // 3DAccuracyMode
    /**
     * Returns the Viz3DAccuracyMode parameter.
     */
     HRESULT get_Viz3DAccuracyMode( out /*IDLRETVAL*/ long io3DAccuracyMode) ;
    /**
     * Sets the Viz3DAccuracyMode parameter.
     */
     HRESULT put_Viz3DAccuracyMode( in                long  i3DAccuracyMode) ;
    /**
     * Retrieves information about the Viz3DAccuracyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz3DAccuracyModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the Viz3DAccuracyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz3DAccuracyModeLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz3DProportionnalAccuracy
     // 3DProportionnalAccuracy
    /**
     * Returns the Viz3DProportionnalAccuracy parameter.
     */
     HRESULT get_Viz3DProportionnalAccuracy( out /*IDLRETVAL*/ double io3DProportionnalAccuracy) ;
    /**
     * Sets the Viz3DProportionnalAccuracy parameter.
     */
     HRESULT put_Viz3DProportionnalAccuracy( in                double  i3DProportionnalAccuracy) ;
    /**
     * Retrieves information about the Viz3DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz3DProportionnalAccuracyInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the Viz3DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz3DProportionnalAccuracyLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz3DFixedAccuracy
     // 3DFixedAccuracy
    /**
     * Returns the 3DFixedAccuracy parameter.
     */
     HRESULT get_Viz3DFixedAccuracy( out /*IDLRETVAL*/ double io3DFixedAccuracy) ;
    /**
     * Sets the 3DFixedAccuracy parameter.
     */
     HRESULT put_Viz3DFixedAccuracy( in                double  i3DFixedAccuracy) ;
    /**
     * Retrieves information about the 3DFixedAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz3DFixedAccuracyInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the 3DFixedAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz3DFixedAccuracyLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz3DCurveAccuracy
     // 3DCurveAccuracy
    /**
     * Returns the 3DCurveAccuracy parameter.
     */
     HRESULT get_Viz3DCurveAccuracy( out /*IDLRETVAL*/ double io3DCurveAccuracy) ;
    /**
     * Sets the 3DCurveAccuracy parameter.
     */
     HRESULT put_Viz3DCurveAccuracy( in                double  i3DCurveAccuracy) ;
    /**
     * Retrieves information about the 3DCurveAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz3DCurveAccuracyInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the 3DCurveAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz3DCurveAccuracyLock( in boolean   iLocked ) ;

#pragma PROPERTY OptimizedMeshMode //AZX, new option, "Optimize meshes for texturing"
     // OptimizedMeshMode
    /**
     * Returns the optimized mesh mode parameter.
     */
     HRESULT get_OptimizedMeshMode( out /*IDLRETVAL*/ long ioOptimizedMeshMode) ;
    /**
     * Sets the optimized mesh mode parameter.
     */
     HRESULT put_OptimizedMeshMode( in                long iOptimizedMeshMode) ;
    /**
     * Retrieves information about the optimized mesh mode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetOptimizedMeshModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the optimized mesh mode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetOptimizedMeshModeLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz2DAccuracyMode
     // 2DAccuracyMode
    /**
     * Returns the 2DAccuracyMode parameter.
     */
     HRESULT get_Viz2DAccuracyMode( out /*IDLRETVAL*/ boolean io2DAccuracyMode) ;
    /**
     * Sets the 2DAccuracyMode parameter.
     */
     HRESULT put_Viz2DAccuracyMode( in                boolean  i2DAccuracyMode) ;
    /**
     * Retrieves information about the 2DAccuracyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz2DAccuracyModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the 2DAccuracyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz2DAccuracyModeLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz2DProportionnalAccuracy
     // 2DProportionnalAccuracy
    /**
     * Returns the 2DProportionnalAccuracy parameter.
     */
     HRESULT get_Viz2DProportionnalAccuracy( out /*IDLRETVAL*/ double io2DProportionnalAccuracy) ;
    /**
     * Sets the 2DProportionnalAccuracy parameter.
     */
     HRESULT put_Viz2DProportionnalAccuracy( in                double  i2DProportionnalAccuracy) ;
    /**
     * Retrieves information about the 2DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz2DProportionnalAccuracyInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the 2DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz2DProportionnalAccuracyLock( in boolean   iLocked ) ;

#pragma PROPERTY Viz2DFixedAccuracy
     // 2DFixedAccuracy
    /**
     * Returns the 2DFixedAccuracy parameter.
     */
     HRESULT get_Viz2DFixedAccuracy( out /*IDLRETVAL*/ double io2DFixedAccuracy) ;
    /**
     * Sets the 2DFixedAccuracy parameter.
     */
     HRESULT put_Viz2DFixedAccuracy( in                double  i2DFixedAccuracy) ;
    /**
     * Retrieves information about the 2DFixedAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetViz2DFixedAccuracyInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the 2DFixedAccuracy setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetViz2DFixedAccuracyLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // LOD frame
     // --------------------------------------------------------------
#pragma PROPERTY StaticLOD
     // StaticLOD
    /**
     * Returns the StaticLOD parameter.
     */
     HRESULT get_StaticLOD( out /*IDLRETVAL*/ double ioStaticLOD) ;
    /**
     * Sets the StaticLOD parameter.
     */
     HRESULT put_StaticLOD( in                double  iStaticLOD) ;
    /**
     * Retrieves information about the StaticLOD setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetStaticLODInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the StaticLOD setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetStaticLODLock( in boolean   iLocked ) ;

#pragma PROPERTY DynamicLOD
     // DynamicLOD
    /**
     * Returns the DynamicLOD parameter.
     */
     HRESULT get_DynamicLOD( out /*IDLRETVAL*/ double ioDynamicLOD) ;
    /**
     * Sets the DynamicLOD parameter.
     */
     HRESULT put_DynamicLOD( in                double  iDynamicLOD) ;
    /**
     * Retrieves information about the DynamicLOD setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDynamicLODInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the DynamicLOD setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDynamicLODLock( in boolean   iLocked ) ;

#pragma PROPERTY GenerateLODsOnSave
     // GenerateLODsOnSave
     /**
      * Returns the GenerateLODsOnSave setting
      */
     HRESULT get_GenerateLODsOnSave(out /*IDLRETVAL*/ boolean oGenerateLODsOnSave);

     /**
      * Sets the GenerateLODsOnSave setting
      */
     HRESULT put_GenerateLODsOnSave(in boolean iGenerateLODsOnSave);

     /**
      * Retrieves informations about the GenerateLODsOnSave setting
      */
     HRESULT GetGenerateLODsOnSaveInfo(inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);

     /**
      * Locks/Unlocks the GenerateLODsOnSave setting
      */
     HRESULT SetGenerateLODsOnSaveLock(in boolean iLocked);

     // --------------------------------------------------------------
     // Culling frame
     // --------------------------------------------------------------
#pragma PROPERTY StaticCull
     // StaticCull
    /**
     * Returns the StaticCull parameter.
     */
     HRESULT get_StaticCull( out /*IDLRETVAL*/ long ioStaticCull ) ;
    /**
     * Sets the StaticCull parameter.
     */
     HRESULT put_StaticCull( in                long  iStaticCull)  ;
    /**
     * Retrieves information about the StaticCull setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetStaticCullInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the StaticCull setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetStaticCullLock( in boolean   iLocked ) ;

#pragma PROPERTY DynamicCull
     // DynamicCull
    /**
     * Returns the DynamicCull parameter.
     */
     HRESULT get_DynamicCull( out /*IDLRETVAL*/ long ioDynamicCull ) ;
    /**
     * Sets the DynamicCull parameter.
     */
     HRESULT put_DynamicCull( in                long  iDynamicCull)  ;
    /**
     * Retrieves information about the DynamicCull setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDynamicCullInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the DynamicCull setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDynamicCullLock( in boolean   iLocked ) ;

#pragma PROPERTY CullVanishingRatio
    // CullVanishingRatio
    /**
     * Retruns the CullVanishingRatio setting
     */
    HRESULT get_CullVanishingRatio( out /*IDLRETVAL*/ double ioCullVanishingRatio ) ;

    /**
     * Sets the CullVanishingRatio setting
     */
    HRESULT put_CullVanishingRatio( in                double iCullVanishingRatio ) ;

    /**
     * Retrives information about the CullVanishingRatio setting
     */
     HRESULT GetCullVanishingRatioInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;

    /**
     * Locks/Unlocks the CullVanishingRati setting
     */
     HRESULT SetCullVanishingRatioLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // Transparency frame
     // --------------------------------------------------------------
#pragma PROPERTY TransparencyMode
     // TransparencyMode

    /**
     * deprecated R1.X
     * Returns the TransparencyMode parameter.
     */
     HRESULT get_TransparencyMode( out /*IDLRETVAL*/ boolean ioTransparencyMode) ;
    /**
     * deprecated R1.X
     * Sets the TransparencyMode parameter.
     */
     HRESULT put_TransparencyMode( in                boolean  iTransparencyMode) ;

    /**
     * Retrieves the TransparencyMode attribute.
     * @param oTransparencyMode
     *   Value of the transparency mode setting option. The retrieved value can be one of the values
     *	   defined by the @href CATTransparencyMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT GetTransparencyMode( out /*IDLRETVAL*/ CATTransparencyMode ioTransparencyMode) ;
    /**
     * Sets the TransparencyMode parameter.
     * @param iTransparencyMode
     *   Value of the transparency mode setting option. The value to set can be one of the values
     *	   defined by the @href CATTransparencyMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT SetTransparencyMode( in                CATTransparencyMode iTransparencyMode) ;
    /**
     * Retrieves information about the TransparencyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetTransparencyModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the TransparencyMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetTransparencyModeLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // Graphics frame
     // --------------------------------------------------------------
#pragma PROPERTY GraphicsAPI
     // GraphicsAPI

    /**
     * deprecated R1.X
     * Returns the GraphicsAPI parameter.
     */
     HRESULT get_GraphicsAPI( out /*IDLRETVAL*/ boolean ioGraphicsAPI) ;
    /**
     * deprecated R1.X
     * Sets the GraphicsAPI parameter.
     */
     HRESULT put_GraphicsAPI( in                boolean  iGraphicsAPI) ;

    /**
     * Retrieves the GraphicsAPI attribute.
     * @param oGraphicsAPI
     *   Value of the graphics API setting option. The retrieved value can be one of the values
     *	   defined by the @href CATGraphicsAPI enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT GetGraphicsAPI( out /*IDLRETVAL*/ CATGraphicsAPI ioGraphicsAPI) ;
    /**
     * Sets the GraphicsAPI parameter.
     * @param iGraphicsAPI
     *   Value of the graphics API setting option. The value to set can be one of the values
     *	   defined by the @href CATGraphicsAPI enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT SetGraphicsAPI( in                CATGraphicsAPI iGraphicsAPI) ;
    /**
     * Retrieves information about the GraphicsAPI setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetGraphicsAPIInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the GraphicsAPI setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetGraphicsAPILock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // FPS frame
     // --------------------------------------------------------------
#pragma PROPERTY MinimumFPSMode
     // MinimumFPSMode
    /**
     * Returns the MinimumFPSMode parameter.
     */
     HRESULT get_MinimumFPSMode( out /*IDLRETVAL*/ boolean ioMinimumFPSMode) ;
    /**
     * Sets the MinimumFPSMode parameter.
     */
     HRESULT put_MinimumFPSMode( in                boolean  iMinimumFPSMode) ;
    /**
     * Retrieves information about the MinimumFPSMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetMinimumFPSModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the MinimumFPSMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetMinimumFPSModeLock( in boolean   iLocked ) ;

#pragma PROPERTY NumberOfMinimumFPS
     // NumberOfMinimumFPS
    /**
     * Returns the NumberOfMinimumFPS parameter.
     */
     HRESULT get_NumberOfMinimumFPS( out /*IDLRETVAL*/ long ioNumberOfMinimumFPS ) ;
    /**
     * Sets the NumberOfMinimumFPS parameter.
     */
     HRESULT put_NumberOfMinimumFPS( in                long  iNumberOfMinimumFPS)  ;
    /**
     * Retrieves information about the NumberOfMinimumFPS setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetNumberOfMinimumFPSInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the NumberOfMinimumFPS setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetNumberOfMinimumFPSLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // SpaceFPS frame
     // --------------------------------------------------------------
#pragma PROPERTY MinimumSpaceFPSMode
     // MinimumSpaceFPSMode
    /**
     * Returns the MinimumSpaceFPSMode parameter.
     */
     HRESULT get_MinimumSpaceFPSMode( out /*IDLRETVAL*/ boolean ioMinimumSpaceFPSMode) ;
    /**
     * Sets the MinimumSpaceFPSMode parameter.
     */
     HRESULT put_MinimumSpaceFPSMode( in                boolean  iMinimumSpaceFPSMode) ;
    /**
     * Retrieves information about the MinimumSpaceFPSMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetMinimumSpaceFPSModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the MinimumSpaceFPSMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetMinimumSpaceFPSModeLock( in boolean   iLocked ) ;

#pragma PROPERTY NumberOfMinimumSpaceFPS
     // NumberOfMinimumSpaceFPS
    /**
     * Returns the NumberOfMinimumSpaceFPS parameter.
     */
     HRESULT get_NumberOfMinimumSpaceFPS( out /*IDLRETVAL*/ long ioNumberOfMinimumSpaceFPS ) ;
    /**
     * Sets the NumberOfMinimumSpaceFPS parameter.
     */
     HRESULT put_NumberOfMinimumSpaceFPS( in                long  iNumberOfMinimumSpaceFPS)  ;
    /**
     * Retrieves information about the NumberOfMinimumSpaceFPS setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetNumberOfMinimumSpaceFPSInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the NumberOfMinimumSpaceFPS setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetNumberOfMinimumSpaceFPSLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // Miscellaneous frame
     // --------------------------------------------------------------
#pragma PROPERTY IsoparGenerationMode
     // IsoparGenerationMode
    /**
     * Returns the IsoparGenerationMode parameter.
     */
     HRESULT get_IsoparGenerationMode( out /*IDLRETVAL*/ boolean ioIsoparGenerationMode) ;
    /**
     * Sets the IsoparGenerationMode parameter.
     */
     HRESULT put_IsoparGenerationMode( in                boolean  iIsoparGenerationMode) ;
    /**
     * Retrieves information about the IsoparGenerationMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetIsoparGenerationModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the IsoparGenerationMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetIsoparGenerationModeLock( in boolean   iLocked ) ;

#pragma PROPERTY NbIsopars
     // NbIsopars
    /**
     * Returns the NbIsopars parameter.
     */
     HRESULT get_NbIsopars( out /*IDLRETVAL*/ long ioNbIsopars ) ;
    /**
     * Sets the NbIsopars parameter.
     */
     HRESULT put_NbIsopars( in                long  iNbIsopars)  ;
    /**
     * Retrieves information about the NbIsopars setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetNbIsoparsInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the NbIsopars setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetNbIsoparsLock( in boolean   iLocked ) ;

#pragma PROPERTY TwoSideLightingMode
     // TwoSideLightingMode
    /**
     * Returns the TwoSideLightingMode parameter.
     */
     HRESULT get_TwoSideLightingMode( out /*IDLRETVAL*/ boolean ioTwoSideLightingMode) ;
    /**
     * Sets the TwoSideLightingMode parameter.
     */
     HRESULT put_TwoSideLightingMode( in                boolean  iTwoSideLightingMode) ;
    /**
     * Retrieves information about the TwoSideLightingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetTwoSideLightingModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the TwoSideLightingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetTwoSideLightingModeLock( in boolean   iLocked ) ;

#pragma PROPERTY BackFaceCullingMode
     // BackFaceCullingMode
    /**
     * deprecated V5R16.
     * Returns the BackFaceCullingMode parameter.
     */
     HRESULT get_BackFaceCullingMode( out /*IDLRETVAL*/ boolean ioBackFaceCullingMode) ;
    /**
     * deprecated V5R16.
     * Sets the BackFaceCullingMode parameter.
     */
     HRESULT put_BackFaceCullingMode( in                boolean  iBackFaceCullingMode) ;
    /**
     * Retrieves the BackFaceCullingMode parameter.
     * @param oBackFaceCullingMode
     *   Value of the back face culling mode setting option. The retrieved value can be one of the four possible values
     *	   defined by the @href CATBackFaceCullingMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT GetBackFaceCullingMode( out /*IDLRETVAL*/ CATBackFaceCullingMode ioBackFaceCullingMode) ;
    /**
     * Sets the BackFaceCullingMode attribute.
     * @param iBackFaceCullingMode
     *   Value of the back face culling mode setting option. The value to set can be one of the four possible values
     *	   defined by the @href CATBackFaceCullingMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     HRESULT PutBackFaceCullingMode( in                CATBackFaceCullingMode  iBackFaceCullingMode) ;
    /**
     * Retrieves information about the BackFaceCullingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetBackFaceCullingModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the BackFaceCullingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetBackFaceCullingModeLock( in boolean   iLocked ) ;

#pragma PROPERTY LightViewerMode
     // LightViewerMode
    /**
     * Returns the LightViewerMode parameter.
     */
     HRESULT get_LightViewerMode( out /*IDLRETVAL*/ boolean ioLightViewerMode) ;
    /**
     * Sets the LightViewerMode parameter.
     */
     HRESULT put_LightViewerMode( in                boolean  iLightViewerMode) ;
    /**
     * Retrieves information about the LightViewerMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetLightViewerModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the LightViewerMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetLightViewerModeLock( in boolean   iLocked ) ;

#pragma PROPERTY LineicCgrMode
     // LineicCgrMode
    /**
     * Returns the LineicCgrMode parameter.
     */
     HRESULT get_LineicCgrMode( out /*IDLRETVAL*/ boolean ioLineicCgrMode) ;
    /**
     * Sets the LineicCgrMode parameter.
     */
     HRESULT put_LineicCgrMode( in                boolean  iLineicCgrMode) ;
    /**
     * Retrieves information about the LineicCgrMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetLineicCgrModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the v setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetLineicCgrModeLock( in boolean   iLocked ) ;

#pragma PROPERTY ShaderMode
     // ShaderMode
    /**
     * Returns the ShaderMode parameter.
     */
     HRESULT get_ShaderMode( out /*IDLRETVAL*/ boolean ioShaderMode) ;
    /**
     * Sets the ShaderMode parameter.
     */
     HRESULT put_ShaderMode( in                boolean  iShaderMode) ;
    /**
     * Retrieves information about the ShaderMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetShaderModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the ShaderMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetShaderModeLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // Halo frame
     // --------------------------------------------------------------
#pragma PROPERTY HaloMode
     // HaloMode
    /**
     * Returns the HaloMode parameter.
     */
     HRESULT get_HaloMode( out /*IDLRETVAL*/ boolean ioHaloMode) ;
    /**
     * Sets the HaloMode parameter.
     */
     HRESULT put_HaloMode( in                boolean  iHaloMode) ;
    /**
     * Retrieves information about the HaloMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetHaloModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the HaloMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetHaloModeLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // AccuratePicking frame
     // --------------------------------------------------------------
#pragma PROPERTY PickingWindowSize
     // PickingWindowSize
    /**
     * Returns the PickingWindowSize parameter.
     */
     HRESULT get_PickingWindowSize( out /*IDLRETVAL*/ long ioPickingWindowSize ) ;
    /**
     * Sets the PickingWindowSize parameter.
     */
     HRESULT put_PickingWindowSize( in                long  iPickingWindowSize)  ;
    /**
     * Retrieves information about the PickingWindowSize setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetPickingWindowSizeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the PickingWindowSize setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetPickingWindowSizeLock( in boolean   iLocked ) ;

#pragma PROPERTY AccuratePickingMode
     // AccuratePickingMode
    /**
     * Returns the AccuratePickingMode parameter.
     */
     HRESULT get_AccuratePickingMode( out /*IDLRETVAL*/ boolean ioAccuratePickingMode) ;
    /**
     * Sets the AccuratePickingMode parameter.
     */
     HRESULT put_AccuratePickingMode( in                boolean  iAccuratePickingMode) ;
    /**
     * Retrieves information about the AccuratePickingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAccuratePickingModeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the AccuratePickingMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAccuratePickingModeLock( in boolean   iLocked ) ;

#pragma PROPERTY AccuratePickingWindowSize
     // AccuratePickingWindowSize
    /**
     * Returns the AccuratePickingWindowSize parameter.
     */
     HRESULT get_AccuratePickingWindowSize( out /*IDLRETVAL*/ long ioAccuratePickingWindowSize ) ;
    /**
     * Sets the AccuratePickingWindowSize parameter.
     */
     HRESULT put_AccuratePickingWindowSize( in                long  iAccuratePickingWindowSize)  ;
    /**
     * Retrieves information about the AccuratePickingWindowSize setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAccuratePickingWindowSizeInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the AccuratePickingWindowSize setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAccuratePickingWindowSizeLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // MouseDoubleClic frame
     // --------------------------------------------------------------
#pragma PROPERTY MouseDoubleClicDelay
     // MouseDoubleClicDelay
    /**
     * Returns the MouseDoubleClicDelay parameter.
     */
     HRESULT get_MouseDoubleClicDelay( out /*IDLRETVAL*/ long ioMouseDoubleClicDelay ) ;
    /**
     * Sets the MouseDoubleClicDelay parameter.
     */
     HRESULT put_MouseDoubleClicDelay( in                long  iMouseDoubleClicDelay)  ;
    /**
     * Retrieves information about the MouseDoubleClicDelay setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetMouseDoubleClicDelayInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the MouseDoubleClicDelay setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetMouseDoubleClicDelayLock( in boolean   iLocked ) ;

     // --------------------------------------------------------------
     // RTR Shading Frame
     // --------------------------------------------------------------
#pragma PROPERTY AmbientActivation
     // AmbientActivation
    /**
     * Returns the AmbientActivation parameter.
     */
     HRESULT get_AmbientActivation( out /*IDLRETVAL*/ long ioAmbientActivation ) ;
    /**
     * Sets the AmbientActivation parameter.
     */
     HRESULT put_AmbientActivation( in                long  iAmbientActivation)  ;
    /**
     * Retrieves information about the AmbientActivation setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetAmbientActivationInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the AmbientActivation setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetAmbientActivationLock( in boolean   iLocked ) ;

#pragma PROPERTY DefaultDiffuseAmbientCoefficient
     // DefaultDiffuseAmbientCoefficient
    /**
     * Returns the AmbientActivation parameter.
     */
     HRESULT get_DefaultDiffuseAmbientCoefficient( out /*IDLRETVAL*/ double ioDefaultDiffuseAmbientCoefficient ) ;
    /**
     * Sets the DefaultDiffuseAmbientCoefficient parameter.
     */
     HRESULT put_DefaultDiffuseAmbientCoefficient( in                double  iDefaultDiffuseAmbientCoefficient)  ;
    /**
     * Retrieves information about the DefaultDiffuseAmbientCoefficient setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDefaultDiffuseAmbientCoefficientInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the DefaultDiffuseAmbientCoefficient setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDefaultDiffuseAmbientCoefficientLock( in boolean   iLocked ) ;

#pragma PROPERTY DefaultSpecularCoefficient
     // DefaultSpecularCoefficient
    /**
     * Returns the AmbientActivation parameter.
     */
     HRESULT get_DefaultSpecularCoefficient( out /*IDLRETVAL*/ double ioDefaultSpecularCoefficient ) ;
    /**
     * Sets the DefaultSpecularCoefficient parameter.
     */
     HRESULT put_DefaultSpecularCoefficient( in                double  iDefaultSpecularCoefficient)  ;
    /**
     * Retrieves information about the DefaultSpecularCoefficient setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDefaultSpecularCoefficientInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the DefaultSpecularCoefficient setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDefaultSpecularCoefficientLock( in boolean   iLocked ) ;

#pragma PROPERTY DefaultShininess
     // DefaultShininess
    /**
     * Returns the AmbientActivation parameter.
     */
     HRESULT get_DefaultShininess( out /*IDLRETVAL*/ double ioDefaultShininess ) ;
    /**
     * Sets the DefaultShininess parameter.
     */
     HRESULT put_DefaultShininess( in                double  iDefaultShininess)  ;
    /**
     * Retrieves information about the DefaultShininess setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetDefaultShininessInfo( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked,  out /*IDLRETVAL*/ boolean oModified )   ;
    /**
     * Locks or unlocks the DefaultShininess setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetDefaultShininessLock( in boolean   iLocked ) ;

#pragma PROPERTY OpaqueFaces
    /**
     * Returns the StereoMode parameter.
     */
     HRESULT get_OpaqueFaces ( out /*IDLRETVAL*/ boolean oOpaqueFaces );
    /**
     * Sets the StereoMode parameter.
     */
     HRESULT put_OpaqueFaces ( in                boolean iOpaqueFaces );
    /**
     * Retrieves information about the StereoMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT GetOpaqueFacesInfo	( inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
    /**
     * Locks or unlocks the StereoMode setting parameter.
     * <br>Refer to @href CATIASettingController for a detailed description.
     */
     HRESULT SetOpaqueFacesLock ( in  boolean iLocked );

#pragma PROPERTY LDHTargetFramerate
     /**
      * Returns the LDHTargetFramerate parameter.
      */
     HRESULT get_LDHTargetFramerate(out /*IDLRETVAL*/ long oLDHTargetFramerate);
     /**
      * Sets the LDHTargetFramerate parameter.
      */
     HRESULT put_LDHTargetFramerate(in                long iLDHTargetFramerate);
     /**
      * Retrieves information about the LDHTargetFramerate setting parameter.
      * <br>Refer to @href CATIASettingController for a detailed description.
      */
     HRESULT GetLDHTargetFramerateInfo(inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
     /**
      * Locks or unlocks the LDHTargetFramerate setting parameter.
      * <br>Refer to @href CATIASettingController for a detailed description.
      */
     HRESULT SetLDHTargetFramerateLock(in  boolean iLocked);

#pragma PROPERTY ViewModeUIVersion
     /**
      * Returns the AppearanceActivation parameter.
      */
     HRESULT get_ViewModeUIVersion(out /*IDLRETVAL*/ long oViewModeUIVersion);
     /**
      * Sets the AppearanceActivation parameter.
      */
     HRESULT put_ViewModeUIVersion(in                long iViewModeUIVersion);
     /**
      * Retrieves information about the AppearanceActivation setting parameter.
      * <br>Refer to @href CATIASettingController for a detailed description.
      */
     HRESULT GetViewModeUIVersionInfo(inout CATBSTR ioAdminLevel, inout CATBSTR ioLocked, out /*IDLRETVAL*/ boolean oModified);
     /**
      * Locks or unlocks the AppearanceActivation setting parameter.
      * <br>Refer to @href CATIASettingController for a detailed description.
      */
     HRESULT SetViewModeUIVersionLock(in  boolean iLocked);
};

// Interface name : CATIAVisualizationSettingAtt
#pragma ID CATIAVisualizationSettingAtt "DCE:c5a3063a-9db3-4c71-bff9630dcfe22b33"
#pragma DUAL CATIAVisualizationSettingAtt

// VB object name : VisualizationSettingAtt (Id used in Visual Basic)
#pragma ID VisualizationSettingAtt "DCE:927aa12e-349a-42ea-a99ff405312c5b7b"
#pragma ALIAS CATIAVisualizationSettingAtt VisualizationSettingAtt

#endif
