//===================================================================
// COPYRIGHT Dassault Systemes 2015/06/08
//===================================================================
// CATAsyncStreamedRequest.cpp
// Header definition of class CATAsyncStreamedRequest
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/06/08 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncStreamedRequest_H
#define CATAsyncStreamedRequest_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncRequest.h"

class CATIOmyAsyncResult;
class CATIPLMTaskMP;

//-----------------------------------------------------------------------

class ExportedByCATAsyncTasksPlatform CATAsyncStreamedRequest: public CATAsyncRequest
{
public:

  struct Params : public CATAsyncRequest::Params
  {
    Params():ForceNoMultiProcessExecution(FALSE){}
    CATBoolean ForceNoMultiProcessExecution;
  };

  // Standard constructors and destructors
  // -------------------------------------
  CATAsyncStreamedRequest(CATAsyncRequest_Type iType, const Params& iParams);
  virtual ~CATAsyncStreamedRequest ();

  virtual HRESULT GetGenericImplementation(CATIPLMTaskMP *& oImplFor) const {oImplFor=NULL; return E_NOTIMPL; }
  
  virtual HRESULT GetStreamedQuery(CATUnicodeString& oStreamedQuery) { return E_NOTIMPL; }

  virtual HRESULT GetInput(int iInputIndex, const void*& opStreamedInput) const { return E_NOTIMPL; }

  virtual HRESULT GetOutput(int iOutputIndex, void**& opStreamedOutput) { return E_NOTIMPL; }

  virtual HRESULT WrapCallBack(IUnknown* ipCallBack, IUnknown*& opCallBackRef) { return E_NOTIMPL; }

  CATIOmyAsyncResult*& GetAsyncResultAsPtrRef() { return _spAsyncResult.AsPtrRef(); }
  CATIOmyAsyncResult& GetAsyncResultAsRef()     { return *_spAsyncResult; }

  CATBoolean ForceNoMultiProcess() const        {return _forceNoMultiProcess;}

protected:
  CATOmxSR<CATIOmyAsyncResult> _spAsyncResult;

private:

  virtual CATAsyncRequestsPlatform_Type GetWorkablePlatform();
  virtual CATIAsyncRequestsPlatformStrategy * CreatePlatformInstance(CATAsyncRequestsPlatform_Type platformType);


  CATAsyncStreamedRequest (CATAsyncStreamedRequest &);
  CATAsyncStreamedRequest& operator=(CATAsyncStreamedRequest&);

  /*
  * Prohibits this request from running on another process, even in cases that are supported.
  * The request will fallback to another mode, e.g. to synchrone execution.
  * Default value is FALSE.
  */
  CATBoolean _forceNoMultiProcess;
};

//-----------------------------------------------------------------------

#endif
