// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Apr 2005  Creation: Code generated by the CAA wizard  bes
//===================================================================
#ifndef CATOmbStreamDescriptorSessionService_H
#define CATOmbStreamDescriptorSessionService_H

/**
* @level  Protected
* @usage   U3
*/

#include "CATOmbSelectiveLoadingForInfraOnly.h"
#include "CATOmbSessionService.h"
#include "CATOmbPersistErrorDef.h"
#include "CATOmbStreamDescriptorFormat.h"
#include "CATOmxList.h"
#include "CATOmxSharable.h"
#include "CATComponentId.h"
#include "CATVVSUrl.h"
#include "CATUuid.h"
#include "CATOmbLoadableDataUniqueKey.h"
#include "CATOmxSR.h"
#include "CATOmyCioGenerator.h"
#include "CATIOmyIncidentCollector.h"
#include "CATAsyncTrace.h"

// Calcul du WatermarkStamp
#include <time.h>
#ifdef  _WINDOWS_SOURCE
#include <Windows.h>
#include <process.h>
#define sleep(a) Sleep(a*1000)
#else
#include <unistd.h>
#include "CATOmxOHMap.h"
#include "CATOmxOMap.h"
#endif

//WKN3_TODO I want to put this in ObjectStreamerService
// ASk PPN guys to incude that header
//context of generation
#define ViewableGeneration        0x01
#define LinkableGeneration        0x02
#define DerivedOutputGeneration   0x04
#define ViewableGenerationFromXCAD 0x8
//context of generation
#define OMBRegenLinkable        0x10
#define OMBRegenViewable        0x20
#define OMBRegenAll             0x30

class CATDocument;
class CATBaseUnknown;
class CATPLMSDProperties;
class CATOmbImportExportParameters;
class CATOmyFileStreamer;
struct CATOmbStreamDescriptorQualifiers;
class CATOmbStreamDescriptorDefinitionQualifiers;
class CATIOmbStreamDescriptor;

class ExportedByCATOmbSelectiveLoading SDDefInfos : public CATOmxSharable
{
public:
  SDDefInfos(CATOmbStreamDescriptorFormat iFormat, const CATUnicodeString& iRole, const CATUnicodeString& iLateType,
    const CATUnicodeString& iWatermarkStamp, const CATUnicodeString& iSynchroStamp, const CATUnicodeString& iPersistencyType, const CATUnicodeString& iPersistencyName)
  {
    m_Format = iFormat;
    m_Role = iRole;
    m_LateType = iLateType;
    m_WatermarkStamp = iWatermarkStamp;
    m_SynchroStamp = iSynchroStamp;
    m_PersistencyType = iPersistencyType;
    m_PersistencyName = iPersistencyName;
    m_sessionWS = 0;
  }

  CATOmbStreamDescriptorFormat m_Format;
  CATUnicodeString m_Role;
  CATUnicodeString m_LateType;
  CATUnicodeString  m_WatermarkStamp;
  CATUnicodeString  m_SynchroStamp;
  CATUnicodeString m_PersistencyType;
  CATUnicodeString m_PersistencyName;
  int m_sessionWS; // internal use when MD5 is computed only
};
/**
 * Service grouping calls related to StreamDescriptor objects loaded in session.
 * <b>Role</b>: This session service exposes ObjectModelerBase protected calls for manipulating SD objects. <br>
 * NOTE: <i>Always instanciate this service on the stack.</i>
*/
class ExportedByCATOmbSelectiveLoading CATOmbStreamDescriptorSessionService : public CATOmbSessionService
{
  //WKN3 MUST DELETE
  friend class CATOmbSdsStreamServices;
  friend class CATOmbObjectStreamsForDO;
  friend class CATOmbTstLinkableUtilities; // Needed to Create V5 Linkable to test update case

public:

  /**
  * Creates the service.
  *
  * @param ipSessionContext
  *		A pointer to the session to be used as a context for this service.
  **/
  CATOmbStreamDescriptorSessionService(CATOmbSessionContext* ipSessionContext = NULL);
  virtual ~CATOmbStreamDescriptorSessionService() {};


  /**
  * This service computes a WS (but doesn't require creating a session).
  *
  * <br><b>Role</b>:
  * WS is a combination of
  *   - Current Time
  *   - Process Id
  *   - Counter
  *
  * (Which is a terrible way to generate a pseudo uuid).
  *
  * It prevents two users on two computers to generate the same WS and a same user generating the same WS while calling the service
  * during the same second
  *
  * @return
  *   the computed watermarkstamp.
  * WARNING, despite return type it must be treated as a signed int.
  *
  */
  static int StaticComputeWs();

  /**
  * Fill a CATComponentId with an ultra light PC2 repref component
  * iCID : The empty ToS cell that need to be filled
  * Do not use it if you have not been advised to
  */
  HRESULT FillComponentIdWithLightRepRef(const CATComponentId& iCID);

  /**
  * Clean a CATComponentId by removing the PC2 object under it
  * iCID : The empty ToS cell that need to be cleaned
  * Do not use it if you have not been advised to
  */
  HRESULT CleanComponentAfterFailure(const CATComponentId& iCID);
  /**
  * Returns the list of SD that will be generated for a Save operation
  * iCID [in] : The ToS cell
  * iParameters[in] : optional, can be NULL: the global parameters to be passed to main AuthoringVisu SD at stream generation times
  * oListOfTargetStreamDefinition : The list of SD that will be generated for a save operation
  * Do not use it if you have not been advised to
  */
  HRESULT GenerateSDsToSave(CATBaseUnknown* iRepRef, CATOmbImportExportParameters* iParameters, CATOmxList<SDDefInfos>& oListOfTargetStreamDefinition);

  /**
  * Save a SD associated to the component iCID
  * iCID : The ToS cell
  * Do not use it if you have not been advised to
  */
  HRESULT SaveSDs(CATBaseUnknown* iRepRef, const CATOmbLoadableDataUniqueKey& iKey, CATVVSUrl& iUrl, int iWatermarkStamp, const CATUnicodeString& iLateType, const CATUuid& iTransactionId);

  /**
   * Translate a "Omb" (session) stream descriptor to a CATPLMStreamDescriptor (adapter layer)
   * param iForSave:
   *    TRUE =>  save purpose (use session stamps)
   *    FALSE => delete purpose (use "db" stamps)
   */
  static HRESULT GetSDProperties(const CATBaseUnknown* iOmbSD, CATBoolean iForSave, CATPLMSDProperties& oProperties);

private:
  CATAsyncTrace _IPCSTracer;

  /**
  * Stream sd in cache and replace timestamps with MD5 values
  * This function prepares Sds, Streams into cache, Indexes the CATOmyResourceReferences then it updates the watermark and Synchro stamps
  * Finaly it Reindexes the CATOmyResourceReferences with the newly updated ws
  * @param iCID [in]
  *   The CATComponendId to be saved.
  * @param ioCATOmbSDObjectImpl [in&out]
  *   A list of CATOmbStreamDescriptorObjectImpl as CATBaseUnkowns this list contains the Sds to be streamed and updated with MD5
  * @return
  *   S_OK everything went well E_FAIL otherwise
  */

  HRESULT StreamInCacheAndComputeMD5(CATBaseUnknown* iRepRef, CATOmxList<SDDefInfos>& ioListOfTargetStreamDefinition);

  /**
  * Stream a CATOmbStreamDescriptorObjectImpl and index the associated CATOmyResourceReference
  * @param iCID [in]
  *   The CATComponendId to be saved.
  * @param key [in]
  *   A  CATOmbLoadableDataUniqueKey containing Format Role and PersistencyName
  * @param ioTransientUrl [out]
  *   A  CATOmyResourceReference that got Indexed
  * @param transactionId [in]
  *   The transaction Id
  * @return
  *   S_OK everything went well E_FAIL otherwise
  */

  HRESULT StreamAndGetUrl(const CATPLMID plmid, const CATOmbLoadableDataUniqueKey& key, CATBaseUnknown* isd,
    CATOmyResourceReference& ioTransientUrl, const CATUuid& transactionId);

  /**
  * Shortcut to call CommunicateWithVault FlushToPersistentCache & EndStreamMgtContext for a transaction Id
  * @param transactionId [in]
  *   The transaction Id
  * @return
  *   S_OK everything went well E_FAIL otherwise
  */

  HRESULT CommitToGetMD5(const CATUuid& transactionId);

  CATOmbStreamDescriptorSessionService(const CATOmbStreamDescriptorSessionService&); // cpy ctor not implemented
  CATOmbStreamDescriptorSessionService operator=(CATOmbStreamDescriptorSessionService&); // cpy ctor not implemented
};

#endif

