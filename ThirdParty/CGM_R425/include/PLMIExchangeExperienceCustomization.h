//===================================================================
// COPYRIGHT Dassault Systemes 2013/03/04
//===================================================================
// PLMIExchangeExperienceCustomization.cpp
// Header definition of class PLMIExchangeExperienceCustomization
//===================================================================
//
// Usage notes: Define the exchange experience customization itf.
//
//===================================================================
//  2013/03/04 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceCustomization_H
#define PLMIExchangeExperienceCustomization_H

#include "PLMExchangeInterfaces.h"
#include "PLMIExchangeExperienceDefinition.h"
#include "PLMIExchangeModelDefinition.h"
#include "PLMIExchangeExperienceSessionHandler.h"
#include "PLMIExchangeExperienceExecutionHandler.h"
#include "PLMIExchangeExperienceCustoServices.h"
#include "PLMExportExperienceDesign.h"
#include "CATBaseUnknown.h"
#include "CATListOfInt.h"   

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceCustomization ;

class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceCustomization: public CATBaseUnknown
{
   CATDeclareInterface;

public:    

   /**
   * <b> DefineExperience :</b> Define the customization exchange experience.
   * Use the given definition ptr (PLMIExchangeExperienceDefinition) to add experience item such as status, option group or options.   
   * If needed, a handler on the current session is also available. With this handler, we can retrieve the list of objects in the session.
   *
   * @param ipExperienceDefiniton (in)
   * input pointer on a PLMIExchangeExperienceDefinition which will be used to define the customization experience.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access the session (if neeeded).
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT DefineExperience(PLMIExchangeExperienceDefinition * & ipExperienceDefiniton, PLMIExchangeExperienceSessionHandler  * & ipSessionHandler) = 0;

   /**
   * <b> InitializeSession :</b> Initialize the session for the customization.
   * Use the given session handler ptr (PLMIExchangeExperienceSessionHandler) :
   *  - Initialize the status for each object in the session.   
   *  - Initiliaze the options if needed.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access the session.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT InitializeSession(PLMIExchangeExperienceSessionHandler * & ipSessionHandler) = 0;

   /**
   * <b> OnOptionCB :</b> This method is called when an interaction has been made on a sensitive option.
   * It is used to managed specific behavior, so please update the session accordingly to given experience object id.   
   *
   * @param iStrOptionId (in)
   * input identification string corresponding to the option been triggered.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access the session.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT OnOptionCB(const CATUnicodeString & iStrOptionId, PLMIExchangeExperienceSessionHandler * & ipSessionHandler) = 0;

   /**
   * <b> OnOperationCB :</b> This method is called when an interaction has been made on a sensitive operation.
   * It is used to managed specific behavior, so please update the session accordingly to given experience object id.    
   *
   * @param iStrOperationId (in)
   * input identification string corresponding to the operation been triggered.
   *
   * @param ipSessionObject (in)
   * input session object where the operation has been triggered. Please note that its status has already being updated with operation target status.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access and update the session.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT OnOperationCB(const CATUnicodeString & iStrOperationId, PLMIExchangeExperienceSessionObject * & ipSessionObject ,PLMIExchangeExperienceSessionHandler * & ipSessionHandler) = 0;

   /**
   * <b> OnExecutionCB :</b> This method is launch for the registered execution.
   *
   * @param iStrExecutionId (in)
   * input identification string corresponding to the execution been triggered.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access the session.
   *
   * @param ipExecutionHandler (in)
   * input pointer on a PLMIExchangeExperienceExecutionHandler which can be used to inform the execution progress.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT OnExecutionCB(const CATUnicodeString & iStrExecutionId, PLMIExchangeExperienceSessionHandler * & ipSessionHandler, PLMIExchangeExperienceExecutionHandler * & ipExecutionHandler) = 0;

   /**
   * <b> SetCustoServices :</b> Set the service object which can be used by the implementation to facilitate its experience definition.
   * This method is implemented by the adapter.
   * To retrieve the custo service object from your implementation please use the adapter protected method :
   * - HRESULT getCustoServices(PLMIExchangeExperienceCustoServices * & opCustoServicesObj)
   *
   * @param ipCustoServicesObj (in)
   * input pointer on the PLMIExchangeExperienceCustoServices to associate with the current implementation.
   * An add ref is done the given pointer.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT SetCustoServices(PLMIExchangeExperienceCustoServices * & ipCustoServicesObj) = 0 ;

   /**
   * <b> DefineModel :</b> Define the customization exchange model information.
   * Use the given definition ptr (PLMIExchangeModelDefinition) to add model item such as attribute masks.      
   *
   * @param ipModelDefinition (in)
   * input pointer on a PLMIExchangeModelDefinition which will be used to add some  customizated model item.  
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT DefineModel(PLMIExchangeModelDefinition * & ipModelDefinition) = 0 ;

   /**
   * <b> OnExecutionCB :</b> This method is launch to Upload a file in a target.
   *
   * @param ipSessionHandler (in)
   * input pointer on a PLMIExchangeExperienceSessionHandler which can be used to access the session.
   *
   * @param ipExecutionHandler (in)
   * input pointer on a PLMIExchangeExperienceExecutionHandler which can be used to inform the execution progress.
   *
   * @return
   *    Legal values:  S_OK ,
   *                   E_FAIL  
   */
   virtual HRESULT UploadFilesToTarget(PLMIExchangeExperienceSessionHandler* &ipSessionHandler, PLMIExchangeExperienceExecutionHandler* &ipExecutionHandler) = 0;


};

//-----------------------------------------------------------------------

#endif
