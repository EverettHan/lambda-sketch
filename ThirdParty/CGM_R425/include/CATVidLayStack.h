// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidLayStack.h
// Header definition of CATVidLayStack
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidLayStack_H
#define CATVidLayStack_H

#include <CATMathPoint2Df.h>
#include <CATVid.h>
#include <CATVidBorder.h>
#include <CATVidLayCollection.h>
#include <CATVidLayConstraints.h>
#include <VisuDialog.h>
/**
 * This class provides a simple way to position widgets in a line, horizontally or vertically.
 * <p>Each cell of the stack can contain a widget, or an other layout.
 * 
 * @par In CAPSYPStyle files
 * @code
 * <CATVidLayStack>
 *   <MyWidgetA ........... CATVidLayStack.IndexedConstraints="..." />
 *   <MyWidgetB ........... CATVidLayStack.IndexedConstraints="..." />
 *   ....
 * </CATVidLayStack>
 * @endcode
 * IndexedConstraints is a CATVidLayStackConstraints.
 *
 *
 * @see CATVidLayStackConstraints
 * @see CATVidLayCollection
 * @see CATISYPCollection
 * @ingroup VIDLayout
 */

/**

 * @ingroup VIDLayout
 */
class ExportedByVisuDialog CATVidLayStack: public CATVidLayCollection
{
  CATDeclareClass;

public:
  // Standard constructor
  // --------------------
  CATVidLayStack();
  CATVidLayStack(CATCommand *i_pParent, const CATString & i_pIdentifier);

  /**
   * Sets the stack orientation.
   * By default, the orientation is CATVid::Horizontal.
   */
  void SetOrientation(CATVid::Orientation i_orientation);

  /**
   * Returns the stack orientation.
   */
  CATVid::Orientation GetOrientation() const;

  /**
   * Sets the cell spacing (space inter-cells).
   * By default, the cell spacing is null.
   */
  void SetCellBorder(int i_cellBorder);

  /**
   * Returns the cell spacing (space inter-cells).
   */
  int GetCellBorder() const;

  /** 
   * Sets the margins used around the layout.
   * By default, these margins are null.
   */
  void SetContentsMargins(const CATVidBorder &i_contentsMargins);

  /**
   * @return the margins used around the layout.
   */
  INLINE const CATVidBorder &GetContentsMargins() const
  {
    return _contentsMargins;
  }

  /**
  * Sets the inner cell spacing (inter-cells space).
  * This method does not impact the spacing between the container and its cells
  * (use the SetContentsMargins method for that).
  * By default, the InnerCellSpacing property is equal to 0.
  */
  void SetInnerCellSpacing(int i_innerCellSpacing);

  /**
  * @return the inner cell spacing (inter-cells space).
  */
  INLINE int GetInnerCellSpacing() const
  {
    return _innerCellSpacing;
  }

  /**
   * Sets the common preferred size of the cells.
   * By default, the PreferredCellSize property is null, so each cell dimension will be equal to its minimum dimension.
   * @see SetUsePreferredSizeFromWidgetFlag
   */
  void SetPreferredCellSize(float i_preferredSize);

  /**
   * Returns the common preferred size of the cells.
   */
  float GetPreferredCellSize() const;

  /**
   * Specifies whether the preferred size of the cells is computed directly from the layouted widgets or not.
   * In such case, the cells can have different preferred sizes. If the PreferredCellSize property is also set, the minimum value of
   * the two preferred sizes is used (i.e the minimum between the common preferred size specified with the PreferredCellSize property and 
   * the one computed from the widget).
   * @see SetPreferredCellSize
   */
  void SetUsePreferredSizeFromWidgetFlag(CATBoolean i_usePreferredSizeFromWidgetFlag);

  /**
   * Returns TRUE if the preferred size of the cells is computed directly from the layouted widgets, FALSE otherwise.
   * By default, the UsePreferredSizeFromWidgetFlag property is set to FALSE.
   */
  CATBoolean GetUsePreferredSizeFromWidgetFlag() const;

  /**
   * Determines how the future items that will be added to the stack will be attached (stretched, top, left, ...)
   * Setting this will not modify attachment of already added items.
   * @see CATVidLayStackConstraints::Attachment
   */
  void SetStackAttachmentAppendPolicy(CATVid::StackAttachmentAppendPolicy i_stackAttachmentAppendPolicy);

  /**
   * @see SetStackAttachmentAppendPolicy
   */
  CATVid::StackAttachmentAppendPolicy GetStackAttachmentAppendPolicy() const;

  /**
   * Specifies the horizontal alignment of the stack.
   */
  void SetHAlignment(CATVid::Alignment i_HAlignment);

  /**
   * Returns the horizontal alignment of the stack.
   * By default, the HAlignment property is set to CATVid::AlignLeft.
   */
  CATVid::Alignment GetHAlignment() const;

  /**
   * Specifies the vertical alignment of the stack.
   */
  void SetVAlignment(CATVid::VAlignment i_VAlignment);

  /**
   * Returns the vertical alignment of the stack.
   * By default, the VAlignment property is set to CATVid::VAlignTop.
   */
  CATVid::VAlignment GetVAlignment() const;

  /**
   * Returns the index in a collection from at a given position.
   * @param i_Point the position relative to this container.
   * @return the index.
   */
	int GetIndexAtPos(const CATMathPointf& i_Point) const;

  /**
   * Get the value of flag allowing to position filling widget not in last position.
   * @param i_allowFillingWidgetIsNotLastFlag the flag to specify if the filling widget can be (TRUE) put or not (FALSE) in any children position.
   * default value is FALSE.
   */
	CATBoolean GetAllowFillingWidgetIsNotLastFlag();

  /**
   * Allow to position filling widget not in last position.
   * @param i_allowFillingWidgetIsNotLastFlag the flag to specify if the filling widget can be (TRUE) put or not (FALSE) in any children position.
   * default value is FALSE.
   */
	void SetAllowFillingWidgetIsNotLastFlag(CATBoolean i_allowFillingWidgetIsNotLastFlag);

protected:

  CATVidLayStack (CATVidLayStack &);
  CATVidLayStack& operator=(CATVidLayStack&);

  virtual ~CATVidLayStack ();

  virtual CATVidLayConstraints* CreateConstraints();

  virtual void Layout();
  virtual void UpdateComputedMinimumDimension();

  float _GetWidgetPreferredCellSize(CATVidWidget * i_pWidget, float i_maxPreferredCellSize) const;

private:

  CATVid::Orientation _stackOrientation;
  CATVid::StackAttachmentAppendPolicy _stackAttachmentAppendPolicy;
  CATVid::Alignment _HAlignment;
  CATVid::VAlignment _VAlignment;
  float _preferredSize;
  CATBoolean _usePreferredSizeFromWidgetFlag;
  CATVidBorder _contentsMargins;
  int _innerCellSpacing;
	CATBoolean _allowFillingWidgetIsNotLastFlag;
};

#endif
