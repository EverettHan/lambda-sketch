//===================================================================
// COPYRIGHT DS SolidWorks 2010/06/04
//===================================================================
// SWXUtStringUtils.cpp
// Header definition of class SWXUtStringUtils
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/06/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtStringUtils_H
#define SWXUtStringUtils_H

#include "SWXUtGeneral.h"

#include "CATString.h"
#include "CATUnicodeString.h"
#include "DSYStringView.h" 

class CATListValCATString;
class CATListValCATUnicodeString;
class CATTime;
class CATUuid;

//-----------------------------------------------------------------------

class ExportedBySWXUtGeneral SWXUtStringUtils
{
public:

	class SWXStringArg;

	// Type-safe(ish) formatting. For now, use C#-like syntax:
	//     Format("The number is {0}", 2.3);
	// results in 
	//     The number is 2.3.
	static void UUIDToHexString(CATUuid& iUUID, CATUnicodeString& oString);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, const SWXStringArg &iArg);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1, const SWXStringArg & iParam2);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1, const SWXStringArg & iParam2, const SWXStringArg & iParam3);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1, const SWXStringArg & iParam2, const SWXStringArg & iParam3, const SWXStringArg & iParam4);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1, const SWXStringArg & iParam2, const SWXStringArg & iParam3, const SWXStringArg & iParam4, const SWXStringArg & iParam5);
	static CATUnicodeString Format(const CATUnicodeString &iFmt, 
		const SWXStringArg & iParam0, const SWXStringArg & iParam1, const SWXStringArg & iParam2, const SWXStringArg & iParam3, const SWXStringArg & iParam4, const SWXStringArg & iParam5, const SWXStringArg & iParam6);

	static void Split(const CATString &iStr, const CATString &iSplit, CATListValCATString &oResults);
	static void Split(const CATUnicodeString &iStr, const CATUnicodeString &iSplit, CATListValCATUnicodeString &oResults);
	static void SplitStringWithNumbers( const CATUnicodeString& iStr, CATListValCATUnicodeString& oResults );

	static bool ConvertToInt(const CATUnicodeString &iStr, int &oResult);
	static bool ConvertToDouble(const CATUnicodeString &iStr, double &oResult);
	static bool ConvertToCATTime(const CATUnicodeString &iStr, CATTime &oResult);
	static bool IsNumeric(const CATUnicodeString &iStr);
	static bool EndsWith(const CATUnicodeString &iStr, CATUnicodeString iStringToFind, bool iIgnoreCase = false);

	static CATUnicodeString GetCatalogString(const CATString iCatalogName, const CATString iKeyName);
	static CATUnicodeString FormatCatalogString(const CATString iCatalogName, const CATString iKeyName, const CATUnicodeString iParamValue);

	static CATUnicodeString StripWhitespace(CATUnicodeString::CATStripMode iMode, const CATUnicodeString & iString);

	static CATUnicodeString ExtractExtension(CATUnicodeString& iStr);

	class ExportedBySWXUtGeneral SWXStringArg
	{
	public:
		SWXStringArg(const CATString &iStr);
		SWXStringArg(const CATUnicodeString &iStr);
		SWXStringArg(const char *iChars);
		SWXStringArg(void *iPtr);
		SWXStringArg(double iValue);
		SWXStringArg(int iValue);
		SWXStringArg(bool iValue);
		SWXStringArg(CATUINT32 iValue);
		~SWXStringArg();

		const CATUnicodeString &Get() const { return mString; }

	private:
		CATUnicodeString mString;
	};

	struct ExportedBySWXUtGeneral LessForObjectName
	{
		bool operator()( const CATUnicodeString& iString1, const CATUnicodeString& iString2 ) const;
	};

private:
	// Standard constructors and destructors
	// -------------------------------------
	SWXUtStringUtils ();
	virtual ~SWXUtStringUtils ();

	// Copy constructor and equal operator
	// -----------------------------------
	SWXUtStringUtils (SWXUtStringUtils &);
	SWXUtStringUtils& operator=(SWXUtStringUtils&);

};

#ifdef _WINDOWS_SOURCE
#define SWX_CONVERT_STRING_TO_LPCTSTR(name) \
     auto name##View = DSY::UCS::make_view<wchar_t>(name); \
     LPCTSTR name##LPCTSTR = name##View.data();
#endif

//-----------------------------------------------------------------------

#endif
