//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/11/08
//===================================================================
// CATVidCtlTreeViewItem.h
// Header definition of class CATVidCtlTreeViewItem
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/11/08 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATVidCtlTreeViewItem_H
#define CATVidCtlTreeViewItem_H

#include <VisuDialog.h>
#include <CATVidCtlBaseViewItem.h>

class CATSYPEvent;
class CATVidSpacer;
class CATVidLayLayer;
class CATVidCtlButtonFontIcon;

/**
 * A view item displayed by the treeview control. It inherits CATVidCtlBaseViewItem,
 * and adds the emission of an event when the user expands or collapses the element.
 */
class ExportedByVisuDialog CATVidCtlTreeViewItem : public CATVidCtlBaseViewItem
{
  CATDeclareClass;
public:
  /* values for expander icons: */
  static CATUnicodeString const ArrowExpandedIcon;
  static CATUnicodeString const ArrowExpandedIconOver;
  static CATUnicodeString const ArrowCollapsedIcon;
  static CATUnicodeString const ArrowCollapsedIconOver;
  static CATUnicodeString const PlusIcon;
  static CATUnicodeString const MinusIcon;
	static CATUnicodeString const DotIcon;
  static CATUnicodeString const PlusIconOver;
  static CATUnicodeString const MinusIconOver;
	static CATUnicodeString const DotIconOver;

public:
  /** Default constructor */
  CATVidCtlTreeViewItem (CATVidCtlAbstractItemsView & i_view);
  /** Destructor */
  virtual ~CATVidCtlTreeViewItem ();

  virtual void Reset();

  /**
   * Set the flag that indicates whether the view item is a leaf of not.
   *
   * @param i_notLeafFlag 0 if the view item is a leaf, 1 otherwise.
   */
  void SetLeafFlag(int i_leafFlag);

  /**
   * Indicates whether this view item is a leaf of not.
   *
   * @return 0 if the view item is a leaf, 1 otherwise.
   */
  int GetLeafFlag() const;

  /**
   * Set the flag that indicates whether the expander of this item is displayed or not.
   *
   * @param i_expanderFlag 0 if the expander is unvisible, 1 otherwise.
   */
  void SetExpanderVisibleFlag(int i_expanderVisibleFlag);

  /**
   * Indicates whether the expander of this item is displayed or not.
   *
   * @return 0 if the expander is unvisible, 1 otherwise.
   */
  int GetExpanderVisibleFlag() const;

  /**
   * Set the flag that indicates whether the background of this item is displayed or not.
   *
   * @param i_expanderFlag 0 if the expander is unvisible, 1 otherwise.
   */
  void SetBackgroundVisibleFlag(int i_backgroundVisibleFlag);

  /**
   * Indicates whether the background of this item is displayed or not.
   *
   * @return 0 if the expander is unvisible, 1 otherwise.
   */
  int GetBackgroundVisibleFlag() const;

  /**
   * Set the flag that indicates whether the expander of this item need a layout when unvisible or not.
   *
   * @param i_expanderLayoutFlag 0 if the expander does not need a layout, 1 otherwise.
   */
  void SetExpanderLayoutWhenUnvisibleFlag(int i_expanderLayoutWhenUnvisibleFlag);

  /**
   * Indicates whether this view item is a leaf of not.
   *
   * @return 0 if the expander does not need a layout, 1 otherwise.
   */
  int GetExpanderLayoutWhenUnvisibleFlag() const;

  void UpdateExpanderIcon(int i_expanded);

  /**
   * @return the look of the expanders
   * (@ref CATVidCtlTreeView#GetExpanderLook).
   */
  CATVid::ExpanderLook GetExpanderLook();

  /**
   * Set indentation dimension of this item based on its depth in the tree view (measured in pixels).
   *
   * @param i_itemIndentation value of indentation dimension in pixels.
   */
  void SetIndentationDimension(const CATMathPoint2Df & i_indentationDimension);

  /**
   * Get indentation dimension of this item based on its depth in the tree view (measured in pixels).
   *
   * @return value of indentation dimension in pixels.
   */
  CATMathPoint2Df GetIndentationDimension() const;

  /**
   * Set expander zone width (measured in pixels). Min value is 9.
   *
   * @param i_expanderZoneWidth the width of the expander zone in pixels. 
   */
  void SetExpanderZoneWidth(int i_expanderZoneWidth);
  /**
   * Get expander zone width (measured in pixels).
   *
   * @return the width of the expander zone in pixels.
   */
  int GetExpanderZoneWidth() const;

  /**
   * Expands this item.
   * If the item was previously expanded, it stays expanded.
   */
  void ExpandItem();

  /**
   * Collapses this item.
   * If the item was previously collapsed, it stays collapsed.
   */
  void CollapseItem();
private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlTreeViewItem (CATVidCtlTreeViewItem &);
  CATVidCtlTreeViewItem& operator=(CATVidCtlTreeViewItem&);

  void UpdateExpanderZoneWidth();

  protected:
  /**
   * flag that indicates whether this item is a leaf of the tree or not.
   * 1 means that the item is not a leaf.
   * 0 means that the item is a leaf.
   */
  int _leafFlag;

  /**
   * flag that indicates whether the expander of this item is displayed or not.
   * 1 means that the expander is displayed.
   * 0 means that the expander is not displayed.
   */
  int _expanderVisibleFlag;

  /**
   * flag that indicates whether the background of this item is displayed or not.
   * 1 means that the background is displayed.
   * 0 means that the background is not displayed.
   */
  int _backgroundVisibleFlag;

  /**
   * flag that indicates whether the expander of this item needs a layout when unvisible or not.
   * 1 means that the expander needs a layout when unvisible.
   * 0 means that the expander does not need a layout when unvisible.
   */
  int _expanderLayoutWhenUnvisibleFlag;

  /**
   * Indentation of one item based on its depth in the tree view (measured in pixels).
   * x value : the horizontal distance between the viewport edge to this item.
   * y value : the item height.
   */
  CATMathPoint2Df _indentationDimension;

  int _expanderZoneWidth;

  CATVidSpacer *_pIndentationSpacer;
  CATVidLayLayer *_pExpanderContainer;
  CATVidCtlButtonFontIcon *_pExpanderButton;
  CATVidGPNinePatchSquare *_pUglyBackgroundSquare;
};

//-----------------------------------------------------------------------

#endif
