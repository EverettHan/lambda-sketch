// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Mar 2005  Creation: Code generated by the CAA wizard  phb
//===================================================================
#ifndef CATIOmbStreamDescriptor_H
#define CATIOmbStreamDescriptor_H

/**
* @level  Protected
* @usage   U3
*/

#include "CATOmbSelectiveLoadingForInfraOnly.h"
#include "CATIAV5Level.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

class CATDocument;
class CATVVSUrl;
class CATVVSURLConnection;
class CATUuid;
class CATOmyVVSURLConnectionHolder;
class CATOmbStreamDescriptorDefinitionQualifiers;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbSelectiveLoading IID IID_CATIOmbStreamDescriptor;
#else
extern "C" const IID IID_CATIOmbStreamDescriptor ;
#endif

//------------------------------------------------------------------
/**
* Interface representing a Stream Descriptor object.
*/
class ExportedByCATOmbSelectiveLoading CATIOmbStreamDescriptor: public CATBaseUnknown
{
  CATDeclareInterface;

private:
#ifndef CATIAR216
  //stubs for CATIOmbLoadableEntity methods
  virtual void Stub1();
  virtual void Stub2();
#endif

public:
  /**
  * Retrieves the Stream Descriptor definition's qualifiers.
  * @return
  *   The qualifiers.
  */
  // The data member is returned in order to avoid creating useless instances. This violates coding interfaces' rules, once again.
  virtual const CATOmbStreamDescriptorDefinitionQualifiers &GetDefinitionQualifiers() const = 0;

  /**
  * Retrieves the Document object behind the Stream Descriptor, if it has been loaded.
  * @param oDoc
  *   The memory object matching the Stream Descriptor.
  */
  virtual HRESULT GetDocument( CATDocument*&  oDoc ) const = 0;

  /**
  * Retrieves the Stamp allowing to check synchronization, if exists.
  * @param oWMS
  *   The Watermark stamp, if any.
  */
  virtual HRESULT GetWatermarkStamp(const int *&opWMS) = 0; /* @R201: TO BE REDEFINED */


  /** 
  * Retrieves the Persistency type used to stream the SD. 
  *  
  * @param opPersistencyType [out]
  *   The peristency type used to stream the data
  *
  * @return
  *   <code>S_OK</code> Always S_OK. 
  *
  */
  virtual CATUnicodeString GetPersistencyType() const = 0; 

  /** 
  * Retrieves the Persistency name used to stream the SD. 
  *  
  * @param opPersistencyName [out]
  *   The peristency name used to stream the data
  *
  * @return
  *   <code>S_OK</code> Always S_OK. 
  *
  */
  virtual CATUnicodeString GetPersistencyName() const = 0; 

  /** @deprecated
  * Retrieves the Persistency name used to stream the SD. 
  *  
  * @param opPersistencyName [out]
  *   The peristency name used to stream the data
  *
  * @return
  *   <code>S_OK</code> Always S_OK. 
  *
  */
  virtual HRESULT GetPersistencyName(const CATUnicodeString *&opPersistencyName) const = 0; 



  /**
  * Indicates if the Stream Descriptor is a new one, or if it has been changed since it has been loaded.
  * @return
  *   <ul>
  *   <li><code>S_OK</code>: the stream descriptor needs to be streamed.</li>
  *   <li><code>S_FALSE</code>: the stream descriptor doesn't need to be streamed.</li>
  *   <li>Otherwise the error code.</li>
  *   </ul>
  */
  virtual HRESULT NeedsToBeStreamed() const = 0;

  /**
  * Streams the Stream Descriptor via CuteIO mechanism.<br>
  * Note that the Descriptor's URL is not changed.
  * @param iUrlTarget
  *   The target iUrlTarget.
  * @param iWatermarkStamp
  *   The watermark stamp.
  * @param iCuteIoTransUuid
  *  The CuteIo transaction identifier.
  * @return
  *   The error code.
  */
  virtual HRESULT StreamToUrlConnection(CATVVSUrl& iUrlTarget, int iWatermarkStamp, const CATUnicodeString& iPersistencyType, const CATUuid& iCuteIoTransUuid) = 0;

  /**
  * Sets what's the save operation's status once it's ended.<br>
  * The stream descriptor cleans its temporary data; loaded documents are updated, XMM status is upated
  * @param iSuccessful
  *   <code>TRUE</code> if the save operation succeeded, <code>FALSE</code> otherwise.<br>
  */
  virtual HRESULT SaveTransactionIsCompleted(CATBoolean iSuccessful) = 0;

  /**
  * Sets what's the Local save operation's status once it's ended.<br>
  * The stream descriptor cleans its temporary data; loaded documents are NOT updated, XMM status is NOT updated
  * @param iSuccessful
  *   <code>TRUE</code> if the save operation succeeded, <code>FALSE</code> otherwise.<br>
  */
  virtual HRESULT LocalSaveTransactionIsCompleted(CATBoolean iSuccess)=0;

  /**
  * Returns a string dump of the object.
  */
  virtual CATUnicodeString ToUnicodeString() const = 0;

  /**
  * Returns the connection holder.<br>
  * The connection holder holds an access to the URLConnection that is allocated by CuteIO. 
  * Note that the Connection holder returned by this method may not be initialized. 
  * The connection holder is initialized when it is given to the cuteIO. 
  * @param oConnectionHoder [out, CATBaseUnknown#Release]
  *   A reference to the connection holder. The connection may not be initialized.
  */
  virtual HRESULT GetCuteIOConnexionHolder(CATOmyVVSURLConnectionHolder*& oConnectionHoder) const = 0;

  /** 
  * Retrieves the new watermarkstamp (iteration stamp of the stream)
  *
  * <br><b>Role</b>: 
  * WS is managed by the Main SD when it exists. In this case, il 
  * will incremeted only if the authoring document will be streamed at next save. 
  * If document has already been streamed in XMM, the WS will not be incremented. 
  * If no Authoring SD exists, a new WatermarkStamp will be computed everytime. 
  *
  * @param oNewWs [out]
  *   the new WatermarkStamp
  *
  * @return
  *   <code>S_OK</code> operation succeeded
  *   <code>S_FALSE</code> RepRef has no authoring SD. A new WS has been generated
  *   <code>E_FAIL</code> otherwise
  *
  */
  virtual HRESULT RetrieveNextWmS(unsigned int& oNewWs) =0;

  /**
  * Get the URLConnection Key the access to the last iteration of the Blob in CuteIO
  * @param opurlConnectionKey
  *   User is responsible of opURLConnectionKey URLConnection LifeCycle.  
  *   You have to delete it after usage
  */
  virtual HRESULT GetUrlConnectionKey(CATVVSURLConnection*& opURLConnectionKey) = 0;

 /** 
  * Retrieves the synchronisation value of the SynchroStamp 
  *
  * <br><b>Role</b>: 
  * Retrieves the synchronisation value of the SynchroStamp, that is the value of the SynchroStamp
  * matching the synchronized state of the SD with its Authoring one, when its Authoring SD is commited in PDM
  *
  * @param oNewSynchroStamp [out]
  *   the value of the SynchroStamp matching the synchronized state of the SD when its Authoring SD is commited in PDM
  *
  * @return
  *   <code>S_OK</code> operation succeeded
  *   <code>S_FALSE</code> RepRef has no authoring SD. output is 0. 
  *   <code>E_FAIL</code> otherwise
  */
  virtual HRESULT RetrieveNextSynchroStamp(unsigned int& oNewSynchroStamp) =0;

 /** 
  * Gets the synchronization state of the StreamDescriptor
  * <br><b>Role</b>: 
  * Gets the synchronisation state of this StreamDescriptor, comparing it to the current version
  * of its main Authoring SD
  *
  * @param obSynchro [out]
  *   TRUE when the SD is synchronized with its main Authoring SD
  *
  * @return
  *   <code>S_OK</code> operation succeeded
  *   <code>E_FAIL</code> otherwise
  */
  virtual HRESULT IsSynchronized(CATBoolean & obSynchro) =0;

  /** 
  * Gets the current value value of the SynchroStamp 
  *
  * <br><b>Role</b>: 
  * Gets the Current value of the SynchroStamp for this StreamDescriptor
  *
  * @param oSynchroStamp [out]
  *   the value of the SynchroStamp
  *
  * @return
  *   <code>S_OK</code> operation succeeded
  *   <code>E_FAIL</code> otherwise
  */
  virtual HRESULT GetSynchroStamp(int& oSynchroStamp) =0;
};

//------------------------------------------------------------------
CATDeclareHandler( CATIOmbStreamDescriptor, CATBaseUnknown );

#endif
