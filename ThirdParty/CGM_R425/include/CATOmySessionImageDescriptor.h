/* -*-c++-*- */

/**
 * @level Protected
 * @usage U3

/** Pseudo interface de SessionImage Descriptor */

#ifndef CATOmySessionImageDescriptor_h
#define CATOmySessionImageDescriptor_h

#include "CATBaseUnknown.h"
#include "CATOMYBaseSession.h"
#include "CATUuid.h"
#include "CATIAV5Level.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYBaseSession IID IID_CATOmySessionImageDescriptor;
#else
extern "C" const IID IID_CATOmySessionImageDescriptor;
#endif

class CATTime;
class CATUnicodeString;
class CATOMYUnicodeStringHTab;

enum ImageType
{
  NEWIMAGE,
  OLDIMAGE,
  CRASHEDIMAGE,
  BACKUP,
  INUSEIMAGE,
  UNDEFINEDIMAGE,
  BROKEN
};

class ExportedByCATOMYBaseSession CATOmySessionImageDescriptor : public CATBaseUnknown
{
  CATDeclareInterface;
  friend class CATPLMLocalSaveServices;
public:
  /**
   * Access to the time informations of a session image
   * @param oTimeBegin
   *        The time the session began
   * @param oTomeLastModified
   *        The last time when the session wrote in the image
   * @return S_OK if everything ran OK, E_FAIL
   */
  virtual HRESULT GetImageTimeInfos(CATTime & oTimeBegin,
                                    CATTime & oTimeLastModified) = 0;

  /**
   * Access to the status of a session image
   * @param oStatus it can be :
   * <ul><li>NEWIMAGE : the image is the default empty image created at the beginning of the session</li>
   * <li>OLDIMAGE : the image has been generated by an old process and is not empty. The process that generated this image exited the normal way (hibernate)</li>
   * <li>CRASHEDIMAGE : the image has been generated by an old process and is not empty. The process that generated this image did not exit by the normal way (crash)</li>
   * <li>INUSEIMAGE : The image is the image currently in use by the session</li>
   * <li>UNDEFINEDIMAGE : should never happen</li></ul>
   */
  virtual HRESULT GetImageStatus(ImageType &oStatus) = 0;

  /**
   * Access to the name of the image
   * @param oName the name of the image
   */
  virtual HRESULT GetImageName(CATUnicodeString & oName) = 0;

  /**
   * Access to the size of the image
   * @param oSize the size of the image in KBytes
   */
  virtual HRESULT GetImageSize(int & oSize) = 0;

  /**
   * Access to a snapshot preview of the session at last image synchronization time
   * @param oSessionPreview the file path of the jpg snapshot
   * @return S_OK if the file exists
   */
  virtual HRESULT GetSessionPreviewFilePath(CATUnicodeString & oSnapPath) = 0;

  /**
   * Access to the main server login infos
   * @return S_OK if all infos could be filled
   *         E_FAIL if not. If the image is a NEW_IMAGE for example
   */
  virtual HRESULT GetMainRepositoryInfos(CATUnicodeString & oUser,
                                         CATUnicodeString & oServerName,
                                         CATUnicodeString & oRole,
                                         CATUnicodeString & oPort,
                                         CATUnicodeString & oParam) = 0;

  /**
   * GetMainSID
   * @return CATBaseUnknown#Release
   */
  virtual CATOmySessionImageDescriptor * GetMainSID() = 0;

  /**
   * @nodoc
   */
  virtual CATUnicodeString GetTransactionName() const = 0;

  /**
   * @nodoc
   */

#define LocalSaveOnUUID

#if defined(LocalSaveOnUUID)
  virtual HRESULT GetPowerIoId(CATUuid &oPowerIoId) const = 0;
#else
  virtual int GetPowerIoId() = 0;
#endif

private:
  /**
   * @nodoc
   */
  virtual HRESULT GetLoginInfos(CATOMYUnicodeStringHTab & oLoginData) = 0;

  //  virtual ~CATPLMSessionImageDescriptor();
  //  virtual CATPLMSessionImageDescriptor();
};
CATDeclareHandler(CATOmySessionImageDescriptor, CATBaseUnknown);

#include "CATLISTP_Clean.h"
#define CATLISTP_Append
#define CATLISTP_Locate
#define CATLISTP_Size
#define CATLISTP_RemoveAll
#define CATLISTP_RemovePosition
#define CATLISTP_RemoveValue

#include "CATLISTP_Declare.h"

#undef	CATCOLLEC_ExportedBy
#define	CATCOLLEC_ExportedBy ExportedByCATOMYBaseSession

CATLISTP_DECLARE(CATOmySessionImageDescriptor)

#endif

