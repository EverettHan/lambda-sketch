// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATSYPStoryboard.h
// Header definition of CATSYPStoryboard
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2007  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATSYPStoryboard_H
#define CATSYPStoryboard_H

#include <IntroInfra.h>
#include <CATSYPParallelTimeline.h>
#include <CATListPV.h>
#include <CATLib.h>
#include <CATUnicodeString.h>
#include <CATBoolean.h>

class CATSYPAnimAndProperty;

/**
 * A storyboard groups animations and assign each to an introspected target property.
 *
 * <b>C++ Example</b>:
 * @code
 * // Creation of the storyboard
 * CATSYPStoryboard* pMyStoryboard = new CATSYPStoryboard();
 * pMyStoryboard->SetDuration(CATSYPDuration(13.5f)); // 13.5 second animation
 * // Append an animation
 * pMyStoryboard->Append(pMyAnimation);
 * // Set the target property on the target object
 * pMyStoryboard->SetTarget(pMyAnimation, pMyTarget);
 * pMyStoryboard->SetTargetProperty(pMyAnimation, "MyTargetProperty");
 * @endcode
 *
 * <b> Use :</b>
 * Storyboard need to be started by A CATSYPBeginStoryboard or a CATSYPSetter, in C++ or in a SYP stylesheet
 *
 * <b>CATSYPStyle Example :</b>
 * @code
 *  <CATSYPBeginStoryboard>
 *    <CATSYPStoryboard Duration="0:0:0.4">
 *      <CATSYPIntAnimation CATSYPStoryboard.TargetName="MyTarget" CATSYPStoryboard.TargetProperty="MyTargetProperty"
 *            Duration="0:0:0.2" From="..." To="..." />
 *      <!-- other animations of any type ... -->
 *    </CATSYPStoryboard>
 *  </CATSYPBeginStoryboard>
 * @endcode
 *
 * <b>Wiki article :</b>
 * <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure#Story_Board_.28CATSYPStoryBoard.29"><b>CodeWiki -> Animations -> Storyboard</b></a>
 
 * @see CATSYPParallelTimeline
 * @see CATSYPSetter
 * @see CATSYPBeginStoryboard
 * @see <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure"><b>CodeWiki -> Animations</b></a>
 * @see <a href="http://codewiki/codewiki/index.php/VID_:_Introspection"><b>Codewiki -> Introspection</b></a>
 * @ingroup groupCIDIntrospection
 */ 
class ExportedByIntroInfra CATSYPStoryboard: public CATSYPParallelTimeline
{
  CATDeclareClass;

public:
  /**
  * Standard constructor
  */
  CATSYPStoryboard ();
 /**
  * Sets the target of an animation.
  * The target of the animation is an object on which you wish to animate an introspected property.
  * @attention There can be only one target per animation.
  * @param i_spChild the animation (inheriting from CATSYPAnimationTimeline).
  * @param i_pTarget the target.
  */
  void SetTarget (const CATBaseUnknown_var& i_spChild, CATBaseUnknown* i_pTarget);
  CATBaseUnknown* GetTarget(const CATBaseUnknown_var& i_spChild) const;
  /**
  * In case of an attached property, sets the child's index to retrieve in the target.
  * @param i_spChild the animation (inheriting from CATSYPAnimationTimeline).
  * @param i_pIndex the child's index.
  */
  void SetIndex (const CATBaseUnknown_var& i_spChild, CATBaseUnknown* i_pIndex);
  CATBaseUnknown* GetIndex(const CATBaseUnknown_var& i_spChild) const;
  /**
  * Sets the target property of an animation.
  * The target property of the animation is the name of the introspected you wish to animate.
  * @attention There can be only one target property per animation.
  */
  void SetTargetProperty(const CATBaseUnknown_var& i_spChild, const CATUnicodeString& i_targetProperty);
  /**
  * Always return an empty CATUnicodeString
  */
  const CATUnicodeString& GetTargetProperty(const CATBaseUnknown_var& i_spChild ) const;
 /**
  * Initializes all appended animations.
  * <p>For each animations, it retrieves the "From" value.<br/>
  * If it has not been set, it retrieves the current value of the target property.<br/>
  * Then it resets the animation</p>
  * @return TRUE if at least one animation is needed (the current value of the
  * animation is different to its target value), FALSE otherwise.
  * @see CATSYPAnimationTimeline::GetFromValueSpecifiedFlag
  * @see CATSYPTimeline::Reset
  */
  CATBoolean InitAnimations();

  /** @copydoc CATISYPCollection#Remove */
  virtual void Remove(const CATBaseUnknown_var &i_spObject);
  /**
   * Called by the CATSYPClock to Update propterties after updating the elapsed time of the 
   * storyboard's timeline tree.
   */
  void UpdateProperties();
protected:
  virtual ~CATSYPStoryboard ();
private:

  // Copy constructor and equal operator
  // -----------------------------------
  CATSYPStoryboard (CATSYPStoryboard &);
  CATSYPStoryboard& operator=(CATSYPStoryboard&);
  CATSYPAnimAndProperty* GetAnimAndProperty(CATSYPAnimationTimeline* i_pAnimation);
  CATSYPAnimAndProperty* GetAnimAndProperty(CATSYPAnimationTimeline* i_pAnimation) const;
  void UpdateProperty(CATSYPAnimAndProperty* i_pAnimAndProperty);
  void ReinterpretValues(CATSYPAnimAndProperty* i_pAnimAndProperty);
private:
  CATRawCollPV _animAndPropertyList;
};
//-----------------------------------------------------------------------

#endif
