#ifndef CATPickPathList_H
#define CATPickPathList_H

#ifdef _WINDOWS_SOURCE
#pragma warning( push )
#pragma warning( disable : 4522 )
#endif

// COPYRIGHT DASSAULT SYSTEMES 1999

/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */


#include "SGInfra.h"
#include "list.h"
#include "CATPickPath.h"


/**
* Picking priority.
* <br><b>Role</b>:
* Enum used to specify the type of sort to use
* in the @href CATPickPathList#SortGraphicAttributeSet method.
*
* @param PICK_DEFAULT
*        Deep is used first, then dimension.
*
* @param PICK_WIREFRAME
*        Dimension is used first, then deep.
*/
enum CATPickPriority
{
   PICK_DEFAULT,
   PICK_WIREFRAME,
   PICK_DISTANT,
   PICK_DISTANT_WIREFRAME
};


/** @nodoc */
typedef CATPickPriority PickPriority;


/**
*
* Class representing a list of CATPickPath .
* <b>Role</b> :
* <br>   This list is created empty, then elements are added or removed through
* <br>   the use of operators += or -=.
* <br>   To be properly used, the list may be sorted and the result is to follow
* <br>  the following rules:
* <br><ol>
*     <li>Element type order: Overlay, non Z buffer, Z buffer. </li>
*     <li>Visual mode order:
*          <br>- Default: Sort by deep from the eye position, then by dimension,
*          <br>- Wireframe (EDGE and no MESH): Sort by dimension, then by deep.  </li>
*     </ol>
*  <br>  The sorting configuration is to be specified to the sort method.
* <br>
* <br><b>Lifecycle rules deviation</b>:
* <br>  PickPaths stored inside the CATPickPath list are neither copied nor des-
* <br>  troyed at the object destruction. A call to the Reset method makes the
* <br>  destruction of stored paths efficient.
*/
class ExportedBySGInfra CATPickPathList
{

public:

  /**
  * Default constructor.
  * <br>Create an empty list of pickpaths.
  */
  CATPickPathList ();


  virtual ~CATPickPathList ();

  /**
  * Destroyes the list.
  * <br><b>Role</b> : Deletes all pickpaths in the list
  * <br>and empty the list.
  * <br>
  * <br><b>Lifecycle rules deviation</b>: This class doesn't
  * <br>manage the lifecycle of added and removed elements in it.
  * <br>This method is the single that actually deletes elements
  * <br>from memory.
  */
  void Reset ();


  /**
  * Sorts the list.
  * <br><b>Role</b> : Sorts elements in the list.
  * <br>Order is generated by element type first:
  * <ol>
  * <li>Overlay</li>
  * <li>NonZBuffer</li>
  * <li>ZBuffer</li>
  * </ol>
  * <br>Then sort is made relying on the order given in parameter :
  * <ol>
  * <li>PICK_DEFAULT   : Deep is used first, then dimension. </li>
  * <li>PICK_WIREFRAME : Dimension is used first, then deep. </li>
  * </ol>
  * <br>
  *
  * @param iOrder
  *        The type of order to apply.
  */
  void SortGraphicAttributeSet (CATPickPriority iOrder = PICK_DEFAULT);

  /**
  * @deprecated R424 - call operator+=(CATPickPath*) instead, and do not use objects allocated on the stack.
  *
  * Operator of assignment.
  * <br><b>Role</b> : Add a new @href CATPickPath in the list.
  *
  * @param iPickPath
  *        The new pickpath to add.
  */
  void operator += (CATPickPath& iPickPath);

  /**
  * Operator of assignment.
  * <br><b>Role</b> : Add a new @href CATPickPath in the list.
  *
  * @param iPickPath
  *        The new pickpath to add.
  *
  * Warning: do not use objects allocated on the stack.
  */
  void operator += (CATPickPath* iPickPath);


  /**
  * @deprecated R424 - call operator-=(CATPickPath*) instead.
  *
  * Operator of subtraction.
  * <br><b>Role</b> : Remove a previously added
  * <br>@href CATPickPath from the list.
  *
  * @param iPickPath
  *        The pickpath to remove.
  */
  void operator -= (CATPickPath& iPickPath);

  /**
  * Operator of subtraction.
  * <br><b>Role</b> : Remove a previously added
  * <br>@href CATPickPath from the list.
  *
  * @param iPickPath
  *        The pickpath to remove.
  */
  void operator -= (CATPickPath* iPickPath);


  /**
  * Operator of assignment.
  *
  * @param iPickPath
  *        The pickPath use to create a new one identical.
  *
  * @return
  *        The new pickPath created by assignment.
  */
  //CATPickPathList& operator = (CATPickPathList& iPickPathList);

  /**
  * Operator of assignment.
  *
  * @param iPickPath
  *        The pickPath use to create a new one identical.
  *
  * @return
  *        The new pickPath created by assignment.
  */
  CATPickPathList& operator = (const CATPickPathList& iPickPathList);


  /**
  * Checks if a pickPath is in the list.
  * <br><b>Role</b> : Look for the @href CATPickPath
  * <br>in parameter in the internal list.
  *
  * @param iPickPath
  *       The pickpath to look for.
  *
  * @return
  *       The result of the search.
  *       <br><b>Legal values</b>:
  *       <ol>
  *       <li>0 if the parameter is not found</li>
  *       <li>A positif value is the pickpath is found</li>
  *       <ol>
  */
  int IsContained (CATPickPath* iPickPath);


  /**
  * Returns the size of the list.
  * <br><b>Role</b> : Gives the number of
  * <br>@href CATPickPath elements in the list.
  *
  * @return
  *        The size.
  */
  int  GetPathCount () const;


  /**
  * Returns a copy of the internal list.
  *
  * @return
  *        A copy of the internal list.
  */
  ::list <CATPickPath> *GetPickPathList ();


  /**
  * @nodoc
  */
  void SetMaxPickLimit(const int);


  /**
  * @nodoc
  */
  int  GetMaxPickLimit() const;


  /**
  * @nodoc
  */
  int  GetOverlapInformation() const;


  /**
  * @nodoc
  */
  void SelectFacesFromConnectedEdges();



protected:

  ::list <CATPickPath> _listOfPath;
  int _MaxPickLimit;
};

#ifdef _WINDOWS_SOURCE
#pragma warning( pop )
#endif

#endif
