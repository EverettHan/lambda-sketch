//===================================================================
// COPYRIGHT Dassault Systemes 2016/10/07
//===================================================================
// CATIKeyboardEditor.cpp
// Header definition of class CATIKeyboardEditor
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016/10/07 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIKeyboardEditor_H
#define CATIKeyboardEditor_H

#include "CATVisItf.h"
#include "CATBaseUnknown.h"
#include "CATEventSubscriberTypedefs.h"
class CATNotification;
class CATManipulator;
class CATKeybdEvent;


extern ExportedByCATVisItf  IID IID_CATIKeyboardEditor ;


typedef int (CATBaseUnknown::*CATKeyboardAction)(CATKeybdEvent *event, CATSubscriberData data,  CATManipulator * iPointed,  CATManipulator * iPluged);

enum CATKeyboardInteraction_Id {

   CATKeyboardInteraction_None,
   
   CATKeyboardInteraction_ShiftPressed,			
   CATKeyboardInteraction_ControlPressed,	
   CATKeyboardInteraction_AltPressed,	
   CATKeyboardInteraction_SpacePressed,	
  // CATKeyboardInteraction_PageUpPressed,	
  // CATKeyboardInteraction_PageDownPressed,	

   CATKeyboardInteraction_SomethingPressed,		
   
   CATKeyboardInteraction_ShiftReleased,		
   CATKeyboardInteraction_ControlReleased,	
   CATKeyboardInteraction_AltReleased,    
   CATKeyboardInteraction_SpaceReleased,		
   CATKeyboardInteraction_SomethingReleased,		

};


class ExportedByCATVisItf CATIKeyboardEditor: public CATBaseUnknown
{
CATDeclareInterface;

public:
  /* 
    * GetActionForInteraction returns a function called action" that will be executed 
    *  when a given interaction is detected
    */
    virtual CATKeyboardAction GetActionForInteraction (CATKeyboardInteraction_Id ident, CATKeybdEvent *ievent, CATSubscriberData data, CATManipulator * iPointed,  CATManipulator * iPluged) = 0;
// _intermediateValue priority if from 0 (lower priority) to higher values (maximum priority)
    // WARNING: -1 is for internal usage only

    enum PriorityType {Undefined = 0, Background=1, Intermediate=2, Foreground=3};
    struct InteractorPriority{
        PriorityType _prioType;
        unsigned short _intermediateValue;
    };

   virtual CATIKeyboardEditor::InteractorPriority& GetPriority () = 0;
   /*
    * IsNeeded determins if the condition to activate this editor is true.
    * for exemple if this editor is to be be activated with a particular condition,
    * then IsNeeded will test the condition . If IsNeeded returns TRUE then this editor
    * will be called to give an ActionForInteraction (GetActionForInteraction)
    */
    virtual CATBoolean IsNeeded () = 0;

    /*
    * IsInTransaction is called after an Action given by this editor is performed.
    * IsInTransaction should answer FALSE every time the editor finished completely 
    * with the given interaction.
    * Please be aware that if IsInTransaction answers TRUE, then this editor becomes 
    * priotary to other editors and no other condition is tested on this. 
    * IsInTransaction is meant for complex editors that need to be activated even 
    * if the activating condition is no more true. Please cf CATMouseEditorForDrill
    */
    virtual CATBoolean IsInTransaction () = 0;

    /*
    * GetKeyState returns a status for a keyboard key : 1 = pressed, 0 = released
    * iCATKeyCode is a key CAT identifier. 
    */
    virtual int GetKeyState (int iCATKeyCode) = 0;
    
};

//-----------------------------------------------------------------------
CATDeclareHandler( CATIKeyboardEditor, CATBaseUnknown );

#endif
