//===================================================================
// COPYRIGHT Dassault Systemes 2018/11/22
//===================================================================
// IVISUISelectionServices.cpp
// Header definition of class IVISUISelectionServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/11/22 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef IVISUISelectionServices_H
#define IVISUISelectionServices_H

#include "IVInterfaces.h"
#include "CATBaseUnknown.h"

class CATVizViewer;
class CATPickPathList;
class CATMathTransformation;

class IVISUISelectionServices_var;

extern ExportedByIVInterfaces  IID IID_IVISUISelectionServices ;
class ExportedByIVInterfaces IVISUISelectionServices: public CATBaseUnknown
{
CATDeclareInterface;

public:

  static HRESULT GetInstance(IVISUISelectionServices_var& ohSingleton);

  /**
  * Sets the viewer to be used when performing the pick.
  * @param iVizViewer [in]
  *   The viewer in question.
  */
  virtual void SetVizViewer(CATVizViewer* iVizViewer) = 0;

  /**
  * Launches a pick according to the pickpathlist entered, and the given direction.
  * @param iPickPathList [in]
  *   The pickpathlist to be used.
  * @param iPose [in]
  *   Gives the direction to be used for the picking.
  */
  virtual void LaunchPicking(CATPickPathList& iPickPathList, CATMathTransformation& iPose) = 0;

  /**
  * Continues with the picking, after LaunchPicking has been used.
  * @param iPose [in]
  *   Gives the direction to be used for the picking.
  * @param iIsPressed [in]
  *   If false, the stylus device will receive a STYLUS_MOVE event, if true, STYLUS_MOVE_PRESSED.
  *   The later can be used for interactions of type "drag", when the user needs to move the device whilst pressing a button.
  * @param iPickPathList [in]
  *   The pickpathlist can be updated here if needed. If NULL, the one entered in LaunchPicking will continue to be used.
  */
  virtual void ContinuePicking(CATMathTransformation& iPose, bool iIsPressed = false, CATPickPathList* iPickPathList = NULL) = 0;

  /**
  * Stops the picking on a particular direction.
  * @param iPose [in]
  *   Gives the direction to be used for the picking.
  * @param iPickPathList [in]
  *   The pickpathlist can be updated here if needed. If NULL, the one entered in LaunchPicking will continue to be used.
  */
  virtual void StopPicking(CATMathTransformation& iPose, CATPickPathList* iPickPathList = NULL) = 0;

  /**
  * Restores the picking, which means that it will be computed on the Visu side (instead of using the pickpathlists entered through the methods above).
  */
  virtual void RestorePicking() = 0;

  /**
  * Determines what types of reps will be pickable during the selection. 
  * By default, all reps belonging to the 3D scene can be picked, 
  * but the user can also decide to pick only VID reps, or everything but.
  * @param iViewer [in]
  *   The current viewer.
  * @param iVIDPicking [in]
  *   An integer determining the type of reps picked.
  * > 0 to pick all reps
  * > 1 to pick only VID reps
  * > 2 to pick all reps except VID
  */
  virtual void SetVIDPicking(int iVIDPicking) = 0;

  /**
  * Returns the current VID picking mode.
  *
  * @return an integer determining the type of reps picked.
  * > 0 to pick all reps
  * > 1 to pick only VID reps
  * > 2 to pick all reps except VID
  */
  virtual int GetVIDPicking(CATVizViewer* iViewer) = 0;

  /**
  * Specifies the laser behaviour.
  * @param iOnOff [in]
  *    -1 : Constant deactivation.
  *     0 : Normal Behaviour : when preselection is performed (trigger analog), the laser is activated, in idle mode the laser is deactivated.
  *     1 : Constant activation
  */
  virtual void ToggleSelectionLaser(int iMode) = 0;

  /**
  * By default, the preselection is associated to an analog that activates it.
  * This overrides this behaviour by activating it at all time.
  * @param iOnOff [in]
  *   If true, activates, else deactivates the picking.
  */
  virtual void SetConstantPicking(bool iOnOff) = 0;
};

//-----------------------------------------------------------------------
CATDeclareHandler( IVISUISelectionServices, CATBaseUnknown );

#endif
