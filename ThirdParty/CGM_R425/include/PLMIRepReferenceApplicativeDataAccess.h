// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// PLMIRepReferenceApplicativeDataAccess.h
// Define the PLMIRepReferenceApplicativeDataAccess interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2008  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIRepReferenceApplicativeDataAccess_H
#define PLMIRepReferenceApplicativeDataAccess_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATPLMModelerRepInterfaces.h"

// --- System framework
#include "CATUnicodeString.h"
#include "CATBaseUnknown.h"

// --- Forward declaration

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerRepInterfaces IID IID_PLMIRepReferenceApplicativeDataAccess;
#else
extern "C" const IID IID_PLMIRepReferenceApplicativeDataAccess ;
#endif

//------------------------------------------------------------------

/**
 * Interface dedicated to provide an access to applicative data of a representation reference.
 *
 * <br><b>Role</b>: This interface provides a way to create and retrieve applicative containers located inside 
 * the stream associated to the representation reference.
 */
class ExportedByCATPLMModelerRepInterfaces PLMIRepReferenceApplicativeDataAccess: public CATBaseUnknown
{
  CATDeclareInterface;

public:

    /**
     * Creates an applicative container inside the stream associated to the representation reference.
     *
     *  @param  opApplicativeContainer  [CATBaseUnknown#Release]
     *      The new created applicative container. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @param  iContainerType
     *      The applicative container type. <br>
     *      Input parameter.
     *  @param  iIID
     *      The interface type returned through <tt>opApplicativeContainer</tt> parameter. <br>
     *      Input parameter.
     *  @param  iContainerSuperType
     *      The supertype of the applicative container. <br>
     *      By default, the applicative container has no supertype. Otherwise it must be set to the feature container type (CATFeatCont). <br>
     *      Input parameter.
     *  @param  iIdentifier
		 *      The name of the applicative container, useful to retrieve it later. <br>
     *	    By default, the name is set to the container type iContainerType. <br>
     *      Input parameter. <br>
     *      <b>Note:</b> If you want to create several applicative containers with the same type, the parameter iIdentifier
     *      becomes mandatory, because two applicative containers can not have the same name.
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT CreateApplicativeContainer (CATBaseUnknown *&opApplicativeContainer, const CATIdent iContainerType, const IID & iIID, const CATIdent iContainerSuperType = "", const CATUnicodeString & iIdentifier = "") = 0;

    /**
     * Retrieves an applicative container inside the stream associated to the representation reference.
     *
     *  @param  iIdentifier
		 *      The name of the applicative container. <br>
     *      Input parameter.
     *  @param  iIID
     *      The interface type returned through <tt>opApplicativeContainer</tt> parameter. <br>
     *      Input parameter.
     *  @param  opApplicativeContainer  [CATBaseUnknown#Release]
     *      The applicative container. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT RetrieveApplicativeContainer (const CATUnicodeString & iIdentifier, const IID & iIID, CATBaseUnknown *&opApplicativeContainer) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIRepReferenceApplicativeDataAccess, CATBaseUnknown);

//------------------------------------------------------------------

#endif
