#ifndef CATIADocument_IDL
#define CATIADocument_IDL
/*IDLREP*/
// COPYRIGHT DASSAULT SYSTEMES 1997
//--------------------------------------------------------------------------
// Document object
// fbq Aug.97
//--------------------------------------------------------------------------

#include "CATIABase.idl" 
#include "CATSafeArray.idl"

interface CATIAWindow; 
interface CATIAWindows;
interface CATIACameras;
interface CATIASelection;
interface CATIAReference;
interface CATIAWorkbench;

    /**
     * Represents the document.
     * The document is the object handled by the operating system as a whole
     * that stores your data in files and databases.
     * It is assigned a type determined by its contents. It may contain other
     * documents with a different type. For example,
     * a PartDocument contains a part and can be contained in a ProductDocument.
     * A workshop is associated with a document to gather all the commands
     * that can be used to create, modify, and edit the objects making up the
     * the document. These commands are arranged in menus and toolbars.
     * @see CATIAPartDocument, CATIAProductDocument, CATIADrawingDocument
     */
interface /*IDLHIDDEN*/ CATIADocument : CATIABase
{
    /**
     * Returns the document's full file name, including its path.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>DocFullName</tt> the <tt>Doc</tt>
     * document's full file name.
     * <pre>
     * DocFullName = Doc.<font color="red">FullName</font>
     * </pre>
     * The returned value is like this:
     * <pre>
     * e:\users\psr\Parts\MyNicePart.CATPart
     * </pre>
     * </dl>
     */
#pragma PROPERTY FullName
    HRESULT get_FullName(inout /*IDLRETVAL*/ CATBSTR oFullNameBSTR);

    /**
     * Returns the document's file path.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>DocPath</tt> the path where the
     * <tt>Doc</tt> document is stored.
     * <pre>
     * DocPath = Doc.<font color="red">Path</font>
     * </pre>
     * The returned value is like this:
     * <pre>
     * e:\users\psr\Parts
     * </pre>
     * </dl>
     */
#pragma PROPERTY Path
    HRESULT get_Path(inout /*IDLRETVAL*/ CATBSTR oPathBSTR);

    /**
     * Returns whether the file containing the document can be read only,
     * on can be read and written.
     * <br>
     * <b>True</b> if the file is read-only. 
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>IsReadOnly</tt> the ability to read,
     * and possibly to write in, the file containing the <tt>Doc</tt> document.
     * <pre>
     * IsReadOnly = Doc.<font color="red">ReadOnly</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY ReadOnly
    HRESULT get_ReadOnly(out /*IDLRETVAL*/ boolean oReadOnly);  

    /**
     * Returns whether the document has been modified, and thus needs to be
     * saved.<br>
     * This happens when the document has changed since either its creation or
     * its last save.
     * <ul>
     * <li><b>True</b> if the document has not been changed: the document doesn't need to be saved.</li>
     * <li><b>False</b> if the document has been changed: the document needs to be saved.</li>
      * </ul>
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>HasChanged</tt> whether the <tt>Doc</tt>
     * document needs to be saved.
     * <pre>
     * HasChanged = NOT Doc.<font color="red">Saved</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY Saved
    HRESULT get_Saved(out /*IDLRETVAL*/ boolean oSaved);  

    /**
     * Returns or sets the document visibility.
     * <br>
     * <b>True</b> if the document is visible to the end user.
     * <br>
     * When this property is set to False, all the windows displaying the
     * document are removed. This capability of showing or removing the windows
     * of a given document is not available from a menu or toolbar.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example makes the <tt>Doc</tt> document visible.
     * <pre>
     * Doc.<font color="red">Visible</font> = True
     * </pre>
     * </dl>
     *
 #pragma PROPERTY Visible
    HRESULT get_Visible(out IDLRETVAL  boolean oVisible);  
    HRESULT put_Visible(in                boolean iVisible);  
     */

    /**
     * Returns or sets the document's hidden elements visibility.
     * <br>
     * <b>True</b> if the document's hidden elements are visible to the user.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example makes the <tt>Doc</tt> document's hidden elements visible.
     * <pre>
     * Doc.<font color="red">SeeHiddenElements</font> = True
     * </pre>
     * </dl>
     */
#pragma PROPERTY SeeHiddenElements
    HRESULT get_SeeHiddenElements(out /*IDLRETVAL*/ boolean oSeeHiddenElements);  
    HRESULT put_SeeHiddenElements(in                boolean iSeeHiddenElements);  

    /**
     * Returns the document's collection of cameras.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>CameraCollection</tt> the collection of
     * cameras attached to the <tt>Doc</tt> document.
     * <pre>
     * Dim CameraCollection As Cameras
     * Set CameraCollection = Doc.<font color="red">Cameras</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY Cameras
    HRESULT get_Cameras(out /*IDLRETVAL*/ CATIACameras oCameras);

    /**
     * Returns or sets the current layer.
	 * <tt>CurrentLayer</tt> uses the layer name and not its number.
	 * The "None" layer means that there is no current layer.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example makes the layer named "Layer 3" as the current layer 
	 * for the <tt>Doc</tt> document. 
     * <pre>
     * Doc.<font color="red">CurrentLayer</font> = "Layer 3"
     * </pre>
     * </dl>
     */
#pragma PROPERTY CurrentLayer
	HRESULT get_CurrentLayer(inout /*IDLRETVAL*/ CATBSTR oCurrentLayer);
	HRESULT put_CurrentLayer(in CATBSTR iCurrentLayer);

    /**
     * Returns or sets the current visualization filter.
	 * <tt>CurrentFilter</tt> uses the filter name and not its definition.
	 * The "All visible" filter means that all layers are visible.
	 * For all filters, remind that the current layer is always visible.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example makes the filter named "Filter001" as the current visualization filter
	 * for the <tt>Doc</tt> document.
     * <pre>
     * Doc.<font color="red">CurrentFilter</font> = "Filter001"
     * </pre>
     * </dl>
     */
#pragma PROPERTY CurrentFilter
	HRESULT get_CurrentFilter(inout /*IDLRETVAL*/ CATBSTR oCurrentFilter);
	HRESULT put_CurrentFilter(in CATBSTR iCurrentFilter);		

	/**
     * Creates a new visualization filter from a name and a definition.
	 * Fails if there is already a filter named iFilterName.
     * @param iFilterName
     *   The filter name.
     * @param iFilterDefinition
	 *	 The filter definition
	 * <! @sample>
     * <dt><b>Example:</b>
     * <dd>
     * This example creates the filter named "Filter001" and with "layer= 2 & layer= 1" definition
	 * for the <tt>Doc</tt> document.
     * <pre>
     * Doc.<font color="red">CreateFilter</font> ("Filter001", "layer= 2 & layer= 1")
     * </pre>
     * </dl>
     */
     HRESULT CreateFilter(in CATBSTR iFilterName, in CATBSTR iFilterDefinition);

	/**
     * Removes an existing visualization filter.
	 * Fails if the filter to be removed is the current filter.
     * @param iFilterName
     *   The filter name.
	 * <! @sample>
     * <dt><b>Example:</b>
     * <dd>
     * This example removes the filter named "Filter001" for the <tt>Doc</tt> document.
     * <pre>
     * Doc.<font color="red">RemoveFilter</font> ("Filter001")
	 * </pre>
     * </dl>
     */
     HRESULT RemoveFilter(in CATBSTR iFilterName);

    /**
     * Creates a reference from a GenericNaming label.
     * Each kind of document provides a specific implementation.
     * @param iLabel
     *   The GenericNaming identification for an object.
     * @return The reference to the object.
     */
     HRESULT CreateReferenceFromName(in CATBSTR iLabel, out /*IDLRETVAL*/ CATIAReference oRef);

    /**
     * Creates a new window for the document.
     * This implies creating a window, displaying the document in this window,
     * making this document the active one if it was not, making
     * this window the active one, and adding the
     * window to the collection of windows.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example creates the <tt>MyWindow</tt> new window for
     * the <tt>Doc</tt> document.
     * <pre>
     * Dim MyWindow As Window
     * Set MyWindow = Doc.<font color="red">NewWindow</font>()
     * </pre>
     * </dl>
     */
    HRESULT NewWindow(out /*IDLRETVAL*/ CATIAWindow oWindow);

    /**
     * Activates the document.
     * Activating a document means that this document is the one on which
     * the end user is now working on. This document possibly reconfigures
     * the menu bar and toolbars with its own commands if its type
     * is different from the type of the previous active document.
     * The first window in the window collection which contains this
     * document becomes the active one.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example activates the <tt>Doc</tt> document.
     * <pre>
     * Doc.<font color="red">Activate</font>()
     * </pre>
     * </dl>
     */
    HRESULT Activate();

    /**
     * Saves the document.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example saves the <tt>Doc</tt> document.
     * <pre>
     * Doc.<font color="red">Save</font>()
     * </pre>
     * </dl>
     */
    HRESULT Save();

    /**
     * Saves the document with another name.
     * @param fileName
     *   The name to assign to the document
     * <! @sample>
     * </dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example saves the <tt>Doc</tt> document with the <tt>NewName</tt>
     * name.
     * <pre>
     * Doc.<font color="red">SaveAs</font>("NewName")
     * </pre>
     */
    HRESULT SaveAs(in CATBSTR fileName);

    /**
     * Exports the data contained in the document to another format.
     * @param fileName
     *   The name of the exported file
     * @param format
     *   The name of the format
     * <! @sample>
     * </dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example writes the <tt>Doc</tt> document in the IGES format
     * under the <tt>IGESDoc</tt> name.
     * <pre>
     * Doc.<font color="red">ExportData</font>("IGESDoc", "igs")
     * </pre>
     */
    HRESULT ExportData(in CATBSTR fileName, in CATBSTR format);

    /**
     * Closes the document.
     * This closes all the windows displaying the document.
     * If the document needs to be saved, the end user is prompted
     * whether to save the document, or to close it anyway.
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example closes the <tt>Doc</tt> document
     * <pre>
     * Doc.<font color="red">Close</font>()
     * </pre>
     * </dl>
     */
    HRESULT Close();
    
    /**
     * Returns one of the workbenches of the document.
     * @param workbenchName
     *   The name of the workbench
     * <! @sample>
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves the Structural workbench on the <tt>Doc</tt>
     * document
     * <pre>
     * Doc.<font color="red">GetWorkbench</font>("Structural")
     * </pre>
     * </dl>
     */
    HRESULT GetWorkbench(in CATBSTR workbenchName, out /*IDLRETVAL*/ CATIAWorkbench workbench);
};

// Interface name : CATIADocument
#pragma ID CATIADocument "DCE:7fbd9d5a-cfba-0000-0280030ba6000000"
#pragma DUAL CATIADocument

// VB object name : Document
#pragma ID Document "DCE:7fbd9dad-7042-0000-0280030ba6000000"
#pragma ALIAS CATIADocument Document

// Include of forward interfaces
//#include "CATIAWindow.idl"
//#include "CATIAWindows.idl"
//#include "CATIACameras.idl"
//#include "CATIASelection.idl"
//#include "CATIAReference.idl"
//#include "CATIAWorkbench.idl"

#endif
