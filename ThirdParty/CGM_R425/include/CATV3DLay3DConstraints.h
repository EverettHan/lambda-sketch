//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/05/15
//===================================================================
//  2012/05/15 Creation: Code generated by jov
//===================================================================
#ifndef CATV3DLay3DConstraints_H
#define CATV3DLay3DConstraints_H
#include <VisuImmersive3D.h>
#include <CATMathDirection.h>
#include <CATMathDirection2Df.h>
#include <CATMath3x3Matrix.h>
#include <CATV3DOrientation.h>
#include <CATV3D.h>
#include <CATMathAxis.h>
#include <CATMathTransformation.h>
#include <UIVCoreToolsInline.h>

/**
 * This class defines the 3D constraints of any V3D widget.
 *
 * @par Role
 * It can describe either :
 * - the absolute position of a V3D top widget in a viewer.
 * - the relative position of a V3D widget compared to its parent widget.
 * <br>
 *
 * In addition to the position information, the contraints contain other
 * display information : fixed size on screen and orientation.
 *
 * @par Usage
 * User can access these position information:
 * - angles and rotation matrix
 * - translation and axis origin
 * - tranformation and axis
 * <br>
 *  
 * The axis value is the reference when computing widgets position.
 * Though, all position values are always up to date through getters.
 * Invalidate flags prevent to recompute some values when they have
 * not been changed by setters.
 *
 * @ingroup V3DLayout
 */
class ExportedByVisuImmersive3D CATV3DLay3DConstraints
{
public:
  /** Constructor*/
  CATV3DLay3DConstraints ();
  /** Constructor*/
  CATV3DLay3DConstraints (const CATV3DLay3DConstraints &);
  /** Operator =*/
  const CATV3DLay3DConstraints& operator=(const CATV3DLay3DConstraints&);
  /** Destructor*/
  virtual ~CATV3DLay3DConstraints ();
  /** Sets a radius in millimeter, that forces the dimension of the widget. 
   * @param i_radiusInMM the radius in millimeter. The property does not impact the
   * size if the value is -1. Every other negative value will throw an assertion.
   */
  void SetBoundingSphereRadiusInMM(double i_radiusInMM);
  /** @return the radius in millimeter.*/
  double GetBoundingSphereRadiusInMM()const;
  /** Sets the X euler angle */
  void SetXAngle(const CATAngle& i_angle);
  /** @return the X euler angle */
  CATAngle GetXAngle();
  /** Sets the Y euler angle */
  void SetYAngle(const CATAngle& i_angle);
  /** @return the Y euler angle */
  CATAngle GetYAngle();
  /** Sets the Z euler angle */
  void SetZAngle(const CATAngle& i_angle);
  /** @return the Z euler angle */
  CATAngle GetZAngle();
  /** Sets the 3x3 matrix of the rotation */
  void SetRotation(const CATMath3x3Matrix& i_rotation);
  /** @return the 3x3 matrix of the rotation */
  CATMath3x3Matrix GetRotation() const;
  /** Sets the translation vector/*/
  void SetTranslation(const CATMathVector& i_vector);
  /** @return the translation vector */
  CATMathVector GetTranslation() const;
  /** Sets the Scale vector. Used only for the Robot to store the current scale vector in all three directions, without impacting the real view*/
  void SetScale(const CATMathVector& i_vector);
  /** @return the Scale vector */
  const CATMathVector& GetScale() const;

  /** Sets the zoomScaling. Used to set the reference size at a specific zoom. Must not be used with BoundingSphereRadiusInMM 
   * @param i_scale The scaling factor
   */
  void SetZoomScaling(float i_scale);
  /**@return the zoomScaling */
  const float GetZoomScaling() const;

  /** Sets the transformation/*/
  void SetTransformation(const CATMathTransformation& i_transformation);
  /** @return the transformation. Is not const, as the transformation could not be up to date.*/
  const CATMathTransformation& GetTransformation()const;

  /** Sets the flip direction flag*/
  void SetFlipDirectionFlag(int i_flag);
  /** @return the flip direction flag.*/
  int GetFlipDirectionFlag() const;
  /** Sets the flip direction */
  void SetFlipDirection(const CATMathVector  &i_Dir);
  /** @return the flip direction */
  CATMathVector GetFlipDirection() const;

  // TODO Y and Z absolute limits + use properties limits DMO 
  /** Sets a flag allowing to restrict the rolling to some absolute values.*/
  void SetUseXAngleAbsoluteLimitsFlag(int i_flag);
  /** @return a flag indicating if the rolling is restricted to some absolute values.*/
  int GetUseXAngleAbsoluteLimitsFlag() const;
  /** Sets the limit angles restricting the rolling when UseXAngleAbsoluteLimitsFlag is set to 1.*/
  void SetXAngleAbsoluteLimits(const CATAngle& i_angle1, const CATAngle& i_angle2);
  /** Gets the limit angles restricting the rolling when UseXAngleAbsoluteLimitsFlag is set to 1.*/
  void GetXAngleAbsoluteLimits(CATAngle& o_angle1, CATAngle& o_angle2) const;

  /** Sets the origin of the constraints axis.*/
  void SetOrigin(const CATMathPoint &i_value);
  /** @return the origin of the constraints axis.*/
  CATMathPoint GetOrigin() const;

  /** Sets the constraints axis.*/
  void SetAxis(const CATMathAxis &i_value);
  /** @return the constraints axis.*/
  const CATMathAxis& GetAxis() const;

  /** @deprecated */
  void SetOrientation(const CATV3DOrientation &iOrientation);
  /** @deprecated */
  CATV3DOrientation GetOrientation() const;

  /** Sets the orientation @ref CATV3DOrientation#Orientation.*/
  void SetDynamicOrientation(const CATV3D::DynamicOrientation &iOrientation);
  /** @return the orientation @ref CATV3DOrientation#Orientation.*/
  const CATV3D::DynamicOrientation &GetDynamicOrientation() const;
  /** 
   * @param i_flag @c TRUE for px, @c FALSE for dp
   *
   * @see #GetPxFlag
   */
  void SetPxFlag(const int i_flag);
  /**
   * This flag determines the unity in which the constraint is expressed.
   *
   * @return i_flag @c TRUE if the constraints is expressed in px (default); @c FALSE if it is expressed in dp.
   */
  int GetPxFlag() const;

  /** 
   * Sets the billboard angle on a plane parallel to the screen,
   * used only when orientation is set to @ref ParallelToScreen or @deprecated DirParallelToScreen.
   */
  void SetBillboardAngle(const CATAngle& i_angle);
  /** @return the billboard angle */
  CATAngle GetBillboardAngle() const;
  /** 
   * Sets the billboard direction on a plane parallel to the screen,
   * used only when orientation is set to @ref ParallelToScreen or @deprecated DirParallelToScreen.
   */
  void SetBillboardDirection(const CATMathDirection2Df& i_direction);

  INLINE int GetRotationSetFlag() const{return _rotationSetFlag;}
  
  /** 
   * @param i_flag @c TRUE for keeping the dimension, @c FALSE otherwise
   *
   * @see #GetKeepDimensionPxFlag
   */
  void SetKeepDimensionPxFlag(const int i_flag);
  /**
   * This flag determines if we have to keep the dimension as it is, without any changement and independant from the zoom
   *
   * @return i_flag @c TRUE if we have to keep the dimension; @c FALSE otherwise.
   */
  int GetKeepDimensionPxFlag() const;

private:
  /** 
   * Update methods called when setting a constraints value in order
   * to keep consistant the constraints axis. 
   */
  void UpdateRotationMatrixFromEulerAngles();
  void UpdateTransformation();

  /** Sets the constraints axis.*/
  void _SetAxis(const CATMathAxis &i_value);
  /** Retrieve or update the euler angles.*/
  void GetEulerAngles(CATAngle& o_x, CATAngle& o_y,CATAngle& o_z);

private:
  /** _axis is always up to date.*/
  CATMathAxis _axis;
  /** other view of axis, always up to date*/
  CATMathTransformation _transformation;
  /** other view of axis, with _translation, potentially out of date*/
  CATAngle _ZAngle;
  CATAngle _YAngle;
  CATAngle _XAngle;

  /** A quoi ca sert? */
  CATMathVector _scale;

  /** Define a scaling to allow the user to choose a precise size for a given zoom, even when the widget is zoom dependant */
  float _zoomScaling;

  CATAngle _XAngleAbsoluteLimit1;
  CATAngle _XAngleAbsoluteLimit2;
  double _radiusInMM;
  unsigned char _useXAngleAbsoluteLimitsFlag  :1;
  unsigned char _resetFathersRotationsFlag    :1;
  unsigned char _rotationSetFlag              :1;
  CATV3D::DynamicOrientation _dynamicOrientation;

  /** 
   * euler rotation angle on a plane parallel to the screen,
   * used for billboarding, only when orientation is set to @ref ParallelToScreen or @deprecated DirParallelToScreen.
   */
  CATAngle _billboardAngle;

  /** This flag is here to indicate if these angles are up to date or not. Allow to not spend to much time to compute them.*/
  unsigned int _invalidateAnglesFlag;

  unsigned int _pxFlag;
  
  /** Indicate that the topWidget has to be displayed with 1mm == 1px, whatever the zoom and without any resize. Not compatible with BoundingSphereRadius **/
  unsigned int _keepDimensionPxFlag;
 };

inline int operator == (const CATV3DLay3DConstraints &i_constaints1, const CATV3DLay3DConstraints &i_constaints2)
{
  CATAngle _XAngleAbsoluteLimit1_1 = CATAngle();
  CATAngle _XAngleAbsoluteLimit2_1 = CATAngle();
  i_constaints1.GetXAngleAbsoluteLimits(_XAngleAbsoluteLimit1_1, _XAngleAbsoluteLimit2_1);
  CATAngle _XAngleAbsoluteLimit1_2 = CATAngle();
  CATAngle _XAngleAbsoluteLimit2_2 = CATAngle();
  i_constaints2.GetXAngleAbsoluteLimits(_XAngleAbsoluteLimit1_2, _XAngleAbsoluteLimit2_2);

  CATMathAxis axis1 = i_constaints1.GetAxis();
  CATMathAxis axis2 = i_constaints2.GetAxis();

  return (axis1.GetOrigin().GetX() == axis2.GetOrigin().GetX() && axis1.GetOrigin().GetY() == axis2.GetOrigin().GetY() &&  axis1.GetOrigin().GetZ() == axis2.GetOrigin().GetZ() && 
      axis1.GetFirstDirection().GetX() == axis2.GetFirstDirection().GetX() && axis1.GetFirstDirection().GetY() == axis2.GetFirstDirection().GetY() && axis1.GetFirstDirection().GetZ() == axis2.GetFirstDirection().GetZ() &&
      axis1.GetSecondDirection().GetX() == axis2.GetSecondDirection().GetX() && axis1.GetSecondDirection().GetY() == axis2.GetSecondDirection().GetY() && axis1.GetSecondDirection().GetZ() == axis2.GetSecondDirection().GetZ() &&
      axis1.GetThirdDirection().GetX() == axis2.GetThirdDirection().GetX() && axis1.GetThirdDirection().GetY() == axis2.GetThirdDirection().GetY() && axis1.GetThirdDirection().GetZ() == axis2.GetThirdDirection().GetZ() &&
      i_constaints1.GetBoundingSphereRadiusInMM() == i_constaints2.GetBoundingSphereRadiusInMM() && 
      _XAngleAbsoluteLimit1_1 == _XAngleAbsoluteLimit1_2 && _XAngleAbsoluteLimit2_1 == _XAngleAbsoluteLimit2_2 &&
      i_constaints1.GetOrientation() == i_constaints2.GetOrientation() && i_constaints1.GetPxFlag() == i_constaints2.GetPxFlag());
}

#endif
