//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/12/07
//===================================================================
// CATIAdpProtectedCompletionParameters.cpp
// Header definition of class CATIAdpProtectedCompletionParameters
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/12/07 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIAdpProtectedCompletionParameters_H
#define CATIAdpProtectedCompletionParameters_H

#include "CATPLMIntegrationAccess.h"
#include "CATBaseUnknown.h"
#include "CATAdpProtectedRepresentationMode.h"
#include "CATAdpProtectedDependenciesMode.h"
#include "CATAdpProtectedLinkFilteringMode.h"
#include "CATCollec.h"
class CATLISTP(CATIAdpPLMIdentificator);
class CATPLMIDSet;
class CATLISTV(CATPLMID);


extern ExportedByCATPLMIntegrationAccess  IID IID_CATIAdpProtectedCompletionParameters;


class ExportedByCATPLMIntegrationAccess CATIAdpProtectedCompletionParameters : public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /**
  * Specifies the need to get the DIFSheet and DIFLayout.
  *  Default is  TRUE.
  *  @param [in] iRetrieveDIFs retrieve DIFs if TRUE
  *  @return E_UNEXPECTED if expandMode is NoExpand. see @CATAdpProtectedExpandParameters
  */
  virtual HRESULT SetRetrieveDIFs(const CATBoolean iRetrieveDIFs) = 0;
  /**
  * Specifies the need to get the materials.
  *  Default is  FALSE.
  *  @param [in] iRetrieveMaterials retrieve materials if TRUE
  *  @return E_UNEXPECTED if expandMode is NoExpand. see @CATAdpProtectedExpandParameters
  */
  virtual HRESULT SetRetrieveMaterials(const CATBoolean iRetrieveMaterials) = 0;
  /**
  * Specifies the need to get the PLMParameters.
  *  Default is  FALSE.
  *  @param [in] iRetrievePLMParameters retrieve PLMParameters if TRUE
  *  @return E_UNEXPECTED if expandMode is NoExpand. see @CATAdpProtectedExpandParameters
  */
  virtual HRESULT SetRetrievePLMParameters(const CATBoolean iRetrievePLMParameters) = 0;
  /**
  * Specifies the need to get the relations (PLMPort, PLMConnection).
  *  Default is  FALSE.
  *  @param [in] iRetrieveRelations retrieve relations if TRUE
  *  @return E_UNEXPECTED if expandMode is NoExpand. see @CATAdpProtectedExpandParameters
  */
  virtual HRESULT SetRetrieveRelations(const CATBoolean iWithRelations) = 0;
  /**
  * Specifies the need to get the representations.
  *  Default is  IntegrityReps.
  *  @param [in] iRepsMode Representation mode, see @href CATAdpProtectedRepresentationMode
  *  @return E_UNEXPECTED if expandMode is NoExpand and mode different from IntegrityReps. see @CATAdpProtectedExpandParameters
  */
  virtual HRESULT SetRetrieveRepresentations(const CATAdpProtectedRepresentationMode::RepresentationMode iRepsMode) = 0;
  /**
   * Specifies the need to open the dependencies of the models.
   *
   * This is pertinent for modeler that have various levels of completion like simulation or PRR.
   * For other data models, this parameter doesn't have any effect.
   * Default value is equivalent to FullModel but may be specified on a per modeler basis.
  *  @param [in] iRepsMode Representation mode, see @href CATAdpProtectedRepresentationMode
  *  @return S_OK if everything went ok, E_* if something really bad happened
   */
  virtual HRESULT SetDependenciesMode(const CATAdpProtectedDependenciesMode::DependenciesMode iDepMode) = 0;

  /**
    * Specifies the need to get the Config Effectivities and AppContexts.
    *  Default is  FALSE.
    *  @param [in] iRetrieveConfigConnections retrieve Config infos if TRUE
    *  @return E_UNEXPECTED if expandMode is NoExpand. see @CATAdpProtectedExpandParameters
    */
  virtual HRESULT SetRetrieveConfigConnections(const CATBoolean iRetrieveConfigConnections) = 0;

  /**
   * Specifies the need to overload some minor Components by a fixpoint.
   *
   * <ul>
   * <li>This enables the user to specify the specifics minors which will be completed during components retrieval pass.</li>
   * <li>If conflicts appear with the Input Components, errors will be generated.</li>
   * <li>If conflicts appear with the content of the Session, the Components already available in the Session are kept and input overloads are ignored for these Components.</li>
   * <li>If no Components to overload are retrieved during the Completion pass, no error will be generated.</li>
   * </ul>
   *
   * @param [in] iOverloads
   * The set of overloading Components.
   *
   *  @return S_OK if everything went ok, E_* if something really bad happened
   */
  virtual HRESULT AddMinorOverload(const CATLISTP(CATIAdpPLMIdentificator)& iOverloads) = 0;
  virtual HRESULT AddMinorOverload(const CATPLMIDSet& iOverloads) = 0;
  virtual HRESULT AddMinorOverload(const CATLISTV(CATPLMID)& iOverloads) = 0;

  /**
  * Specifies which profile from OC_OpenCompletion namespace will be applied on selected elements.
  * Restricted to SmartOpen usage.
  *   Returns E_UNEXPECTED if dependency mode has not been set to SmartOpen.
  */
  virtual HRESULT SetProfile(const CATUnicodeString iProfileName) = 0;

  /*
  * Specifies how MfgProductionPlanning connections should be completed.
  *
  * @param iFilteringMode[in]: the chosen filtering mode
  *
  * @return: E_UNEXPECTED if the requested mode is not available for these connections.
  */
  virtual HRESULT SetMfgProductionPlanningFilteringMode(CATAdpProtectedLinkFilteringMode iFilteringMode) = 0;

  /*
   * Specifies how AllocatedResourceLink connections should be completed.
   *
   * @param iFilteringMode[in]: the chosen filtering mode
   *
   * @return: E_UNEXPECTED if the requested mode is not available for these connections.
   */
  virtual HRESULT SetAllocatedResourceLinkFilteringMode(CATAdpProtectedLinkFilteringMode iFilteringMode) = 0;

  /*
   * Specifies how DELLmiTimeConstraintCnx connections should be completed.
   *
   * @param iFilteringMode[in]: the chosen filtering mode
   *
   * @return: E_UNEXPECTED if the requested mode is not available for these connections.
   */
  virtual HRESULT SetTimeConstraintLinkFilteringMode(CATAdpProtectedLinkFilteringMode iFilteringMode) = 0;

  /*
   * Specifies how DELFmiProcessPrerequisiteCnxCust connections should be completed.
   *
   * @param iFilteringMode[in]: the chosen filtering mode
   *
   * @return: E_UNEXPECTED if the requested mode is not available for these connections.
   */
  virtual HRESULT SetProcessPrerequisiteLinkFilteringMode(CATAdpProtectedLinkFilteringMode iFilteringMode) = 0;

};

//-----------------------------------------------------------------------
CATDeclareHandler(CATIAdpProtectedCompletionParameters, CATBaseUnknown);

#endif
