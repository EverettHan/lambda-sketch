// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATAdpProtectedDictionaryServices.h
// Header definition of CATAdpProtectedDictionaryServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  PMM
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATAdpProtectedDictionaryServices_H
#define CATAdpProtectedDictionaryServices_H

#include "CATAdpDictionaryServices.h"
#include "CATPLMIntegrationAccess.h"

#include "IUnknown.h"
#include "CATPLMCoreType.h"


class CATIAdpType;
class CATIAdpExtType;
class CATIAdpEnvironment;


//-----------------------------------------------------------------------

/**
* Class to manage PLM dictionary.
*
* <br><b>Role</b>: Provide all basic functions to browse and navigate on PLM dictionary.
*/
class ExportedByCATPLMIntegrationAccess CATAdpProtectedDictionaryServices : public CATAdpDictionaryServices
{
public:
   
/**
 * @deprecated V6R2013
 * @use CATPLMTypeH#GetIAdpType with accurate type name. No real equivalency with new typing system. 
 * @use CATPLMTypeModelerBehaviors#GetPreferedInstanciationType.
 */
  static HRESULT GetAssociatedType( const CATIAdpType* iType,
                                    const CATPLMCoreType iPLMCoreType, 
                                    CATIAdpType ** oType );

 
  /**
  * @deprecated V6R2013
  * @use CATPLMTypeDescriptor#GetDSType
 */ 
  static HRESULT GetModelerType( const CATIAdpType* iType,
                                 CATIAdpType ** oType );

  /**
  * @deprecated V6R2013
  * @use CATCkeTypeProtectedServices#RetrieveKnowledgeType or CATPLMTypeH
 */ 
 
  static HRESULT GetAuthoringExtType( const CATIAdpEnvironment* iEnv, const CATString & iModeler, const CATString & iExtType, 
	                                  CATIAdpExtType ** oType );



/**
 * @deprecated V6R2013
 */
  static HRESULT GetNLSTag( const CATIAdpType* iType,
                            CATUnicodeString & oTag,
                            CATUnicodeString & oFileName );

/**
  * Retrieves a NLS value for a given type or attribute.
  *
  * <br><b>Role</b>: Retrieves a NLS value for a given element : type or attribute in type. 
  * This value is based on system current langage.
  * The value of an attribute is computed based the given Type.
  * That means that the value of PLM_ExternalID can be different from a type to another based on catalog declarations.
  *
  * @param const CATIAdpType & iType [in]
  *   The type from which you want to retrieve the NLS value.
  * @param const CATString &iAttribute [in]
  *   The attribute name in the type. If set to empty string, the type NLS value will be returned.
  * @param CATUnicodeString oValue [out]
  *   The computed NLS value. The value is always reset by the service.
  *
  * @return
  *     <dt><code>S_OK</code></dt>
  *       <dd> The requested value is returned and is not an empty value.</dd>
  *     <dt>E_FAIL </dt>
	*       <dd>The input type is NULL 
  *        or the attribute is not found in the type 
  *        or the value was not found in NLS catalogs 
  *        or a problem occurs during the operation.</dd>
  *
  */
  static HRESULT GetNLSValue ( const CATIAdpType* iType,
                               const CATString &iAttribute,
                               CATUnicodeString &oValue);

/**
  * Retrieves a NLS value for a given enum key of an attribute.
  *
  * <br><b>Role</b>: Retrieves a NLS value for a enum value of an attribute 
  * This value is based on system current langage.
  *
  * @param const CATIAdpType & iType [in]
  *   The type from which you want to retrieve the attribute.
  * @param const CATString &iAttribute [in]
  *   The attribute name in the type.
  * @param const CATString &iEnumKey [in]
  *   The metadata key of the enum.
  * @param CATUnicodeString oValue [out]
  *   The computed NLS value of the enum. The value is always reset by the service.
  *
  * @return
  *     <dt><code>S_OK</code></dt>
  *       <dd> The requested value is returned and is not an empty value.</dd>
  *     <dt>E_FAIL </dt>
	*       <dd>The input type is NULL 
  *        or the attribute is not found in the type 
  *        or the attribute is not filled by a enumerator
  *        or the value was not found in NLS catalogs 
  *        or a problem occurs during the operation.</dd>
  *
  */
  static HRESULT GetEnumNLSValue ( const CATIAdpType* iType,
                               const CATString &iAttribute,
                               const CATString &iEnumKey,
                               CATUnicodeString &oValue);

/**
  * Checks if an Application Service has been declared and is available from the server.
  *
  * <br><b>Note</b>: The availability depends on the client/server level.
  * <br>If a client has a lower level than the server, it will check availability on its level.
  *
  * @param iApplicationServiceName [in]
  *   The Name of the application service to test.
  *
  * @return
  *     <dt><code>S_OK</code></dt><dd>Application service is available.</dd>
  *     <dt><code>S_FALSE</code></dt><dd>Application service is not available because it has not been declared in a metadata.</dd>
  *     <dt><code>E_NOTIMPL</code></dt><dd>Application service is not available because it has been manually deactivated.</dd>
  *     <dt><code>E_FAIL</code></dt><dd>A problem occurs during the operation.</dd>
  *
  */
  static HRESULT IsApplicationServiceAvailable ( const char* iApplicationServiceName);

};

//-----------------------------------------------------------------------

#endif
