
//===================================================================

//===================================================================
// CATCAfrEditorControllerBase.cpp
// Header definition of class CATCAfrEditorControllerBase
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/01/11 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATCAfrEditorControllerBase_H
#define CATCAfrEditorControllerBase_H

#include "CATAfrItf.h"
#include "CATAdapterCAfrComponentController.h"
//---------------------------------------------------------------------- System
#include "CATUnicodeString.h"
#include "CATString.h"
#include "CATBaseUnknown_WR.h"
//--------------------------------------------------------------- AfrInterfaces
#include "CATICAfrComponent.h"
#include "CATICAfrList.h"
#include "CATICAfrComponentElement.h"

//-----------------------------------------------------------------------
/**
* Base class to manage interactions from a CATCAfrMenu with RepresentationType = AfrEditor.
* With this controller you can manage auto completion by using CATCAfrList.
* Derive this class to manage your own behaviour.
* How to use it :
* <p> You Should declare your menu in your xml file. Like this
* <pre>
*   ...
    &lt;CATCAfrMenu Name="MyMenuEditor" RepresentationType="AfrEditor"/&gt;
*   ...
* </pre>
*</p>
*<code>
*  //CATMyEditorController derives from CATCAfrEditorControllerBase
*  //Create the controller with the id of the menu. Make sure that your menu is well construct.
*  CATMyEditorController * pController = new CATMyEditorController("MyMenuEditor");
*  //Register the controller to the menu specified in the constructor
*  HRESULT hr = pController->Register();
*  //Do not forget to release the pointer (if registering fails, your object will be destroyed, 
*  // otherwise your controller will be destroyed when the menu is destroyed)
*  pController->Release();

*</code>
*/
class ExportedByCATAfrItf CATCAfrEditorControllerBase: public CATAdapterCAfrComponentController

{
CATDeclareClass;

public:

// Standard constructors and destructors
// -------------------------------------
CATCAfrEditorControllerBase (const CATString & idMenuEditor);
virtual ~CATCAfrEditorControllerBase ();

/**
* Static method to allow retrieving the text displayed in element of the auto-completion list.
*/
static CATUnicodeString GetDisplayText(const CATICAfrComponentElement_var & i_spElement);

  /** Callback method when action is performed on the editor and completion list 
  * Do not override this method to not break the working base.
  */
  virtual HRESULT ComponentAction( CATCAfrComponentControllerArg* ipControllerArg ) ;

  
  /**
  *
  * <br><b>Role</b>: Register the controller to the editor component. 
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> the registering is succesful. You can release your controller. It will be destroyed when the editor is deleted.
  * <dt><code>E_FAIL</code> <dd> the registering has failed. Release your controller will destroy it.
  * </dl>
  */
  HRESULT Register() ;

  /**
  * Returns the component used for auto completion list. This is a component that implements CATICAfrList (CATCAfrList)
  * @return the list to manage auto completion list
  * 
  */
  CATICAfrList_var GetCompletionList() const ;


      /**
  *
  * <br><b>Role</b>: Gets the menu editor component.
  * 
  * @return the menu editor component.
  * 
  */
   CATICAfrComponent_var GetMenuEditor() const;


  /**
  *
  * <br><b>Role</b>: Sets the text in the editor.
  * @param i_text the new text in the editor
  * 
  * 
  */
  virtual void SetEditorText(const CATUnicodeString & i_text);

  /**
  *
  * <br><b>Role</b>: Gets the text in the editor.
  * 
  * @return the text in the editor.
  * 
  */
  virtual CATUnicodeString GetEditorText() const;


    /**
  *
  * <br><b>Role</b>: Sets the place holder text in the editor.
  * @param i_text the new place holder text in the editor
  * 
  * 
  */
  virtual void SetEditorPlaceholderText(const CATUnicodeString & i_text);

  /**
  *
  * <br><b>Role</b>: Gets the place holder text in the editor.
  * 
  * @return the place holder text in the editor.
  * 
  */
  virtual CATUnicodeString GetEditorPlaceholderText() const;

    /**
  *
  * <br><b>Role</b>: Sets the icon name for action in the editor.
  * @param i_text the new icon name for action in the editor
  * 
  * 
  */
  virtual void SetEditorIconAction(const CATUnicodeString & i_text);

    /**
  *
  * <br><b>Role</b>: Gets the help bubble text for the editor.
  * 
  * @return the help bubble text for the editor.
  * 
  */
  virtual CATUnicodeString GetEditorHelp() const;

    /**
  *
  * <br><b>Role</b>: Sets the help bubble text for the editor.
  * @param i_text the new help bubble text for the editor.
  * 
  * 
  */
  virtual void SetEditorHelp(const CATUnicodeString & i_text);

      /**
  *
  * <br><b>Role</b>: Gets the long help bubble text for the editor.
  * 
  * @return the long help bubble text for the editor.
  * 
  */
  virtual CATUnicodeString GetEditorLongHelp() const;

    /**
  *
  * <br><b>Role</b>: Sets the long help bubble text for the editor.
  * @param i_text the new long help bubble text for the editor.
  * 
  * 
  */
  virtual void SetEditorLongHelp(const CATUnicodeString & i_text);


      /**
  *
  * <br><b>Role</b>: Gets the help bubble text for the button action of editor.
  * 
  * @return the help bubble text for the button action of editor.
  * 
  */
  virtual CATUnicodeString GetEditorActionHelp() const;

    /**
  *
  * <br><b>Role</b>: Sets the help bubble text for the button action of editor.
  * @param i_text the new help bubble text for the button action of editor.
  * 
  * 
  */
  virtual void SetEditorActionHelp(const CATUnicodeString & i_text);

      /**
  *
  * <br><b>Role</b>: Gets the long help bubble text for the button action of editor.
  * 
  * @return the long help bubble text for the button action of editor.
  * 
  */
  virtual CATUnicodeString GetEditorActionLongHelp() const;

    /**
  *
  * <br><b>Role</b>: Sets the long help bubble text for the button action of editor.
  * @param i_text the new long help bubble text for the button action of editor.
  * 
  * 
  */
  virtual void SetEditorActionLongHelp(const CATUnicodeString & i_text);
  /**
  *
  * <br><b>Role</b>: Gets the icon name for action in the editor.
  * 
  * @return the icon name for action in the editor.
  * 
  */
  virtual CATUnicodeString GetEditorIconAction() const;
  
  /**
  *
  * <br><b>Role</b>: Sets the editor focus
  * 
  * 
  */
  virtual void SetEditorFocus();
      /**
  *
  * <br><b>Role</b>: Sets whether the editor is read only or not .
  * @param i_flag the flag whether the editor is read only or not .
  * 
  * 
  */
  virtual void SetEditorReadOnlyFlag(const CATBoolean & i_flag);

  /**
  *
  * <br><b>Role</b>: Gets the icon name for action in the editor.
  * 
  * @return TRUE the editor is read only: FALSE, the editor is editable.
  * 
  */
  virtual CATBoolean GetEditorReadOnlyFlag() const;

        /**
  *
  * <br><b>Role</b>: Sets whether the editor is enable or not .
  * @param i_flag the flag whether the editor is anable or not .
  * 
  * 
  */
  virtual void SetEditorEnableFlag(const CATBoolean & i_flag);

  /**
  *
  * <br><b>Role</b>: Gets the enable state of the editor.
  * 
  * @return TRUE the editor is enable: FALSE, the editor is disable.
  * 
  */
  virtual CATBoolean GetEditorEnableFlag() const;


  
/**
*
* <br><b>Role</b>: Sets the visibilty of the completion list
* @param i_visibleFlag TRUE, the list will be visible, FALSE otherwise
* 
* 
*/
virtual void SetVisibilityList(const CATBoolean & i_visibleFlag);



/**
*
* <br><b>Role</b>: Returns the visibility list
* @param 
* 
* @return TRUE, the list is visible, FALSE otherwise
* 
*/
virtual CATBoolean GetVisibilityList() const;


  /**
  *
  * <br><b>Role</b>: This method is called when the controller is registered the first time to the editor component.
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> 
  * <dt><code>E_FAIL</code> <dd>
  * </dl>
  */
  virtual HRESULT InitEditor() = 0;

  /**
  *
  * <br><b>Role</b>: This method is called when the editor is activated, either by pressing enter key or either by pushing the editor button
  * @param i_text the current text in the editor
  * 
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>
  * <dt><code>E_FAIL</code> <dd>
  * </dl>
  */
  virtual HRESULT OnEditorActivated(const CATUnicodeString & i_text) = 0;

  /**
  *
  * <br><b>Role</b>: This method is called each time the user taps text in the editor.
  * To display the auto-completion list when the the user taps text, make sure that this method returns S_OK
  * otherwise the list won't be display. It can be interesting to not consistently display the list when the user taps text. 
  * For example, we display the list only when the count of characters is greater than 3 ?
  * @param i_text the current text in the editor
  * 
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>: the auto-completion list will be displayed
  * <dt><code>E_FAIL</code> <dd>: the auto-completion list will not be displayed
  * </dl>
  */
  virtual HRESULT OnEditorEdited(const CATUnicodeString & i_text) = 0;

    /**
  *
  * <br><b>Role</b>: This method is called each time the user select one or more items in the auto-completion list.
  * The auto-completion list will be hidden after this call whatever the result.
  * @param i_text the current text in the editor
  * 
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>: Succesful
  * <dt><code>E_FAIL</code> <dd>: Error
  * </dl>
  */
  virtual HRESULT OnEditorSelectedItemsInList( const CATLISTV(CATBaseUnknown_var)& i_list) = 0;

    /**
  *
  * <br><b>Role</b>: This method is called each time the completion list is hidden (for
  *  example, when the editor loses the focus).<br/>
  * You can clear your list at this time, for instance.
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>: Succesful
  * <dt><code>E_FAIL</code> <dd>: Error
  * </dl>
  */
  virtual HRESULT OnCompletionListHidden() = 0;




  /**
  *
  * <br><b>Role</b>: This method is called each time the user select the text in the editor but  
  *  also the first time the user click on the editor.<br/>
  * You can clear your list at this time, for instance.
  * @param i_text the current text in the editor
  * 
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>: the auto-completion list will be displayed
  * <dt><code>E_FAIL</code> <dd>: the auto-completion list will not be displayed
  * </dl>
  */
  virtual HRESULT OnEditorSelectedText(const CATUnicodeString & i_text) = 0;


  
  
  /**
  *
  * <br><b>Role</b>: This method is called each time the editor gets focus
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd>
  * <dt><code>E_FAIL</code> <dd>
  * </dl>
  */
  virtual HRESULT OnEditorGetFocus() ;

private:
// Copy constructor and equal operator
// -----------------------------------
CATCAfrEditorControllerBase (CATCAfrEditorControllerBase &);
CATCAfrEditorControllerBase& operator=(CATCAfrEditorControllerBase&);


void ClearMemberVar();
CATBaseUnknown_WR       _wrCompletionList;
CATBaseUnknown_WR       _wrMenuEditor;
CATString               _idMenuEditor;
CATUnicodeString        _placeHolderInit;
CATBoolean              _readOnlyFlagInit;
CATBoolean              _focusFlagInit;
};

//-----------------------------------------------------------------------

#endif

