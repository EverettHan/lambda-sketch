//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2014/05/09
//===================================================================
// VPMIDicGenericClass.cpp
// Header definition of class VPMIDicGenericClass
//===================================================================
//
// Usage notes: used to introspect the different Generic Class (Class, RelationClass, Extension)
//-- It provides
//-- The access to customer extensibility and specializable aspect of the generic class
//-- The access to the generic class nature (discipline or not)
//-- The access to volatiles
//-- The access to paths
//-- The access to unique keys
// - The associated procedures (for export briefcase completion for example)
// - The access to masks 
// - a service to access the list of extensions of this generic class
//
//===================================================================
//  2014/05/09 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef VPMIDicGenericClass_H
#define VPMIDicGenericClass_H
#include "EnoDicDELETE.h"
#include "VPMIDicInterfaces.h"

#include "VPMIDicWithAttributes.h"

#include "CATString.h"
#include "CATLISTPIUnknown.h"
#include "CATIAV5Level.h"

#include "VPMDicCAADERIVABLE.h"
#include "VPMDicPROTECTION.h"
#include "VPMDicCUSTOMEREXPOSITION.h"
#include "VPMDicCUSTOMEREXPOSITIONPURPOSE.h"

#include "CATListOfVPMIDicService.h"

#include "CATLISTV_VPMIDicClass_var.h"
#include "CATLISTV_VPMIDicElement_var.h"
#include "CATLISTV_VPMIDicExtension_var.h"
#include "CATLISTV_VPMIDicSimple_var.h"
#include "CATLISTV_VPMIDicSubRelationship_var.h"
#include "CATLISTV_VPMIDicUniqueKey_var.h"
#include "CATLISTV_VPMIDicVolatile_var.h"

class CATUnicodeString;
class VPMIDicAttribute;
class VPMIDicClass_var;
class VPMIDicGenericClass_var;
class VPMIDicIdentifierSet;
class VPMIDicInterface;
class VPMIDicInterfaceImplementation;
class VPMIDicMask;
class VPMIDicPackage;
class VPMIDicProcedure;
class VPMIDicRelationClass_var;
class VPMIDicRelationship;
class VPMIDicSimple;
class VPMIDicUnique;
class VPMIDicVolatile;
class VPMIDicVolatile_var;

extern ExportedByVPMIDicInterfaces  IID IID_VPMIDicGenericClass ;


class ExportedByVPMIDicInterfaces VPMIDicGenericClass: public VPMIDicWithAttributes 
{
  CATDeclareInterface;

public:
  
  //---------------------------------------------------------------------
  // Reading characteristics of the generic class
  //---------------------------------------------------------------------
 
  /**
  * Indicates if this generic class can be extended with a Customer Extensions in the data customization console. 
  * Is not meaningful on extensions
  * Corresponds to CustomerExtensible keyword in metadata
  */
  virtual boolean IsCustomerExtensible () = 0;

  /**
  * Indicates if this class can be derived by customer in Unified typing mode, through the data customization console.
  * Corresponds to Specializable keyword in metadata
  */
  virtual boolean IsSpecializable () const = 0;

  /**
  * Indicates if this generic class is an applicative sub type, as opposed to a root modeler type.
  * Corresponds to Discipline keyword in metadata
  */
  virtual boolean IsDiscipline () const = 0;

  /**
  * Is this generic class a customer generic class (introduced in unified typing with data model customization tool) ? 
  * More precisely, does it belong to a specialization package?
  * As a consequence, it returns true for Class specialization, RelationClass specialization, Extension Specialization & Customer Extensions
  */

  virtual boolean IsSpecialization () const = 0;

  //---------------------------------------------------------------------
  // Reading sub characteristics: volatiles, paths
  //---------------------------------------------------------------------

  /**
  * Get a Volatile attribute of the current Class by its name.
  * Corresponds to Volatile keyword in metadata
  * @oVolatile the Volatile defined in the current generic Class (or one of its super Class)
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetVolatile ( const CATUnicodeString& iName, VPMIDicVolatile_var & oVolatile ) = 0;


  /**
  * Get the list of Volatile elements of the Class (possibly restricted to those locally declared into the current Class).
  * Corresponds to Volatile keyword in metadata
  * @param iWithInherited  with or without elements declared in super Classes.
  * @param oSimples        List of Volatile elements of the current Class.
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetVolatiles ( CATLISTV_VPMIDicVolatile_var & oVolatiles, boolean iWithInherited = CATTrue ) = 0;

  /**
  * Get the list of Volatile and Simples elements of the Class (possibly restricted to those locally declared into the current Class).
  * Corresponds to Volatile keyword in metadata
  * @param iWithInherited  with or without elements declared in super Classes.
  * @param oSimplesAndVolatiles        List of Volatile elements of the current Class.
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetSimplesAndVolatiles ( CATLISTV_VPMIDicElement_var & oSimplesAndVolatiles, boolean iWithInherited = CATTrue ) = 0;


  /**
  * Get either a Simple or a Volatile attribute of the current Class/Extension/RelationClass by its name.
  * Corresponds to Volatile and Simple keyword in metadata
  * @oElement the Simple/Volatile defined in the current Class (or one of its super Class)
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetSimpleOrVolatile ( const CATUnicodeString & iName, VPMIDicElement_var & oElement ) = 0;

  /**
  * Get the Path by its name
  * Corresponds to Path keyword in metadata
  * @param iName name of path
  * @param oDicPath the path in output
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
#if defined(REMOVE_USELESS_CALLS)

#pragma message ("WARNING"   " VPMIDicGenericClass::GetSubRelationship should be replaced by VPMIDicGenericClass::GetPath.")

#else
  virtual HRESULT GetSubRelationship ( const CATUnicodeString &iName,VPMIDicSubRelationship_var &oDicPath ) =0;
#endif

  /**
  * Get the list of paths of the current Class.
  * Corresponds to Path keyword in metadata
  * @param oPaths List of paths of the current Class.
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
#if defined(REMOVE_USELESS_CALLS)

#pragma message ("WARNING"   " VPMIDicGenericClass::GetSubRelationship should be replaced by VPMIDicGenericClass::GetPath.")

#else
  virtual HRESULT GetLocalSubRelationships ( CATLISTV_VPMIDicSubRelationship_var & oPaths, boolean iWithInherited = CATTrue ) = 0;
#endif


  //---------------------------------------------------------------------
  // Reading related concepts: extensions and unique keys
  //---------------------------------------------------------------------

  /**
  * Get the list of UniqueKeys referring to the current Class.
  * Corresponds to UniqueKey keyword in metadata
  * @param oListOfUniqueKey unique keys in output
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetUniqueKeys ( CATLISTV_VPMIDicUniqueKey_var& oUniqueKeys, const boolean iLocalOnly = CATFalse  ) = 0;
 /**
  * Get the list of Extensions defined on the current generic class.
  * It corresponds to the extensions that are declaring this particular generic class in its ScopeNames  
  * FIXME: Will it find the extensions that are defined on one of its super element
  * @param oExtensions list of extensions in ouput
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetExtensions ( CATLISTV_VPMIDicExtension_var & oExtensions ) = 0;


  //---------------------------------------------------------------------
  // Procedures
  //---------------------------------------------------------------------

 /**
  *   Return for this Class the Procedure associated to this Usage.
  *   Corresponds to Method and ProcedureForUsage keyword in metadata
  *   FIXME: does it take inheritance into consideration
  *   @param iMethodTypeName   
  *   @param iMethodUsageName   The name of the Usage
  *   @param oppProcedure       The Procedure  [out, CATBaseUnknown#Release]
  *   @return
  *      E_FAILED if error
  *      S_OK else
  *  HRESULT getProcedureForMethodUsage(const CATString & iMethodUsageName,VPMIDicProcedure** oppProcedure ) = 0;
  * </pre>
  * </dl>
  */
  virtual HRESULT getProcedureForMethodUsage(const CATString & iMethodTypeName,const CATString & iMethodUsageName,VPMIDicProcedure** oppProcedure ) = 0;

  /**
  * <dl>
  * <dt>
  * <pre>
  *
       *   return true if the Class has a Method that implements the MethodType with the name methodTypeName. Otherwise return false
       *   @param iMethodTypeName
       *      The name of MethodType
       *   @param oIsSupported
       *   @return
       *      E_FAILED if error
       *      S_OK else
  *   Corresponds to Method and ProcedureForUsage keyword in metadata
  *   FIXME: does it take inheritance into consideration
  * HRESULT supportMethodType(const CATString & iMethodTypeName,boolean oIsSupported ) = 0;
  * </pre>
  * </dl>
  */
  virtual HRESULT supportMethodType(const CATString & iMethodTypeName,boolean & oIsSupported ) = 0;


  

  //---------------------------------------------------------------------
  // Masks
  //---------------------------------------------------------------------

  /**
  * Build the default Mask for the current Class.
  * FIXME: should we deprecate this method 
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT BuildDefaultMask   ( ) = 0;

  /**
  * Get the Mask for a given Operation.
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded, the returned Mask is explicitely defined for the given Operation.</li>
  *    <li>S_FALSE  Operation succeeded, however there is no Mask explicitely defined for the given Operation, therefore the default Mask is returned.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetMaskForOperation ( const CATUnicodeString & iOperation, VPMIDicMask ** oDicMask ) = 0;


  /**
  * Indicates if the mask exist for a given operation
  */
  virtual HRESULT HasMaskForOperation ( const CATUnicodeString & iOperation, boolean &oHasMask ) const = 0;

  /**
  * Get the list of VPMIDicAttributes which are involved by the given Operation
  * FIXME: should be improved
  * @param pOperationName the name of the Operation
  * @param oAttributeI List of pointers to VPMIDicAttributes
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT getAttributesForOperation(CATString pOperationName,CATLISTP(IUnknown) * oAttributeI) = 0;


  /**
  * Get the list of all the Masks referring to the current Class.
  * FIXME: should be improved
  * @param oListOfMasks
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetMasks           ( CATLISTP(IUnknown) * oListOfMasks ) = 0;


 


  //---------------------------------------------------------------------
  // Reading characteristics of the GenericClass: old methods (still valid) that make sense in former typing mode only
  //---------------------------------------------------------------------
  /**
  * Is this generic class a customer generic class derived from a DS class (former typing)?
  * Does it belong to a custo package?
  */
  virtual boolean IsCusto () const = 0;

  /**
  * Get whether the current Class is derivable from a CAA standpoint / Former typing standpoint
  * Nb: since only "Yes" or "No" values are actually used to valuate the CAA_Derivable tag
  * this property has been changed to a boolean, eventhough GetCAADerivable remains unchanged.
  * However IsCAADerivable is easier to use.
  * Corresponds to the property DMCDerivable
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual boolean IsCAADerivable ( ) = 0;

  /**
  * Get the Name of the PLMCore Class from which the current Class inherits.
  * @param oCoreTypeName Name of the PLMCore Class in output (should be either PLMCoreInstance, PLMCoreRepInstance, PLMCoreReference, PLMCoreRepReference, PLMPort or PLMConnection)
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed if the class is not one of these core types .</li>
  *    </ul>
  */
  virtual HRESULT GetPLMCoreTypeName ( CATUnicodeString &oCoreTypeName ) = 0;

  /**
  * Retrieves the CAAExposition mode of the Class (3DXML 4.3)
  * Corresponds to the CAAExposition keyword which is a legacy keyword
  * @param oCAAExposition : the CAAExposition mode, either "L0" or "L1"
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetCAAExposition ( VPMDicCAAEXPOSITION * oCAAExposition ) = 0;

  /**
  * States whether the given Discipline is valid/available for the current Class.
  * Disciplines as such (declared as <Discipline) are not supported anymore
  * However this service verifies that the string in input can be used to valuate the V_discipline attribute 
  * @param iDisciplineName Name of the discipline.
  * @param oIsAuthorized.
  *    <ul>
  *    <li>TRUE    The Discipline is available for the current Class.</li>
  *    <li>FALSE   The Discipline is NOT available for the current Class.</li>
  *    </ul>
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT IsDisciplineAuthorized ( const CATUnicodeString & iDisciplineName, boolean & oIsAuthorized ) = 0;
 
  //---------------------------------------------------------------------
  // Access to inheritance. FIXME: should be moved to VPMIDicWithAttributes and work on all genericClasses
  //---------------------------------------------------------------------
  
  /**
  * Get the list of super Classes of the current Class. Works only on Class. We recommend to avoid using this method and prefer GetSuperElement
  * The resulting list is ordered from base to top.
  * @param oClasses 
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetSuperClasses ( CATLISTV_VPMIDicClass_var & oClasses ) = 0;
  

  // ---------------------------------------------------------------------
  // ---------------------------------------------------------------------
  // Methods to modify dictionary should never be user, except by providers
  // ---------------------------------------------------------------------
  // ---------------------------------------------------------------------
  /**
  * Sets the CAAExposition mode of the Class.
  * @param iCAAExposition : the CAAExposition mode, either "L0" or "L1"
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT SetCAAExposition ( const VPMDicCAAEXPOSITION iCAAExposition ) = 0;

  /**
  * Create a Simple element in the current Class.
  * @param iName Name ot the Simple
  * @param iUuid Uuid of the Simple
  * @param oSimple the Simple [out, CATBaseUnknown#Release]
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT CreateSimple       ( const CATString * iName, const CATDbBinary * iUuid, VPMIDicSimple** oSimple ) = 0;

  //---------------------------------------------------------------------
  // Deprecated methods
  //---------------------------------------------------------------------

  /** 
  * Name of the basics attributes shared by all generic class
  */
#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetModifiedAttributeName should be replaced by CATCkePLMDefinitions::Attribute_modified.")

#else
  virtual HRESULT GetModifiedAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetOrganizationAttributeName should be replaced by CATCkePLMDefinitions::Attribute_organization.")

#else
  virtual HRESULT GetOrganizationAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetOriginatedAttributeName should be replaced by CATCkePLMDefinitions::Attribute_originated.")

#else
  virtual HRESULT GetOriginatedAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetOwnerAttributeName should be replaced by CATCkePLMDefinitions::Attribute_owner.")

#else
  virtual HRESULT GetOwnerAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetProjectAttributeName should be replaced by CATCkePLMDefinitions::Attribute_project.")

#else
  virtual HRESULT GetProjectAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetReservedAttributeName should be replaced by CATCkePLMDefinitions::Attribute_reserved.")

#else
  virtual HRESULT GetReservedAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetReservedByAttributeName should be replaced by CATCkePLMDefinitions::Attribute_reservedby.")

#else
  virtual HRESULT GetReservedByAttributeName ( CATString & oAttributeName ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetSuperGenericClass should be replaced by VPMIDicWithAttributes::GetSuperElement.")

#else
  /**
  * Get the super generic Class of the current generic Class.
  * @param oSuperGenericClass 
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */

  virtual HRESULT GetSuperGenericClass ( VPMIDicGenericClass_var & oSuperGenericClass ) const = 0;

#endif 

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::getProcedureForMethodUsage should be replaced by VPMIDicGenericClass::getProcedureForMethodUsage with 3 arguments.")

#else
/**
  * @deprecated
  */
  virtual HRESULT getProcedureForMethodUsage(const CATString & iMethodUsageName,VPMIDicProcedure** oppProcedure ) = 0;
#endif 

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetMask should be replaced by VPMIDicGenericClass::GetMaskForOperation.")

#else
/**
  * Get the Mask referring to the current Class for a given operation.
  * @param iOperation Name of the operation
  * @param oDicMask [out, CATBaseUnknown#Release]
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetMask            ( const CATUnicodeString *iOperation, VPMIDicMask** oDicMask ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetMask should be replaced by VPMIDicGenericClass::HasMaskForOperation.")

#else
  /**
  * Check whether a Mask refers to the current Class for a given operation.
  * @param iOperation Name of the operation
  * @param oHasMask
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT HasMask            ( const CATUnicodeString *iOperation, boolean * oHasMask ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetMask should be replaced by VPMIDicGenericClass::GetMaskForOperation.")

#else
  /*
   * @nodoc
  */
  virtual HRESULT GetMask ( const CATUnicodeString & iOperation, VPMIDicMask ** oDicMask ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING"   " VPMIDicGenericClass::GetMask should be replaced by VPMIDicGenericClass::HasMaskForOperation.")

#else
  /**
  * @nodoc
  */
  virtual HRESULT HasMask ( const CATUnicodeString & iOperation, boolean * oHasMask ) const = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  #pragma message ("WARNING "   " VPMIDicGenericClass::GetSubClasses should be replaced by VPMIDicGenericClass::GetSubClasses with precise type.")

#else
  /**
  * @deprecated
  */
  virtual HRESULT GetSubClasses ( CATLISTP(IUnknown) * oListOfClasses ) = 0;
#endif

#if defined(REMOVE_USELESS_CALLS)

  //#pragma message ("WARNING "   " VPMIDicGenericClass::GetSuperClasses should be replaced by VPMIDicGenericClass::GetSuperClasses with precise type.")

#else
  /**
  * FIXME
  */
  virtual HRESULT GetSuperClasses (CATLISTP(IUnknown) *oListOfSuperClasses ) = 0;
#endif
#if defined(REMOVE_USELESS_CALLS)

  //  #pragma message ("WARNING "   " VPMIDicGenericClass::GetSubClasses should be replaced by VPMIDicWithAttributes::GetSubElements with precise type.")

#else
  /**
  * Get the list of sub-Classes of the current Class. Works only on Class.
  * @param oClasses
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetSubClasses ( CATLISTV_VPMIDicClass_var & oClasses ) = 0;
#endif

  #if defined(REMOVE_USELESS_CALLS)

#pragma message ("WARNING "   " VPMIDicGenericClass::GetVolatiles should be replaced by VPMIDicGenericClass::GetVolatiles with the right arguments.")

#else
    /**
  * Get the list of Volatile elements of the current Class.
  * @param oListOfDicVolatiles
  * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT GetVolatiles   ( CATLISTP(IUnknown) * oListOfDicVolatiles, boolean iWithInherited = CATTrue ) = 0;
#endif
  };

//-----------------------------------------------------------------------
CATDeclareHandler( VPMIDicGenericClass, VPMIDicWithAttributes );

#endif
