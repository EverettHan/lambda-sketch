//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/08/11
//===================================================================
// CATVidCtlBaseViewItem.h
// Header definition of class CATVidCtlBaseViewItem
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/08/11 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidCtlBaseViewItem_H
#define CATVidCtlBaseViewItem_H

#include <CATSYPWRefMethEventHandler.h>
#include <CATVid.h>
#include <CATVidColor.h>
#include <CATVidCtl.h>
#include <CATVidCtlAbstractItemsView.h>
#include <VisuDialog.h>
class l_CATVidCtlViewRepresentation;
class CATSYPEventHandler;
class CATSysWeakRef;
class CATVidGPSquare;
class CATVidLaySideAttach;
class CATSYPTemplateData;
class CATSYPTrigger;
class CATVidLayLayer;
class CATVidGPNinePatchSquare;
class CATVidGridViewColumn;

/**
 * Base class to define a control that must be displayed into an items view
 * control. An items view control is a control responsible to display a
 * collection of child controls (like a listview or a treeview).
 *
 * This class aims to embed the view of the data to display into the items
 * view control and also to capture some events to make possible the interaction
 * between users and each view item displayed by the items view control.
 */
class ExportedByVisuDialog CATVidCtlBaseViewItem : public CATVidCtl
{
  CATDeclareClass;
public:
  static const CATVidColor sViewItem_SelectionBorder;
  static const CATVidColor sViewItem_Selection;
  static const CATVidColor sViewItem_PreSelectionBorder;
  static const CATVidColor sViewItem_PreSelection;
  static const CATVidColor sViewItem_CurrentItem;

public:
  /** Default constructor */
  CATVidCtlBaseViewItem (CATVidCtlAbstractItemsView & i_view);
  /** Destructor */
  virtual ~CATVidCtlBaseViewItem ();

  virtual void Reset();

  /**
   * Indicates whether this view item is checked or not.
   *
   * @return 1 if the view item is checked, 0 otherwise.
   */
  int GetCheckedFlag();

  /**
   * Set the check state of the item and send check or uncheck event.

   * @param i_checked 0 if the view item is unchecked, 1 otherwise.
	 */
	void SetCheckedFlag(int i_checked);

  /**
   * Indicates whether this view item is mixed or not.
   *
   * @return 1 if the view item is mixed, 0 otherwise.
   */
	int GetMixedFlag();

  /**
   * Set the mixed state of the item and send.

   * @param i_mixed 1 if the view item is mixed, 0 otherwise.
	 */
	void SetMixedFlag(int i_mixed);

  /**
   * Get the embedded widget displayed by this view item.
   * The content of a view item corresponds to the view of the data
   * displayed by it.
   *
   * @return a pointer on the widget displayed by the view item, or
   * NULL if the view item is empty.
   */
  CATVidWidget * GetContent() const;

  /**
   * Set the embedded widget displayed by the view item.
   * The content of a view item corresponds to the view of the data
   * displayed by it.
   *
   * @param i_pContent the widget to display inside the view item.
   */
  void SetContent(CATVidWidget * i_pContent);

  /**
   * Indicates whether this view item is selected or not.
   *
   * @return 1 if the view item is selected, 0 otherwise.
   */
  int GetSelectedFlag();

  void SetSelectedFlag(int i_selectedFlag);

  /**
   * Get the value of the flag that indicates whether this item is the current
   * one or not.
   *
   * @returns the flag indicating whether this item is the current one or not.
   */
  int GetCurrentItemFlag() const;
  void SetCurrentItemFlag(int i_currentItemFlag);

  /**
   * Indicates whether this view item is pre-selected or not.
   *
   * @return 1 if the view item is pre-selected, 0 otherwise.
   */
  int GetPreSelectedFlag() const;

  /**
   * Set the pre-selected flag value.
   *
   * @param i_flag: the new value given to the pre-selected flag.
   */
  void SetPreSelectedFlag(int i_flag);

  /**
   * Get the background color of the item.
   *
   * This color is usually either a transparent color (when the item is not
   * selected) or the color associated to the SelectionColor property (when
   * the item is selected).
   *
   * @returns the current background color used for this item.
   */
  CATVidColor GetBackgroundColor() const;

  /**
   * Set the background color of the item.
   *
   * @see CATVidCtlBaseViewItem::GetBackgroundColor for more information.
   *
   * @param i_backgroundColor the new color to use for the background of this
   * item.
   */
  void SetBackgroundColor(const CATVidColor & i_backgroundColor);


   CATVidColor GetBorderColor() const;
   void SetBorderColor(const CATVidColor & i_borderColor);

  /**
   * Get the background color of the item.
   *
   * This color is usually either a transparent color (when the item is not
   * selected) or the color associated to the SelectionColor property (when
   * the item is selected).
   *
   * @returns the current background color used for this item.
   */
  CATVidColor GetCustomColor() const;

  /**
   * Set the background color of the item.
   *
   * @see CATVidCtlBaseViewItem::GetBackgroundColor for more information.
   *
   * @param i_backgroundColor the new color to use for the background of this
   * item.
   */
  void SetCustomColor(const CATVidColor & i_customColor);
  /**
   * Set the SelectableFlag to the given value.
   *
   * @param i_selectableFlag the value for the SelectableFlag
   */
  void SetSelectableFlag(int i_selectableFlag);
  /**
   * Get the value of the SelectableFlag.
   *
   * @return the value for the SelectableFlag
   */
  int GetSelectableFlag() const;
  /**
   * Set the ItemPickableFlag to the given value.
   *
   * @param i_itemPickableFlag the value for the ItemPickableFlag property.
   */
  void SetItemPickableFlag(int i_itemPickableFlag);
  /**
   * Get the value of the ItemPickableFlag property.
   *
   * @return the value for the ItemPickableFlag property.
   */
  int GetItemPickableFlag() const;
  /**
   * @c return 1 if the "drop before item" indicator must be displayed in the 
   * view of the list item, 0 if it must be hidden.
   *
   * @see CATVidDnD#DropBetween
   */
  int GetDnDBeforeFlag() const;
  /**
   * @param i_flag the new display state of the "drop before item" indicator.
   *
   * @see #GetDnDBeforeFlag
   */
  void SetDnDBeforeFlag(int i_flag);
  /**
   * Used for the last item currently visible, as there is one more possible 
   * "drop between" indicator than the number of visible items.
   *
   * @c return 1 if the last "drop after item" indicator must be displayed in 
   * the view of the list item, 0 if it must be hidden. 
   */
  int GetDnDAfterFlag() const;
  /**
   * @param i_flag the new display state
   *
   * @see #GetDnDAfterFlag
   */
  void SetDnDAfterFlag(int i_flag);
  /**
   * @c return 1 if the "drop on item" indicator must be displayed in the view 
   * of the item, 0 if it must be hidden.
   */
  int GetDnDOnFlag() const;
  /**
   * @param i_flag the new display state
   *
   * @see #GetDnDOnFlag
   */
  void SetDnDOnFlag(int i_flag);

  int GetBottomBorderFlag() const;
  void SetBottomBorderFlag(int i_flag);

  void ConnectContextMenu(l_CATVidCtlViewRepresentation &i_letter);
  void HandleUpdateContextMenu(CATBaseUnknown * i_pSender, CATSYPEventArgs * i_pArgs);

  void UpdateLook(int iForUnselection = 0);

  CATUnicodeString GetViewColumnID();

	CATVidCtlAbstractItemsView * GetView();

	virtual void RequestDelayedDestruction();

  void SetExpandOnCellClickFlag(int i_expandOnCellClickFlag);
  int GetExpandOnCellClickFlag() const;

  /**
	* Processes only the double click event to indicate to the treeview control
	* that a user clicked this item. This triggers a collapse/expand action on the
	* tree view item.
	*
	* @param i_pSender object that has sent this event
	*
	* @param i_pArgs data associated to this event
	*/
  void HandleDoubleClick(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);

  /**
	* Get the @c DoubleClick event.
	*
	*
	* @par EventProperties
	*   - Name: @c "DoubleClick"
	*   - Type of propagation: @c NoPropagation
	*   - Type of argument: @ref CATSYPEventArgs
	*
	* @return the event instance. @c AddRef has NOT been called on
	* the returned pointer.
	*/
	static CATSYPEvent *DoubleClick();

  /**
   * Processes expansion event for a treeview item when the user clicked on the plus/minus icon.
   *
   * @param i_pSender object that has sent this event
   *
   * @param i_pArgs data associated to this event
   */
  virtual void HandleExpansion(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);

	/*
	* Get the editable flag value. Allow displaying (TRUE) or not (FALSE) the editable feedback in cell top left corner. This is under DisplayEditableCellFeedbackFlag
	* option on Tree/list view (must be set to true.)
	*/
	CATBoolean GetEditableFeedbackFlag();

	/*
	* Update the R.O EditableFeedbackFlag flag.
	*/
	void UpdateCellEditableFeedbackFlag();

  private:
  // Copy constructor and assignement operator are disabled
  CATVidCtlBaseViewItem (CATVidCtlBaseViewItem &);
  CATVidCtlBaseViewItem& operator=(CATVidCtlBaseViewItem&);
  void UpdateCustomSelectionWidget();
private:
  void UpdateDnDFeedback();
private:
    void UpdateBottomBorderFlag();
		void ApplyCheckedFlag(int i_checked);
    CATSYPWRefMethEventHandler<CATVidCtlBaseViewItem, CATSYPEventArgs> *_pExpandOnCellClickFlagHandler;
		CATVidGridViewColumn * GetGridViewColumn();

protected:
    void BuildOverlay();

    /** The embedded widget to display inside the CATVidCtlBaseViewItem */
    CATVidWidget *_pContent;

    CATVid::SelectionFeedback _selectionFeedback;

    /** 
   * flag that indicates whether this item is selected or not.
   * 1 means that the item is selected.
   * 0 means that the item is not selected.
   */
    int _selectedFlag;

    /**
   * flag that indicated whether this item is currently under the mouse pointer
   * or not.
   * 1 means that the item is currently pre-selected
   * 0 means that the item is not currently pre-selected
   */
    int _preSelectedFlag;

    /**
   * Flag that indicates whether this item is the current item or not.
   * 1 means that the item is the current one.
   * 0 means that the item is not the current one.
   */
    int _currentItemFlag;

    /**
   * Flag that indicates whether the item can be selected or not.
   * This allows to disable the selection for some items.
   */
    int _selectableFlag;

    /**
   * Flag that indicates whether the item can be picked or not.
   * This allows to completly disable the picking on an item (so,
   * the item will no longer be selectable and no tooltip will be
   * displayed on it for instance).
   *
   * A value of 1 indicates that the item is pickable, a value of 0
   * indicates that the item is not pickable.
   *
   * This is used for Record to avoid setting a name on an some items.
   */
    int _itemPickableFlag;

    /**
   * The color of the background of the item. Usually
   * this attribute is either set with the _selectionColor value
   * (if the item is currently selected), or set with a transparent
   * color (if the item isn't currently selected).
   *
   * This attribute is only used when the selection feedback of the
   * control is set to CATVid::BackgroundFeedback.
   */
    CATVidColor _backgroundColor;

    /**
   * The color of the background of the item. Usually
   * this attribute is either set with the _selectionColor value
   * (if the item is currently selected), or set with a transparent
   * color (if the item isn't currently selected).
   *
   * This attribute is only used when the selection feedback of the
   * control is set to CATVid::BackgroundFeedback.
   */
    CATVidColor _customColor;

    /**
   * A pointer on the control that embeds the widget used for
   * the selection feedback if the feedback is set to
   * CATVid::OverlayFeedback.
   * Otherwise, this control is not displayed (but the pointer
   * should still be valid).
   */
    CATVidCtl *_pOverlayCtl;

    /**
   * A pointer on the selection feedback widget generated using the
   * dedicated data template in CATVid::OverlayFeedback mode.
   * This widget is set as the content of the _pOverlayCtl
   * control.
   */
    CATVidWidget *_pWidgetSelection;

    /**
   * The color of the border of the item. Usually
   * this attribute is either set with the _currentItemBorderColor value
   * (if the item is the current one), or set with a transparent
   * color (if the item isn't the current one).
   */
    CATVidColor _borderColor;

    /** @see #GetDnDBeforeFlag */
    unsigned int _dndBeforeFlag;

    /** @see #GetDnDAfterFlag */
    unsigned int _dndAfterFlag;

    /** @see #GetDnDOnFlag */
    unsigned int _dndOnFlag;

    int _bottomBorderFlag;

    //CATVidCtlAbstractItemsView& _view;//Being replaced by a method returning a pointer on the view starting from a weak ref on this view.
    //Because in some case CATVidCtlAbstractItemsView can have been destructed and we still hover some view

    /** Handler that reacts on the UpdateContextMenu event */
    CATSYPEventHandler *_pUpdateContextMenuHandler;

    CATSysWeakRef *_pWRefLetter;
    //l_CATVidCtlViewRepresentation * _pAssociatedLetter;

    CATVidLaySideAttach *_pOverlayContainer;
    CATVidGPSquare *_pDnDFeedback;

    CATSYPTrigger *_pSelectedFlagOffTrigger;
    CATSYPTrigger *_pSelectedFlagOnTrigger;
    CATUnicodeString _dataTemplateName;
    CATUnicodeString _stylesheet;
    CATVidLayLayer *_pMainLayer;
    CATVidGPSquare *_pCustomColorSquare;
    CATVidGPSquare *_pClickableSquare;
    CATVidCtl *_pContentCtl;
		int _expandOnCellClickFlag;
		CATBoolean _editableFlag;		
		/** 
		* flag that indicates whether this item is checked or not.
		* 1 means that the item is checked.
		* 0 means that the item is unchecked.
		*/
		int _checked;
		int _mixed;

private:
    CATSysWeakRef *_pViewWeakRef;
};

#endif
