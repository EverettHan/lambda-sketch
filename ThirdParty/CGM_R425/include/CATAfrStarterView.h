// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATAfrStarterView.h
// Header definition of CATAfrStarterView
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jul 2009  Creation: Code generated by the CAA wizard  LD3
//===================================================================
#ifndef CATAfrStarterView_H
#define CATAfrStarterView_H

#include "CATAfrItf.h"
#include "CATAfrModelView.h"
#include "CATString.h"
#include "CATUnicodeString.h"
#include "CATEAfrStarterViewFactory.h"
#include "CATMathPoint2Df.h"

//-----------------------------------------------------------------------
//-----------------------------------------------------------------------
/**
 * Implement a starter view Factory.
 * <b>Role</b>: Allow to create a Factory class for your starter view. To be validated and compiled, you have to include 
 * some files like this:
 * <tt>
 *      #include "CATEAfrStarterViewFactory.h"
 *      #include "TIE_CATIAfrStarterViewFactory.h"
 *      CATImplementStarterViewFactory(CATAfrMyStarterView,MyRepresentationType);
 * </tt>
 * The first file is the adapter of your factory and
 * the second file is the TIE file allowing to implement CATIAfrStarterViewFactory interface.
 *<b>Important:</b> Your starter view class must have a constructor with a CATBaseUnknown argument.
 * For instance:
 *  <tt>CATAfrMyStarterView (CATBaseUnknown *ipModel);</tt>
 * @param classname 
 *   The class name of your starter view. The factory which return an instance of this class. 
 * @param lateType
 *   The representation type of your implementation.
 */
#define CATImplementStarterViewFactory( classname, lateType )\
class CAT##lateType##StarterFactory: public CATEAfrStarterViewFactory\
{\
  CATDeclareClass;\
  public :\
  CATAfrStarterView * CreateInstanceStarterView (CATBaseUnknown *ipModel);\
};\
  CATImplementClass( CAT##lateType##StarterFactory,\
                     CodeExtension,\
                     CATEAfrStarterViewFactory,\
                     lateType );\
TIEchain_CATIAfrStarterViewFactory(CAT##lateType##StarterFactory);\
CATAfrStarterView * CAT##lateType##StarterFactory::CreateInstanceStarterView (CATBaseUnknown *ipModel)\
{\
  return new classname(ipModel);\
}

/**
* Adapter class to represent the view of <b>a</b> starter command (See 
* @href CATCmdStarter model).
* Derive this class and overload the necessary methods to create a dialog 
* element(for example a button) . 
* You can create more of one component but you have to define which 
* has to start the command or get the ressources.
* 
* <br><b>Role</b>: Allow to create a widget attached with a header command.
* This link (command <-> header) is transparent in this interface. 
* It is managed by the @href CATCmdStarterRep controller. However, the 
* controller has to be inform when an action is performed in order to 
* start a command. That is why, you must send the CATStartCommandNotification
* to your parent command which should be the CATCmdStarterRep during this type
* of event. In short, insert this code:
* <code>SendNotification(GetParent(),new CATStartCommandNotification())</code><br> 
* 
* Please ensure that the notification is correctly propagated to the father.
*/
class ExportedByCATAfrItf CATAfrStarterView: public CATAfrModelView
{
  CATDeclareClass;

  public:



  // Standard constructors and destructors
  // -------------------------------------
     CATAfrStarterView (CATCommand * iParent=NULL,CATString * const iIdentifier=NULL);
     CATAfrStarterView (CATBaseUnknown * ipModel);
     virtual ~CATAfrStarterView ();

  // Virtual methods to initiate and destroy your widget
  // -------------------------------------

     /**
     *   Initialize the widget representing the starter model.
     *   @param ipParent
     *      The parent command. In Dialog, components needs to know their parent.
     *   @return
     *      The created starter command. 
     *      The starter command which will added (Ex : @href CATDlgPushButton, @href CATVidCtlPushButton or even @href CATVidLayGrid)
     * 
     */
    virtual CATCommand * InitWidget(CATCommand * parent,const CATString & objectName="");

    /**
     *   Delete the created widget.
     */
    virtual void DeleteWidget();


  // Virtual methods to manage behaviour of the widget during command launching
  // -------------------------------------
    /**
     *@deprecated : implement SetEnableWidget(TRUE) instead
     *   Enable the widget.
     */
      virtual void EnableWidget() const ;


    /**
     *@deprecated : implement SetEnableWidget(FALSE) instead
     *   Disable the widget.
     */
      virtual void DisableWidget()  const ;
    /**
     *@deprecated : implement SetActivationWidget(TRUE) instead
     *   Simulate press action on the widget
     * 
     */
      virtual void ActivateWidget()   const ;
    /**
     *   Point whether the widget is pressed.
     *   @return
     *     1 if pressed. Otherwise, 0
     */
      virtual int  IsWidgetActivated() ;

    /**
     *@deprecated : implement SetActivationWidget(FALSE) instead
     *   Simulate the release of the widget
     * 
     */
      virtual void DeactivateWidget() const ;

      /*
      *-------------------------------------------------------------
      *
      *-------------------------------------------------------------
      */

    /**
     *   Enable the widget.
     *  @param: i_enable : 1 enable the starter widget, 0 otherwise
     */
      virtual void SetEnableWidget(const int & i_enable) ;


      /**
      *   Simulate press action on the widget
      *  @param: i_enable : 1 active the starter widget, 0 otherwise
      */
      virtual void SetActivationWidget(const int & i_activation);



      // Virtual methods to set the ressource from command header
      // -------------------------------------

      /** @nodoc */
      virtual void SetIconName(const CATString& iIconNameNormal,
                              const CATString& iIconNameSelected = "",
                              const CATString& iIconNameFocused = "",
                              const CATString& iIconNameDisabled = "");
      /** @nodoc */
      virtual void SetAccelerator(const CATUnicodeString &accelerator);
      /** @nodoc */
      virtual void SetMnemonic(CATUnicodeChar iLetter);
      /** @nodoc */
      virtual void SetTitle(const CATUnicodeString & nlsCommandName);
      /** @nodoc */
      virtual void SetHelp(const CATUnicodeString & help);
      /** @nodoc */
      virtual void SetHelpRsc(const CATString & helpRsc);
      /** @nodoc */
      virtual void SetShortHelp(const CATUnicodeString & help);
      /** @nodoc */
      virtual void SetShortHelpIconName(const CATString & icon);
      /** @nodoc */
      virtual void SetShortHelpIconDimension(const CATMathPoint2Df & iconDimension);
      /** @nodoc */
      virtual void SetLongHelp(const CATUnicodeString & help);
      /** @nodoc */
      virtual void SetLongHelpIconName(const CATString & icon);
      /** @nodoc */
      virtual void SetLongHelpIconDimension(const CATMathPoint2Df & iconDimension);
      /** @nodoc */
      virtual void SetLongHelpId(const CATUnicodeString& longHelpId);


      //-----------------------------------------------------------------------------------
      //------------     Management of Argument for Headers -------------------------------
      //---------------------------------------------------------------------------------



      /** Get / Set the property Argument of CATBaseUnknown_var. This value can be the result of a box (CATUnicodeString, CATString, ..). 
      * The controller will just do a Get to retrieve an argument to fill to the header
      * 
      */
      virtual  CATBaseUnknown_var GetArgument() const;
      virtual void SetArgument(const CATBaseUnknown_var & i_Argument);

      /** Get / Set the property CheckableFlag
      */
      CATBoolean GetCheckableFlag() const;
      void SetCheckableFlag(const CATBoolean & i_CheckableFlag);

      //-----------------------------------------------------------------------------------
      //------------     Management of drag and drop (avoid to start a command when dragging) -------------------------------
      //---------------------------------------------------------------------------------
      
      void SetDragFlag(const CATBoolean & i_dragFlag){_beingDragged=i_dragFlag;};
      CATBoolean & GetDragFlag(){return _beingDragged;};
protected:

      CATBaseUnknown_var       _spArgumentValue;
      CATBoolean               _beingDragged;
      CATBoolean               _checkableFlag;
};

//-----------------------------------------------------------------------

#endif
