//===================================================================
// COPYRIGHT Dassault Systeme 2012/09/20
//===================================================================
// CATV3DCtlHandleTranslation.h
// Header definition of class CATV3DCtlHandleTranslation
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/09/20 Creation: Code generated by the 3DS wizard MF6
//===================================================================

#ifndef CATV3DCtlHandleTranslation_H
#define CATV3DCtlHandleTranslation_H

#include <VisuImmersive3D.h>
#include <CATV3DCtlHandle.h>

//-----------------------------------------------------------------------------
/**
 * This widget provides a standard styled direction translation manipulator.
 *
 * @par Role
 * A direction translation handle is used to manipulate object along a direction.
 * It send a translation event when manipulated and automaticaly handle his 
 * position when draging.
 * <br>
 *
 * @par Handle Position
 * Orient Handle using axis defined in @c CATV3DLay3D.Constraints
 * @see CATV3DLay3DConstraints#SetAxis
 * @see CATV3DTopWidget#SetLay3DConstraints
 *
 * @par Translation direction
 * The translation direction is always along the first direction of the constraining axis.
 * @see CATV3DLay3DConstraints#SetAxis
 *
 * @par Templates
 * Available template names : Arrow, DoubleArrow
 *
 * @par Creation
 * @code
 * CATV3DCtlHandleTranslation* pHandle = CATV3DCtlHandleTranslation::CreateHandleTranslation();
 * @endcode
 * @code
 * CATV3DCtlHandleTranslation* pHandle = CATV3DCtlHandleTranslation::CreateDoubleArrowHandleTranslation();
 * @endcode
 * @ingroup V3DControls
 */
class ExportedByVisuImmersive3D CATV3DCtlHandleTranslation : public CATV3DCtlHandle
{
  CATDeclareClass;
public:
  /** Constructor*/
  CATV3DCtlHandleTranslation ();
  /** Destructor*/
  virtual ~CATV3DCtlHandleTranslation ();

  /**
   * Constructs a CATV3DCtlHandleTranslation with blob style.
   */
  static CATV3DCtlHandleTranslation * CreateBlobHandleTranslation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs a CATV3DCtlHandleTranslation with standard arrow style.
   */
  static CATV3DCtlHandleTranslation * CreateHandleTranslation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs a CATV3DCtlHandleTranslation with bidirectional arrow style.
   */
  static CATV3DCtlHandleTranslation * CreateDoubleArrowHandleTranslation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs a list of CATV3DCtlHandleTranslation.
   */
  static void CreateHandlesTranslation(CATViewpoint* i_pViewpoint, const CATSYPDynArray<CATV3DLay3DConstraints>& i_lConstraints, const CATUnicodeString& i_type, CATSYPDynArray<CATV3DCtlHandleTranslation*>& oHandles);

  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the HandleTranslation when receiving
   * a drag event.
   *
   * This event is issued from the @ref Drag event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Translate();

  /**
   * Sets the manipulator position to a new position from its current position with an amplitude ImposDist.
   * @param iImposDist
   * The distance to force translation.
   */
  void SetDistance(const double &iImposDist);
  /**
   * @return the imposed distance from current position.
   * @see SetDistance
   */
  double GetDistance() const;

  /**
   * sets the manipulator position to a new position from the initial position position with an amplitude ImposDist.
   * @param iImposDist
   * The distance to force translation.
   */
  void SetAbsDistance(const double &iImposDist);
  /**
   * @return the imposed distance from initial position.
   * @see SetAbsDistance
   */
  double GetAbsDistance() const;

  /**
   * Handle drag event of manipulator view. Should be private.
   */
  void HandleDrag(CATBaseUnknown * i_pSender, CATV3DManipulationEventArgs * i_pArgs);
  
  /**
   * @copydoc l_CATV3DCtl#TemplateDataUpdated
   *
   * Here are the mandatory "syp:named" objects :
   * @li GPManip [CATV3DGraphicPrimitive]
   */
  void TemplateDataUpdated();


private:
  CATV3DCtlHandleTranslation (CATV3DCtlHandleTranslation &);
  CATV3DCtlHandleTranslation& operator=(CATV3DCtlHandleTranslation&);
};

#endif
