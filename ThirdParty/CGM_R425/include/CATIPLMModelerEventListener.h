// COPYRIGHT Dassault Systemes 2007
//===================================================================
// CATIPLMModelerEventListener.h
// Define CATIPLMModelerEventListener interface
//===================================================================
//  Mar 2007  Creation: Code generated by the CAA wizard  xlu
//===================================================================

#ifndef CATIPLMModelerEventListener_H
#define CATIPLMModelerEventListener_H

/**
* @level Protected
* @usage U1
*/

#include "CATBaseUnknown.h"
#include "CATPLMModelerBaseInterfaces.h"
#include "CATPLMModelerEventDef.h"
#include "CATPLMModelerEventFilter.h"
#include "CATLISTP_CATIPLMModelerEventAccess.h"

class CATIAdpType;
class CATIAdpExtType;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerBaseInterfaces IID IID_CATIPLMModelerEventListener;
#else
extern "C" const IID IID_CATIPLMModelerEventListener ;
#endif

/**
* nodoc
*/

class ExportedByCATPLMModelerBaseInterfaces CATIPLMModelerEventListener: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  *  Set a filter to the listener
  *  @param iFilter
  *     Filter to be associated the listener
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     </ul>
  */
  virtual HRESULT SetEventFilter(CATPLMModelerEventFilter& iFilter) = 0;

  /**
  * @deprecated
  */
  virtual HRESULT SetModelerType(CATPLMModelerType iModelerType) = 0;

  /**
  * @deprecated
  */
  virtual HRESULT GetModelerType(CATPLMModelerType& oModelerType) = 0;

  /**
  *  Set the commit mode of the listener.
  *  <p>
  *  <b>Role:</b> Commit mode can Synchronous or Asynchronous.
  *  </p>
  *  @param iCommitMode
  *     The commit mode to set to the listener.
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     </ul>
  */
  virtual HRESULT SetCommitMode(CATPLMModelerCommitMode iCommitMode) = 0;

  /**
  *  Get the commit mode of the listener.
  *  <p>
  *  <b>Role:</b> Commit mode can Synchronous or Asynchronous.
  *  </p>
  *  @param iCommitMode
  *     The commit mode of the listener
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     </ul>
  */
  virtual HRESULT GetCommitMode(CATPLMModelerCommitMode& iCommitMode) = 0;

  /**
  *  Get the context of the listener.
  *  <p>
  *  <b>Role:</b> The context may be NULL in case one listens to an event 
  *               without context.
  *  </p>
  *  @param oConext
  *     The context of the listener.
  *
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     </ul>
  */
  virtual HRESULT GetContext(CATBaseUnknown_var& ospContext) = 0;

  /**
  *  Get Entity Types of the listener
  *  <p>
  *  <b>Role:</b> The Entity Types of listener may be sub set of Reference, Representation, 
  *               Instance, RepInstance, Port and Connections, or AnyEntity
  *  </p>
  *  @param oEntityTypes
  *     A list of Entity Types of the listener
  *
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     <li><tt>E_FAIL</tt>: No Entity Type is specified for the listener.
  *     </ul>
  */
  virtual HRESULT GetEntityTypes(CATListOfCATPLMModelerEventEntityType& oEntityTypes) = 0;

  /**
  *  Get Action Types of the listener
  *  <p>
  *  <b>Role:</b> The Action Types of listener may be sub set of Create, Remove, Replace, 
  *               Load, Matrix, RelationView and AttributeModify or AnyAction.
  *  </p>
  *  @param oActionTypes
  *     A list of Action Types of the listener
  *  @return HRESULT 
  *	   <ul>
  *     <li><tt>S_OK</tt>: everything is OK.
  *     <li><tt>E_FAIL</tt>: No Action Type is specified for the listener.
  *     </ul>
  */
  virtual HRESULT GetActionTypes(CATListOfCATPLMModelerEventActionType& oActionTypes) = 0;

	/**
	*/
	virtual HRESULT GetFriendTypes(CATListOfCATPLMModelerEventFriendType& oFriendTypes) = 0;

  /**
  *  Process a set of expected modeler events.
  *  <p>
  *  <b>Role:</b> This method is called back by the modeler event controller in case of events specified by the listener.
  *  </p>
  *  @param ipEventList
  *     A list of expected events.
  *  @return none.
  */
  virtual void ProcessEvent(CATLISTP(CATIPLMModelerEventAccess)* ipEventList) = 0;
 
  /**
  *  Process a set of expected modeler events for a given extension type.
  *  <p>
  *  <b>Role:</b> This method is called back by the modeler event controller in case of events specified by the extension listener.
  *  </p>
  *  @param iExtensionType
  *     The extension type the listener has subscribed for, using CATIPLMModelerEventRegister.
  *  @param ipEventList
  *     A list of expected events.
  *  @return none.
  */
  virtual void ProcessEvent(const CATIAdpExtType* iExtensionType, CATLISTP(CATIPLMModelerEventAccess)* ipEventList) = 0;

	/**
	*  Process a set of expected modeler events for a given connection type.
	*  <p>
	*  <b>Role:</b> This method is called back by the modeler event controller in case of events specified by the extension listener.
	*  </p>
	*  @param iConnectionType
	*     The connection type the listener has subscribed for, using CATIPLMModelerEventRegister.
	*  @param ipEventList
	*     A list of expected events.
	*  @return none.
	*/
	virtual void ProcessEvent(const CATIAdpType* iConnectionType, CATLISTP(CATIPLMModelerEventAccess)* ipEventList) = 0;

};

CATDeclareHandler(CATIPLMModelerEventListener, CATBaseUnknown);

#endif
