// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIOmyTubeFactory.h
// Define the CATIOmyTubeFactory interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2009  Creation: Code generated by the CAA wizard  PJQ
//===================================================================
#ifndef CATIOmyTubeFactory_H
#define CATIOmyTubeFactory_H

#include "CATOMYBaseSession.h"
#include "CATBaseUnknown.h"
#include "CATOmySessionRecordServices.h"
#include "CATOmxPair.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYBaseSession IID IID_CATIOmyTubeFactory;
#else
extern "C" const IID IID_CATIOmyTubeFactory ;
#endif

//------------------------------------------------------------------

/**
* @level Protected
* @usage U4 CATIOmyTubeFactory
* Interface representing a communication tube factory with its associated log informations.
*/
class CATHashDico;
class CATUnicodeString;
class CATIComSidlStreamTube;
class CATListValCATUnicodeString;
class CATIPLMMaintenanceTubeErrorReporter;
class ExportedByCATOMYBaseSession CATIOmyTubeFactory: public CATBaseUnknown
{
  CATDeclareInterface;

  public:
   
  /** 
  * Creates a sidl tube
  *
  * @param iConnectionParameters [in]
  *   The connection paramters
  * @param oTrs [out]
  *   The created tube.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  */
  virtual HRESULT CreateTube(CATHashDico *iConnectionParameters,CATIComSidlStreamTube ** oTrs)=0;

  /** 
  * Add information to the log on the factory. It can be used to store performance datas and so on...
  */
  virtual void AddLogInfos(const CATUnicodeString& iThem, const CATUnicodeString& iOperation,
                           const CATListValCATUnicodeString& iInfos)=0;

  /**
  * Specifies the error reporter to be used.
  */
  virtual HRESULT SetErrorReporter(CATIPLMMaintenanceTubeErrorReporter * iReporter)=0;

  /**
  * Force the recording of the messages
  */
  virtual HRESULT StartForceRecording(const CATUnicodeString & iMessagesId)=0;
  virtual HRESULT StopForceRecording()=0;
  virtual HRESULT StartQueueForceRecording(const CATOmySessionRecordServices::QueueForceRecordType &iRecordType)=0;
  virtual HRESULT StopQueueForceRecording()=0;
  virtual HRESULT ResetQueueId(const CATOmySessionRecordServices::QueueForceRecordType &iType) = 0;
  virtual HRESULT GetReplayCount(const CATOmySessionRecordServices::QueueForceRecordType &iType, unsigned int &oCount) = 0;
  virtual CATBoolean IsForceRecordingInProgress()=0;
  virtual CATOmxPair<unsigned int, CATUnicodeString> GetForceRecorderDataForxMQL() = 0;
  virtual void IncrementCountForxMQL() = 0;
  virtual CATBoolean IsQueueForceRecordingInProgress() = 0;
  virtual CATOmxPair<unsigned int, CATUnicodeString> GetQueueForceRecorderDataForxMQL() = 0;
  virtual void IncrementQueueCountForxMQL() = 0;

  virtual HRESULT ResetIDs()=0;
};
CATDeclareHandler(CATIOmyTubeFactory,CATBaseUnknown);
//------------------------------------------------------------------

#endif
