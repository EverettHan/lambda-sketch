//===================================================================
// COPYRIGHT Dassault Systemes 2013/02/26
//===================================================================
// PLMExchangeExperienceDictionary.h
// 
//===================================================================
//
// Usage notes: Define common type used in the exchange experience.
//
//===================================================================
//  2013/02/26 Creation: Code generated by the 3DS wizard
//===================================================================
/*
* @quickreview SGD14 K9X 22:07:28  TSK8719095 FUN126273 | [3Dxml for review] Enrich report with TE report path
*/
#ifndef PLMExchangeExperienceDictionary_H
#define PLMExchangeExperienceDictionary_H

#include "CATUnicodeString.h"
#include "CATCollec.h"
#include "CATListOfInt.h"
#include "CATCallbackManager.h"  // System            JS0SCBAK.m
#include "PLMExchangeInterfaces.h"

//========= Execution ========================================================================================================================================
const CATUnicodeString cPLMDefaultExperienceExecution              = "PLMExchangeExperienceExecutionDesign.Default";
const CATUnicodeString cPLMExchangeExperienceCancel                = "PLMExchangeExperienceExecutionDesign.Cancel";

//========= Report ===========================================================================================================================================
const CATUnicodeString cPLMExchangeExpOptionSaveReport             = "PLMExchangeExperienceReportServices.Option.Report.Save";
const CATUnicodeString cPLMExchangeExpOptionSaveReportName         = "PLMExchangeExperienceReportServices.Option.Report.Name";
const CATUnicodeString cPLMExchangeExpExchSpaceReportInfo          = "PLMExchangeExperienceReportServices.Option.Report.Info";
const CATUnicodeString cPLMExchangeExpExchSpaceReportInfoText      = "PLMExchangeExperienceReportServices.Option.Report.InfoText";
const CATUnicodeString cPLMExchangeExpOptionGroupOptionReport      = "PLMExchangeExperienceReportServices.OptionGroup.Option.Report";

// SGD14 :: Start FUN126273
// Option for TE report
const CATUnicodeString cPLMExchangeExpOptionSaveTransitionEngineReport = "PLMExchangeExperienceReportServices.Option.Report.TransitionEngineReport";
//SGD14 :: End
//========= Execution Post Process Id ========================================================================================================================
/**
* <b>PLMExchangeExperienceExecutionPostProcessId:</b> Use to define the execution post process id. This will be used to identify which post process to execute after an operation.
*                                                If multiple post process are defined, they will be launched accordingly to the enum value order. 
*                                                i.e : The creation of the report viewer will be launched before the close experience.
* <u>ExecutionPostProcessId_None</u> : No post process.
* <u>ExecutionPostProcessId_RefreshView</u> : Refresh the exchange experience view to reflect what has changed in the session after the execution.
* <u>ExecutionPostProcessId_ReportViewer</u> : Report viewer will display informations stored in the PLMExchangeModel (PLMExchangeExperienceSession) in a dedicated new panel.
* <u>ExecutionPostProcessId_CloseExperience</u> : Close the exchange experience (set by default for each execution).
*/
enum PLMExchangeExperienceExecutionPostProcessId
{
   ExecutionPostProcessId_None                    = 0x00000001,
   ExecutionPostProcessId_RefreshView             = 0x00000002,
   ExecutionPostProcessId_ReportViewer            = 0x00000004,
   ExecutionPostProcessId_CloseExperience         = 0x00000008,
   ExecutionPostProcessId_OpenExploreData         = 0x00000010,
   ExecutionPostProcessId_Unload                  = 0x00000080
};

//========= Execution result Id ========================================================================================================================
/**
* <b>PLMExchangeExperienceExecutionStatus:</b> Use to define the execution result (or how the execution ended).
* <u>ExecutionStatus_Unknown</u> : Execution status is yet to be defined or cannot be set.
* <u>ExecutionStatus_Succeeded</u> : Execution ended successfully.
* <u>ExecutionStatus_Warning</u> : Execution ended with some warning. 
* <u>ExecutionStatus_Error</u> : Execution halted due to encountered errors. 
* <u>ExecutionStatus_Abort</u> : Execution aborted. 
* 
*/
enum PLMExchangeExperienceExecutionStatus
{
   ExecutionStatus_Unknown            = 0x00000000,
   ExecutionStatus_Succeeded          = 0x00000001,
   ExecutionStatus_Warning            = 0x00000002,
   ExecutionStatus_Error              = 0x00000004,
   ExecutionStatus_Abort              = 0x00000008
};

//========= Object type ========================================================================================================================
/**
* <b>PLMExchangeExperienceObjectType:</b> Use to define the coretype of the component where the exchange experience item is applicable for.
* <u>PLMType_None</u> : Item will not be applied to any type by default. Its applicability depends on the use of the method SetApplicablePLMType.
* <u>PLMType_Reference</u> : Item will be applied for all components of coretype Reference.
* <u>PLMType_Instance</u> : Item will be applied for all components of coretype Instance.
* <u>PLMType_RepReference</u> : Item will be applied for all components of coretype RepReference.
* <u>PLMType_RepInstance</u> : Item will be applied for all components of coretype RepInstance.
* <u>PLMType_Entity</u> : Item will be applied for all components of entity type (Typename : Document or Generic Document).
* <u>PLMType_Relation</u> : Item will be applied for all components of relation type.
* <u>PLMType_Port</u> : Item will be applied for all components of port type.
* <u>PLMType_Connection</u> : Item will be applied for all components of port type.
*/
enum PLMExchangeExperienceObjectType
{
   PLMType_None            = 0x00000000,
   PLMType_Reference       = 0x00000001,
   PLMType_Instance        = 0x00000002,
   PLMType_RepReference    = 0x00000004,
   PLMType_RepInstance     = 0x00000008,
   PLMType_Entity          = 0x00000010,
   PLMType_Relation        = 0x00000020,
   PLMType_Port            = 0x00000040,
   PLMType_Connection      = 0x00000080
};

//========= Value type ========================================================================================================================
/** 
* <b>PLMExchangeExperienceValueType:</b> Define the different type possible for a value. Please cast the value to correct type before using it.
* <u>ValueType_Boolean</u> : CATBoolean.  
* <u>ValueType_Integer</u> : int.
* <u>ValueType_Float</u> : double. 
* <u>ValueType_String</u> : CATUnicodeString.
* <u>ValueType_Date</u> : CATTime.
* <u>ValueType_FileName</u> : CATUnicodeString.
* <u>ValueType_FolderPath</u> : CATUnicodeString.
* <u>ValueType_NLSKey</u> : NLS Key. Use this type if you need to have an internal key and a NLS displayed value.
*/
enum PLMExchangeExperienceValueType
{
   ValueType_Boolean           =  0x00000001,
   ValueType_Integer           =  0x00000002,
   ValueType_Float             =  0x00000004,
   ValueType_String            =  0x00000008,
   ValueType_Date              =  0x00000020,   
   ValueType_FileName          =  0x00000080,
   ValueType_FolderPath        =  0x00000100,
   ValueType_NLSKey            =  0x00000200,
   ValueType_PtrCATBaseUnknown =  0x00000400,
   ValueType_RadioBoolean      =  0x00000800
};

//========= Experience Object Property ========================================================================================================================
/** 
* <b>PLMExchangeExperienceObjectProperty:</b> Define the different properties of an object experience.   
* <u>ObjectProperty_IsActivated (boolean) </u> : The object experience is desactivated (greyed out) and no interaction is possible.   
* <u>ObjectProperty_IsHidden (boolean) </u> : The object experience is hidden and will not be displayed. 
* <u>ObjectProperty_IsCollapsed (boolean) </u> : The object experience is collapsed and its content will not be visible until it has been expanded. 
*/
enum PLMExchangeExperienceObjectProperty
{
   ObjectProperty_IsActivated = 0x00000001,
   ObjectProperty_IsHidden = 0x00000002,
   ObjectProperty_IsCollapsed = 0x00000004
};

//========= Repository type ========================================================================================================================
/** 
* <b>PLMExchangeExperienceSysRepositoryType:</b> Define the different repository where the option values will be saved.
* <u>SysRepositoryType_Preference </u> : The option's values will be saved in a preference type of file.
* <u>SysRepositoryType_Setting </u> : The option's values will be saved in a setting type of file.
*/
enum PLMExchangeExperienceSysRepositoryType
{
   SysRepositoryType_Preference = 0x00000001,
   SysRepositoryType_Setting = 0x00000002
};

//========= Experience Notification   mask =============================================================================================================
/**
* <b>PLMExchangeExperienceNotificationMask:</b> This is used to specify the type of notification to show to end user.
* It should be composed of at least one type of notification. (basic, warning, or error). 
* To this type, a severity and options can be appended to it. 
* i.e : ( ExperienceNotification_Type_Basic | ExperienceNotification_Severity_High | ExperienceNotification_Option_PromptUser) .
* <u>ExperienceNotification_Severity_High</u> : This mask is to specify that the associated notification type has a high severity.
*                                     It only has a meaning for the notification type : basic and warning.
*                                     i.e : ( ExperienceNotification_Type_Warning | ExperienceNotification_Severity_High)
*                                     By tagging a notification with the high severity, we ensure that the end user will get a note of it.
* <u>ExperienceNotification_Option_PromptUser</u> : By applying this mask, we specify that the given notification will request an answer from the user. 
*                                         He will be prompted with the notification's message and a YES/NO type of answer will be expected.
* <u>ExperienceNotification_Type_Basic</u> : A basic notification will be shown to the user. It's usually use to display information to the user without being too intrusive. 
*                                  The displayed message should not hold any important information, as it can be omitted or overlooked by the end user. 
* <u>ExperienceNotification_Type_Warning</u> : A warning notification is there to notify the user of an abnormal behavior. 
*                                   Nevertheless, this encountered behavior/issue, does not stop the on-going process, as it's not critical.
* <u>ExperienceNotification_Type_Error</u> : Setting error on a notification will imply that the process can no longer continue. 
*                                 This type of notification will automatically have the high severity.
* 
*/
enum PLMExchangeExperienceNotificationMask
{
   ExperienceNotification_Severity_High     = 0x00000001,
   ExperienceNotification_Option_PromptUser = 0x00000002, 
   ExperienceNotification_Type_Basic        = 0x00000004,
   ExperienceNotification_Type_Warning      = 0x00000008,
   ExperienceNotification_Type_Error        = 0x00000010

};

//========= Event type ========================================================================================================================
/** 
*  Define the different type of event which can be triggered during the exchange experience.
* <u>PLMExchangeExperienceEvent::OnOptionInteraction() </u> : Triggered when the value of an option has been changed through an user interaction.
* <u>PLMExchangeExperienceEvent::OnOperationInteraction() </u> : Triggered when an operaton has been triggered through an user interaction.
* <u>PLMExchangeExperienceEvent::OnExecute() </u> : Triggered when an execution has launched by the user.
* <u>PLMExchangeExperienceEvent::OnCloseCommand() </u> : Triggered when the command is being closed.
* <u>PLMExchangeExperienceEvent::OnResumeCommand() </u> : Triggered when the command is being resumed.
*/
class ExportedByPLMExchangeInterfaces PLMExchangeExperienceEvent : public CATBaseUnknown 
{
public :   
   CATDeclareCBEvent(OnOptionInteraction);
   CATDeclareCBEvent(OnOperationInteraction);
   CATDeclareCBEvent(OnExecute);
   CATDeclareCBEvent(OnCloseCommand);
   CATDeclareCBEvent(OnResumeCommand);
   CATDeclareCBEvent(OnRequestDesignUpdate);
};

const CATUnicodeString cInternalAttributeNameTag = "UUE_Internal_";
//========= Session object source ========================================================================================================================
/** 
*  The attribute name of the attributes which are set on each session object. This should be used to access the needed information.
* <u>cPLMExchangeExperienceSessionObject_AttrName_Editor</u> (ValueType_String type) : The editor from which the object was retrieved prior to being added in to the session model.
*/
const CATUnicodeString cPLMExchangeExperienceSessionObject_AttrName_Editor = cInternalAttributeNameTag + "Editor";

/** 
*  The status id corresponding to the "unset" value. Any component with this status, will be equivalent as if no status has ever being set on these components.
* <u>cPLMExchangeExperienceStatus_Id_Unset</u>  : Status is unset and means that no 'real' status has been set on the component.
*/
const CATString cPLMExchangeExperienceStatus_Id_Unset = "Unset";

//========= Editor object source ========================================================================================================================
const CATUnicodeString cNavigationEditor = "NavigationEditor";
const CATUnicodeString cAuthoringEditor  = "AuthoringEditor" ;
const CATUnicodeString cUniversalEditor  = "UniversalEditor" ;
const CATUnicodeString cSearchWindow     = "SearchWindow"    ;

//========= Open/Explore Data ===========================================================================================================================
/** 
* <b>PLMExchangeExperienceDisplayDataProperty:</b> Define the different ways to diplay data after  import.   
* <u>DisplayData_Open </u> : The imported data will be opened.   
* <u>DisplayData_Explore </u> : The imported data will be explored. 
* <u>DisplayData_DeactivateOpenExplore </u> : Displaying data after Import is disabled. 
*/
enum PLMExchangeExperienceDisplayDataProperty
{
   DisplayData_Open                  = 0x00000001,
   DisplayData_Explore               = 0x00000002,
   DisplayData_OpenFromSession       = 0x00000003,
   DisplayData_DeactivateOpenExplore = 0x00000004
};

//========= Attributes for Preview ======================================================================================================================
const CATString cAttrCatalog      = "CATPLM3DXMLIdFrm"       ;

const CATString cExternalID       = "PLM_ExternalID"         ;
const CATString cName             = "V_Name"                 ;
const CATString cDelegation       = "V_EditionTokenStatusCD" ;

const CATString cVersionId        = "VersionId"    ;
const CATString cCreatedId        = "CreatedId"    ;
const CATString cModifiedId       = "ModifiedId"   ;
const CATString cLockStatusId     = "LockStatusId" ;
const CATString cLockUserId       = "LockUserId"   ;
const CATString cMaturityId       = "MaturityId"   ;

//-----------------------------------------------------------------------

#endif
