// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMMinorVersionOverloadingSolution.h
// Define the CATIPLMMinorVersionOverloadingSolution interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMMinorVersionOverloadingSolution_H
#define CATIPLMMinorVersionOverloadingSolution_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h"
#include "CATPLMSessionOperationType.h"
#include "CATLISTV_CATIPLMSessionOperation.h"

class CATComponentId;
class CATLISTV(CATComponentId);
class CATProxySpace;
class CATIPLMAsyncTask_var;
class CATPLMBag;
class CATPLMLifeCycleRootsBag;
class CATIAdpErrorMonitor;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMMinorVersionOverloadingSolution;
#else
extern "C" const IID IID_CATIPLMMinorVersionOverloadingSolution;
#endif

//------------------------------------------------------------------

/**
* The set of necessary operations for overload
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMMinorVersionOverloadingSolution : public CATBaseUnknown
{
  CATDeclareInterface;

public:

   /**
   * Returns a stat on given operations
   *
   * @param iOperationsMask
   *        Can be a single or several operations
   * @return
   *        The number of operations in accordance with the mask
   */
  virtual unsigned int GetCount(CATPLMSessionOperationType iOperationsMask) const = 0;

  /**
  * Access to operations for diplaying UI
  *
  * @param ioOperations
  *        The list of operations
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT GetOperations(CATLISTV(CATIPLMSessionOperation_var) & ioOperations) const = 0;

  /**
  * Returns current error monitor
  *
  * @param oErrorMonitor
  *        The error monitor
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT GetErrorMonitor(CATIAdpErrorMonitor *& oErrorMonitor) const = 0;

  /**
  * Attach a bag for managing life cycle.
  * Necessary only if the new minor is root.
  *
  * @param iBag
  *        A bag for managing life cycle.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT AttachBag(CATPLMLifeCycleRootsBag & iBag) = 0;

  /**
  * Attach a bag for managing life cycle.
  * Necessary only if the new minor is root.
  *
  * @param iBag
  *        A bag for managing life cycle.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT AttachBag(CATPLMBag & iBag) = 0;

  /**
  * Synchronize the PLM session (Synchronous mode)
  *
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT Overload() const = 0;
};

CATDeclareHandler(CATIPLMMinorVersionOverloadingSolution, CATBaseUnknown);

#endif
