// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMConfiguredReference.h
// Define the CATIPLMConfiguredReference interface
//
//===================================================================
//
// Usage notes:
//   New interface: Exposes the behaviors of any configured PLMReference.
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  LLV
//===================================================================
/**
  * @level Protected
  * @usage U4 CATPLMConfiguredReferenceAdapter 
*/

#ifndef CATIPLMConfiguredReference_H
#define CATIPLMConfiguredReference_H

#include "CATPLMComponentInterfaces.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMComponentInterfaces IID IID_CATIPLMConfiguredReference;
#else
extern "C" const IID IID_CATIPLMConfiguredReference ;
#endif

class CATICfgVariabilitySpace;
class CATICfgQuery;
class CATIIterator_var;

#define CFG_ACTIVATE_HISTORISATION

/*
 * Indicates that there is an effectivity on the reference referencing the variability space
 */
#define E_EFFECTIVITY_WITH_VS  _HRESULT_TYPEDEF_(0x80070000L)

/*
 * Indicates that there is a product configuration on the reference referencing the variability space
 */
#define E_PRODUCT_CONF_WITH_VS  _HRESULT_TYPEDEF_(0x80070001L)

/**
* Interface used to handle configuration on a Reference.
*
* <br><b>Role</b>: Components that implement
* CATIPLMConfiguredReference are References of the PLM Model.<br>
* It is used to manage Configuration links between References
* and Objects that belong to the configuration modeler of type Variability Space and Query.
* These objects are manipulated through these Interfaces: 
* @href CATICfgVariabilitySpace and @href CATICfgQuery. <br>
* Use this Interface only on References.
* The methods of this Interface can be used successfully only if Config Information is loaded in session.
*
* <p><b>BOA information</b>: this interface can be implemented
* using the BOA (Basic Object Adapter).
* To know more about the BOA, refer to the CAA Encyclopedia home page.
* Click Middleware at the bottom left, then click the Object Modeler tab page.
* Several articles deal with the BOA.</p>
*
*/
class ExportedByCATPLMComponentInterfaces CATIPLMConfiguredReference: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

	  /** 
	  * Tells if a VariabilitySpace is already defined on this Reference.
	  *
	  * <br><b>Role</b>: Even if Configuration data is not loaded in session, 
	  * this method tells if a VariabilitySpace has already been defined on this Reference.
	  *
	  * @return
	  *      A CATBoolean value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>TRUE</tt></dt>
	  *       <dd>A VariabilitySpace is already defined on this Reference.</dd>
	  *     <dt><tt>FALSE</tt></dt>
	  *       <dd>No VariabilitySpace is defined on this Reference.</dd>
	  *     </dl>
	  */
	  virtual CATBoolean HasVariabilitySpace() = 0;

	  /** 
	  * Gets the VariabilitySpace associated to this Reference.
	  *
	  * <b>Role:</b> 
	  * If a VariabilitySpace has been assigned to this reference, returns a pointer
	  * on this VariabilitySpace through the @href CATICfgVariabilitySpace interface.
	  *
	  * @param opiVS  [out, CATBaseUnknown#Release]
	  *   The VariabilitySpace defined on this Reference.
	  *	  NULL if no VariabilitySpace has been found.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
	  *       <dd>The VariabilitySpace has been successfully retrieved.</dd>
	  *     <dt><tt>E_INVALIDARG</tt></dt>
	  *       <dd>If <tt>opiVS</tt> is not NULL at beginning of method.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
	  *     @error CATInternalError BridgeERR001
      *      Configuration bridge is not loaded, impossible to access configuration information.
	  */
	  virtual HRESULT GetVariabilitySpace(CATICfgVariabilitySpace* & opiVS) = 0;


	  /** 
	  * Sets the VariabilitySpace associated to this Reference.
	  *
	  * <b>Role:</b> 
	  * Assigns a VariabilitySpace to this Reference. 
	  * No VariabilitySpace must be already set on this Reference.
	  *
	  * @param ipiVS [in]
	  *   The VariabilitySpace to assign on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>VariabilitySpace has been successfully set.</dd>
	  *     <dt><tt>E_INVALIDARG</tt></dt>
	  *       <dd>If <tt>ipiVS</tt> is NULL.</dd>
	  *     <dt><tt>E_ACCESSDENIED</tt></dt>
	  *       <dd>This configured Reference is not VPLMControlled. Forbidden to assign VS. </dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
	  */
	  virtual HRESULT SetVariabilitySpace(CATICfgVariabilitySpace* ipiVS) = 0;

	 /**
	 * Detach a variability space from the reference
	 *
	 * @param ipiVS
	 *   The variability space to detach
	 * @return
	 *      An HRESULT value. 
	 *     <br><b>Legal values</b>:
	 *     <dl>
	 *     <dt><tt>S_OK</tt></dt>
     *       <dd>Operation succeeded.</dd>
	 *     <dt><tt>E_EFFECTIVITY_WITH_VS</tt></dt>
     *       <dd>The reference has a least one instance with an effectivity that references the variability space.</dd>
	 *     <dt><tt>E_PRODUCT_CONF_WITH_VS</tt></dt>
     *       <dd>The reference has a product configuration defined with the variability space.</dd>
	 *     <dt><tt>E_FAIL</tt></dt>
	 *       <dd>Operation failed.</dd>
	 *     </dl>
     */
		virtual HRESULT UnsetVariabilitySpace (CATICfgVariabilitySpace* ipiVS) = 0;

	  /** 
	  * Gets an Iterator to enumerate the queries associated to this Reference.
	  *
	  * <b>Role:</b> 
	  * Returns an @ref CATIterator interface pointer to enumerate the queries associated to this Reference.
	  * If no VariabilitySpace is defined on this Reference, the method fails.
	  *
	  * @param ospIterator [out]
	  *   The iterator interface smart pointer.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
	  *       <dd><tt>ospIterator</tt> has been set.</dd>
	  *     <dt><tt>E_INVALIDARG</tt></dt>
	  *       <dd>If <tt>ospIterator</tt> is not NULL_var.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>If no VS is defined on Reference.</dd>
	  *     </dl>
	  */
	  virtual HRESULT GetQueryIterator(CATIIterator_var &ospIterator) = 0;

	  /** 
	  * Associates a query to this Reference.
	  *
	  * <b>Role:</b> 
	  * Associates the given query to the reference.<br>
	  * The given query must belong to the VariabilitySpace already associated to the reference, 
	  * and must not be already added on this Reference.
      *
	  * @param ipiQuery [in]
	  *   Interface pointer on a configuration query to be added.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
	  *       <dd>The query has been successfully associated.</dd>
	  *     <dt><tt>E_INVALIDARG</tt></dt>
	  *       <dd>If <tt>ipiQuery</tt> is NULL at beginning of method.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
	  */
	  virtual HRESULT AddQuery(CATICfgQuery* ipiQuery) = 0;

	  /** 
	  * Removes a query to this Reference.
	  *
	  * <b>Role:</b> 
	  * Removes the given query.<br>
      *
	  * @param ipiQuery [in]
	  *   Interface pointer on a configuration query to be removed.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
	  *       <dd>The query has been successfully removed.</dd>
	  *     <dt><tt>E_INVALIDARG</tt></dt>
	  *       <dd>If <tt>ipiQuery</tt> is NULL at beginning of method.</dd>
	  *     <dt><tt>E_ACCESSDENIED</tt></dt>
	  *       <dd>The Query object is not VPLMControlled. Operation forbidden. </dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>If <tt>ipiQuery</tt> is not present on this Reference.</dd>
	  *     </dl>
	  */
	  virtual HRESULT RemoveQuery(CATICfgQuery* ipiQuery) = 0;

     /**
	  * Gets the V_HistoryChange value associated to this Reference.
	  *
	  * <b>Role:</b> 
	  *  Gets the value of V_ChangeHistory (Boolean) attribute on this reference.
	  *
	  * @param oValue
	  *   The Value of V_ChangeHistory assigned on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>V_ChangeHistory has been successfully retrieved.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
     */
     virtual HRESULT GetHistoryChangeValue(CATBoolean& oValue) = 0;

	 /**
	  * Sets the V_HistoryChange value associated to this Reference.
	  *
	  * <b>Role:</b> 
	  *  Sets the value of V_ChangeHistory (Boolean) attribute on this reference. 
	  *
	  * @param iValue
	  *   The Value of V_ChangeHistory to be assigned on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>V_ChangeHistory has been successfully set.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
     */
	 virtual HRESULT SetHistoryChangeValue(CATBoolean iValue) = 0;

	/**
	  * Gets the V_AuthorityControl value associated to this Reference.
	  *
	  * <b>Role:</b> 
	  *  Gets the value of V_AuthorityControl (Boolean) attribute on this reference.
	  *
	  * @param oValue
	  *   The Value of V_AuthorityControl assigned on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>V_AuthorityControl has been successfully retrieved.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
     */
     virtual HRESULT GetAuthorityControlValue(CATBoolean& oValue) = 0;

     /**
	  * Sets the V_AuthorityControl value associated to this Reference.
	  *
	  * <b>Role:</b> 
	  *  Sets the value of V_AuthorityControl (Boolean) attribute on this reference. 
	  *
	  * @param iValue
	  *   The Value of V_AuthorityControl to be assigned on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>V_AuthorityControl has been successfully set.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Otherwise.</dd>
	  *     </dl>
     */
     virtual HRESULT SetAuthorityControlValue(CATBoolean iValue) = 0;

     /**
	  * Checks if the Variant Configuration Axe is activated on this Reference.
	  *
	  * @param oValue
	  *   Boolean value returned.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT IsVariantEnabled(CATBoolean& oValue) const = 0;

     /**
	  * Activates Variant Configuration Axe on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT EnableVariant() = 0;

     /**
	  * Checks if the Evolution Configuration Axe is activated on this Reference.
	  *
	  * @param oValue
	  *   Boolean value returned.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT IsEvolutionEnabled(CATBoolean& oValue) const = 0;

     /**
	  * Activates Evolution Configuration Axe on this Reference.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT EnableEvolution() = 0;

     /**
	  * Checks if the EngineeringActivation Configuration Axe is enabled on this Reference.
	  *
	  * @param oValue
	  *   Boolean value returned.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT IsEngineeringActivationEnabled(CATBoolean& oValue) const = 0;

     /**
	  * Enables EngineeringActivation Configuration Axe on this Reference.
      *
      * NOTICE: EngineeringActivation mode is exclusive regarding Evolution and Variant:
      * once Evolution or Variant is enabled, you cannot enable EngineeringActivation mode.
      * In the same manner, if EngineeringActivation mode is enabled, you cannot enable Variant or Evolution in addition.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT EnableEngineeringActivation() = 0;

     /**
	  * Checks if the ChangeActivation Configuration Axe is enabled on this Reference.
	  *
	  * @param oValue
	  *   Boolean value returned.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT IsChangeValidationEnabled(CATBoolean& oValue) const = 0;

     /**
	  * Enables ChangeActivation Configuration Axe on this Reference.
      *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT EnableChangeValidation() = 0;

     /**
	  * Checks if the History tracking is enabled on this Reference.
	  *
	  * @param oValue
	  *   Boolean value returned.
	  *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT IsHistoryEnabled(CATBoolean& oValue) const = 0;

     /**
	  * Enables History tracking on this Reference.
      *
	  * @return
	  *      An HRESULT value. 
	  *     <br><b>Legal values</b>:
	  *     <dl>
	  *     <dt><tt>S_OK</tt></dt>
      *       <dd>Operation succeeded.</dd>
	  *     <dt><tt>E_FAIL</tt></dt>
	  *       <dd>Operation failed.</dd>
	  *     </dl>
     */
     virtual HRESULT EnableHistory() = 0;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler(CATIPLMConfiguredReference, CATBaseUnknown );

#endif
