//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/10/13
//===================================================================
// CATAdpDWSReservationStatus.cpp
// Header definition of class CATAdpDWSReservationStatus
//===================================================================
//
// Usage notes:
//	Class dedicated to define Designer Workspace reservation status.
//
//===================================================================
//  2010/10/13 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1
*/ 
#ifndef CATAdpDWSReservationStatus_H
#define CATAdpDWSReservationStatus_H

#include "CATPLMIntegrationAccessRestrictedDWSUse.h"

//----System fwk
#include "CATCollec.h"										//JSOGROUP.m
#include "CATErrorDef.h"									//JS0GROUP.m
#include "CATUnicodeString.h"								//JS0GROUP.m

class CATIAdpPLMIdentificator;
class CATIAdpPLMIdentificator_var;
class CATError;
class CATPLMIDHashTable;
class CATLISTP(CATIAdpPLMIdentificator);
class CATUnicodeString;

//-----------------------------------------------------------------------

/**
* Class dedicated to define Designer Workspace reservation status.
* <br><b>Role</b>: It is a iterator which associates a Designer Workspace component to a logging status.
* @deprecated R418 CATAdpDWSReservationQuery
*/
class ExportedByCATPLMIntegrationAccessRestrictedDWSUse CATAdpDWSReservationStatus
{
public:

	// Standard constructors and destructors
	// -------------------------------------
	CATAdpDWSReservationStatus ();
	virtual ~CATAdpDWSReservationStatus ();

	/**
	* Start the enumeration of the lock status.
	* <br><b>Role:</b>This method enables to initialize the enumeration of the lock status.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*  </ul>
	*/
	HRESULT dwsStartReservationStatusEnumeration();

	/**
	* Enumerates the lock status available.
	* <br><b>Role:</b>This method enables to enumerate the set of lock status.
	*
	* @param ospIAdpId [out]
	* The identifier of the component.
	* @param oUstrLockUser [out]
	* The lock user of the component if exists.
	* @param opError [out, IUnknown#Release]
	* The logging error of the components if exists.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>S_FALSE</code> if no more result is available. All the status of the set were parsed.</li>
	*   <li><code>E_UNEXPECTED</code> if the iteration was not started.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*   <li><code>E_INVALIDARG</code> if the given @href CATIAdpPLMIdentificator or @href CATError is invalid.</li>
	*  </ul>
	*/
	HRESULT dwsNextReservationStatus(CATIAdpPLMIdentificator_var& ospIAdpId, CATUnicodeString& oUstrLockUser, CATError*& opError);

	/**
	* Add a new component status to the scope.
	* <br><b>Role:</b>This method enables to add a new component status to the scope.
	*
	* @param ipIAdpId [in]
	* The indentifier to add.
	* @param iUstrLockUser [in]
	* The lock user to add. Can be empty
	* @param ipError [in]
	* The error to add. Can be NULL.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>E_INVALIDARG</code> if the given @href CATIAdpPLMIdentificator is invalid.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*  </ul>
	*/
	HRESULT dwsAddReservationStatus(CATIAdpPLMIdentificator* ipIAdpId, const CATUnicodeString& iUstrLockUser, CATError* ipError = NULL);

	/**
	* Determine the number of identifiers in the lock status list.
	* <br><b>Role:</b>This method enables to determine the number of identifiers in the lock status list.
	*
	* @param oStatusSize [out]
	* The size of list of indentifiers in the scope.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*  </ul>
	*/
	HRESULT dwsComputeReservationStatusSize(int& oStatusSize);

private:

	// Copy constructor and equal operator
	// -----------------------------------
	CATAdpDWSReservationStatus (CATAdpDWSReservationStatus &);
	CATAdpDWSReservationStatus& operator=(CATAdpDWSReservationStatus&);

	CATPLMIDHashTable * _ReservationsStatus;
	unsigned int _ReservationsStatusEnumerationIndex;
};

//-----------------------------------------------------------------------

class CATAdpDWSReservationValues
{
public:
	CATAdpDWSReservationValues(const CATUnicodeString& iUstrLockUser, CATError* ipError);
	virtual ~CATAdpDWSReservationValues(void);
 
  /**
  * dwsGetErrorValue.
  * @param opError [out, IUnknown#Release]
  */
	HRESULT dwsGetErrorValue(CATError*& opError);

	HRESULT dwsGetUserValue(CATUnicodeString& oUstrLockUser);

private:
	CATError* _pError;
	CATUnicodeString _ustrUser;
};

//-----------------------------------------------------------------------

#endif
