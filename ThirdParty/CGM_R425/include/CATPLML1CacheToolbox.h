//===================================================================
// COPYRIGHT Dassault Systemes 2017/10/05
//===================================================================
// CATPLML1CacheToolbox.cpp
// Header definition of class CATPLML1CacheToolbox
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/10/05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLML1CacheToolbox_H
#define CATPLML1CacheToolbox_H

#include "CATPLMImplAdapterBase.h"
#include "CATOmxKeyString.h"
#include "CATPLMType.h"
#include "CATPLMAttribute.h"
#include "CATOmxArray.h"

//-----------------------------------------------------------------------

class ExportedByCATPLMImplAdapterBase CATPLML1CacheToolbox
{
public:
  /*
  * Returns the Cache Service instance.
  */
  static CATPLML1CacheToolbox& GetInstance();

  /*
  * Returns true if the given relation is cached.
  * Returns false otherwise.
  * Depends of CATPLMAppIdAlgoDefs::CanStrongRelationsBeInCache()
  */
  bool IsStrongRelationCached(const CATOmxKeyString& iRelationName);

  /*
  * Same as IsStrongRelationCached but it forces V_Owner / from / fromrel to be cached.
  * This is currently used for special appid:
  *   AppId_ELRPortInfo
  * Before using this to stream any content, if you use the iForceToRelation, please verify what you are streaming.
  * "to" relation is floating, and may not be mirroring the server content
  */
  bool IsStrongRelationCached(const CATOmxKeyString& iRelationName, bool iForceFromRelation, bool iForceToRelation = false);

  /*
  * Only checks basic not cached attributes:
  *   - LOCKUSER
  *   - LOCKSTATUS
  *   - reservedby
  *   - reserved
  *   - V_InstanceOf / to / torel
  *   - V_Owner / from / fromrel
  */
  bool IsNotCachedAttribute(const CATOmxKeyString& iAttributeName);

  /*
  * Only checks DoesNotChangeCEStamp property.
  */
  bool IsNotCachedAttribute(CATPLMAttribute* ipAttribute);

  /*
  * Checks both basic not cached attributes and DoesNotChangeCEStamp property.
  */
  bool IsNotCachedAttribute(CATPLMType* ipType, const CATOmxKeyString& iAttributeName);

  /*
  * Returns the number of attributes and relations not cached.
  */
  int GetNotCachedAttributesAndRelationsCount();

  static const CATOmxOSet<CATOmxKeyString>& GetFromRelations() { static const CATOmxOSet<CATOmxKeyString> _FromRelations{ CATPLMStrongRelationshipId::ksV_Owner , CATPLMStrongRelationshipId::ksfrom , CATPLMStrongRelationshipId::ksfromrel };  return _FromRelations; }
  static const CATOmxOSet<CATOmxKeyString>& GetToRelations() { static const CATOmxOSet<CATOmxKeyString> _ToRelations{ CATPLMStrongRelationshipId::ksV_InstanceOf , CATPLMStrongRelationshipId::ksto , CATPLMStrongRelationshipId::kstorel }; return _ToRelations; }

private:
  CATPLML1CacheToolbox();
  virtual ~CATPLML1CacheToolbox();
  CATPLML1CacheToolbox(CATPLML1CacheToolbox&);
  CATPLML1CacheToolbox& operator=(CATPLML1CacheToolbox&);

  CATOmxOSet<CATOmxKeyString> _NotCachedAttributes;
  CATOmxOSet<CATOmxKeyString> _NotCachedRelations;

};

//-----------------------------------------------------------------------

#endif
