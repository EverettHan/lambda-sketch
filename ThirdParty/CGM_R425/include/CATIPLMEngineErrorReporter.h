/**
 * @fullreview SON EBN 04:08:10
 */

// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMEngineErrorReporter.h
// Define the CATIPLMEngineErrorReporter interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Aug 2004  Creation: Code generated by the CAA wizard  son
//===================================================================



/**
* @level Protected
* @usage U3
*/


#ifndef CATIPLMEngineErrorReporter_H
#define CATIPLMEngineErrorReporter_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMEngineErrorReporter;
#else
extern "C" const IID IID_CATIPLMEngineErrorReporter ;
#endif

#include "CATIPLMErrorCell.h" // For enum PLMErrorSeverity
class CATPLMErrorParameters;
class CATUnicodeString;
class CATComponentId;
class CATString;
//------------------------------------------------------------------

/**
 * Interface to declare errors when they appear.
 * <br><b>Role</b>:A piece of code encountring an error and disposing of the error reporter has to declare this error to the reporter. The errors contained in the reporter are then transmited by the open/save engine to its client (the  save/open command)
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMEngineErrorReporter: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Declares a Client PLM Error to the error reporter. 
  * <br><b>Role</b>:  This method is to be used to declare a "Global" Client PLM Error in the reporter. 
  *  The Client PLM Error contained in the reporter are, by an engine order, transmited to its client (for example the  save/open command)
  *   @param iSeverity
  *      The error severity.
  *   @param iErrorCatalog
  *      The name of the nls catalog the  Client PLM Error is described in.
  *   @param iErrorKey
  *      The Client PLM Error must be described in iErrorCatalog by the keys iErrorKey.Diagnostic,  iErrorKey.Advice. 
  *      <br>This fields represent respectively :
  *           <br> the diagnostic: error description, in end user expressive terms.
  *           <br> the advice: advice to avoid the error,in end user expressive terms.
  *   @param iParameters
  *       The parameters associated to the error (nls parameters ...)
  */
  virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const CATString & iErrorCatalog ,    
    const CATString & iErrorKey, const CATPLMErrorParameters & iParameters)=0;


  /**
  * Declares a Client PLM Error to the error reporter. 
  * <br><b>Role</b>:  This method is to be used to declare an "By action" client PLM Error in the reporter. 
  * This "By action" error is associated to a particular PLM component.
  *  The Client PLM Error contained in the reporter are, by an engine order, transmited to its client (for example the  save/open command)
  *   @param iSeverity
  *      The error severity.
  *   @param iErrorCatalog
  *      The name of the nls catalog the Client PLM Error is described in.
  *   @param iErrorKey
  *      The Client PLM Error must be described in iErrorCatalog by the keys iErrorKey.Diagnostic, iErrorKey.Advice, iErrorKey.Request. 
  *      <br>This fields represent repectively :
  *           <br> the diagnostic: error description, in end user expressive terms.
  *           <br> the advice: advice to avoid the error,in end user expressive terms.
  *           <br> the request: what does the PLM component respect to avoid the error,in end user expressive terms.
  *   @param iParameters
  *       The parameters associated to the error (nls parameters ...)- May be empty. 
  *       Note that even in case of a PLM client "factorization" Client PLM Error, iParameters are specific to iCompId.
  *   @param iCompId
  *       The PLM component on which happend the error. irrorKey.Request explains what is resquested on iCompId so that the error doesn't occur.
  */
  virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const CATString & iErrorCatalog ,    
    const CATString & iErrorKey,  const CATPLMErrorParameters & iParameters, const CATComponentId & iCompId)=0;


  /**
  * @deprecated V5R202
  */
  virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const char * iErrorCatalog ,  
    const char * iErrorKey )=0;



  /**
  * @deprecated V5R202
  */
  virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const char * iErrorCatalog ,    
    const char * iErrorKey, const CATComponentId & iCompId)=0;



  /**
  * @deprecated V5R202
  */
  //virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const CATUnicodeString & iDiagnostic,  const CATUnicodeString &  iAdvice) =0;



  /**
  * @deprecated V5R202
  */
  //virtual HRESULT PostIncident ( PLMErrorSeverity iSeverity , const CATUnicodeString & iDiagnostic,    
  //  const CATUnicodeString &  iAdvice, const CATComponentId & iCompId, const CATUnicodeString & iRequest)=0;




  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
