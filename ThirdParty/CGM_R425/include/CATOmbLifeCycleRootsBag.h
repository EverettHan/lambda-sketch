// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATOmbLifeCycleRootsBag.h
// Header definition of CATOmbLifeCycleRootsBag
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Feb 2006  Creation: Code generated by the CAA wizard  fsd
//===================================================================
#ifndef CATOmbLifeCycleRootsBag_H
#define CATOmbLifeCycleRootsBag_H

/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */

#include "CATOmbLifeCycle.h"
#include "CATBaseUnknown.h"

//-----------------------------------------------------------------------
class CATOmbLifeCycleRootsBagImpl;
class CATIOmbLifeCycleOwnerNLSInfo;
class CATBaseUnknown;
class CATListPtrCATBaseUnknown;
class CATUnicodeString;

/**
* Class allowing to hold PLM components in session.
*/
class ExportedByCATOmbLifeCycle CATOmbLifeCycleRootsBag
{
public:

  // Standard constructors and destructors
  // -------------------------------------
  /**
  * Constructs an empty bag.
  */
  CATOmbLifeCycleRootsBag ();
  /**
  * Constructs an empty bag, with specific debug messages info.
  * @param iNLSInfo
  *    A valid reference to an implementation of CATIOmbLifeCycleOwnerNLSInfo.
  */
  CATOmbLifeCycleRootsBag ( CATIOmbLifeCycleOwnerNLSInfo & iNLSInfo );

  /**
   	* Destructor.
  */
  ~CATOmbLifeCycleRootsBag ();

  /**
  * Inserts a PLM component as root object kept by this bag.
  * Only reference and RepReference can be inserted.
  * @param iComp
  *    The root component to insert in the bag.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>The component was successfully inserted.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>The component was previously inserted, thus the bag contains it.</dd>
  *     <dt>E_FAIL</dt>
  *     <dd>The component has not been inserted.</dd>
  *   </dl>
  */
  HRESULT InsertRoot( IUnknown * iComp);

  /**
  * Removes a PLM component from this bag.
  * Every component which was kept in memory only because of this particular root will
  * be unloaded from the session.
  * @param iComp
  *    The root component to remove from the bag.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>The component was successfully removed.</dd>
  *     <dt>E_FAIL</dt>
  *     <dd>The component has not been removed. An internal error occurred.</dd>
  *   </dl>
  */
  HRESULT RemoveRoot( IUnknown * iComp );

  /**
  * Empties this bag.
  * Every component which was kept in memory only because of this bag will
  * be unloaded from the session. See also RemoveRoot method.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>All components were successfully removed.</dd>
  *     <dt>E_FAIL</dt>
  *     <dd>An internal error occured.</dd>
  *   </dl>
  */
  HRESULT RemoveAll();

  /**
  * Retrieves the roots components.
  * @param oListOfRoots
  *    The list of root components inside the bag. 
  *    It must be empty before call. 
  *    Each object of the list must be released.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Components found.</dd>
  *     <dt>E_FAIL</dt>
  *     <dd>No components found.</dd>
  *     <dt>E_INVALIDARG</dt>
  *     <dd>Called with non-empty output argument.</dd>
  *   </dl>
  */
  HRESULT GetRoots(CATListPtrCATBaseUnknown & oListOfRoots);

  /**
  * Changes pointer to NLS info.
  * @param iNLSInfo
  *    A valid reference to an implementation of CATIOmbLifeCycleOwnerNLSInfo.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Info successfully changed.</dd>
  *   </dl>
  */
  HRESULT ChangeOwnerInfo( CATIOmbLifeCycleOwnerNLSInfo & iNLSInfo );

  /**
  * Constructs a new handle referencing the same bag.
  * The CATOmbLifeCycleRootsBag C++ object is a handle on a shared internal bag.
  * The internal bag is deleted when the last handle is deleted.
  * 
  * @param iCopy
  *        An handle on the bag to be shared.
  */
  CATOmbLifeCycleRootsBag(const CATOmbLifeCycleRootsBag &iCopy);

  /**
  * Assign a new reference to an existing handle.
  * The CATOmbLifeCycleRootsBag C++ object is a handle on a shared internal bag.
  * If the handle was assigned to an existing bag, it will be released.
  *
  * @param iCopy
  *        An handle on the bag to be shared.
  * @return
  *        The current handle.
  */
  CATOmbLifeCycleRootsBag& operator=(const CATOmbLifeCycleRootsBag &iCopy);

  /**
  * Checks if handle is referencing a bag.
  * @return
  *   <br><b>Legal values</b>:
  *   <dl>
  *     <dt>TRUE</dt>
  *     <dd>handle is not referencing a bag.</dd>
  *     <dt>FALSE</dt>
  *     <dd>handle is referencing a bag.</dd>
  *   </dl>
  */
  CATBoolean operator!() const;

private:

  // not implemented - provoke link error if called
  void *operator new(size_t);
  int operator==(const CATOmbLifeCycleRootsBag & iOtherBag) const;
  int operator!=(const CATOmbLifeCycleRootsBag & iCopy) const;

  void SetUsage(CATOmbLifeCycleRootsBagImpl * iHandle );
  CATOmbLifeCycleRootsBagImpl * _ImplUsage;
};

//-----------------------------------------------------------------------

#endif
