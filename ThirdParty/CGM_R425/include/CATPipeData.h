// COPYRIGHT DASSAULT SYSTEMES 2001
//=============================================================================
//
// CATPipeData.h
//  Intersection utilities for pipe-shaped surfaces
//
//=============================================================================
// Mar. 2001  Creation                                    S. Dauby
// 01/12/10 FDS Perfo : "CentreCurve" allocated only on demand ( few cases )
//=============================================================================
//

#ifndef CATPipeData_H
#define CATPipeData_H
//
#include "Y30C3XGG.h"
#include "CATDataType.h"

//BigScale Mod. #SKA
#include "CATTolerance.h"

class CATMathSetOfPointsND;
class CATSurface;
class CATSurLimits;
class CATSweepSurface;
class CATNurbsSurface;
class CATMathFunctionXY;
class CATMathPoint;
class CATMathVector;

// A Pipe is either
//   * a (5,5)-degree rational CATSweepSurface generated by a constant-radius circle
//     swept along a centre curve, or
//   * a constant-radius Fillet surface with geometric representation a GenericFillet
//   * an offset of a Pipe in the previous senses
//
// 
// GetPipeData() finds if the surface is a Pipe and, if it is, stores its data in a 
// CATPipeData struct.
//
// CATLONG32 CanBeAPipe() is a fast check that eliminates most non-pipes
// CATLONG32 GetPipeDataOnSweep() is a utility used by GetPipeData()
// CATLONG32 GetCircleData() is a utility used by GetPipeDataOnSweep()

struct CATPipeData // other data meaningless if (!IsAPipe) 
{ 
public :
 
  CATPipeData();
  ~CATPipeData();
  CATMathSetOfPointsND & GetCentreCurve();

  CATLONG32 IsAPipe;
  double Radius;
  double Sag;
  CATLONG32 Orientation;

protected :

	CATMathSetOfPointsND * CentreCurve;

};

ExportedByY30C3XGG
void GetPipeData(const CATSurface * iSurf, const CATSurface * iRep,
                 const CATSurLimits * iLimits, CATPipeData * oData,
                 double iTol);

CATLONG32 CanBeAPipe(const CATSurface * iSurf, const CATSurface * iRep);

CATLONG32 GetPipeDataOnSweep(const CATSweepSurface * iSurf, const CATNurbsSurface * iRep, 
             const CATSurLimits * iLimits, const CATMathFunctionXY * XYZ[3],
             CATPipeData * oData, double iTol);

// Finds centre, normal and radius of the circle defined by three points
// Returns 0 if points are aligned or confused at tolerance Tol, 1 otherwise

CATLONG32 GetCircleData(double Points[3][3], CATMathPoint & Centre, CATMathVector & Normal,
                   double & Radius, double Tol,const CATTolerance & nTol);

// Method dedicated to Sweep pipes.
//
// The Sag is estimated with a "upper-bound technique" on CenterCurve curve. The Sag allows to
// compute a lower-bound (lb = Radius - Sag) used in further intersecting boxes technique (does the box 
// is inside or outside the pipe ?).
//
// This method verifies that lb bound is relevant with extremity circles, oriented by iNormal1 and iNormal2,
// of current line (iCentre1,iCentre2). If lb implies that extremity circles are not included in pipe we
// increase ioLocalSag in consequence.
//
void AdjustSagWithExtremities(const CATMathPoint & iCentre1, const CATMathPoint & iCentre2,
                              const CATMathVector & iNormal1, const CATMathVector & iNormal2,
                              const double iRadiusPipe, const double iTol, double & ioLocalSag
                              ,const CATTolerance &nTol);



#endif
