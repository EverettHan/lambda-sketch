//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/12/22
//===================================================================
// CATAdpMinorOverloader.cpp
// Header definition of class CATAdpMinorOverloader
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/12/22 Creation: Code generated by the 3DS wizard
//===================================================================

/**
 * @level Protected
 * @usage U1       
 */

#ifndef CATAdpMinorOverloader_H
#define CATAdpMinorOverloader_H

#include "CATPLMIntegrationAccess.h"
#include "CATPLMID.h"
//#include "CATPLMIDMap.h"

class CATAdpMinorOverloaderImpl;
class CATIAdpErrorMonitor;
class CATPLMID;
class CATPLMIDSet;
#include "CATPLMIDCollections.h"

//-----------------------------------------------------------------------
/*
* This class applies transformation on inputs elements, overloading them by a new
* consistent minor set of objects.
* The transformation is specified by minored references that have to overload the input set 
* with adequate impact on their aggregated objects.
* Note that this service may change minors of any elements in input set
* (for example, instances which have this reference for owner) depending on integrity rules.

*/
class ExportedByCATPLMIntegrationAccess CATAdpMinorOverloader
{
public:
// Standard constructors and destructors
// -------------------------------------

/**
* PLMIDs to apply the transformation on.
* <br><b>Role</b>: Constructor
* @param iInputsToOverload
*        may be any kind of elements
*/
CATAdpMinorOverloader (const CATPLMIDs            & iInputsToOverload,
                             CATIAdpErrorMonitor  * iopErrorMonitor = NULL);
/**
* PLMIDs to apply the transformation on.
* <br><b>Role</b>: Constructor
* @param iInputsToOverload
*        may be any kind of elements
* @return
* 
*/
CATAdpMinorOverloader (const CATPLMIDSet             & iInputsToOverload,
                             CATIAdpErrorMonitor     * iopErrorMonitor = NULL);


/**
* Add a reference to process
* <br><b>Role</b>: Add a reference (or a rep reference) that will be the overloaded reference
*                  and from which corresponding minors must be retrieved later on. 
*                  Mono (only once) instanciated rep references inputs are ignored, 
*                  but they will be automatically be fetched to match corresponding references which are given as input 
*                  (ie. mono instanciated rep ref will always have the same minor order as returned references)
* @param &iPLMID
*        This must be a reference or a rep reference. Mono instanciated rep references will be ignored.
* @return
* <dl>
* <dt><code>S_OK</code> Element successfully added <dd>
* <dt><code>E_FAIL</code> Element not added <dd>
* <dt><code>E_INVALIDARG</code> Not a reference nor a rep reference in input <dd>
* </dl>
*/
HRESULT AddElementToOverload(const CATPLMID &iPLMID);

/**
* Add references to process
* <br><b>Role</b>: Add references (or a rep references) that will be the overloaded reference
*                  and from which corresponding minors must be retrieved later on. 
*                  Mono (only once) instanciated rep references inputs are ignored, 
*                  but they will be automatically be fetched to match corresponding references which are given as input 
*                  (ie. mono instanciated rep ref will always have the same minor order as returned references)
* @param &iPLMIDs
*        This must be a reference or a rep reference. Mono instanciated rep references will be ignored.
* @return
* <dl>
* <dt><code>S_OK</code> Elements successfully added <dd>
* <dt><code>E_FAIL</code> Elements not added <dd>
* <dt><code>E_INVALIDARG</code> Not only references nor rep references in input. Nothing is added <dd>
* </dl>
*/
HRESULT AddElementsToOverload(const CATPLMIDs &iPLMIDs);

/**
* Add references to process
* <br><b>Role</b>: Add references (or a rep references) that will be the overloaded reference
*                  and from which corresponding minors must be retrieved later on. 
*                  Mono (only once) instanciated rep references inputs are ignored, 
*                  but they will be automatically be fetched to match corresponding references which are given as input 
*                  (ie. mono instanciated rep ref will always have the same minor order as returned references)
* @param &iPLMIDs
*        This must be a reference or a rep reference. Mono instanciated rep references will be ignored.
* @return
* <dl>
* <dt><code>S_OK</code> Elements successfully added <dd>
* <dt><code>E_FAIL</code> Elements not added <dd>
* <dt><code>E_INVALIDARG</code> Not only references nor rep references in input. Nothing is added <dd>
* </dl>
*/

HRESULT AddElementsToOverload(const CATPLMIDSet &iPLMIDs);

/**
* Do the replacement and get a corresponding map with input plmid key and changed plmids values
* <br><b>Role</b>: Every elements will be in the return map.
*                  For more information on the iterator, @see CATPLMIDMapIter. 
* @param &oElements
*        Map on every element. Key : PLMID. Value : PLMID. @see CATPLMIDMap
*        Key is input provided, value is computed element.
*        Any element given in input will have a corresponding output, even if not added by any method other than constructor. 
*        Element deleted will be represented as CATPLMID_Null
*        Element with corresponding minors will have different CATPLMID
*        Elements not changed will be returned, with same key and value.
*        Non consistent instances will be represented as CATPLMID_Null
*        No integrity check is done on strong link from instances to existing references or rep references
* @return
* <dl>
* <dt><code>S_OK</code> Successfully transformed <dd>
* <dt><code>E_FAIL</code> An error occured. See the error monitor <dd>
* </dl>
*/
HRESULT ReplaceByElements(CATPLMIDMap & oElements);


virtual ~CATAdpMinorOverloader ();

private:
// Copy constructor and equal operator
// -----------------------------------
CATAdpMinorOverloader (CATAdpMinorOverloader &);
CATAdpMinorOverloader& operator=(CATAdpMinorOverloader&);

CATAdpMinorOverloaderImpl *_pMinorOverloaderImpl;

};

//-----------------------------------------------------------------------

#endif
