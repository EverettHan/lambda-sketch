/* -*-c++-*- */
/**
* @level Protected
* @usage U3
*/
// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIOmyIncidentIterator.h
// Define the CATIOmyIncidentIterator interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2009  Creation: Code generated by the CAA wizard  vcs
//===================================================================
#ifndef CATIOmyIncidentIterator_H
#define CATIOmyIncidentIterator_H

#include "CATBaseUnknown.h"
#include "CATOmyIncidentCollect.h"

#include "CATIOmyIncidentCell.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmyIncidentCollect IID IID_CATIOmyIncidentIterator;
#else
extern "C" const IID IID_CATIOmyIncidentIterator ;
#endif

//------------------------------------------------------------------

/**
* Interface intended to scan and read incidents logged by an IncidentCollector.
* <br><b>Role</b>: Scans sequentially and Reads incidents logged by an IncidentCollector.
* The incidents can be eventually filtered by a given input criterium.
* <p>
* For use only - This interface cannot be re-implemented by applications using it.
*/

class ExportedByCATOmyIncidentCollect CATIOmyIncidentIterator: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

	/**
	* Rewinds iterator for another iteration on the list range already set at iterator creation time.
	* @see ObjectModelerSystem.CATIOmyIncidentIterator#Rewind
	*/
	virtual HRESULT Rewind() = 0;

	/**
	* Iterates on the next Incident Cell in the list, allways scanned from the first error pushed in IncidentCollector to the last one.
	* The first call returns the first cell in list, regarding eventual filtering criteria.
	* @param ohErrorCell
	*        the Error cell handler read by the iterator 
	* @see ObjectModelerSystem.CATIOmyIncidentIterator#Next
	*/
	virtual HRESULT Next(CATIOmyIncidentCell_var & ohErrorCell) = 0;
};

//------------------------------------------------------------------
CATDeclareHandler(CATIOmyIncidentIterator, CATBaseUnknown);

#endif
