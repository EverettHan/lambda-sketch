//===================================================================
// COPYRIGHT DS SolidWorks 2010/08/26
//===================================================================
// SWXIUtSelectionFilter.cpp
// Header definition of class SWXIUtSelectionFilter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/08/26 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef SWXIUtSelectionFilter_H
#define SWXIUtSelectionFilter_H

#include "SWXUtGeneral.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATString.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListOfCATBoolean.h"
#include "CATString.h"
#include "CATUnicodeString.h"
#include "SWXUtCursorContent.h"
#include "SWXUtVector.h"

class CATIPLMComponent;
class CATMathPlane;
class CATMathPoint;
class CATPathElement;
class SWXUtOperationContext;

extern ExportedBySWXUtGeneral  IID IID_SWXIUtSelectionFilter ;


class ExportedBySWXUtGeneral SWXIUtSelectionFilter : public CATBaseUnknown
{
	CATDeclareInterface;

public:
	// Simple selection filter interface
	virtual CATString GetFilterName() const = 0;
	virtual void GetElementFilter(CATListOfCATString & oTypes) = 0;
	virtual void GetElementFilter(CATListOfCATString & oTypes, CATListOfCATBoolean & obMatchLeafOnly) = 0;
	virtual bool CheckPath(CATPathElement * iPathToCheck, const SWXUtVector<CATPathElement *> * iCurrentSel = NULL) = 0;
	virtual void SetOperationContext(SWXUtOperationContext * ipContext) = 0;

	virtual bool AllowImportFeature() = 0;
	virtual bool AllowLoadOnDemand() = 0;
	virtual bool AllowOutOfContextSelection() = 0;
	virtual bool UsesCustomCursor() = 0;
	virtual void StartFilteringCSO() = 0;
	virtual bool AllowAutoResolve() = 0;

	//for lightweight asm resolving
	virtual bool NeedResolvedAxis() = 0;
	virtual void SetNeedResolvedAxis(bool iNeedResolvedAxis) = 0;

	virtual bool IsAssemblySelectionInContextMethod(CATPathElement * iPe) = 0;

	/**
	* PreProcessPath
	* @return IUnknown#Release 
	*/
	virtual CATPathElement * PreProcessPath(CATPathElement * iPe) = 0;

	virtual CATBaseUnknown_var GetSelectedObjectInContext(CATPathElement * iPe,
		CATIPLMComponent * iActiveProduct,
		CATPathElement * iSelectedContext,
		CATBaseUnknown_var ispSelection) = 0;
	virtual SWXUtVector<CATPathElement *> OrderSO(const SWXUtVector<CATPathElement*> * iList,
		const SWXUtVector<int> * iTypeList,
		const SWXUtVector<double> * iDepthList) = 0;

	// Extra arguments from packet for SWXUtDeclarativeSelectionFilter only.
	virtual void SetRestrictionArguments(const CATListOfCATUnicodeString & iArgs) = 0;
	virtual CATListOfCATUnicodeString GetRestrictionArguments() const = 0;

	virtual bool DecodePath(const CATPathElement * iPath) = 0;
	virtual bool DecodePath(const CATPathElement * iPath, CATPathElement *& ioDecodedPath) = 0;
	virtual void PrepareCustomCursor(const CATMathPoint & iPoint, CATPathElement * iPath, SWXUtCursorContent::CursorContentType iContentType, SWXUtCursorContent * iCursorContent) = 0;
	virtual bool UseCustomPlaneForCursor(CATPathElement * iPath, CATMathPlane & oPlane) = 0 ;
};

//-----------------------------------------------------------------------
CATDeclareHandler( SWXIUtSelectionFilter, CATBaseUnknown );

#endif
