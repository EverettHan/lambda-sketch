#ifndef CATFilletSurface_h
#define CATFilletSurface_h

//=============================================================================
// COPYRIGHT DASSAULT SYSTEMES 1999
//=============================================================================
//
// CATFilletSurface:
//    Header file for a fillet surface.
//
//=============================================================================
// Usage notes:
//=============================================================================
// ../12/97 C. Keribin Documentation.
// 23/08/12 XMH Added new CreateBorders.
// 19/07/16 R1Y Added ReplaceOnePoint().
//=============================================================================

/**
 * Interface representing a fillet surface.
 *<br> The CATFilletSurface is created by the <tt>CreateFilletSurface</tt>
 * method of the <tt>CATGeoFactory</tt> interface. 
 *<br>A CATFillet is the surface generated by the smallest circle arcs
 * of <tt>CenterPoints</tt> centers and passing through <tt>Surface1Points</tt> 
 * and <tt>Surface2Points</tt>
 * points. It keeps its canonicity, and can be a cylinder,
 * a cone, or a CATCircularSweep for the most general case. This canonical
 * surface is retrieved thanks to the <tt>GetGeometricRep</tt> inherited method.
 * The orientation goes from the Surface1Points to the Surface2Points. All the
 * definition points are used through a CATMathSetOfPointsND of dimension 9.
 *<table>
 * <tr><td>CATMathSetOfPointsND</td><td><tt> CenterPoints </tt></td>
 *                <td> The sets of the center of the circles </td></tr>
 * <tr><td>CATMathSetOfPointsND</td><td><tt> Surface1Points </tt></td>
 *                <td> The corresponding points on the first surface </td></tr>
 * <tr><td>CATMathSetOfPointsND</td><td><tt> Surface2Points </tt></td>
 *                <td> The corresponding points on the second surface </td></tr>
 *</table>
 */

#include "CATBaseUnknown.h"

class CATMathSetOfPointsNDWithVectors;
class CATGeometry;
class CATLaw;
class CATCurve;
class CATSurface;
class CATCrvParam;

#include "CATSurface.h"

#include "CATConnectDefines.h"
#include "CATFilletBordersCommand.h"
// to include Options Commands of CreateBorders
#include "CATConnectSurfaceToolData.h"
   
#include "ExportedByCATGMGeometricInterfaces.h"
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATGMGeometricInterfaces IID IID_CATFilletSurface ;
#else
extern "C" const IID IID_CATFilletSurface ;
#endif

class ExportedByCATGMGeometricInterfaces CATFilletSurface : public CATSurface
{
  CATDeclareInterface;

public:
/**
 * Returns the definition points of a CATFilletSurface
 * as a CATMathSetOfPointsNDWithVectors of dimension 9.
 */
virtual CATMathSetOfPointsNDWithVectors* GetCreationPoints() const = 0;

/**
 * Do Not Use
 * Returns the radius of a CATFilletSurface.
 */
virtual CATPositiveLength GetRadius()const = 0;

/**
 * Returns the radius of a CATFilletSurface at the 
 * point defined by the given CATSurParam.
 */
virtual CATPositiveLength GetRadiusAtPoint(const CATSurParam &iParam) const = 0;

/**
 * Returns the orientation of a CATFilletSurface.  
 * Returned value = 1 if the normal points to the circle center. 
 * Returned value = -1 if not (centrifugal orientation).
 */
virtual CATLONG32 GetSurfaceOrientation() const = 0;

/**
 * Creates the boundaries of a CATFilletSurface.
 *<br>The boundaries may degenerate as points.
 * @param iCommand
 * The types of required boundaries.
 *<dl><dt> CreateStartCircularBorder 
 *       <dd>The boundary passing through the <tt>Surface1Points</tt> 
 *    <dt> CreateEndCircularBorder 
 *       <dd>The boundary passing through the <tt>Surface2Points</tt> 
 *    <dt> CreateSplineBorder1
 *       <dd>The circle arc boundary passing through the first point of <tt>Surface1Points</tt> 
 * and <tt>Surface2Points</tt>.
 *     <dt> CreateSplineBorder1
 *       <dd>The circle arc boundary passing through the last point of <tt>Surface1Points</tt> 
 * and <tt>Surface2Points</tt>.
 *     <dt> sum of the former types <dd>for multiple creation </dl>.
 * @param oSplineBorder1
 * The boundary passing through the <tt>Surface1Points</tt> according to
 * <tt>iCommand</tt>, NULL otherwise.
 * @param oSplineBorder2
 * The boundary passing through the <tt>Surface2Points</tt> according to
 * <tt>iCommand</tt>, NULL otherwise.
 * @param oStartCircularBorder
 * The circle arc boundary passing through the first point of <tt>Surface1Points</tt>
 * and <tt>Surface2Points</tt> according to
 * <tt>iCommand</tt>, NULL otherwise.
 * @param oEndCircularBorder
 * The circle arc boundary passing through the last point of <tt>Surface1Points</tt>
 * and <tt>Surface2Points</tt> according to
 * <tt>iCommand</tt>, NULL otherwise.
 */
virtual void CreateBorders(CATGeoFactory            * iWhere,
                           CATFilletBordersCommand    iCommand,
                           CATGeometry             *& oSplineBorder1,
                           CATGeometry             *& oSplineBorder2,
                           CATGeometry             *& oStartCircularBorder, 
                           CATGeometry             *& oEndCircularBorder,
                           const CATCrvParam       * iSPlineStartPosition = 0,
                           const CATCrvParam       * iSPlineEndPosition   = 0,
                           const CATCrvParam       * iStartBorderPosition = 0,
                           const CATCrvParam       * iEndBorderPosition   = 0,
                           const CATLONG32           iParamID = 0) const = 0;

/**
 * Adds a point to a the surface.
 * @param iRankNumber
 * The position of the added point
 * (1 to be inserted between the first and the second point).
 * @param iParam
 * The parameter of the added point
 * @param iPoint 
 * The point in an array of doubles
 * @param iTangent
 * The tangent in an array of doubles
 * @param iSecondDerivative
 * The second derivative in an array of doubles
 */
virtual CATBoolean AddOnePoint(const CATLONG32   iRankNumber,
                               const double      iParam,
                               const double    * iPoint,
                               const double    * iTangent,
                               const double    * iSecondDerivative,
                               const CATLONG32   iFirstTraceIndex,
                               const CATLONG32   iSecondTraceIndex,
                               const CATLONG32   iCenterCurveIndex,
                               const CATLONG32   iAngleIndex) = 0;

/**
 * @nodoc
 * Internal use only.
 * Replaces one point in the surface definition.
 * The value of "iRankNumber" should be 1 for the first point, and the number of points for the last point.
 */
  virtual CATBoolean ReplaceOnePoint(const CATLONG32 iRankNumber,
                                     const double iParam,
                                     const double * iPoint,
                                     const double * iTangent,
                                     const double * iSecondDerivative,
                                     const CATLONG32 iFirstTraceIndex,
                                     const CATLONG32 iSecondTraceIndex,
                                     const CATLONG32 iCenterCurveIndex,
                                     const CATLONG32 iAngleIndex) = 0;

/**
* Check if the radius of a CATFilletSurface is constant or not.
*/
virtual CATBoolean HasAConstantRadius() const = 0;

virtual void GetConstantFilletData(double &oRadius) const = 0;

virtual void GetVariableFilletData(CATCurve *& oSpine,
                                   CATLaw   *& oRadiusLaw,
                                   CATLaw   *& oMappingLaw) const = 0;
/*
 * Use this method preferrably to the three previous as it's more
 * generic. It returns a CATConnectSurfaceToolData describing the
 * creation data of the fillet surface (type of fillet, radius, spine,
 * laws, etc.)
 */

virtual const CATConnectSurfaceToolData * GetToolData() const = 0;

//-------------------------------------------------------------
// GetSurface / GetContact: For iSupportID, use names defined in
// CATConnectDefines.h
//-------------------------------------------------------------
virtual void GetSurface(const CATLONG32    iSupportID,
                        CATSurface      *& oSurface,
                        int              & oOrientation) const = 0;

virtual void GetSupport(const CATLONG32 iSupportID,
                        CATGeometry  *& oSupport,
                        int           & oOrientation) const = 0;

virtual void GetContact(const CATLONG32   iSupportID,
                        CATGeometry    *& oContact) const = 0;

//-------------------------------------------------------------------
// GetNumberOfSupports 
// returns 2 (bi-tangency) or 3 (tri-tangency)
//-------------------------------------------------------------------

virtual void GetNumberOfSupports(CATLONG32 & oNumber) const = 0;

/**
 * @nodoc
 * Call this method after an extrapolation to update all objects
 * dependent on the surface (PCurves)
 */
 virtual void IsTrimmed() = 0;
 
 virtual void CreateBorders(CATGeoFactory            * Where,
                            CATFilletBordersCommand    iCommand,
                            CATGeometry             *& SplineBorder1,
                            CATGeometry             *& SplineBorder2,
                            CATGeometry             *& StartCircularBorder, 
                            CATGeometry             *& EndCircularBorder,
                            const double             * iSplineStartPosition,
                            const double             * iSplineEndPosition,
                            const double             * iStartBorderPosition,
                            const double             * iEndBorderPosition,
                            const CATLONG32            iParamID) const = 0;

 virtual void CreateBorders( CATGeoFactory      * iWhere,
                             const CATSurParam  * iStart,
                             const CATSurParam  * iEnd,
                             CATGeometry       *& oBorder ) const = 0;

};  
  CATDeclareHandler(CATFilletSurface,CATSurface);

#endif
