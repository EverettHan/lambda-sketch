#ifndef CATVidLayGrid_h
#define CATVidLayGrid_h

// COPYRIGHT Dassault Systemes 2005

//===================================================================
//
// CATVidLayGrid.h
// Header definition of CATVidLayGrid
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================

// VisuImmersiveDialog framework
#include <VisuDialog.h>
#include <CATVidLayCollection.h>
#include <CATVidLayGridConstraints.h>
#include <CATVidLayGridWeight.h>
#include <CATVidBorder.h>
#include <UIVCoreToolsInline.h>

#include <list.h>

class CATVidLayGridIterator;
class CATStreamer;


/**
 * This class provides a way to position widgets in rows and columns.
 * <p>Each cell of the grid can contain a widget, or an other layout.
 * 
 * @par In CAPSYPStyle files
 * @code
 * <CATVidLayGrid ...........>
 *   <MyWidgetA ........... CATVidLayGrid.IndexedConstraints="..." />
 *   <MyWidgetB ........... CATVidLayGrid.IndexedConstraints="..." />
 *   ....
 * </CATVidLayGrid>
 * @endcode
 * IndexedConstraints is a CATVidLayGridConstraints.
 *
 * @par Grid resizing
 * A CATVidlayGrid isnot resizable on its own.
 * But you can put a CATVidCtlGridSplitter in it to do that.
 *
 * @see CATVidLayGridConstraints
 * @see CATVidLayGridWeight
 * @see CATVidLayCollection
 * @see CATISYPCollection
 * @ingroup VIDLayout
 */
class ExportedByVisuDialog CATVidLayGrid: public CATVidLayCollection
{
  CATDeclareClass;
  
public:
  
  /**
  * Standard constructor
  */
  CATVidLayGrid ();
  
  /**
  * Standard constructor with initializations
  */
  CATVidLayGrid (CATCommand *i_pParent, const CATString & i_pIdentifier);
  
  /**
  * @copydoc CATVidLayGridWeight::SetColumnWeight
  */
  void SetColumnWeight(unsigned int i_index, float i_weight);
  
  /**
  * @copydoc CATVidLayGridWeight::GetColumnWeight
  */
  INLINE float GetColumnWeight(unsigned int i_index) const
  {
    return _gridWeight.GetColumnWeight(i_index);
  }

  /**
  * @copydoc CATVidLayGridWeight::SetRowWeight
  */
  void SetRowWeight(unsigned int i_index, float i_weight);
  
  /**
  * @copydoc CATVidLayGridWeight::GetRowWeight
  */
  INLINE float GetRowWeight(unsigned int i_index) const
  {
    return _gridWeight.GetRowWeight(i_index);
  }
  
  /**
  * Sets all columns and rows weights form a CATVidLayGridWeight.
  */
  void SetGridWeight(const CATVidLayGridWeight& i_gridWeight);

  /**
  * @return all columns and rows heights as a CATVidLayGridWeight.
  */
  const CATVidLayGridWeight& GetGridWeight() const;

  /** 
   * Sets the margins used around the layout.
   * By default, these margins are null.
   */
  void SetContentsMargins(const CATVidBorder& i_contentsMargins);

  /**
   * @return the margins used around the layout.
   */
  INLINE const CATVidBorder& GetContentsMargins() const 
  {
    return _contentsMargins;
  }

  /**
  * Sets the inner cell spacing (inter-cells space).
  * This method does not impact the spacing between the container and its cells
  * (use the SetContentsMargins method for that).
  * By default, the InnerCellSpacing property is equal to 0.
  */
  void SetInnerCellSpacing(int i_innerCellSpacing);

  /**
  * @return the inner cell spacing (inter-cells space).
  */
  INLINE int GetInnerCellSpacing() const
  {
    return _innerCellSpacing;
  }

  /**
  * Sets the global cell spacing (inter-cells space and content margins).
  * By default, the CellSpacing property is equal to 0.
  * @deprecated use the SetInnerCellSpacing() and SetContentsMargins() methods instead.
  */
  void SetCellSpacing(int i_cellSpacing);

  /**
  * @return the global cell spacing.
  * @deprecated use the GetInnerCellSpacing() and GetContentsMargins() methods instead.
  */
  int GetCellSpacing() const;

  /**
  * @return the number of rows.
  */
  int GetNbRows();

  /**
  * @return the number of columns.
  */
  int GetNbColumns();

  /**
  * @return the index of the last row.
  */
  int GetLastRow();

  /**
  * @return the index of the last column.
  */
  int GetLastColumn();

  /**
  * @return an iterator on all rows.
  */
  CATVidLayGridIterator* CreateGridRowIterator() const;

  /**
  * @return an iterator on all columns.
  */
  CATVidLayGridIterator* CreateGridColumnIterator() const;

  /**
  * @nodoc
  */
  float GetRowSize(unsigned int i_index);

  /**
  * @nodoc
  */
  float GetColumnSize(unsigned int i_index);

  /**
  * nodoc
  */
  enum GridAppendPolicy{
    /**
    * Appended at (0,0).
    * Default option
    */
    GridDefaultAppend=0,
    /**
    * Appended after the last row.
    */
    GridRowAppend,
    /**
    * Appended after the last column.
    */
    GridColumnAppend
  };

  /**
  * nodoc
  */
  void SetGridAppendPolicy(CATVidLayGrid::GridAppendPolicy);

  /**
  * nodoc
  */
  CATVidLayGrid::GridAppendPolicy GetGridAppendPolicy();

  int ComputeNbRows();
  int ComputeNbColumns();

  /**
   * Force the computation of the rows and columns count during the next Update.
   */
  void Invalidate();

protected:

  virtual ~CATVidLayGrid();
  /**
  * Copy constructor
  */
  // -----------------------------------
  CATVidLayGrid (CATVidLayGrid &);
  /**
  * Equal operator
  */
  CATVidLayGrid& operator=(CATVidLayGrid&);

  void ComputeNbRowsAndColumns();

  virtual void UpdateComputedMinimumDimension();
  virtual void Layout();
  virtual CATVidLayConstraints* CreateConstraints();
  virtual void InternalSetConstraints(CATVidWidget *i_pWidget, const CATVidLayConstraints& i_constraints);
  virtual void InternalRemoveWidget(CATVidWidget *i_pWidget, const CATVidLayConstraints& i_constraints);

#ifndef VID_DEPRECATED
  // CATDsiTabPage call GetRecordflag, which has disappear from Widget....
  CATBoolean GetRecordFlag() const{return FALSE;}
  void Record(const char*, CATStreamer*){}
#endif

private:

  class Rect
  {
  public:
    Rect() :
        x(0),
        y(0),
        w(0),
        h(0)
    {
    }
    Rect(float i_x, float i_y, float i_w, float i_h) :
        x(i_x),
        y(i_y),
        w(i_w),
        h(i_h)
    {
    };
    Rect(const Rect &i_rect) : 
        x(i_rect.x),
        y(i_rect.y),
        w(i_rect.w),
        h(i_rect.h)
    {
    };
    ~Rect()
    {
    };

    float x, y, w, h;
  };
  
  class GridInfo
  {
  public:
    GridInfo() :
        size(0),
        cellStart(FALSE),
        cellEnd(FALSE),
        empty(TRUE)
    {
    }
    ~GridInfo()
    {
    };

    float size;
    CATBoolean cellStart;
    CATBoolean cellEnd;
    CATBoolean empty;
  };
  
  CATVidLayGridWeight _gridWeight;

  GridInfo * _plColumn;
  GridInfo * _plRow;
  int _firstC;
  int _lastC;
  int _firstR;
  int _lastR;
  CATBoolean _columnsBoundComputedFlag;
  CATBoolean _rowsBoundComputedFlag;
  CATBoolean _noXSpanFlag;
  CATBoolean _noYSpanFlag;

  CATVidBorder _contentsMargins;
  int _innerCellSpacing;
  GridAppendPolicy _appendPolicy;
};

CATSYP_DECLARE_ENUMFACTORY (ExportedByVisuDialog, CATVidLayGrid__GridAppendPolicy);

#endif // CATVidLayGrid_h
