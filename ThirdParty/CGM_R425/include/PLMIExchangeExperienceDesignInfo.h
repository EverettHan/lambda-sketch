//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2014x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2013/07/19
//===================================================================
// PLMIExchangeExperienceDesignInfo.cpp
// Header definition of class PLMIExchangeExperienceDesignInfo
//===================================================================
//
// Usage notes: Object used to set the design properties regarding
// an experience object. (status, option, operation .. etc.).
//
//===================================================================
//  2013/07/19 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceDesignInfo_H
#define PLMIExchangeExperienceDesignInfo_H

#include "PLMExchangeInterfaces.h"
#include "CATListOfInt.h"
#include "CATUnicodeString.h"

#include "CATBaseUnknown.h"


extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceDesignInfo ;


class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceDesignInfo: public CATBaseUnknown
{
CATDeclareInterface;

public:


   /**
   * <b> GetPropertiesList :</b> Retrieve the list of properties to set for the linked model object.      
   *
   * @param oListOfProperties [out] 
   * output list of properties. This list is builded with properties defined in the PLMExchangeExperienceDesignProperties.h
   * Each property are build using binary operation. Therefore it has a type, a target and an id (defined in the mentionned header).  
   * Therefore you must test the property using bit operation to retrieve the needed information.
   * i.e of returned property : (DesignPropertyType_String | DesignPropertyTarget_WIN | DesignPropertyId_Name) 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL.
   */ 
   virtual HRESULT GetPropertiesList(CATListOfInt & oListOfProperties) = 0; 

   /**
   * <b> SetPropertyValue :</b> Set the value for a property of type integer.      
   *
   * @param iProperty [in] 
   * input integer corresponding the given property.
   *
   * @param iValue [in] 
   * input integer corresponding to the value of the given property.
   *
   * @param iPos [in] 
   * input integer corresponding index of the value to set (to use only if the property is a list). (starts at 1)
   * If iPos is > then current property value size, then the given value will be appended.
   * If iPos == 0 then we reset the property values:
   *     - all set values are removed.
   *     - given value is now set as the first value (pos = 1).
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL if the given property doesn't exist for this object.
   *                          if the given property is not of interger type.        
   *                          if the given position is negative.    
   */ 
   virtual HRESULT SetPropertyValue(int & iProperty, int & iValue , int iPos = 1)= 0;  

      /**
   * <b> SetPropertyValue :</b> Set the value for a property of type string.      
   *
   * @param iProperty [in] 
   * input integer corresponding to the given property.
   *
   * @param iStrValue [in] 
   * input string corresponding to the value of the given property.
   *
   * @param iPos [in] 
   * input integer corresponding index of the value to set (to use only if the property is a list).(starts at 1)
   * If iPos is > then current property value size, then the given value will be appended.
   * If iPos == 0 then we reset the property values:
   *     - all set values are removed.
   *     - given value is now set as the first value (pos = 1).
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL if the given property doesn't exist for this object.
   *                          if the given property is not of string type.  
   *                          if the given position is negative.    
   */ 
   virtual HRESULT SetPropertyValue(int & iProperty, CATUnicodeString  & iStrValue , int iPos = 1)= 0;  


};

//-----------------------------------------------------------------------

#endif
 
