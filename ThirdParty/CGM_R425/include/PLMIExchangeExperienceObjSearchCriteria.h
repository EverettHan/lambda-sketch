//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2014x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2013/12/13
//===================================================================
// PLMIExchangeExperienceObjSearchCriteria.cpp
// Header definition of class PLMIExchangeExperienceObjSearchCriteria
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/12/13 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceObjSearchCriteria_H
#define PLMIExchangeExperienceObjSearchCriteria_H

#include "PLMExchangeInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATListOfInt.h"
#include "CATUnicodeString.h"

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceObjSearchCriteria ;

class PLMIExchangeExperienceObjSearchConditions;

class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceObjSearchCriteria: public CATBaseUnknown
{
CATDeclareInterface;

public:      

   /**
   * <b> SetTypeMask</b> : Set the type mask for the criteria.
   *
   * @param iTypeMask (in)
   * The mask is build from PLMExchangeExperienceObjectType (defined in PLMExchangeExperienceDictionary.h) and is there to specify which object to consider. 
   * PLMType_None -> There's no mask set, all the type will be taken into account.
   * Default value = PLMType_None.
   * ie : TypeMask = (PLMType_Reference | PLMType_Instance), means that only reference and instance are considered.   
   */ 
   virtual void SetTypeMask(unsigned int iTypeMask) = 0 ;
   
   /**
   * <b> GetTypeMask</b> : Get the type mask for the criteria.
   */ 
   virtual unsigned int GetTypeMask() = 0 ;

   /**
   * <b> SetSearchLevel</b> : Set the max search level for the criteria.
   *
   * @param iSearchLevel (in).
   * The level corresponds to the search tree level for the given mask. The level is relative to each type set in the mask.                 
   * Default value = 0
   * Level = 0 -> no limit. The whole tree will be searched. 
   * i.e : TypeMask is set to PLMType_Reference.
   *        By setting the search level to 3, it means that the search will go through 3 level of reference.
   */ 
   virtual void SetSearchLevel(unsigned int iSearchLevel) = 0 ;

   /**
   * <b> GetSearchLevel</b> : Get the max search level set for the criteria.
   */ 
   virtual unsigned int GetSearchLevel() = 0 ;

   /**
   * <b> SetLevelToIgnore</b> : Set the level to ignore when searching for object of type mask.
   *
   * @param iListOfLevelToIgnore (in)
   * Correspond to the levels on which the object will be ignored and thus not returned.  
   * - If IgnoreLevel is empty, then all the encountered object will be returned accordingly to the set search tree level.                  
   * - If IgnoreLevel has been appended with 0, then all the object of the set search tree level will be returned.   
   * ie : Level 3 and IgnoreLevel is empty, then objects of level 1 ,2 and 3 will be returned.
   * ie : Level 3 and IgnoreLevel is appended with 0,  then only the objects of level 3 will be returned.
   * ie : Level = 4 and IgnoreLevel is appended with 2 and 3 -> Object of level 1 and 4 will be returned.
   */ 
   virtual void SetLevelToIgnore(CATListOfInt & iListOfLevelToIgnore) = 0 ;

   /**
   * <b> GetLevelToIgnore</b> :Get the list of level to ignore.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual void GetLevelToIgnore (CATListOfInt & oListOfLevelToIgnore) = 0;  
   
   /**
   * <b> AddConditions</b>: Add a condition object for the search criteria.
   * Through the created object, condition on attribute(s) can be set.
   * Added conditions are by default linked with an OR operator.
   * ie : Let consider the following scenario :  
   *      - 1st call to AddConditions, and on created conditions object set AttributeA with value A.
   *      - 2nd call to AddConditions, and on created conditions object set AttributeB with value B.
   *      - 3rd call to AddConditions, and on created conditions object set AttributeB with value BB and AttributeC with value C.   
   *      The criteria will select object having :
   *         - the AttributeA == value A,
   *         - OR the AttributeB == value B,
   *         - OR (the AttributeB == value BB AND AttributeC == value C).   
   *
   * @param opCreatedConditions [out, CATBaseUnknown#Release].
   * output pointer on the created condition object. This object will be used to set selection conditions (i.e on object's attributes).
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT AddConditions(PLMIExchangeExperienceObjSearchConditions * & opCreatedConditions) =0;

   /**
   * <b> GetNbOfCondition</b>: Get the number of condition objects added for the current search criteria.
   * A call to AddConditions will count as 1.
   * This method return the number of time the method AddConditions has been called.  
   *
   * @return
   *    integer corresponding to the number added conditions object.   
   */ 
   virtual int GetNbOfCondition() = 0 ;

   /**
   * <b> GetConditions</b>: Get the condition object defined for the given position.
   *
   * @param iPos (in).
   * input integer corresponding to the position of the condition to retrieve the information from. 
   *
   * @param opConditions [out, CATBaseUnknown#Release].
   * output pointer on the PLMIExchangeExperienceObjSearchConditions corresponding to the condition object at the given position. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT GetConditions(int & iPos,  PLMIExchangeExperienceObjSearchConditions * & opConditions) = 0;

};

//-----------------------------------------------------------------------

#endif
 
