//===================================================================
// COPYRIGHT Microsoft 2012/02/14
//===================================================================
// CATAsyncRequest.cpp
// Header definition of class CATAsyncRequest
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/02/14 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncRequest_H
#define CATAsyncRequest_H

#include "CATOmxSharable.h"

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncBasicTypes.h"
#include "CATIAsyncRequestsPlatformStrategy.h"
#include "CATAsyncTaskContext_NG.h"

#include "CATAssert.h"
#include "CATUnicodeString.h"
#include "CATLib.h"
#include "CATAsyncStatistics.h"

class CATIAsyncTaskCompletionCallBackBase;
class CATAsyncProgressData;
class CATAsyncRequestParams;
class CATAsyncTaskListener;
class CATAsyncSysHttpListener;

//  Async Request Id
typedef CATULONG64 CATAsyncRequestId;

class ExportedByCATAsyncTasksPlatform CATAsyncRequest : public CATOmxSharable
{
public:

  // Request Status
  enum Status
  {
    // State Status
    PENDING=0,
    RUNNING=1,
    // Final Status
    OK=2,
    CANCELED=3,
    FAILED=4,
    UNEXPECTED=5,
    SERVER_DISCONNECTED=6
  };

  // Request Parameters
  // Each request implementation has to inherit this stuct
  struct ExportedByCATAsyncTasksPlatform Params {};

  // Request Context
  struct ExportedByCATAsyncTasksPlatform Result 
  {
    
  };    

  // Request Progression Data
  struct ProgressData {};

  /**
  * Constructor & Destructor
  */
  CATAsyncRequest(CATAsyncRequest_Type iType, CATAsyncAnswer_Type iAnswerType, const Params& iParams);
  virtual ~CATAsyncRequest();


  CATAsyncRequestId GetId() const;
  
  /************************/
  /* Methods to implement */
  /************************/
  /**
  * Get Request String Name
  *
  * @return [const char *], the request name
  */
  virtual const char * GetRequestName() = 0;

  /**
  * Get the Platform able to execute the request implementation
  *
  * @return [CATOmxArray], the list of workable platform
  */
  virtual CATAsyncRequestsPlatform_Type GetWorkablePlatform() = 0;

  /**
  * Create an instance of the input platform
  *
  * @return [CATIAsyncRequestsPlatformStrategy], the instance
  */
  virtual CATIAsyncRequestsPlatformStrategy * CreatePlatformInstance(CATAsyncRequestsPlatform_Type platformType) = 0;

  /**
  * Return TRUE if request can be run synchronously, FALSE otherwise
  *
  * @return [CATBoolean]
  */
  virtual CATBoolean HandleSyncRun() = 0;

  /**
  * Run the request synchronously
  *
  * @return [Status], the end status request
  */
  virtual void RunSync(CATIAsyncTaskCompletionCallBackBase * ipAsyncTaskCompletionCallBack) { CATAssert(0); /* Not allowed */ }

  /**
  * Callback with extented context
  */
  virtual void ExtendedContextCallBack(CATIAsyncTaskCompletionCallBackBase * ipAsyncTaskCompletionCallBack);

protected:

  /**
  * To implement
  * Get the execution result of the request
  */
  virtual void AddExecResultInContext(CATAsyncTaskContextBase & ioAsyncTaskContext) {}

  /**
  * To implement
  * Get the execution progression data of the request
  */
  virtual void AddProgressDataInContext(CATAsyncTaskContextBase & ioAsyncTaskContext) {}

public:

  /**************************/
  /* Public generic methods */
  /**************************/
  /**
  * Get the execution context of the request
  * Context contains some data of the request
  * Note: the context in input must be updated and be returned
  *
  * @return [CATAsyncTaskContext], the current context
  */
  CATAsyncTaskContextBase& GetResult(CATAsyncTaskContextBase & ioAsyncTaskContext);

  /**
  * Get the request type (@see CATAsyncRequest_Typ@CATAsyncTasksUtils)
  *
  * @return [CATAsyncRequest_Type] the request type
  */
  CATAsyncRequest_Type GetType() const { return _AsyncRequestType; }
  
  /**
  * Get the request status
  *
  * @return [CATAsyncRequest::Status] the request status
  */
  Status GetStatus() { 
    return _status; 
  }

  /**
  * Set the final request status
  * ie the status cannot be changed after
  *
  * @param
  * <br/> [in] iStatus: the final status to set
  */
  void SetRequestStatus(Status iStatus);

  /**
  * Inform the resquest a progress notification is required (or no more required)
  *
  * @return
  * <code>S_OK</code>: the resquest is ready to notify progression
  * <code>E*</code>: an error occured
  */
  CATBoolean IsNotifyingProgress() { return _bNotifyProgression; }

  /**
  * Inform the resquest a progress notification is required (or no more required)
  *
  * @return
  * <code>S_OK</code>: the resquest is ready to notify progression
  * <code>E*</code>: an error occured
  */
  void SetNotifyProgress(CATBoolean ibNotifyProgress) { _bNotifyProgression = ibNotifyProgress; }

  /**
  * Set the platform type that execute the instance of request
  * (@see CATAsyncRequestsPlatform_Type@CATAsyncTasksUtils)
  *
  * @param
  * <br/> [in] iPlatformType: the platform type
  */
  void SetPlatormType(CATAsyncRequestsPlatform_Type iPlatformType) { _platformType = iPlatformType; }

  /**
  * Get the platform type that execute the instance of request
  * (@see CATAsyncRequestsPlatform_Type@CATAsyncTasksUtils)
  *
  * @return the platform type
  */
  CATAsyncRequestsPlatform_Type GetPlatormType() const { return _platformType; }

  // For traces. Many data but ...  
  CATUnicodeString  GetRequestExecutionNumberString(CATBoolean iEightJustified=TRUE) const ;
  int  GetRequestExecutionNumber() const { return _ExecNumber; }
  void SetTraceDirectory(const CATUnicodeString& iTraceDirectory, const CATUnicodeString& iParentTaskId)
  {
    _TraceDirectory = iTraceDirectory; _ParentTaskId = iParentTaskId;
  }


  void SetIncrementTraceCounter(CATBoolean iIncrement) { _IncrementTraceCounter = iIncrement; }
  CATBoolean IsTraceCounterIncremented() { return _IncrementTraceCounter; }

  const CATUnicodeString& GetTraceDirectory() const    { return _TraceDirectory; }
  const CATUnicodeString& GetParentTaskId() const      { return _ParentTaskId; }
  
  /**
  * Returns the statistics of the current request.
  *
  * @param oStatistics [out, CATBaseUnknown#Release]
  *    the returned statistics
  *
  * @return
  *   S_OK      statistics correctly returned
  *   E_NOT_SET returned statistics is NULL
  *   E_*       an error occurred
  */
  virtual HRESULT GetStatistics(CATAsyncStatistics*& oStatistics) { return E_NOT_SET; };

  /*
  * Returns the request's task listener.
  * It gives the ability to get called back by the task when his lifecycle change.
  * Return NULL is allowed, then the request will not be added to the task's listeners, and thus will not be notified of task's state changes.
  * The listener is addrefed and must be released.
  *
  * @return
  *   The addrefed task listener. Null is allowed.
  */
  virtual CATAsyncTaskListener* GetTaskListener() { return NULL; };

protected:
  
  CATAsyncRequest(const CATAsyncRequest &); // NOT IMPLEMENTED
  CATAsyncRequest& operator=(const CATAsyncRequest&); // NOT IMPLEMENTED

  CATAsyncRequest_Type _AsyncRequestType; // the request type
  CATAsyncAnswer_Type  _AsyncAnswerType;

  Status _status; // the request status

  CATAsyncRequestsPlatform_Type _platformType; // the platform type executing the request

  CATBoolean _bNotifyProgression; // Notify Progression
  
  // Next 5 are for CATIAsyncRequestTraces
  CATUnicodeString _TraceDirectory; // trace directory (where print NetRecordCapture)

private:
  CATBoolean _IncrementTraceCounter;

protected:
  CATUnicodeString                _ParentTaskId;  
  int                             _ExecNumber;
  static CATOmxCRefTS<int> _ExecNumberCounter;
};

#endif
