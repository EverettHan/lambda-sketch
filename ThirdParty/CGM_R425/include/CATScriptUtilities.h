#ifndef CATScriptUtilities_h
#define CATScriptUtilities_h


// COPYRIGHT DASSAULT SYSTEMES 2000

// System framework
#include "CATString.h"
#include "CATUnicodeString.h"
#include "CATScriptLanguage.h"
#include "CATListOfCATString.h"
#include "CATListOfCATUnicodeString.h"
#ifndef _WINDOWS_SOURCE
#include "CATMainwin.h"
#else // _WINDOWS_SOURCE
#include <oaidl.h>
#endif // _WINDOWS_SOURCE
class CATError;
#include "CATVariant.h"
#include "CatScriptLibraryType.h"

// AutomationInterfaces framework
#include "AutomationItf.h"
#include "CATListOfITypeLib.h"
#include "CATListOfCATIScriptFunction.h"

// Flags
/** @nodoc */
#define CAT_EXECUTESCRIPT_AUTOMATIC_REPLAY_ENABLE               0x01
/** @nodoc */
#define CAT_EXECUTESCRIPT_MACRO_UNDOABILITY_FORCE_DISABLE       0x02
/** @nodoc */
#define CAT_EXECUTESCRIPT_MACRO_UNDOABILITY_FORCE_ENABLE        0x04

class CATScriptRef;
class CATIScriptProgram;
class CATIScriptFunction;
class CATIAdpPLMIdentificator;

// Dialog framework
class CATDialog;

/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */

/**
 * Class to provide utility functions which simplify the use
 * of the scripting interfaces.
 */
class ExportedByCATAutoItf CATScriptUtilities {
	public:

		/**
		 * @nodoc
		 * Converts a script language code to a script language name.
		 */
		static HRESULT __stdcall LanguageCodeToLanguageName(
			CATScriptLanguage iLanguage, 
			CATUnicodeString& oLanguage);

		/**
		 * @nodoc
		 * Converts a script language name to the standard file
		 * extension for script files written in that language.
		 */
		static HRESULT LanguageNameToLanguageExtension(
			const CATUnicodeString& iLanguage, 
			CATString& oExtension);

		/**
		 * @nodoc
		 * A utility function to split a DSY path concatenation into 
		 * an array of paths.
		 */
		static HRESULT SplitConcatenation(
			const CATUnicodeString& iPath, 
			CATListOfCATUnicodeString& oDirs);

		/**
		 * @nodoc
		 * A utilitity function which returns all the files with a give extension 
		 * in the current directory.
		 */
		static HRESULT GetFilesOfTypeInDirectory(
			const CATUnicodeString& iPath, 
			const CATUnicodeString& iExt, 
			CATListOfCATUnicodeString& oFiles);


		/**
		 * @nodoc
		 * Calls release on all the items of a ITypeLib list.
		 */
		static void Release(
			CATListOfITypeLib &iList);

		/**
		 * @nodoc
		 * Copies a list of typelibs into another list of typelibs.
		 */
		static void Copy(
			CATListOfITypeLib& iFrom, 
			CATListOfITypeLib& oTo);

		/**
		 * @nodoc
		 * Appends a list of typelibs to another list of typelibs.
		 */
		static void Append(
			CATListOfITypeLib& iFrom, 
			CATListOfITypeLib& oTo);

		/**
		 * @nodoc
		 * Calls release on all the items of a CATIScriptFunction list
		 * and removes all the items.
		 */
		static void Release(
			CATListOfCATIScriptFunction &iList);

		/**
		 * @nodoc
		 * Loads a list of typelibs specified by their path.
		 * The function returns two lists: the list of typelibs which
		 * have actually been loaded and their paths.
		 */
		static HRESULT LoadTypeLibs(
			CATListOfCATUnicodeString& iLibPaths, 
			CATListOfCATUnicodeString& oLoadedPaths, 
			CATListOfITypeLib& oLoadedLibs);

		/**
		 * @nodoc
		 * Register a list of typelibs with the Windows registry.
		 */
		static HRESULT RegisterTypeLibs(
			CATListOfCATUnicodeString& iLibPaths, 
			CATListOfITypeLib& iLibs);

		/**
		 * @nodoc
		 * Unregister a list of typelibs from the Windows registry.
		 */
		static HRESULT UnregisterTypeLibs(
			CATListOfITypeLib& iLibs,
			int iVersionMajor,
			int iVersionMinor);

		/**
		 * @nodoc
		 * Returns TRUE if the typelib has been generated by
		 * the DS IDL compiler, false otherwise
		 */
		static HRESULT IsDSYTypeLib(
			ITypeLib* iTypelib,
			CATBoolean& oBoolean);

		/**
		 * @nodoc
		 * Short cut to invoke CATIScriptUIServices::RunErrorPanel.
		 */
		static HRESULT RunErrorPanel(
			HRESULT iErrorCode,
			CATDialog* iParentDialog);

		/**
		 * @nodoc
		 * Extracts the extension part of a file name.
		 */
		static HRESULT GetExtension(
			const CATUnicodeString& iFilePath,
			CATUnicodeString& oExtension);

		/**
		 * @nodoc
		 * Reads the contents of a file as UTF8 text.
		 */
		static HRESULT __stdcall ReadFile(
			const CATUnicodeString& iFilePath, 
			CATUnicodeString& oContents);

		/**
		 * @nodoc
		 * Writes the contents of a file as UTF8 text.
		 */
		static HRESULT __stdcall WriteFile(
			const CATUnicodeString& iFilePath, 
			CATUnicodeString& iContents);

		/**
		 * @nodoc
		 * A short-cut method which runs a program reference
		 * asynchronously. The method retrieves the CATMain
		 * entry point. It automatically registers the
		 * CATIAApplication instance under the "CATIA" name.
		 * If iDisplaysErrorMessages is TRUE, it also registers
		 * a error handler which will trigger an error panel
		 * when the function fails.
		 * iAutomaticReplay specifies whether the replay is automatic or 
		 * if it is explicitly done from a user interaction.
		 */
		static HRESULT __stdcall ExecuteReference(
			CATScriptRef* iReference,
			CATBoolean iDisplaysErrorMessages,
			CATBoolean iAutomaticReplay = TRUE);
 
		/**
		 * @nodoc
		 * A short-cut method which runs a function written in a scripting language
		 * synchronously. ExecuteScript will return only once the scripted function
		 * has finished running.
		 * @param iLibraryName
		 * The library in which the script is contained
		 * @param iLibraryType
		 * The type of the library
		 * @param iProgramName
		 * The name of the program in the library
		 * @param oResult
		 * The value returned by the function (if any)
		 * @param iFunctionName
		 * The name of the function to invoke
		 * @param iParameters
		 * An C++ array of parameters for the function
		 * @param iParamCount
		 * The size of the parameter array.
		*/
		static HRESULT __stdcall ExecuteScript(
			const CATUnicodeString& iLibraryName, 
			CatScriptLibraryType iType, 
			const CATUnicodeString& iProgramName, 
			CATVariant & oResult,
			const CATUnicodeString& iFunctionName = "CATMain", 
			CATVariant* iParams = NULL, 
			unsigned int iParamCount = 0,
			unsigned int iFlags = CAT_EXECUTESCRIPT_AUTOMATIC_REPLAY_ENABLE);
            
		/**
		 * A short-cut method which runs a function written in a scripting language
		 * synchronously. ExecuteScript will return only once the scripted function
		 * has finished running.
     * This method is supported only inside the <b>3D</b>EXPERIENCE application executable (inside a CAA library or an in-process macro).
		 * @param iPLMId
		 * PLM identificator of a macro library, which can be retrieved from a database query.
		 * @param iLibraryType
		 * The type of the library
		 * @param iProgramName
		 * The name of the program in the library
		 * @param oResult
		 * The value returned by the function (if any)
		 * @param iFunctionName
		 * The name of the function to invoke
		 * @param iParameters
		 * An C++ array of parameters for the function
		 * @param iParamCount
		 * The size of the parameter array.
		*/
		static HRESULT __stdcall ExecuteScriptV6(
			CATIAdpPLMIdentificator& iPLMId, 
			CatScriptLibraryType iType, 
			const CATUnicodeString& iProgramName, 
			CATVariant & oResult,
			const CATUnicodeString& iFunctionName = "CATMain", 
			CATVariant* iParams = NULL, 
			unsigned int iParamCount = 0,
            unsigned int iFlags = CAT_EXECUTESCRIPT_AUTOMATIC_REPLAY_ENABLE);

		/**
		 * Returns true if a macro is currently being recorded.
		 */
		static CATBoolean __stdcall IsMacroRecorderOn();

		/**
		 * Returns true if a macro is currently being replayed.
		 */
		static CATBoolean __stdcall IsMacroPlayerOn();

		/**
		 * Returns the name of the event notification sent whenever a script begins its execution.
		 */
		static char* __stdcall GetScriptStartNotification();

		/**
		 * Returns the name of the event event notification sent whenever a script stops its execution.
		 */
		static char* __stdcall GetScriptStopNotification();

		/**
		 * Returns the name of the event event notification sent whenever a script raises an error.
		 */
		static char* __stdcall GetScriptErrorNotification();

		/**
		 * Returns the name of the event event notification sent whenever a script is interrupted.
		 */
		static char* __stdcall GetScriptInterruptNotification();

	    /**
		 * @nodoc
		 * Locks the screen to prevent user interactions while the script is running.
		 */
		static HRESULT LockScreen();

	    /**
		 * @nodoc
		 * Unlocks the screen after a LockScreen call has been made.
		 */
		static HRESULT UnlockScreen(CATBoolean iImmediateUnlock = FALSE);

	    /**
		 * @nodoc
		 * Returns TRUE if the screen is locked, FALSE otherwise.
		 */
		static HRESULT IsScreenLocked(
			CATBoolean& oIsLocked);

		/**
		 * @nodoc
		 * This method transforms a CATUnicodeString into an encoded
		 * CATString (this is usefull for commands which only accept
		 * CATStrings as parameters).
		 */
		static void CATUnicodeStringToCATString(
			const CATUnicodeString& iString,
			CATString& oString);

		/**
		 * @nodoc
		 * This method transforms an encoded
		 * CATString encoded by CATUnicodeStringToCATString
		 * into a CATUnicodeString.
		 */
		static void CATStringToCATUnicodeString(
			const CATString& iString,
			CATUnicodeString& oString);

		/**
		 * @nodoc
		 * Raises an error.
		 */
		static HRESULT RaiseError(
			CATError* iError);

		/**
		 * @nodoc
		 * Returns the loaded ITypeLib and its full path name from a given typelib name.
		 */
		static HRESULT GetTypeLibPath(
			const CATUnicodeString& iName,
			ITypeLib*& oTypelib,
			CATUnicodeString& oPathName);

		/**
		 * @nodoc
		 * Returns the directory path of the
		 * specified runtime view file. If the runtime view is
		 * a concatenation, the path returned is the leftmost
		 * choice in the concatenation.
		 * @param iFileName
		 * The file name to look for.
		 * @param iSubDirs
		 * The runtime view subdirs to look into (for instance: {code, bin})
		 * @param oDirectoryPath
		 * The runtime view directory containing the path (including code/bin).
		 */
		static HRESULT GetRuntimeViewDirectory(
			const CATUnicodeString& iFileName,
			CATListOfCATUnicodeString& iSubDirs,
			CATUnicodeString& oDirectoryPath);

		/**
		 * @nodoc
		 * Retrieves the function with the specified name in
		 * the program.
		 */
		static HRESULT FindFunction(
			CATIScriptProgram* iProgram,
			const CATUnicodeString& iFunctionName,
			CATIScriptFunction*& oFunction);

		/**
		 * Sets a custom error message which will be caught by
		 * the script engines and displayed in the UI as a
		 * replacement of the default error message ("The method XXX has failed").
		 * @param iMessage
		 * The error message to display
		 */
		static HRESULT SetAutomationErrorMessage(
			const CATUnicodeString& iMessage);

		/**
		 * @nodoc
		 * Retrieves the IID of the DSY Automation interface
		 * given the associated VB object type.
		 * (Returns IID_CATIABase given the string "AnyObject")
		 */
		static HRESULT GetAutomationUUIDFromVBName(
			const CATUnicodeString& iVbInterfaceName,
			GUID& oGUID);

	private:
		static CATBoolean _initialized;
		static CATListOfCATUnicodeString _languages;
		static CATListOfCATString _extensions;
#ifdef _WINDOWS_SOURCE	// Take into account that windows is case insensitive.
		static CATListOfCATString _lowercaseExtensions;
#endif

	private:
		/**
		 * Reads the languages names and extension from a resource file.
		 */
		static HRESULT _Initialize();
};

#endif
