// COPYRIGHT Dassault Systemes 2003

//===================================================================
//
// CATILieToleranceSheetSettingAtt.h
// Define the CATILieToleranceSheetSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  sob
//===================================================================
#ifndef CATILieToleranceSheetSettingAtt_H
#define CATILieToleranceSheetSettingAtt_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATILieToleranceSheetSettingAtt;
#else
extern "C" const IID IID_CATILieToleranceSheetSettingAtt ;
#endif

class CATSettingInfo;
class CATUnicodeString;

//------------------------------------------------------------------

/**  
* The interface to access a CATIAToleranceSheetSettingAtt.
* This interface may be used to read or modify in the CATIA\Tools\Option the settings values
* of Tolerance sheet.
*/

class ExportedByKnowledgeItf CATILieToleranceSheetSettingAtt: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the DefaultTolerance attribute.
	 * <br><b>Role</b>:Return the DefaultTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oDefaultTolerance
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not accept a default tolerance
	 * 	<br><tt>1 :</tt>   to accept a default tolerance.
     */
     virtual HRESULT GetDefaultTolerance(int& ioDefaultTolerance ) = 0;
     
    /**
     * Sets the DefaultTolerance attribute.
	 * <br><b>Role</b>:Set the DefaultTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oDefaultTolerance
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not accept a default tolerance
	 * 	<br><tt>1 :</tt>   to accept a default tolerance.
     */
     virtual HRESULT SetDefaultTolerance(const int& iDefaultTolerance ) = 0;
     
    /**
     * Retrieves the state of the DefaultTolerance parameter.
     * @param oInfo
     *	Address of an object CATSettingInfo.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT GetDefaultToleranceInfo(CATSettingInfo*    oInfo) = 0;

    /** 
     * Locks or unlocks the DefaultTolerance parameter.
     * <br><b>Role</b>: Locks or unlocks the DefaultTolerance parameter if the
     * operation is allowed in the current administrated environment. In user mode 
     * this method will always return E_FAIL.
     * @param iLocked
     *	the locking operation to be performed
     *	<b>Legal values</b>:
     *	<br><tt>1 :</tt>   to lock the parameter.
     * 	<br><tt>0:</tt>   to unlock the parameter.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT SetDefaultToleranceLock( unsigned char      iLocked ) = 0;


	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the LengthMaxTolerance attribute.
	 * <br><b>Role</b>:Return the LengthMaxTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oLengthMaxTolerance
     *    The length maximum tolerance value.
     */
     virtual HRESULT GetLengthMaxTolerance( double& ioLengthMaxTolerance ) = 0;
     
    /**
     * Sets the LengthMaxTolerance attribute.
	 * <br><b>Role</b>:Set the LengthMaxTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oLengthMaxTolerance
     *    The length maximum tolerance value.
     */
     virtual HRESULT SetLengthMaxTolerance( const double& iLengthMaxTolerance ) = 0;

    /**
     * Retrieves the state of the LengthMaxTolerance parameter.
     * @param oInfo
     *	Address of an object CATSettingInfo.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT GetLengthMaxToleranceInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the LengthMaxTolerance parameter.
     * <br><b>Role</b>: Locks or unlocks the LengthMaxTolerance parameter if the
     * operation is allowed in the current administrated environment. In user mode 
     * this method will always return E_FAIL.
     * @param iLocked
     *	the locking operation to be performed
     *	<b>Legal values</b>:
     *	<br><tt>1 :</tt>   to lock the parameter.
     * 	<br><tt>0:</tt>   to unlock the parameter.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT SetLengthMaxToleranceLock( unsigned char      iLocked ) = 0;

	 //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the LengthMinTolerance attribute.
	 * <br><b>Role</b>:Return the LengthMinTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oLengthMinTolerance
     *    The length minimum tolerance value.
     */
     virtual HRESULT GetLengthMinTolerance( double& ioLengthMinTolerance ) = 0;
     
    /**
     * Sets the LengthMinTolerance attribute.
	 * <br><b>Role</b>:Set the LengthMinTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oLengthMinTolerance
     *    The length minimum tolerance value.
     */
     virtual HRESULT SetLengthMinTolerance( const double& iLengthMinTolerance ) = 0;

    /**
     * Retrieves the state of the LengthMinTolerance parameter.
     * @param oInfo
     *	Address of an object CATSettingInfo.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT GetLengthMinToleranceInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the LengthMinTolerance parameter.
     * <br><b>Role</b>: Locks or unlocks the LengthMinTolerance parameter if the
     * operation is allowed in the current administrated environment. In user mode 
     * this method will always return E_FAIL.
     * @param iLocked
     *	the locking operation to be performed
     *	<b>Legal values</b>:
     *	<br><tt>1 :</tt>   to lock the parameter.
     * 	<br><tt>0:</tt>   to unlock the parameter.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT SetLengthMinToleranceLock( unsigned char      iLocked ) = 0;

	 //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the AngleMaxTolerance attribute.
	 * <br><b>Role</b>:Return the AngleMaxTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oAngleMaxTolerance
     *    The angle maximum tolerance value.
     */
     virtual HRESULT GetAngleMaxTolerance( double& ioAngleMaxTolerance ) = 0;
     
    /**
     * Sets the AngleMaxTolerance attribute.
	 * <br><b>Role</b>:Set the AngleMaxTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oAngleMaxTolerance
     *    The angle maximum tolerance value.
     */
     virtual HRESULT SetAngleMaxTolerance( const double& iAngleMaxTolerance ) = 0;

    /**
     * Retrieves the state of the AngleMaxTolerance parameter.
     * @param oInfo
     *	Address of an object CATSettingInfo.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT GetAngleMaxToleranceInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the AngleMaxTolerance parameter.
     * <br><b>Role</b>: Locks or unlocks the AngleMaxTolerance parameter if the
     * operation is allowed in the current administrated environment. In user mode 
     * this method will always return E_FAIL.
     * @param iLocked
     *	the locking operation to be performed
     *	<b>Legal values</b>:
     *	<br><tt>1 :</tt>   to lock the parameter.
     * 	<br><tt>0:</tt>   to unlock the parameter.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT SetAngleMaxToleranceLock( unsigned char      iLocked ) = 0;

	 //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the AngleMinTolerance attribute.
	 * <br><b>Role</b>:Return the AngleMinTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oAngleMinTolerance
     *    The angle minimum tolerance value.
     */
     virtual HRESULT GetAngleMinTolerance( double& ioAngleMinTolerance ) = 0;
     
    /**
     * Sets the AngleMinTolerance attribute.
	 * <br><b>Role</b>:Set the AngleMinTolerance parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param oAngleMinTolerance
     *    The angle minimum tolerance value.
     */
     virtual HRESULT SetAngleMinTolerance( const double& iAngleMinTolerance ) = 0;

    /**
     * Retrieves the state of the AngleMinTolerance parameter.
     * @param oInfo
     *	Address of an object CATSettingInfo.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT GetAngleMinToleranceInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the AngleMinTolerance parameter.
     * <br><b>Role</b>: Locks or unlocks the AngleMinTolerance parameter if the
     * operation is allowed in the current administrated environment. In user mode 
     * this method will always return E_FAIL.
     * @param iLocked
     *	the locking operation to be performed
     *	<b>Legal values</b>:
     *	<br><tt>1 :</tt>   to lock the parameter.
     * 	<br><tt>0:</tt>   to unlock the parameter.
     * @return
     *	<b>Legal values</b>:
     *	<br><tt>S_OK :</tt>   on Success
     * 	<br><tt>E_FAIL:</tt>  on failure
     */
     virtual HRESULT SetAngleMinToleranceLock( unsigned char      iLocked ) = 0;



  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
