//===================================================================
// COPYRIGHT Dassault Systemes 2015/04/09
//===================================================================
// CATCompThreadLocalStorage.cpp
// Header definition of class CATCompThreadLocalStorage
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/04/09 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATCompThreadLocalStorage_H
#define CATCompThreadLocalStorage_H

#include "CATSGUtil.h"

#ifdef SG_COMPOSITES_MULTIOS

#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

#include "CATCompositeTPtr.h"
#include "CATCompositePtrList.h"
#include "CATSGCompositeHost.h"
#include "CATModelIdentificator.h"
#include <unordered_map>

class ExportedBySGComposites CATCompThreadLocalStorage : public CATSGComposite
{
public:

    virtual HRESULT SetData(const CATUnicodeString &iKey, void* ipData) = 0;
    virtual void*   GetData(const CATUnicodeString &iKey)               = 0;

};

// {37DE18E3-B631-4A08-BEF9-C11DFCBB87C8}
static const IID GUID_CATCompThreadLocalStorageTrait =
{ 0x37de18e3, 0xb631, 0x4a08, { 0xbe, 0xf9, 0xc1, 0x1d, 0xfc, 0xbb, 0x87, 0xc8 } };


template<>
class CATTraitInfo<CATCompThreadLocalStorage>
{
public:
    static const GUID&                      GetTraitGUID()
    {
        return GUID_CATCompThreadLocalStorageTrait;
    }
    static const int                        GetTraitTag() { return CATTraitTag(-1); }
    static const CATECompositionMode        GetCompositeMode()
    {
        return CATECompositionModeParticular;
    }
    static const CATTraitRawInfo            GetRaw()
    {
        DefaultGetRawImplementation;
    }
};

typedef CATCompositeTPtr<CATCompThreadLocalStorage>            CATCompThreadLocalStoragePtr;

class ExportedBySGComposites CATCompThreadLocalStorageDefaultImpl : public CATSGCompositeHost1<CATCompThreadLocalStorage, CATSGComposite>
{
public:
    CATCompThreadLocalStorageDefaultImpl();
    virtual ~CATCompThreadLocalStorageDefaultImpl();

    unsigned int GetSizeInBytes(const int iIncludeStructuralSize = 1);

    HRESULT SetData(const CATUnicodeString &iKey, void* ipData);
    void*   GetData(const CATUnicodeString &iKey);

private:
    std::unordered_map<CATUnicodeString, int, Hash<CATUnicodeString>> _keyLabels;

};

#endif // SG_COMPOSITES_MULTIOS
#endif // CATCompThreadLocalStorage_H
