/* -*-c++-*- */
/**
* @level Protected
* @usage U4 CATOmbStreamDescriptorDefineContextAdapter
*/
//-----------------------------------------------------------------------------
// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIOmbStreamDescriptorDefineContext.h
// Define the CATIOmbStreamDescriptorDefineContext interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2009  Creation: Code generated by the CAA wizard  VCS
//===================================================================
#ifndef CATIOmbStreamDescriptorDefineContext_H
#define CATIOmbStreamDescriptorDefineContext_H

// ObjectModelerBase
#include "CATListPtrCATOmbStreamDescriptorDefinitionKey.h"
#include "CATOmbImportExportParameters.h"
#include "CATOmbSDOvertypeQualifiers.h"
#include "CATOmbSelectiveLoading.h"
#include "CATOmbStreamDescriptorDefinitionKey.h"
// System
#include "CATBaseUnknown.h"
// ObjectModelerCollection
#include "CATOmxArray.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbSelectiveLoading IID IID_CATIOmbStreamDescriptorDefineContext;
#else
extern "C" const IID IID_CATIOmbStreamDescriptorDefineContext ;
#endif

//------------------------------------------------------------------

/**
* Interface to refine Stream Descriptor definitions according to the current session context.
* b>Role:</b> Enables to refine or replace at Save time, the StreamDescriptor definitions set at declaration time 
* by Selective Loading dictionary, at the beginning of the CATSession, according to the current session context, 
* such as applicative user settings or declaration files, that may influence these definitions.
* 
* This interface is designed to be:
*  -invoked by ObjectModelerBase at StreamDescriptor definition time, when initializing the current CATSession or Saving 
*  -implemented only by specific applications acknowledged by OMB as relevant to StreamDescriptor definitions refine.
* 
* It is to be used by authorized applications the following way:
* 
*  -Create an implementation class/source file for this interface.
*  -C++ Derivate this implementation class from the interface Adapter CATOmbStreamDescriptorDefineContextAdapter
*  -Ask OMB to create an instance of this interface and call the implemented method(s) at the right time during StreamDescriptor definitions :
*   - at Save time for DefineAsSynchronous, in general context (default)
*   - at CATOmbSdsStreamServices(Parameters) + CATOmbSdsStreamServices::ListSDsToSave time for ProvideSynchronousSDs, in TransitionEngine context
*     Important: Notice that default SL dictionary definition are set back at the end of ListSDsToSave
* 
* --------------------------------------------------------------------------
*  code sample: into ApplicativeImplementation.h
* --------------------------------------------------------------------------
* #include "CATOmbStreamDescriptorDefineContextAdapter.h"
* 
* class ApplicativeImplementation : public CATOmbStreamDescriptorDefineContextAdapter
* {
* public:
* 
* 	CATDeclareClass;
* 
* 	ApplicativeImplementation();
* 	virtual ~ApplicativeImplementation();
* 
* 	HRESULT DefineAsSynchronous(CATLISTP(CATOmbStreamDescriptorDefinitionKey)& oListOfStreamDescDefKeys, CATOmbStreamDescriptorDefinitionKey* & opSyncWithStreamDescDefKey);
*   HRESULT ProvideSynchronousSDs(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters& iParameters, CATOmxArray<CATOmbStreamDescriptorDefinitionKey>& oSyncSDefKeys);
* };
* 
* --------------------------------------------------------------------------
*  code sample: into ApplicativeImplementation.cpp
* --------------------------------------------------------------------------
* #include "CATIOmbStreamDescriptorDefineContext.h"
* #include "CATOmbLoadableDataUniqueKey.h"
* #include "CATOmbImportExportParameters.h"
* 
* // Tie the implementation to its interface
* CATImplementClass(ApplicativeImplementation, Implementation, CATIOmbStreamDescriptorDefineContext, CATNull);
* CATImplementBOA(CATIOmbStreamDescriptorDefineContext, ApplicativeImplementation);
* CATCreateAndAddOMFactoryFunction(ApplicativeImplementation)
* HRESULT ApplicativeImplementation::DefineAsSynchronous(CATLISTP(CATOmbStreamDescriptorDefinitionKey)& oListOfStreamDescDefKeys, CATOmbStreamDescriptorDefinitionKey* & opSyncWithStreamDescDefKey)
* {.....}
*  HRESULT ApplicativeImplementation::ProvideSynchronousSDs(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters& iParameters, CATOmxArray<CATOmbStreamDescriptorDefinitionKey>& oSyncSDefKeys)
* {....}
*
* Specific to new ProvideSynchronousSDs implementators:
* --------------------------------------------------------------------------
*  code sample: into some DeclarationFile.func
* --------------------------------------------------------------------------
*   ApplicativeImplementation      OMFactoryFunctionType           libACATApplicativeLib
*
* --------------------------------------------------------------------------
*  code sample: into another DeclarationFile.xDefinition
* --------------------------------------------------------------------------
*   Selector[ApplicativeImplementation]  From[CATSomeType]  Interface[CATIOmbStreamDescriptorDefineContext]  where CATSomeType is NOT CATPart/fea type 
*-------------------------------------------------------------------------
*/

class ExportedByCATOmbSelectiveLoading CATIOmbStreamDescriptorDefineContext: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Defines a set of StreamDescriptors as synchronous with an Authoring one, depending on an applicative context.
  * A synchronous stream descriptor is generated during Save operations if the stream descriptor it is synchronous with needs to be streamed.<br>
  * <code>opSyncWithStreamDescKey</code>'s format must be Authoring and it must be a concrete definition.<br>
  * Several StreamDescriptors can be declared as synchronous with a same Authoring one.
  * This declaration's coherency is always checked by SelectiveLoading dictionary.
  * 
  * @param oListOfStreamDescDefKeys
  *   The list of keys handling the StreamDescriptors to declare as synchronous with opSyncWithStreamDescKey.
  *   If the list is Empty, no synchronization will be performed
  * @param opSyncWithStreamDescKey
  *   The key handling the StreamDescriptor that <code>opStreamDescKey</code> has to be synchronous with.
  *   If NULL, no synchronization will be performed 
  *
  * @return
  *        S_OK   : Successfully ended
  *        E_FAIL : A software error occured 
  */
  virtual HRESULT DefineAsSynchronous(CATListPtrCATOmbStreamDescriptorDefinitionKey& oListOfStreamDescDefKeys, CATOmbStreamDescriptorDefinitionKey* & opSyncWithStreamDescDefKey) = 0;


  /**
  * Settings can determine which sds will be loaded to achieve a given SelectiveLoading_Mode.
  * <Role>
  *   This interface let Applicative Code drives Infra SelectiveLoading code. For example, il allows MechMod to determine whether 
  *   in ProdudctStructure:VisuMode one should load the CGR or UVR stream. 
  * @param iListOfStreamDescDefKeys [in]
  *   The list of keys handling the StreamDescriptors to be loaded in the provided mode
  * @param iSelectiveLoading_Mode [in]
  *   The targeted mode
  * 
  * @return
  *        S_OK    : Use specific behavior (@R209 : Use UVR stream in Prd:Visu_Mode)
  *        S_FALSE : Use standard behavior (@R209 : Use CGR stream in Prd:Visu_Mode)
  *        E_* : unexpected error
  */
  virtual HRESULT SetSDsToBeLoadedForGivenMode(CATListPtrCATOmbStreamDescriptorDefinitionKey& iListOfStreamDescDefKeys, CATUnicodeString& iSelectiveLoading_Mode) = 0;

  /**
  * Provides a set of secondary StreamDescriptors definition as synchronous with an Authoring one, depending on an applicative declarative context.
  * A synchronous stream descriptor is generated during Save operations if the stream descriptor it is synchronous with needs to be streamed.
  * The Authoring definition iAuthoringSDefKey is input by infra at Save time, for each authoring to be saved.
  * For CATPart and fea authoring types, secondary formats cannot be managed with that method, as already managed by DefineAsSynchronous.
  *
  * This service can overload default dictionary declaration by implementing a secondary stream definition(s) selector, through specific declaration in .xdefinition(s) file:
  * Selector[ApplicativeImplementation]  From[ACATIAMainLateType]  Interface[CATIOmbStreamDescriptorDefineContext]
  * 
  * This Service is invoked by infra at Secondary stream generation time in following cases :
  *  - xPDM Integration (UPS) : implement ProvideSynchronousSDs + declare Ctor CATOmbSdsStreamServices(Parameters) + call CATOmbSdsStreamServices.ListSDsToSave(..)
  *                             current versions (<= r421) : the declaration of at least one parameter currently triggers ProvideSynchronousSDs invocation by infra 
  *                             next versions    (>= R422) : the implementation of IsExternalSynchroDeclared  will eventually trigger ProvideSynchronousSDs invocation by infra
  *  - PLM Save stack   : implement ExternalSynchroDeclared + call PLM Save  
  *                             current versions (<= r421) : ProvideSynchronousSDs is never called in this stack
  *                             next versions    (>= R422) : the implementation of IsExternalSynchroDeclared  will eventually trigger ProvideSynchronousSDs invocation by infra
  *
  * Several StreamDescriptors can be declared as synchronous with a same Authoring one.
  * This declaration's coherency is always checked by SelectiveLoading dictionary.
  * @param iAuthoringSDefKey [in]
  *   Key for Authoring Stream Descriptor definition declaring secondary StreamDescriptor(s) definition(s) to be registered in session as synchronized with.
  * @param iParameters [in]
  *   parameters list to be eventually filled before use, either by xPDM or PLM Save stacks:
  *   - TransitionEngine: CTOR CATOmbSdsStreamServices(iParameters) + CATOmbSdsStreamServices::ListSDsToSave.
  *   -PLM Save: iParameters can be set/updated by IsExternalSynchroDeclared.
  *   these parameters are passed to applicative exporter implementation called by Save Engine.
  * @param oSyncSDefKeys [out]
  *   The keys list of Stream Descriptor definitions registered in session as currently synchronous with their Authoring definition key.
  *    !! If the list is empty, no synchronization will be performed and error E_UNEXPECTED/tag OMBxSYNC01 will occur during Save.
  *
  * @return
  *        SUCCEEDED : Successfully ended
  *        FAILED    : A software error occured (and Save operation aborts with error log tag OMBxSYNC04)
  */     
  virtual HRESULT ProvideSynchronousSDs(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters& iParameters, CATOmxArray<CATOmbStreamDescriptorDefinitionKey>& oSyncSDefKeys) = 0;

  /**
  * Declares an Authoring StreamDescriptor definition as to be synchronized with (a set of) secondary StreamDescriptor definition(s) selected by application.
  * The secondary StreamDescriptor definition(s) are to be described by application using ProvideSynchronousSDs
  * Synchronous stream descriptor(s)  is(are) generated during Save operations if the stream descriptor it(they) is(are) synchronous with needs to be streamed.
  * The Authoring definition iAuthoringSDefKey is input by infra at Save time, for each authoring to be saved.
  *
  * The couple ExternalSynchroDeclared+ProvideSynchronousSDs can overload default dictionary declaration by implementing a secondary stream definition(s) selector, through specific declaration in .xdefinition(s) file:
  * Selector[ApplicativeImplementation]  From[AComponentType, ACATIAMainLateType]  Interface[CATIOmbStreamDescriptorDefineContext]
  *
  * Several StreamDescriptors can be declared as synchronous with a same Authoring one.
  * This declaration's coherency is always checked by SelectiveLoading dictionary.
  *
  * @param iAuthoringSDefKey [in]
  *   Key for Authoring Stream Descriptor definition declaring secondary StreamDescriptor(s) definition(s) to be registered in session as synchronized with.
  * @param ioParameters [inout]
  *   parameters list to be eventually filled by application before Save.
  *   these parameters are passed to applicative exporter implementation called by Save Engine.
  * @param oSynchro [out]
  *   TRUE:  ProvideSynchronousSDs is invoked at Save, to synchronize given secondary SDs with Authoring SD.
  *   FALSE: Default secondary SD declared statically into Selective Loading dictionnary is synchronized at Save with Authoring SD.
  * @return
  *        SUCCEEDED : Successfully ended
  *        FAILED    : A software error occured  (and Save operation aborts with error log tag OMBxSYNC01)
  */     
  virtual HRESULT IsExternalSynchroDeclared(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters*& ioParameters, CATBoolean& oSynchro) = 0;

  /**
* Declares an Authoring StreamDescriptor definition as to be synchronized with (a set of) overtyped Alternative secondary StreamDescriptor definition(s) defined by application.
* this(these) definition(s) describe the overtyping of the StreamDescriptor persistency type from the current one to a new one.
* The secondary StreamDescriptor definition(s) are to be described by application using ProvideAlternativeSynchronousSDs
* Synchronous stream descriptor(s) is(are) effectively overtyped during Save operations under following conditions:
*   - the authoring stream descriptor it(they) is(are) synchronous with needs to be streamed.
*   - the overtyping definition matches the couple (Key excepted PersistencyName, current PersistencyType) for at least one Alternative StreamDescriptor already aggregated to the component
* The Authoring definition iAuthoringSDefKey is input by infra at Save time, for each authoring StreamDescriptor to be saved.
* For a given component, ALL StreamDescriptors matching the couple (Key excepted PersistencyName, current PersistencyType) are overtyped if above conditions are set.
* When a RequestAlternativeSecondaryFormatGeneration is currently set for a PersistencyTypeA but ProvideAlternativeSynchronousSDs outputs an overtyping request
* from TypeA to Type B, this raises an error OMBxSYNC01 in DS development environment but (creates+)overtypes the StreamDescriptor in customer environment 
*
* The couple IsAlternativeSynchroDeclared+ProvideAlternativeSynchronousSDs is invokable by infrastructure for a given component type
* by implementing a secondary stream definition(s) selector, through specific declaration in .xdefinition(s) file:
* Selector[ApplicativeImplementation]  From[AComponentType, ACATIAMainLateType]  Interface[CATIOmbStreamDescriptorDefineContext]
*
* @param iAuthoringSDefKey [in]
*   Key for Authoring Stream Descriptor definition declaring secondary StreamDescriptor(s) definition(s) to be registered in session as synchronized with.
* @param ioParameters [inout]
*   parameters list to be eventually filled by application before Save.
*   these parameters are passed to applicative exporter implementation called by Save Engine.
* @param oSynchro [out]
*   TRUE:  ProvideAlternativeSynchronousSDs is invoked at Save, to overtype+synchronize matching alternative secondary SDs with Authoring SD.
*          All other secondary SDs already aggregated to the component are synchronized at Save as usual with Authoring SD.
*   FALSE: All secondary SDs already aggregated to the component are synchronized at Save as usual with Authoring SD.
* @return
*        SUCCEEDED : Successfully ended
*        FAILED    : A software error occured  (and Save operation aborts with error log tag OMBxSYNC01)
*/
  virtual HRESULT IsAlternativeSynchroDeclared(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters*& ioParameters, CATBoolean& oSynchro) = 0;

  /**
* Provides a set of Alternative secondary StreamDescriptors overtyping definitions as synchronous with an Authoring one, depending on an applicative declarative context.
* Any alternative overtyped stream descriptor is regenerated during Save operation if the stream descriptor it is synchronous with needs to be streamed.
* The Authoring definition iAuthoringSDefKey is input by infra at Save time, for each authoring to be saved.
*
* @param iAuthoringSDefKey [in]
*   Key for Authoring Stream Descriptor definition declaring secondary StreamDescriptor(s) definition(s) to be registered in session as synchronized with.
* @param iParameters [in]
*   parameters list to be eventually filled before use, either by xPDM or PLM Save stacks:
*   iParameters can be set/updated by IsAlternativeSynchroDeclared.
*   these parameters are passed to applicative exporter implementation called by Save Engine.
* @param oOvertypeKeys [out]
*   The list of Stream Descriptor overtyping definitions registered in session as to be currently synchronous with their Authoring definition key.
*    !! If the list is empty, Save operation aborts with error log tag OMBxSYNC04
*    !! If the list does not match any StreamDescriptor, no synchronization will be performed.
* @return
*        SUCCEEDED : Successfully ended
*        FAILED    : A software error occured (and Save operation aborts with error log tag OMBxSYNC04)
*/
  virtual HRESULT ProvideAlternativeSynchronousSDs(const CATOmbStreamDescriptorDefinitionKey& iAuthoringSDefKey, CATOmbImportExportParameters*& ioParameters, CATOmxArray<CATOmbSDOvertypeQualifiers>& oOvertypeKeys) = 0;
};

//------------------------------------------------------------------
CATDeclareHandler( CATIOmbStreamDescriptorDefineContext, CATBaseUnknown );

#endif
