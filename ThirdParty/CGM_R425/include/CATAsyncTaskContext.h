//===================================================================
// COPYRIGHT Microsoft 2012/05/21
//===================================================================
// CATAsyncTaskContext
// Header definition of class CATAsyncTaskContext
//===================================================================
//
// Usage notes:
//
// Infomation about a particular CATAsyncTask
// @see CATAsyncTask
//
//===================================================================
//  2012/05/21 Creation: Code generated by the 3DS wizard
//===================================================================

#ifdef KOALA_MIGRATION
#include "CATAsyncTaskContext_NG.h"
#else 

#include "CATAsyncTasksPlatform.h"

#ifdef AsyncCompileError
#error "CATAsyncTaskContext should not be included. Migrate on new platform : cf. KOALA_MIGRATION. Contact JBX"
#else
#pragma message ("CATAsyncTaskContext should not be included. Migrate on new platform : cf. KOALA_MIGRATION. Contact JBXx")
#endif

#ifndef CATAsyncTaskContext_H
#define CATAsyncTaskContext_H

#include "CATAsyncTaskID.h"
#include "CATAsyncTasksUtils.h"
#include "CATSysMacroPtr.h"
#include "CATIPLMCompRecordReadSet.h"
#include "CATUnicodeString.h"
#include "CATPLMCompletionSuggestionOutput.h"
#include "CATSysTSUnicodeString.h"
#include "CATOmxSR.h"
#include "CATA5Parser.h"
#include "CATListOfCATVVSUrl.h"

#include "CATAsyncTaskContext_NG.h"
#include "CATAsyncTasksUndef.h"

class CATSysMultiBuffer;

//===================================================================
//  Async Progression Data (APD) - ProgressionData Tabs Index
//===================================================================
// Logical Task Progression Data Indexes
#define APD_PHYSICAL_TASKS_COMPLETED      0
#define APD_PHYSICAL_TASKS_NOT_COMPLETED  1

// PLMQL Progression Data Indexes
#define APD_RECORDS_DOWNLOADED  0
#define APD_RECORDS_TO_DOWNLOAD 1

// VVS Progression Data Indexes
#define APD_STREAMS_CACHED      0
#define APD_STREAMS_DOWNLOADED  1
#define APD_STREAMS_TO_DOWNLOAD 2
#define APD_DATA_DOWNLOADED     3
#define APD_DATA_TO_DOWNLOAD    4

//-----------------------------------------------------------------------

struct ExportedByCATAsyncTasksPlatform_OLD CATAsyncTaskContext
{

  static CATAsyncTaskContext& CopyContextFromContext_NG(CATAsyncTaskContextBase_NG& iContext_NG, CATAsyncTaskContext& iContext);

  CATAsyncTaskContext();
  ~CATAsyncTaskContext();
  CATAsyncTaskContext(const CATAsyncTaskContext& iAsyncTaskContext);
  CATAsyncTaskContext& operator=(const CATAsyncTaskContext& iAsyncTaskContext);

  //===================================================================
  //  Async Task General Information
  //===================================================================
  CATBoolean            IsPhysicalTask;
  CATBoolean            HasParent;
  CATAsyncTaskID        CurrentTaskID;
  CATAsyncTaskID        CurrentParentTaskID;
  CATAsyncRequest_Type  RequestType; // @see CATAsyncTasksUtils
  CATAsyncTaskStatus    TaskStatus; // @see CATAsyncTasksUtils
  CATUnicodeString      Error; // Error message
  //===================================================================

  //===================================================================
  //  Async Task Progression Information
  //  -----------------------------------------------------------------
  //  Array with a size of ProgressionDataCount
  //  Data depends on CATAsyncRequest_Type
  //  To activate Progression Data notification,
  //           @see CATAsyncTasksServices::SetNotifyProgression
  //  To use ProgressionData Array Indexes,
  //           @see CATAsyncTasksUtils
  //===================================================================
  CATLONG64 * ProgressionData; // Do not delete
  int         ProgressionDataCount;
  //===================================================================

  //===================================================================
  //  Async Tasks Builder Information
  //===================================================================
  // Builder Data
  CATBoolean                  IsTasksBuilder;
  CATOmxArray<CATAsyncTaskID> NewTasksCreated;
  CATOmxArray<CATAsyncTaskID> AllTasksCreated;
  CATBoolean                  AllBuiltTasksCompleted;
  //Created by Builder data
  CATBoolean                  IsBuilt;
  CATAsyncTaskID              TasksBuilderID;
  //===================================================================

  //===================================================================
  //  Open PLMQL Request Information
  //===================================================================
  /**
  * Get the RecordReadSet returned by an Open PQML Request
  * Be warned that the RecordReadSet is only set (not NULL) in an Open PQML Request Context
  *
  * @param opRecordReadSet [out, CATBaseUnknown#Release] : the Record Read Set to get
  * @return
  * <code>S_OK</code>: The returned pointer is correctly set
  * <code>E_FAIL</code>: The returned pointer is not set, the context does not contains Record Read Set
  */
  HRESULT GetRecordReadSet(CATIPLMCompRecordReadSet *& opRecordReadSet) { return GetInternPointer(_recordReadSet, (CATBaseUnknown*&)opRecordReadSet); }

  /**
  * @deprecated
  */
  CATIPLMCompRecordReadSet* GetRecordReadSet() { CATAssert(0); return NULL; }

  /**
  * Set the RecordReadSet returned by an Open PQML Request
  * Be warned that the RecordReadSet can be set only once 
  *
  * @param
  * <br/> [in] iRecordReadSet: the CATIPLMCompRecordReadSet pointer to set
  * @return
  * <code>S_OK</code>: The intern pointer is correctly set
  * <code>E_FAIL</code>: The intern pointer is not set, the in param is NULL
  *                      or the Record Read Set is already set
  */
  HRESULT SetRecordReadSet(CATIPLMCompRecordReadSet * iRecordReadSet) { return SetInternPointer((CATBaseUnknown*&)_recordReadSet, iRecordReadSet); }
  //===================================================================  
  
  //===================================================================
  //  HTTP Request Information
  //===================================================================
  HRESULT GetHTTPFullAnswer(CATSysTSUnicodeString& oUrl, CATSysTSUnicodeString& oPostArgs, CATSysMultiBuffer*& opMultiBuffer);
  HRESULT SetHTTPFullAnswer(const CATSysTSUnicodeString& iUrl, const CATSysTSUnicodeString& iPostArgs, CATSysMultiBuffer& ipMultiBuffer);

  HRESULT GetHTTPLastPartialResult(CATSysTSUnicodeString& oUrl, CATSysTSUnicodeString& oPostArgs, char*& oLastChunk, unsigned long long& oSize );
  HRESULT SetHTTPLastPartialResult(const CATSysTSUnicodeString& iUrl, const CATSysTSUnicodeString& iPostArgs, char*& iLastChunk, unsigned long long& iSize );

  HRESULT GetCATA5Parser(CATA5::Parser*& oParser);
  HRESULT SetCATA5Parser(CATA5::Parser* iParser,const CATBoolean& iPartial);
  /**
  * Returns the next parsed line from a tcl output
  * If called within an OnProgressCB, this API will return only the row already parsed. When API will end in S_FALSE, some rows may still have to be processed (usually in OnTaskCompleted)
  * This API retrieves first rows that are already parsed. In OnTaskCompleted if no more rows are available, it will  wait for the completion of the parsing to return the missing rows
  * @param
  * <br/> [out] oRow   : a line parsed from a tcl output
  * <br/> [out] oRowDef: the label associated to this line in the tcl output
  * @return
  * <code>S_OK</code>: next line has been retrieved successfully
  * <code>S_FALSE</code>: no more line to process. 
  * <code>E_FAIL</code>: generic parsing error
  * <code>E_UNEXPECTED</code>: the return row contains an error. 
  */
  HRESULT GetNextRow(CATOmxArray<CATOmxAny>& oRow,CATOmxKeyString& oRowDef);

  /**
  * Returns the next parsed line from a tcl output
  * If called within an OnProgressCB, this API will return only the row already parsed. When API will end in S_FALSE, some rows may still have to be processed (usually in OnTaskCompleted)
  * This API retrieves first rows that are already parsed. In OnTaskCompleted if no more rows are available, it will  wait for the completion of the parsing to return the missing rows
  * @param
  * <br/> [out] oKVB   : a line parsed from a tcl output as a KVB
  * <br/> [out] oRowDef: the label associated to this line in the tcl output
  * @return
  * <code>S_OK</code>: next line has been retrieved successfully
  * <code>S_FALSE</code>: no more line to process. 
  * <code>E_FAIL</code>: generic parsing error
  * <code>E_UNEXPECTED</code>: the return row contains an error. 
  */
  HRESULT GetNextRowAsKVB(CATOmxKeyValueBlock& oKVB,
                          CATOmxKeyString& oRowDef);


  HRESULT GetHTTPErrorCode(unsigned int& oErrorCode) {oErrorCode=_HttpErrorCode; return S_OK;}
  HRESULT SetHTTPErrorCode(unsigned int iErrorCode) {_HttpErrorCode=iErrorCode; return S_OK;}
  //===================================================================

  //===================================================================
  //  Get Ticket Request Information
  //===================================================================
  HRESULT GetFCSUrls(CATListOfCATVVSUrl & oFCSUrls) { oFCSUrls = _FCSUrls; return S_OK; }
  HRESULT SetFCSUrls(CATListOfCATVVSUrl & iFCSUrls) { _FCSUrls = iFCSUrls; return S_OK; }

  HRESULT GetFileUrls(CATListOfCATVVSUrl & oFileUrls) { oFileUrls = _fileUrls; return S_OK; }
  HRESULT SetFileUrls(CATListOfCATVVSUrl & iFileUrls) { _fileUrls = iFileUrls; return S_OK; }

  HRESULT GetTicket(CATUnicodeString & oTicket) { oTicket = _ticket; return S_OK; }
  HRESULT SetTicket(CATUnicodeString & iTicket) { _ticket = iTicket; return S_OK; }

  HRESULT GetActionUrl(CATUnicodeString & oActionUrl) { oActionUrl = _actionUrl; return S_OK; }
  HRESULT SetActionUrl(CATUnicodeString & iActionUrl) { _actionUrl = iActionUrl; return S_OK; }

  HRESULT GetTransactionUuid(CATUuid& oUuid) { oUuid = _transactionUuid; return S_OK; }
  HRESULT SetTransactionUuid(CATUuid & iUuid) { _transactionUuid = iUuid; return S_OK; }

  //===================================================================

private:
  /*
  * ...
  * @param ipInterPointer [in]
  * @param opExternPointer [out, CATBaseUnknown#Release] : external pointer
  * @return
  * <code>S_OK</code>: The intern pointer is correctly set
  * <code>E_FAIL</code>: The intern pointer is not set, the in param is NULL
  * 
  */
  HRESULT GetInternPointer(CATBaseUnknown * ipInterPointer, CATBaseUnknown *& opExternPointer);

  /*
  * ...
  * @param opInterPointer [out,CATBaseUnknown#Release] : internal pointer
  * @param ipExternPointer [in]
  * @return
  * <code>S_OK</code>: The intern pointer is correctly set
  * <code>E_FAIL</code>: The intern pointer is not set, the in param is NULL
  * 
  */
  HRESULT SetInternPointer(CATBaseUnknown *& opInterPointer, CATBaseUnknown * ipExternPointer);

  // PLMQL : PushExpand / Open
  CATIPLMCompRecordReadSet *         _recordReadSet;
    
  //Http
  CATSysTSUnicodeString              _url;
  CATSysTSUnicodeString              _postArgs;  
  char*                              _httpLastResult;
  unsigned long long                 _httpLastResultSize;
  CATOmxSR<CATA5::Parser>            _spParser;
  CATSysMultiBuffer*                 _pHttpFullAnswer;
  unsigned int                       _HttpErrorCode;

  // GetTicket output parameters
  CATListOfCATVVSUrl                 _FCSUrls;
  CATListOfCATVVSUrl                 _fileUrls;
  CATUnicodeString                   _ticket;
  CATUnicodeString                   _actionUrl;
  CATUuid                            _transactionUuid;
  
  CATA5::CsvRowChunk* _pCurrentCsvRowChunk; // Current CsvRow chunk retrieved from parser. This chunk may contain up to 256 CsvRow.
  CATULONG32 _CurrentCsvRowIndex; // Current index in current CsvRowChunk.

  // Copy flags - Context can be copied only once
public:
  void       LockCopy() { __CopyAuthorized__ = FALSE; }
  CATBoolean IsCopyLocked() { return !__CopyAuthorized__; }
private:
  mutable CATBoolean __CopyAuthorized__;
};

#endif

//-----------------------------------------------------------------------

#endif
