#ifndef CATIAMove_IDL
#define CATIAMove_IDL
/*IDLREP*/
/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */
//=================================================================
// COPYRIGHT DASSAULT SYSTEMES 1997
//=================================================================
//                                   
// CATIAMove:                           
// Exposed interface for Move
//                                   
//=================================================================
// Usage notes:
//=================================================================
// Jan 98 Creation                                        Denis Busardo
//=================================================================
 
#include "CATIABase.idl"
#include "CATSafeArray.idl"
   /**
    * Represents an object associated with any kind of objects which
    * retrieves the corresponding movable object.
    * An object can be moved only if it is independent from other objects.
    * For example, a pad can be moved, and is as such a movable object,
    * while an edge cannot be moved individually.
    * It should be moved with all the objects making up the pad to which
    * it belongs as a whole.
    * In this case, the underlying edge's movable object is the pad.	
    */
//-----------------------------------------------------------------
interface CATIAMove : CATIABase
{
    //        ================
    //        == PROPERTIES ==
    //        ================
    //
#pragma PROPERTY MovableObject
    //
    // Returns the Movable Object on which transformation will be efficiently applied
    /**
     * Returns the movable object associated with the used object.
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves the <tt>myMovableObject</tt> from 
     * <tt>Move</tt> object associated with <tt>MyObject</tt>.
     * <pre>
     * Dim myMovableObject As Move
     * Set myMovableObject = MyObject.Move.<font color="red">MovableObject</font>
     * </pre>
     * </dl>
     */
    HRESULT get_MovableObject ( out /*IDLRETVAL*/ CATIAMove oMovable );
	//
    //        =============
    //        == METHODS ==
    //        =============
    //
   // Applies a transformation to a movable object
    /**  
     * Applies a move transformation to a movable object.
     * @param TransformationArray
     *   The linear transformation array initialized successively by the
     *   four columns of the transformation matrix.
     *   The first nine components represent the rotation matrix.
     *   The last three components represent the translation vector.
     * @sample
     * This example applies the transformation (45 degrees-rotation around
     * the x axis and a translation) stored in <tt>TransformationArray</tt>
     * to the <tt>Move</tt> object associated with <tt>myMovableObject</tt>:
     * <pre>
     * Dim TransformationArray( 11 )
     * 'Rotation( 45 degrees around the x axis) components
     * TransformationArray( 0 )  = 1.000
     * TransformationArray( 1 )  = 0
     * TransformationArray( 2 )  = 0
     * TransformationArray( 3 )  = 0
     * TransformationArray( 4 )  = 0.707
     * TransformationArray( 5 )  = 0.707
     * TransformationArray( 6 )  = 0
     * TransformationArray( 7 )  = -0.707
     * TransformationArray( 8 )  = 0.707
     * 'Translation Vector (10,20,30)
     * TransformationArray( 9 )  = 10.000
     * TransformationArray( 10 ) = 20.000
     * TransformationArray( 11 ) = 30.000
     * MyMovableObject.Apply TransformationArray
     * </pre>
     * </dl>
     */ 
    HRESULT Apply        ( in  CATSafeArrayVariant iTransformationArray );
};

// Interface name : CATIAMove
#pragma ID CATIAMove "DCE:8db9ca92-9403-11d1-a5e200a0c95af74c"
#pragma DUAL CATIAMove

// VB object name : Move (Id used in Visual Basic)
#pragma ID Move "DCE:36aaebea-9404-11d1-a5e200a0c95af74c"
#pragma ALIAS CATIAMove Move


#endif
// CATIAMove_IDL
