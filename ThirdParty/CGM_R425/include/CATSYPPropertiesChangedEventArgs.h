/**
 * @fullreview vv6 11:12:16
 */
//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/12/16
//===================================================================
// CATSYPPropertiesChangedEventArgs.h
// Header definition of class CATSYPPropertiesChangedEventArgs
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/12/16 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATSYPPropertiesChangedEventArgs_H
#define CATSYPPropertiesChangedEventArgs_H

#include "IntroInfra.h"
#include "CATSYPEventArgs.h"
#include "CATSYPArray.h"
#include "CATUnicodeString.h"
#include "CATBaseUnknown.h"
#include "CATSYPHashMap.h"

class CATSYPEvent;

/**
 * Arguments transfered when a @ref CATSYPDataBlock#PropertiesChanged event is
 * emitted by a CATSYPDataBlock object. This event is emitted when the value
 * of a property is modified inside the datablock.
 *
 * The name of the modified properties and their new values are stored by this
 * class.
 *
 * @par How to retrieve the name of the modified property(ies)
 * If the cache mode is not activated on the CATSYPDataBlock, each time a
 * property is modified an event @ref CATSYPDataBlock#PropertiesChanged is
 * sent by the CATSYPDataBlock object. The argument associated to this event
 * contains only one modified property name. You can retrieve it by using the
 * following member function
 * @ref CATSYPPropertiesChangedEventArgs#GetModifiedProperty(CATUnicodeString & o_name, CATBaseUnknown_var & o_value, int i_index);
 * and giving it 0 as index.
 * When the cache mode is activated, you can retrieve all the modified properties
 * by using the two member functions @ref CATSYPPropertiesChangedEventArgs#GetPropertiesModifiedCount
 * and @ref CATSYPPropertiesChangedEventArgs#GetModifiedProperty(CATUnicodeString & o_name, CATBaseUnknown_var & o_value, int i_index);
 *
 * In both cases, you can use the member function
 * @ref CATSYPPropertiesChangedEventArgs#IsPropertyModified to know whether
 * a given properties have been modified or not.
 */
class ExportedByIntroInfra CATSYPPropertiesChangedEventArgs : public CATSYPEventArgs
{
  CATDeclareClass;

public:
  /**
   * Constructor
   *
   * @param i_pEvent the event dispatched. Can't be @c NULL.
   *
   * @param i_modifiedProperties the dictionary of modified properties to dispatch.
   */
  CATSYPPropertiesChangedEventArgs (CATSYPEvent * i_pEvent, const CATSYPHashMap<CATUnicodeString, CATBaseUnknown_var> & i_modifiedProperties);
  /**
   * Destructor
   */
  virtual ~CATSYPPropertiesChangedEventArgs ();

  /**
   * Get the name of the modified properties associated to their
   * new value.
   */
  void GetModifiedProperties(CATSYPArray<CATUnicodeString> & o_propertiesList);
  
  /** @return a reference on the internal hashMap. 
   * Warning, the pointed value is correlateed to the lifecycle of the instance of this class.
   */
  const CATSYPHashMap<CATUnicodeString, CATBaseUnknown_var>& GetModifiedProperties() const;

  /**
   * Get the value of a modified properties.
   *
   * @param i_propertyName the name of the wanted property.
   *
   * @return the property if it is found, NULL_var otherwise.
   */
  CATBaseUnknown_var GetPropertyValue(const CATUnicodeString & i_propertyName);

  /**
   * Retrieve the modified property.
   * This is an utility function dedicated to be used when only one property
   * has been modified.
   *
   * @param o_name the name of the modified property.
   *
   * @param o_value the value of the modified property.
   * 
   * @returns 1 if there is only one modified property stored inside the argument,
   * 0 otherwise.
   */
  int GetModifiedProperty(CATUnicodeString & o_name, CATBaseUnknown_var & o_value);

  /**
   * Get the number of modified properties.
   * If the cache mode of the CATSYPDataBlockFactory is used (by calling
   * @ref CATSYPDataBlockFactory#BeginUpdateTransaction and 
   * @ref CATSYPDataBlockFactory#EndUpdateTransaction), when a
   * @ref CATSYPDataBloc#PropertiesChanged event is sent, the CATSYPPropertiesChangedEventArg
   * data associated can contain several names of modified properties. In that
   * case, this member function could returns an integer greater than 1.
   * However, if the cache mode is not activated, each time a 
   * @ref CATSYPDataBlock#PropertiesChanged event is sent, the CATSYPPropertiesChangedEventArg
   * data associated contains only one name of modified properties.
   *
   * @returns the number of modified properties.
   */
  int GetPropertiesModifiedCount();

  /**
   * Retrieve the modified property corresponding to the given i_index.
   * This member function is intented to be used with the GetPropertiesModifiedCount
   * member function, so that the caller can know how many properties have been
   * modified.
   * @param o_name the name of the modified property.
   *
   * @param o_value the value of the modified property.
   *
   * @param i_index the index corresponding to the property to retrieve. This index
   * should be between 0 and GetPropertiesModifiedCount() - 1.
   *
   * @returns 1 if the property could be retrieved, 0 otherwise.
   */
  int GetModifiedProperty(CATUnicodeString & o_name, CATBaseUnknown_var & o_value, int i_index);

  /**
   * Indicates whether the given property has been modified or not.
   *
   * @param i_name the name of the property to test
   *
   * @returns 1 if the property has been modified, 0 otherwise.
   */
  int IsPropertyModified(const CATUnicodeString & i_name);

private:
  // Copy constructor and assignement operator are not implemented
  CATSYPPropertiesChangedEventArgs (CATSYPPropertiesChangedEventArgs &);
  CATSYPPropertiesChangedEventArgs& operator=(CATSYPPropertiesChangedEventArgs&);

  // The modified properties data (name and value)
  //CATSYPDynArray<Data> _modifiedProperties;
  //CATSYPProperties _modifiedProperties;
  CATSYPHashMap<CATUnicodeString, CATBaseUnknown_var> _modifiedProperties;

};

#endif
