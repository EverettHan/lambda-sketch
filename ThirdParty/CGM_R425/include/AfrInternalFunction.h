//===================================================================
// COPYRIGHT Dassault Systemes 2015/06/10
//===================================================================
// AfrInternalFunction.cpp
// Header definition of class AfrInternalFunction
//===================================================================
//
// Usage notes: Specific call for Afr 3DCS specific Operation the client side can call
//
//===================================================================
//  2015/06/10 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef AfrInternalFunction_H
#define AfrInternalFunction_H

#include "AfrComputeServer.h"
#include "AfrComputeServerUtilities.h"

#include "CATBaseUnknown.h" //pour hresult en attedant

#include "CATUnicodeString.h"

//CSI communication objects
#include "CSIParameters.h"
#include "CSICommands.h"
#include "CSIChannel.h"
#include "CSINode.h"
#include "CSIFunctionInterface.h"


#define AfrDefaultDomain "Afr"
#define AfrOperationDomain "AfrOperation"
#define AfrAppDomain "AfrApp"

//-----------------------------------------------------------------------
class ExportedByAfrComputeServer AfrInternalFunction : public CSI::FunctionInterface {

  public:

    // Standard constructors and destructors
    // -------------------------------------
    AfrInternalFunction (const CATUnicodeString& iOperationId, CSI::Node& iNode);
    virtual ~AfrInternalFunction ();

    CATUnicodeString GetOperationId() const;
    /**
    * Return true if the request related to the current Channel has been interrupted
    */
    bool IsInterrupted();
    void setChannel(CSI::Channel& origin);
    HRESULT GetCredentials(EK::Credentials& credentials);

    HRESULT SendIntermediateAnswer();

  protected:
    CSI::Parameters GetEmptyOutputs();
    void            Answer(CSI::Channel& origin, int AfrRetCode, CSI::Parameters& undoSyncOutputs, int OperationInputMsg = EXECUTE_OPERATION);
    void            AnswerWithoutNotification(CSI::Channel& origin, int AfrRetCode, CSI::Parameters& undoSyncOutputs);
    void            ReturnOperationExecutionError(CSI::Channel& origin, const CATUnicodeString& errorDesc, int AfrRetCode = UNDO_TRANSACTION_ERROR);
    void            AddAnswerDomain(CSI::Parameters& outputs, CATUnicodeString domain = AfrDefaultDomain);
    void            AnswerProgress(CSI::Parameters& outputs);
    std::vector<CATUnicodeString> _errorMessages;

    //To remove when JUZ applicative migration done
    void            setIterativeOperation(CATBoolean iIsIterative);

  private:

    void            SendAnswerMsgNotification(int OperationInputMsg, int isIterativeOperation);

    // Copy constructor and equal operator
    // -----------------------------------
    AfrInternalFunction (AfrInternalFunction &);
    AfrInternalFunction& operator=(AfrInternalFunction&);

    CATBoolean       _isIterativeOperation;

    CATUnicodeString _operationId;
    CSI::Node&       _node;
    CSI::Message     _message;
    // Current channel
    CSI::Channel *   _origin;

public:

  virtual int GetViewOptions(const int & /*iOperationInputMsg*/) { return 0; };
};

//-----------------------------------------------------------------------

#endif
