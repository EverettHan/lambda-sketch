//===================================================================
// COPYRIGHT  2019-03-06
//===================================================================
// CATPLMChronoExecution.cpp
// Header definition of class CATPLMChronoExecution
//===================================================================
//
// Usage notes:
// the files are written in framework_name\FunctionTests\Output\win_b64\odt_name\chrono_name.time
// there are as many files as there are chronometers
//
// Example of chronofile : chrono.time 
//[
//  {
//    "chronoXMQL.0":[
//      "New Chrono",
//      {
//        "Function Name":"CATPLMCompStatement::Query"
//      },
//      "time.0",
//      {
//        "Function Name":"xMQLQueryFilter::_LaunchXMQLMainTask",
//        "From first":189,
//        "From last":189
//      }
//    ]
//  },
//  {
//    "chronoXMQL.1":[
//      "New Chrono",
//      {
//        "Function Name":"CATPLMCompStatement::Query"
//      },
//      "time.0",
//      {
//        "Function Name":"xMQLQueryFilter::_LaunchXMQLMainTask",
//        "From first":137,
//        "From last":137
//      }
//    ]
//  },
//  {
//    "chronoXMQL.2":[
//      "New Chrono",
//      {
//        "Function Name":"CATPLMCompStatement::Query"
//      },
//      "time.0",
//      {
//        "Function Name":"xMQLQueryFilter::_SendOpenXMQL",
//        "From first":1,
//        "From last":1
//      },
//      "time.1",
//      {
//        "Function Name":"xMQLQueryFilter::_CompleteXMQLTasksBuildersForOpen",
//        "From first":1,
//        "From last":0
//      }
//    ]
//  }
//]
//===================================================================
//  2019-03-06 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMChronoExecution_H
#define CATPLMChronoExecution_H

#include "CATPLMPerfoTools.h"
#include "CATUnicodeString.h"
#include <vector>
#include <map>
#include "CATOmxJsonObject.h"
#include "CATOmxJsonArray.h"
#if defined(_MSC_VER) && (_MSC_VER >= 1924)
#include <string> 
#endif
/*
 * timestamp object is used in order to keep a time stamp and the name of the function.
 */
struct timestamp
{
  timestamp(const CATUnicodeString& iFuncName, CATLONG64 iTimeStamp) { FuncName = iFuncName; TimeStamp = iTimeStamp; }
  CATUnicodeString FuncName;
  CATLONG64 TimeStamp;
};

struct chrono
{
  chrono(const CATUnicodeString& iTag) { Tag = iTag; }
  chrono() {}

  CATUnicodeString Tag;
  bool StopBeforeAdd = false;
  int Counter = 0;
  std::vector<timestamp> TimesVec;
  CATOmxJsonArray jsonArray;

};


class ExportedByCATPLMPerfoTools CATPLMChronoExecution
{



public:
  // Standard constructors and destructors
  // -------------------------------------

  virtual ~CATPLMChronoExecution();
  static  CATPLMChronoExecution &s();


  /**
  *
  * <br><b>Add a timestamp to the list of time stamp for each chrono </b>:
  *  This function does nothing if one of the two following environment is not active : ADL_ODT_IN / PLM_ACTIVE_PERFO_TIME;
  * @param iFunctionName : name of the function in order to build the timestamp object
  * @param iListOfChronoTag : List of chrono (tag) we want to add the timestamp
  * @return
  * <dl>
  * <dt><code>S_OK</code> the timestamp has been correctly added to the chronometers <dd>
  * </dl>
  */
  HRESULT AddTime(const CATUnicodeString& iFunctionName, const std::vector<std::string>& iListOfChronoTag);


  /**
  *
  * <br><b>Add a timestamp to the listed chronometers and creates JSON object</b>:
  *  This function does nothing if one of the two following environment is not active : ADL_ODT_IN / PLM_ACTIVE_PERFO_TIME;
  *  The JSON object are written during the destruction of the class
  * @param iFunctionName : name of the function in order to build the timestamp object
  *
  * @param iListOfChronoTag : List of chrono (tag) we want to stop
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> the timestamp has been correctly added to the list <dd>
  * <dt><code>E_FAIL</code>Call of "StopChrono" before an "AddTime"<dd>
  * </dl>
  */
  HRESULT StopChrono(const CATUnicodeString& iFunctionName, const  std::vector<std::string>& iListOfChronoTag);


private:
  bool _FirstWrite;  // Check if it is the first write to the output file, in this case we open the file with 'truncate' mode else in 'append' mode
  std::map<CATUnicodeString, chrono> _chronoMap;

  HRESULT _StopChrono(const CATUnicodeString& iFunctionName, chrono& iChrono);
  HRESULT _AddTime(const CATUnicodeString& iFunctionName, chrono& iChrono);

  CATPLMChronoExecution();
  // Copy constructor and equal operator
  // -----------------------------------
  CATPLMChronoExecution(CATPLMChronoExecution &);
  CATPLMChronoExecution& operator=(CATPLMChronoExecution&);

};

//-----------------------------------------------------------------------

#endif
