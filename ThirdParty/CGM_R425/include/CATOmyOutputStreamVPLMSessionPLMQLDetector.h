// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATOmyOutputStreamVPLMSessionPLMQLDetector.h
// Provide an adaptor to interface
//    CATIComSidlOutputStream
// It is an helper in order to detect whether you are facing the
// vplmsession or plmql part of an outputstream
//
//===================================================================
//
// Usage notes: You must inherit form this class and implement the protected Do*** method family 
//  In order to get the correct behavior, do not override the native interface methods
//
//===================================================================
//CAA2 Wizard Generation Report
//IMPLEMENTATION
//    BOA: CATIComSidlOutputStream

//End CAA2 Wizard Generation Report
//
//  Jul 2008  Creation: Code generated by the CAA wizard  PJQ
//===================================================================
#ifndef CATOmyOutputStreamVPLMSessionPLMQLDetector_H
#define CATOmyOutputStreamVPLMSessionPLMQLDetector_H

#include "CATOMYCommunication.h"
#include "CATIComSidlOutputStream.h"

//-----------------------------------------------------------------------
// All the interface methods implement the following pattern:
// 1. state management (see _state comments)
// 2. call to the corresponding Do*** method
//-----------------------------------------------------------------------
class ExportedByCATOMYCommunication CATOmyOutputStreamVPLMSessionPLMQLDetector: public CATIComSidlOutputStream

{
public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
  CATOmyOutputStreamVPLMSessionPLMQLDetector ();
  virtual ~CATOmyOutputStreamVPLMSessionPLMQLDetector ();

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#BeginStream
  */
  HRESULT BeginStream () ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteDouble
  */
  HRESULT WriteDouble (double  iNum ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteInt
  */
  HRESULT WriteInt (int  iNum ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteString
  */
  HRESULT WriteString (const CATUnicodeString &  iChar ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteBinary
  */
  HRESULT WriteBinary (const char *  iSrc   , int  iLen ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#EndStream
  */
  HRESULT EndStream () ;

protected:
  
  /**
  * Method to known if you are in a vplmsession context or not.
  * Not pertinent for BeginStream or EndStream
  *
  * @returns:
  *  > TRUE is the data belongs to the vplmsession part,
  *  > FALSE if it belongs to the plmql part
  */
  CATBoolean IsVPLMSession();

  /**
  * Method to implement for CATIComSidlOutputStream#BeginStream behavior
  */
  virtual HRESULT DoBeginStream ()=0;

  /**
  * Method to implement for CATIComSidlOutputStream#WriteDouble behavior
  */
  virtual HRESULT DoWriteDouble (double  iNum )=0;

  /**
  * Method to implement for CATIComSidlOutputStream#WriteInt behavior
  */
  virtual HRESULT DoWriteInt (int  iNum )=0;

  /**
  * Method to implement for CATIComSidlOutputStream#WriteString behavior
  */
  virtual HRESULT DoWriteString (const CATUnicodeString &  iChar )=0;

  /**
  * Method to implement for CATIComSidlOutputStream#WriteBinary behavior
  */
  virtual HRESULT DoWriteBinary (const char *  iSrc   , int  iLen )=0;

  /**
  * Method to implement for CATIComSidlOutputStream#EndStream behavior
  */
  virtual HRESULT DoEndStream ()=0;
 
private:
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  CATOmyOutputStreamVPLMSessionPLMQLDetector (CATOmyOutputStreamVPLMSessionPLMQLDetector &);
  CATOmyOutputStreamVPLMSessionPLMQLDetector& operator=(CATOmyOutputStreamVPLMSessionPLMQLDetector&);

  /**
  * _state corresponding to the internal state of the parser 
  *    > startUndef,notStarted: you should never see this state in the Do*** methods
  *    > startVPLM,runVPLM: you're in the vplmsession part
  *    > runPLMQL: you're in the plmql part
  */
  enum state{notStarted,startUndef,startVPLM,runVPLM,runPLMQL};
  state _state;
  int _NumberOfStringForVPLMSessionLeft, _VPLMVersion;
};

//-----------------------------------------------------------------------

#endif
