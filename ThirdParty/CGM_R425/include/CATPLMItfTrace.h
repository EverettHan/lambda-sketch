// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATPLMItfTrace.h
// Trace object for your document
//
//===================================================================
//
// Usage notes:
// This class will enable you to output traces to the output console
// CNext traces can be turned on or off interactively during the session
// You may choose to use another existing trace object rather than having
// to many trace objects. 
// In this case, make the recommended changes in this header file and in 
// the corresponding source file.
//----------
// If you want to add traces in your .cpp, you must add at the top
// of your file the 2 following lines :
//
//   #include "CATPLMItfTrace.h"
//   CATPLMItfTraceDefine(MY_TRACE_NAME)
//
// where you must replace MY_TRACE_NAME by the name of your traces
//
//===================================================================

//===================================================================
//
//  May 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
#ifndef CATPLMItfTrace_H
#define CATPLMItfTrace_H

#include "CATTrace.h"
/**
 * If you would rather use another existing trace object, add the include
 * of the trace object here
 */
 
/**
 * Declare the trace object
 * <p>
 * If you would rather use another existing trace object, remove this
 * declaration
 */

#define INFO_LVL  100 
#define DEBUG_LVL 200
#define WARN_LVL  300
#define ERROR_LVL 400

#ifndef CNEXT_CLIENT 

#define CATPLMItfTraceDefine(a) static CATTrace CATPLMItfTrace(#a,"Traces CATPLMItfTrace",CATTraUnactivated);
#define CATPLMItfTraceActive CATPLMItfTrace.IsActive()
#define CATPLMItfTracePUT(MSG1)      do {CATPLMItfTrace.TraPut(MSG1);} while (0)
#define CATPLMItfTracePUTLN(MSG1)    do {CATPLMItfTrace.TraPutLN(MSG1);} while (0)
#define CATPLMItfTracePUTLN2(MSG1,MSG2)    do {CATPLMItfTrace.TraPut(MSG1); CATPLMItfTrace.TraPutLN(MSG2);} while (0)
#define CATPLMItfTracePUTLN3(MSG1,MSG2,MSG3)    do {CATPLMItfTrace.TraPut(MSG1); CATPLMItfTrace.TraPut(MSG2); CATPLMItfTrace.TraPutLN(MSG3);} while (0)
#define CATPLMItfTracePUTXLN(MSG1,var)    do {CATPLMItfTrace.TraPutXLN(MSG1,var);} while (0)

#else

#define CATPLMItfTraceDefine(a)
#define CATPLMItfTraceActive
#define CATPLMItfTracePUT(MSG1)    
#define CATPLMItfTracePUTLN(MSG1) 
#define CATPLMItfTracePUTLN2(MSG1,MSG2) 
#define CATPLMItfTracePUTLN3(MSG1,MSG2,MSG3) 
#define CATPLMItfTracePUTXLN(MSG1,var) 

#endif

// Use with caution, can be activated on customer side:
//ItfC
//   ^
//   |_ C for customer
#define CATPLMItfCTraceDefine(a) static CATTrace a(#a,"Traces CATPLMItfTrace",CATTraUnactivated);
#define CATPLMItfCTraceActive(a) a.IsActive()
#define CATPLMItfCTracePUT(a,MSG1)      do {a.TraPut(MSG1);} while (0)
#define CATPLMItfCTracePUTLN(a,MSG1)    do {a.TraPutLN(MSG1);} while (0)
#define CATPLMItfCTracePUTLNA(a,MSG1,MSG2)    do {a.TraPutLN(MSG1,MSG2);} while (0)//for MSG2 is an int double...
#define CATPLMItfCTracePUTLN2(a,MSG1,MSG2)    do {a.TraPut(MSG1); a.TraPutLN(MSG2); } while (0)
#define CATPLMItfCTracePUTLN3(a,MSG1,MSG2,MSG3)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPutLN(MSG3);} while (0)
#define CATPLMItfCTracePUTLN4(a,MSG1,MSG2,MSG3,MSG4)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPut(MSG3); a.TraPutLN(MSG4);} while (0)
#define CATPLMItfCTracePUTLN5(a,MSG1,MSG2,MSG3,MSG4,MSG5)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPut(MSG3); a.TraPut(MSG4); a.TraPutLN(MSG5);} while (0)
#define CATPLMItfCTracePUTLN6(a,MSG1,MSG2,MSG3,MSG4,MSG5,MSG6)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPut(MSG3); a.TraPut(MSG4); a.TraPut(MSG5); a.TraPutLN(MSG6);} while (0)
#define CATPLMItfCTracePUTLN7(a,MSG1,MSG2,MSG3,MSG4,MSG5,MSG6,MSG7)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPut(MSG3); a.TraPut(MSG4); a.TraPut(MSG5); a.TraPut(MSG6); a.TraPutLN(MSG7);} while (0)
#define CATPLMItfCTracePUTLN8(a,MSG1,MSG2,MSG3,MSG4,MSG5,MSG6,MSG7,MSG8)    do {a.TraPut(MSG1); a.TraPut(MSG2); a.TraPut(MSG3); a.TraPut(MSG4); a.TraPut(MSG5); a.TraPut(MSG6); a.TraPut(MSG7); a.TraPutLN(MSG8);} while (0)
#define CATPLMItfCTracePUTXLN(a,Message,var)    do {a.TraPutXLN(Message,var);} while (0)

#endif

