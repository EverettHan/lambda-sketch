// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMFilterCondition.h
// Define the CATIPLMFilterCondition interface
//
//===================================================================
//  Apr 2004  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef NEW_CONFIG_FILTERS
#define NEW_CONFIG_FILTERS
#endif

#ifndef CATIPLMFilterCondition_H
#define CATIPLMFilterCondition_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMQueryFilterEnum.h"
#include "CATIPLMFilterRelation.h"
#include "CATIAV5Level.h"
#include "CATPLMOmxCollections.h"
#include "CATLISTV_CATPLMTypeId.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFilterCondition;
#else
extern "C" const IID IID_CATIPLMFilterCondition;
#endif

class CATIPLMFilterFunction;
class CATIPLMFilterAttribute;
class CATIPLMFilterConfig;
class CATIPLMFilterVolume;
class CATListPtrCATIPLMProviderDesc;
class CATListPtrCATIPLMFilterFunction;
class CATListPtrCATIPLMFilterAttribute;
class CATListPtrCATIPLMFilterConfig;
class CATListPtrCATIPLMFilterVolume;
class CATListPtrCATIPLMFilterCondition;
class CATListPtrCATIPLMFilterRelation;
class CATUnicodeString;
class CATString;
class CATPLMType;
class CATIPLMFunction;

/** The type of the condition. */
enum FilterConditionOperator {
  /** AND Condition */
  FILTERCOND_AND = 0,
  /** OR Condition */
  FILTERCOND_OR = 1,
  /** Uninitialyzed value */
  FILTERCOND_NONE = 3
};


class ExportedByCATPLMServicesItf CATIPLMFilterCondition : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Gets the condition type.
  * The type of the condition is specified when creating in with the API CATIPLMQueryFilter::CreateFilterCondition or CATIPLMFilterCondition::AddFilterCondition
  * @param oConditionType
  *   the condition type: either CONDITION_AND or CONDITION_OR
  */
  virtual HRESULT GetConditionType(FilterConditionOperator * oConditionType) const = 0;

  /**
  * Create an attribute Filter in the condition
  * Used for filtering query or expand.
  * This API defines the (type, attribute) that the filter is on, and the operator to use.
  * for the filter to be complete, on the returned oFilterAttribute, you need to call CATIPLMFilterAttribute::SetValue to associate value(s)
  * @param iType
  *    The type.
  * @param iAttrName
  *    The attribute name.
  * @param iOp
  *    The operator.
  * @param oFilterAttribute [out, CATBaseUnknown#Release]
  *    The returned created filter.
  * @return
  *    S_OK
  *    E_INVALIDARG : iType not correct, or oFilterAttribute not NULL.
  *    E_INVALIDMULTIOP  : Using a operator for multi valuated attr on a mono valuated attr
  *                        Or an operator for mono valuated attr on a multi valuated attr
  *                        (the operator CONTAINS_ONE_OF ir the only operator to used on multi-valuated attr, and should be used on this kind of attr only).
  *    E_INCOMPATIBLETYPES :  For Filter in an iterative criteria, the filter is on a PLMType not compatible with the type of the iterative criteria
  *                           (should be on same type or on parent type).
  *    E_???               Other not documented errors
  */
  virtual HRESULT AddFilterAttribute(CATPLMType * iType,
    const CATString & iAttrName,
    RelationalOperator::Op iOp,
    CATIPLMFilterAttribute *&  oFilterAttribute) = 0;

  virtual HRESULT AddFilterAttributeWithPath(const CATLISTV(CATPLMTypeId) &iRequestedTypePath,
    CATPLMType * iType,
    const CATString & iAttrName,
    RelationalOperator::Op iOp,
    CATIPLMFilterAttribute *&  oFilterAttribute) = 0;

  /**
   * Return the list of FilterAttribute contained by the condition
   * @param oFilterAttributes [out]  returned list of filterAttributes.
   */
  virtual HRESULT ListFilterAttributes(CATIPLMFilterAttributeList& oFilterAttributes) = 0;

  /**
   * Create a filter function.
   * @param iFunc [in]
   *   The function to use to evaluate the filter
   * @param iOp [in]
   *   The operator to use.
   * @param oFilterFunction [out, CATBaseUnknown#Release]
   *   The created filter attribute. Use @href CATIPLMFilterFunction#SetValue to end valuating the filter.
   *
   * @return
   * S_OK Success.
   * E_FAIL Failure.
   *
   */
  virtual HRESULT AddFilterFunction(CATIPLMFunction * iFunc, RelationalOperator::Op iOp,
    CATIPLMFilterFunction *&  oFilterFunction) = 0;

  /**
   * Return the list of FilterFunction contained by the condition
   * @param oFilterFunctions [out]  returned list of FilterFunction.
   */
  virtual HRESULT ListFilterFunctions(CATIPLMFilterFunctionList& oFilterFunctions) = 0;


  /**
  * Adds a CATPLMFilterVolume in the FilterCondition.
  * CATPLMFilterVolume is used for applying volume filter.
  * It has a group of methods which set for example the value of Matching bounding box parameters, the clearance, the existing zones…
  * @param oFilterVolume [out, CATBaseUnknown#Release]   the created FilterVolume.
  */
  virtual HRESULT AddFilterVolume(CATIPLMFilterVolume ** oFilterVolume) = 0;

  /**
   * Return the list of FilterFunction contained by the condition
   * @param oFilterFunctions [out]  returned list of FilterVolume.
   */
  virtual HRESULT ListFilterVolumes(CATIPLMFilterVolumeList& oListFilterVolumes) = 0;

  /**
  * Adds a CATIPLMFilterConfig in the FilterCondition.
  * CATIPLMFilterConfig is used for applying a configuration handler on the Root during the expand operation.
  * @param iFilterConfig [in]
  *   the FilterConfig used for applying a configuration handler.
  * @return
  *    S_OK
  *    E_INVALIDARG iFilterConfig is NULL
  *    E_INVALIDITERATIVE (from CATPLMServicesHRESULT.h) Attempting to add a config filter in an iterative criteria
  *    E_CONFIGINOR (from CATPLMServicesHRESULT.h) Attempting to add a config filter in a condition OR
  *    E_??? Other not documented errors
  */
  virtual HRESULT AddFilterConfig(CATIPLMFilterConfig * iFilterConfig) = 0;

  /**
   * Return the list of FilterConfig contained by the condition
   * @param oFilterConfig [out]  returned list of FilterConfig.
   */
  virtual HRESULT ListFilterConfigs(CATIPLMFilterConfigList& oFilterConfig) = 0;

  /**
  * Adds a CATIPLMFilterRelation in the FilterCondition.
  * CATIPLMFilterRelation is used for specifying on which relation you want to navigate during the expand operation.
  * @param iSource
  *    the source Type of this relation
  * @param iTarget
  *    the target Type of this relation.
  * @param iDirection
  *    The RelDirection of this relation.
  * @param iCategory
  *    The Category of this relation.
  * @param iRole
  *    The Role of this relation.
  */
  virtual HRESULT AddFilterRelation(CATPLMType * iSource,
    CATPLMType * iTarget,
    RelDirection iDirection) = 0;

  /**
  * Adds a CATIPLMFilterRelation in the FilterCondition.
  * CATIPLMFilterRelation is used for specifying on which relation you want to navigate during the expand operation.
  * @param iSource
  *    the source Type of this relation
  * @param iTarget
  *    the target Type of this relation.
  * @param iDirection
  *    The RelDirection of this relation.
  * @param oFilterRelation [out, CATBaseUnknown#Release]
  *		 The FilterRelation used for applying a filter on relation.
  */
  virtual HRESULT AddFilterRelation(CATPLMType * iSource,
    CATPLMType * iTarget,
    RelDirection iDirection,
    CATIPLMFilterRelation ** oFilterRelation) = 0;

  /**
   * Return the list of FilterRelation contained by the condition
   * @param oFilterRelation [out]  returned list of FilterRelation.
   */
  virtual HRESULT ListFilterRelations(CATIPLMFilterRelationList& oFilterRelations) = 0;

  /**
  * Adds a CATPLMFilterCondition in the FilterCondition.
  * CATPLMFilterCondition is used for applying a subset of filters of any kind, with a certain condition.
  * @param oFilterCondition [out, CATBaseUnknown#Release] the returned created filter condition
  * @param ConditionType [in] FILTERCOND_AND or FILTERCOND_OR
  */
  virtual HRESULT AddFilterCondition(CATIPLMFilterCondition ** oFilterCondition, FilterConditionOperator ConditionType = FILTERCOND_AND) = 0;

  /**
   * Return the list of Condition contained by the condition
   * @param oFilterCondition [out]  returned list of FilterCondition.
   */
  virtual HRESULT ListFilterConditions(CATIPLMFilterConditionList& oFilterConditions) = 0;

  /**
  * Remove filter category.
  * @param iListOfCategory
  *    The bitfield of categories. @see CATIPLMQueryFilter#RemoveFilterCategory
  * @param oToRemove
  *    If the condition is empty after the remove, informs the caller to remove the condition.
  */
  virtual HRESULT RemoveCategory(int iListOfCategory, int &oToRemove) = 0;

  /** Clones condition into another one.
  *
  * eg:
  * Use Case:
  * Suppose you have an instance of CATIPLMFilterCondition (pCond_A) belonging to an instance (pQF_A) of CATIPLMQueryFilter.
  * Suppose you have another instance pQF_B of CATIPLMQueryFilter.
  * Suppose you want to clone pCond_A on pQF_B.
  * Here is what you have to do:
  * 1-call HRESULT CATIPLMFilterCondition::AddFilterCondition( CATIPLMFilterCondition ** oFilterCondition ,  FilterConditionOperator ConditionType = FILTERCOND_AND) on another condition of pQF_B, you retrieve and empty pCond_B;
  *   OR
  *   call HRESULT CATIPLMFilterCriteria::CreateFilterCondition( CATIPLMFilterCondition ** oFilterCondition, FilterConditionOperator ConditionType = FILTERCOND_AND) on criteria of pQF_B, you retrieve and empty pCond_B;
  * 2-Then call pCond_A->Clone(pCond_B)
  *
  * @param iopNewFilterCond [inout]
  *    Result of the cloning
  * @param iIsFilterCondOpAppliedToNewFilterCond [inout]
  *    FilterConditionOperator of current condition applied to clone condition OR not.
  *    WARNING: if iIsFilterCondOpAppliedToNewFilterCond==TRUE, FilterConditionOperator set on iopNewFilterCond using AddFilterCondition is lost!
  *             Please have a look to WARNING section below to have detailed explanations.
  * @return Additional return code for this deprecated signature
  *    E_INVALIDARG : if iopFilterCondition==NULL or if iopFilterCondition is not empty.
  *    E_FAIL : if an error has occurred while execution of current method.
  *    S_OK : execution of current method was a success.
  *
  * WARNING:
  * If iIsFilterCondOpAppliedToNewFilterCond==TRUE, it means that you want to apply to pCond_B FilterConditionOperator found on pCond_A
  * Then write the following and understandable code:
  * pQF_B->AddFilterCondition(pCond_B,FILTERCOND_NONE)
  * pCond_A->Clone(pCond_B,TRUE)
  *
  * If iIsFilterCondOpAppliedToNewFilterCond==FALSE, it means that you want to apply to pCond_B FilterConditionOperator specified using AddFilterCondition
  * Then write the following and understandable code:
  * pQF_B->AddFilterCondition(pCond_B,FILTERCOND_OR)
  * pCond_A->Clone(pCond_B,FALSE)
  */
  virtual HRESULT Clone(CATIPLMFilterCondition* iopNewFilterCond, CATBoolean iIsFilterCondOpAppliedToNewFilterCond = TRUE) const = 0;

  /*******************************************************************************************************************************************
  *
  *  All the APIs below are deprecated, use instead as documented the not deprecated version
  *
  *******************************************************************************************************************************************/

  /* @deprecated  R419
   * Specify the type of condition when creating it, API CATIPLMQueryFilter::CreateFilterCondition or CATIPLMFilterCondition::AddFilterCondition
   */
  virtual HRESULT SetConditionType(FilterConditionOperator iConditionType) = 0;

  /* @deprecated  R419
   * Use the not deprecated signature of that API
   * @return Additional return code for this deprecated signature
   *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOp, iValue
   *    E_INVALIDOPERATOR : for deprecated signatures (with CATUnicodeString * iOp)
   *                        iOp is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
   */
  virtual HRESULT AddFilterAttribute(CATPLMType * iType,
    CATString * iAttrName,
    CATUnicodeString * iOp,
    CATUnicodeString * iValue,
    CATUnicodeString * iEndValue = NULL) = 0;

  /* @deprecated  R419
   * Use the not deprecated signature of that API
   * @param oFilterAttribute [out, CATBaseUnknown#Release]
   * @return Additional return code for this deprecated signature
   *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOp, iValue
   *    E_INVALIDOPERATOR : iOp is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
   */
  virtual HRESULT AddFilterAttribute(CATPLMType * iType,
    CATString * iAttrName,
    CATUnicodeString * iOperator,
    CATIPLMFilterAttribute **  oFilterAttribute) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterAttributeList
   * @param oFilterAttributes [out]
   *   NULL if no FilterAttribute.
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterAttributes(CATListPtrCATIPLMFilterAttribute ** oFilterAttributes) = 0;

  /* @deprecated  R419
   * Use the not deprecated signature of that API
   * @return Additional return code for this deprecated signature
   *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOperator, iValue
   *    E_INVALIDOPERATOR : iOperator is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
   */
  virtual HRESULT AddFilterFunction(CATIPLMFunction  * iFunc, CATUnicodeString * iOperator,
    CATUnicodeString * iValue,
    CATUnicodeString * iEndValue = NULL) = 0;

  /* @deprecated  R419
   * Use the not deprecated signature of that API
   * @param oFilterFunction [out, CATBaseUnknown#Release]
   * @return Additional return code for this deprecated signature
   *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOp, iValue
   *    E_INVALIDOPERATOR : iOperator is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
   */
  virtual HRESULT AddFilterFunction(CATIPLMFunction * iFunction, CATUnicodeString * iOperator,
    CATIPLMFilterFunction **  oFilterFunction) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterFunctionList
   * @param oFilterFunctions [out]
   *   NULL if no FilterFunction.
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterFunctions(CATListPtrCATIPLMFilterFunction ** oFilterFunctions) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterVolumeList
   * Returns the list of CATPLMFilterVolume in the FilterCondition.
   * @param oFilterVolumes
   *   NULL if no CATPLMFilterVolume.
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterVolumes(CATListPtrCATIPLMFilterVolume ** oFilterVolumes) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterConfigList
   * @param oFilterConfigs
   *   NULL if no CATPLMFilterConfig.
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterConfigs(CATListPtrCATIPLMFilterConfig ** oFilterConfig) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterRelationList
   * @param oFilterRelations
   *   NULL if no CATIPLMFilterRelation.
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterRelations(CATListPtrCATIPLMFilterRelation ** oFilterRelations) = 0;

  /* @deprecated  R419
   * Use instead the signature with CATIPLMFilterConditionList
   * @param oFilterConditions
   *   NULL if no CATIPLMFilterCondition
   *   Ptr in the list to be released by caller, and list to be deleted.
   */
  virtual HRESULT ListFilterConditions(CATListPtrCATIPLMFilterCondition ** oFilterConditions) = 0;
};

#endif
