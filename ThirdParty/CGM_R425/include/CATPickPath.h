#ifndef CATPickPath_H
#define CATPickPath_H

// COPYRIGHT DASSAULT SYSTEMES 1999

/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */

#include "SGInfra.h"
#include "CATRepPath.h"



#include "CATMathPoint.h"
#include "CATMathPointf.h"
#include "CATMathDirectionf.h"
#include "CAT4x4Matrix.h"
#include "CAT3x3Matrix.h"

class CATRep;
class CATPickPath;


enum CATVizPickPathHiddenMode
{
  CATVIZ_HIDDEN_DEFAULT,
  CATVIZ_HIDDEN_BY_EDGE_OR_POINT,
  CATVIZ_HIDDEN_BY_FACE
};

/**
* Class representing a single graphical representation within a visualized viewer.
* <br><b>Role</b> : it describes a graphical path within a graphical tree. It also
* holds information concerning the viewer. These objects are generated by the picking
* algorithm.
*
*/
class ExportedBySGInfra CATPickPath : public CATRepPath
{
public:


  /**
  * Default constructor.
  *
  * @param iViewpointWherePathIsDrawn
  *        The viewpoint in wich the graphic representation will be drawn.
  */
  CATPickPath (CATViewpoint *viewpoint = NULL);

  /**
  * Constructor.
  * <br><b>Role</b> : create a pickPath and add the first
  * <br>graphic representation in it.
  *
  * @param iRep
  *        The first graphic regresentation to add.
  */
  CATPickPath (CATRep *iRep);


  /**
  * Copy constructor.
  *
  * @param iPickPath
  *        The pickPath to copy.
  */
  CATPickPath (const CATPickPath& iPickPath);


  /**
  * Operator of assignment.
  *
  * @param iPickPath
  *        The pickPath use to create a new one identical.
  *
  * @return
  *        The new pickPath created by assignment.
  */
  CATPickPath & operator = (const CATPickPath& iPickPath);

  virtual ~CATPickPath ();

  /**
  * Loads a new graphic representation.
  * <br><b>Role</b> : add a graphic representation at the end
  * <br>of the pickPath.
  *
  * @param iRep
  *        The grahic representation to add.
  */
  void Load (const CATRep* iRep);

  /**
  * Loads a new sub-element in the pickPath.
  * <br><b>Role</b> : Add a sub-element defined by an index
  * <br>in the sub-element list of the pickPath.
  *
  * @param iSubElement
  *        The index of the sub-element to add.
  */
  void Load (const int iSubElement);

  /**
  * Loads a new sub-element list in the pickPath.
  * <br><b>Role</b> : Replace the sub-element list of the pickPath
  * <br>by the one given as input parameter.
  *
  * @param ipSubElementIdList
  *        The list of sub-element to use to replace the pickpath current list.
  */
  void Load (const ::list<int>& ipSubElementIdList);

  /**
  * @nodoc
  */
  void Push ();

  /**
  * @nodoc
  */
  void Pop ();


  /**
  * Gets the first graphic representation of the pickPath.
  *
  * @return
  *        The first graphic representation of the pickPath.
  */
  CATRep* GetTopRep () const;


  /**
  * Indicates if the repPath has sub-elements.
  *
  * @return
  *        The number of sub-elements, returns 0 if no sub-element.
  */
  int HasSubElement () const;


  /**
  * @nodoc
  */
  int GetCurrentSubElement () const;


  /**
  * Associates a 3 dimensions matrix to this pickPath.
  * <br><b>Role</b> :
  *
  * @param iMatrix
  *        The 4 by 4 matrix.
  */
  void SetMatrix (const CAT4x4Matrix& iMatrix);

  /**
  * Gets the associated 3D matrix.
  *
  * @return
  *        The associated 4 by 4 matrix.
  */
  const CAT4x4Matrix & GetMatrix () const;

  /**
  * Associates a 2 dimensions matrix to this pickPath.
  *
  * @param iMatrix
  *        The 3 by 3 matrix.
  */
  const CAT3x3Matrix & Get2DMatrix () const;

  /**
  * Associates a 3 dimensions matrix to this pickPath.
  * <br><b>Role</b> :
  *
  * @param iMatrix
  *        The 3 by 3 matrix.
  */
  void SetMatrix (const CAT3x3Matrix &);


  /**
  * Gets the global point of intersection.
  * <br><b>Role</b> : Gets the point of intersection taking
  * <br>account the matrix associated to the path.
  *
  * @return
  *        The global point of intersection.
  */
  CATMathPointf GetGlobalIntersection () const;


  /**
  * Gets the global point of intersection.
  * <br><b>Role</b> : Gets the point of intersection taking
  * <br>account the matrix associated to the path.
  * CATMathPoint GetGlobalIntersectionPoint() const;
  * The result is CATMathPoint i.e. it is more precise than
  * the Global Intersection obtained by GetGlobalIntersection ()
  *
  * @return
  *        The global point of intersection.
  */
  CATMathPoint GetGlobalIntersectionPoint () const;
  /**
  * Gets the point of intersection.
  * <br><b>Role</b> : Gets the point of intersection.
  *
  * @return
  *        The point of intersection.
  */
  const CATMathPointf& GetIntersection () const;

  /**
  * Gets the point of intersection.
  * <br><b>Role</b> : Gets the point of intersection.
  *
  * @return
  *        The point of intersection.
  */
  const CATMathPoint& GetIntersectionPoint () const;

  /**
  * Sets the point of intersection.
  * <br><b>Role</b> : Sets the point of intersection.
  *
  * @param iIntersection
  *        The point of intersection to value.
  */
  void SetIntersection (const CATMathPointf& iIntersection);

  /**
  * Sets the point of intersection.
  * <br><b>Role</b> : Sets the point of intersection.
  *
  * @param iIntersection
  *        The point of intersection to value.
  */
  void SetIntersection (const CATMathPoint& iIntersection);

  /**
  * Gets the normal at the point of intersection, or (WARNING) the tangent instead
  * if the dimension of the selected object is equal to one.
  * <br><b>Role</b> : Gets the normal (or tangent for lineic entities) at
  * <br>the point of intersection.
  *
  * @return
  *        The normal vector.
  */
  const CATMathDirectionf& GetNormal () const;

  /**
  * Gets the global normal (that is, in world coordinates) at the intersection point, or (WARNING) the global tangent instead
  * if the dimension of the selected object is equal to one.
  * <br><b>Role</b> : Gets the normal vector (or glocal tangent for lineic entities)
  * <br>at the point of intersection, taking
  * <br>account the matrix associated to the path.
  *
  * @return
  *        The global normal.
  */
  CATMathDirectionf GetGlobalNormal () const;

  /**
  * Gets the normal at the point of intersection.
  * <br><b>Role</b> : Gets the normal at
  * <br>the point of intersection.
  *
  * @return
  *        The normal vector.
  */
  CATMathDirectionf GetNormalVector () const;

  /**
  * Gets the global normal (that is, in world coordinates) at the intersection point.
  * <br><b>Role</b> : Gets the normal vector at
  * <br>the point of intersection, taking into
  * <br>account the matrix associated to the path.
  *
  * @return
  *        The global normal.
  */
  CATMathDirectionf GetGlobalNormalVector () const;

  /**
  * Sets normal at the point of intersection.
  * <br><b>Role</b> : Sets the normal at the
  * <br>point of intersection.
  *
  * @param iNormal
  *        The normal to value.
  */
  void SetNormal (const CATMathDirectionf& iNormal);


  /**
  * Gets the tangent at the point of intersection.
  * <br><b>Role</b> : Get's the tangent at
  * <br>the point of intersection.
  *
  * @return
  *        The tangent vector.
  */
  const CATMathDirectionf & GetTangent () const;

  /**
  * Gets the tangent at the point of intersection.
  * <br><b>Role</b> : Get's the tangent at
  * <br>the point of intersection.
  *
  * @return
  *        The tangent vector.
  */
  CATMathDirectionf GetTangentVector () const;

  /**
  * Gets the global tangent (that is, in world coordinates) at the intersection point.
  * <br><b>Role</b> : Gets the tangent vector at
  * <br>the point of intersection, taking
  * <br>account the matrix associated to the path.
  *
  * @return
  *        The global tangent.
  */
  CATMathDirectionf GetGlobalTangentVector () const;

  /**
  * Sets tangent at the point of intersection.
  * <br><b>Role</b> : Sets the tangent at the
  * <br>point of intersection.
  *
  * @param iTangent
  *        The tangent to value.
  */
  void SetTangent (const CATMathDirectionf& iTangent);

  /**
  * @nodoc
  */
  float GetDimension () const;

  /**
  * @nodoc
  */
  void  SetDimension (const float);

  /**
  * @nodoc
  */
  float GetDeep () const;

  /**
  * @nodoc
  */
  void SetDeep (const float);

  /**
  * @nodoc
  */
  int GetZBuffer () const;

  /**
  * @nodoc
  */
  void SetZBuffer (const int);

  /**
  * @nodoc
  */
  int GetId () const;

  /**
  * @nodoc
  */
  void SetId (const int);

  /**
  * @nodoc
  */
  int GetPriority () const;

  /**
  * @nodoc
  */
  void SetPriority (const int);

  /**
  * @nodoc
  */
  float GetDistance () const;

  /**
  * @nodoc
  */
  void SetDistance (const float);

  /**
  * @nodoc
  */
  void SetAsHidden (CATBoolean iIsHidden, CATVizPickPathHiddenMode iHiddenMode = CATVIZ_HIDDEN_DEFAULT);

  /**
  * @nodoc
  */
  CATBoolean IsHidden (CATVizPickPathHiddenMode& oHiddenMode);

  /**
  * @nodoc
  */
  CATBoolean IsHidden (CATVizPickPathHiddenMode& oHiddenMode, CATBoolean& oHiddenStatusValidity);

  /**
  * @nodoc
  */
  void GetPrimitiveItem (int&, unsigned int&) const;

  /**
  * @nodoc
  */
  void SetPrimitiveItem (int, unsigned int);

  // OOC PointCloud methods
  // ----------------------

  /** @nodoc */
  void SetOOCPCTransientData (const CATBoolean);

  /** @nodoc */
  CATBoolean HasOOCPCTransientData ();

  /** @nodoc */
  void SetOOCPCHLfrustum (const float (&iFrustum)[6][4]);

  /** @nodoc */
  void GetOOCPCHLfrustum (float (&oFrustum)[6][4]);

  /** @nodoc */
  bool HasFilter () const;

private:

  int _currentRep;
  int _manipulatedRep;

  //  global matrix transformation
  //  ----------------------------

  CAT4x4Matrix _matrix3D;
  CAT3x3Matrix _matrix2D;

  //  element information
  //  -------------------

  float _dimension;
  float _deep;
  float _distance;

  int _zbuffer;
  int _overlay;
  int _subElement;
  int _Id;

  CATMathPoint _intersection;
  CATMathPointf _intersectionf; // for CAA compatibility
  CATMathDirectionf _tangent;
  CATMathDirectionf _normal;

  int _priority;

  CATBoolean _isVisibilityStatusValide;
  CATBoolean _isHidden;
  CATVizPickPathHiddenMode _hiddenMode;

  int _primitiveItemNum;
  unsigned int _primitiveItemConnectivityType;

  // OOC PointCloud attributes
  // -------------------------

  CATBoolean _OOCPCTransientData;
  float _OOCPCHLfrustum[6][4];

};

#endif
