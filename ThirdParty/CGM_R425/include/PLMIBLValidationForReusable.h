// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// PLMIBLValidationForReusable.h
// Define the PLMIBLValidationForReusable interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2008  Creation: Code generated by the CAA wizard  EAP
//  May 2009  Update: naming ValidationForReusable
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef PLMIBLValidationForReusable_H
#define PLMIBLValidationForReusable_H

// Export
#include "PLMBusinessLogicInterfaces.h"
// Inheritance
#include "CATBaseUnknown.h"

//class CATIInstance_var;
#include "CATIInstance.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern  ExportedByPLMBusinessLogicInterfaces IID IID_PLMIBLValidationForReusable; 
#else  
extern "C" const IID IID_PLMIBLValidationForReusable;  
#endif   

/**
* Interface to launch the integration of the business logic definition related to the Cloning operation.
*/
//------------------------------------------------------------------
class ExportedByPLMBusinessLogicInterfaces PLMIBLValidationForReusable: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** List of supported operation Id.*/
  enum OperationId {
    Default = 0,
    Cloning = 1,
    Delete  = 2
  };

  /** List of supported operation details.*/
  enum OperationDetail {
    NoOperationDetail = 0,
    WorkspaceCreation = 1, //nodoc LA 
    KeepIdentifiers = 2 //nodoc LA 
  };
  /**
  * Tells whether the PLM component is a Reusable object from the business logic point of view.
  *
  * @param iOperationId
  *   Operation Id to differentiate the contextual usage. Authorized values are:
  *   <ul>
  *       <li> PLMIBLValidationForReusable::Cloning (for any duplication operation: Duplicate, ...) </li>
  *       <li> PLMIBLValidationForReusable::Default (for any other request) </li>
  *   </ul>
  *
  * @param iPLMComponent
  *    The PLM component whose Reusable status is needed.
  *
  * @return
  *   <ul>
  *       <li> S_OK      if the business logic is successfully integrated and the operation is authorized</li>
  *       <li> S_FALSE   if their is no business logic to integrate </li>
  *       <li> E_FAIL    if the operation is not authorized or an error occurs. The following error classes and error identifiers can be associated with:
  *           <ul>
  *               <li>   @error PLMBLValidationForReusableError PLMBLValidationForReusableError::RunValidationForReusable::InternalError
  *                      The business logic access service failed
  *               </li>
  *               <li>   @error PLMBLValidationForReusableError PLMBLValidationForReusableError::RunValidationForReusable::ValidationError
  *                      The operation is not authorized
  *               </li>
  *               <li>   @error PLMBLValidationForReusableError PLMBLValidationForReusableError::RunValidationForReusable::ExecutionError
  *                      A business logic definition execution failed
  *               </li>
  *           </ul>
  *       </li>
  *   </ul>
  */
  virtual HRESULT RunValidationForReusable( PLMIBLValidationForReusable::OperationId iOperationId,
    CATIInstance_var & iPLMComponent,PLMIBLValidationForReusable::OperationDetail=PLMIBLValidationForReusable::NoOperationDetail, const CATIInstance_var &iRootContext=NULL_var) = 0;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};
//------------------------------------------------------------------

#endif
