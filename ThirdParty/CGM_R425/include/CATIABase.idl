#ifndef CATIABase_IDL
#define CATIABase_IDL
/*IDLNOGEN*/
/*IDLREP*/

/**
 * @CAA2Level L1
 * @CAA2Usage U6
 */

// COPYRIGHT DASSAULT SYSTEMES 1997
//--------------------------------------------------------------------------
// Base Object for CATIA Ane Automation
// jhn Oct.97
//--------------------------------------------------------------------------

#include "CATBaseDispatch.idl"
#include "CATBSTR.idl"
interface CATIAApplication;

    /**
     * Represents the base object for all other objects except
     * collection and reference objects.
     * As a base object, it provides properties shared by any other object.
     */
interface CATIABase : CATBaseDispatch
{
  // --- Application properties
  // Gets the Application object
    /**
     * Returns the application.
     * The application is the root object of the object structure and can be
     * retrieved from any object
     * in this object structure using the Application property.
     * The root object, also called top-level object, is the object located
     * at the top of the application's object structure.
     * It is used by clients to retrieve and navigate across all
     * the application's subordinate objects.
     * If the client runs in-process, it retrieves the object at the top of
     * the object structure. If the client runs out-process, it should call
     * the GetApplication method to retrieve the object at the top of the
     * object structure, which is the only object accessible from outside.
     * The Application property is thus the way to jump from any object
     * up to the
     * root of the object structure, allowing then to navigate downwards.
     * For in-process scripting, the application is always referred to as
     * <tt>CATIA</tt>.
     * Note that the Application property of the Application object returns the
     * Application object itself.
     * <! @sample >
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>CurrentApplication</tt> the application
     * object, root of the object structure, from a given object of this
     * structure: a document refered to using the <tt>MyDoc</tt> variable.
     * <pre>
     * Dim CurrentApplication As Application
     * Set CurrentApplication = MyDoc.<font color="red">Application</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY Application
  HRESULT get_Application(out /*IDLRETVAL*/ CATIAApplication oApplication);

  // Returns the Parent(the creator) of the object
    /**
     * Returns the parent object.
     * The parent object of a given object is the object just above
	 * in the object structure, usually the object that created this
     * object and that aggregates it.
     * In the case of an object part of a collection, the parent object
     * can be the collection object itself or the object that 
     * aggregates the collection object.
     * The Parent property is the way to step upwards in the object
     * structure. 
     * Note that the Parent property of the Application object returns the
     * Application object itself.
     * <! @sample >
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>ParentObject</tt> the parent object
     * of the <tt>GivenObject</tt> object.
     * <pre>
     * Dim ParentObject As AnyObject
     * Set ParentObject = GivenObject.<font color="red">Parent</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY Parent
  HRESULT get_Parent(out /*IDLRETVAL*/ CATBaseDispatch oParent);

  // Gets the name of the object
  // puts the name of the object. The default is an error
  // it is the name in the parent
    /**
     * Returns or sets the name of the object.
     * The name is a character string automatically assigned to any object to
     * handle it easier. Even if the Name property allows you to reassign an object name,
	 * this is not advised. Many objects, such as the application and the collections,
	 * have names that you must not change, and it's safer to use Name as a read only property.  
     * When an object is part of a collection, the object name can often
     * be used in place of the object rank to retrieve or remove the object,
     * providing the Item and Remove methods of the collection feature
     * an argument with the Variant type.
     * A name must start with a letter.
     * It can include numbers, but it can't include spaces.
     * If the object has no name set, the default name returned is the
     * object type. For example, the Name property of a Viewer3D object
     * with no name set returns Viewer3D.
     * <! @sample >
     * <dl>
     * <dt><b>Example:</b>
     * <dd>
     * This example retrieves in <tt>MyObjectName</tt> the name of the <tt>MyObject</tt> object.
     * <pre>
     * MyObjectName = MyObject.<font color="red">Name</font>
     * </pre>
     * </dl>
     */
#pragma PROPERTY Name
  HRESULT get_Name(inout /*IDLRETVAL*/ CATBSTR oNameBSTR);
  HRESULT put_Name(in CATBSTR iNameBSTR);

  // get an obj from an identifier in a container (father, grand father, ...)
  /**
   * Returns an object from its name.
   * <br><b>Role</b>: To retrieve an object when only its name is available.
   * @param IDName
   *   The searched obect name
   * @return
   *   The searched object
   */
  HRESULT GetItem(in CATBSTR IDName, out /*IDLRETVAL*/ CATBaseDispatch RealObj);
};

// Interface name : CATIApplication
#pragma ID CATIABase "DCE:7faff68c-2e6a-0000-0280020aef000000"
#pragma DUAL CATIABase

// VB object name : CATIABaseObject
#pragma ID AnyObject "DCE:82c97a2d-6c49-0000-0280030c31000000"
#pragma ALIAS CATIABase AnyObject

// Include of forward interfaces
//#include "CATIAApplication.idl"

#endif


