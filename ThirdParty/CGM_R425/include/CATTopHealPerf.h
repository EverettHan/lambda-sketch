/* -*-C++-*- */

#ifndef CATTopHealPerf_H
#define CATTopHealPerf_H

// COPYRIGHT DASSAULT SYSTEMES 2004

//=============================================================================
//=============================================================================
//
// CATTopHealPerf : Pour mesure des perfs
//
//=============================================================================

//=============================================================================
// Sep  2004  Creation                                   PRL
//=============================================================================
//=============================================================================

// Basiques
#include "CATBoolean.h"

// Timer
#include "CATLib.h"

// Export
#include "TopHeal.h"


class ExportedByTopHeal CATTopHealPerf //: public CATCGMVirtual
{

public: 
//===========================================================================================================

  //------------------------------------------------------------------------------
  // Ctor/Dtor
  //------------------------------------------------------------------------------   
  CATTopHealPerf ();

  //virtual ~CATTopHealPerf();

  //------------------------------------------------------------------------------
  // Pool allocation
  //------------------------------------------------------------------------------   
  // CATCGMNewClassArrayDeclare;        

  //------------------------------------------------------------------------------
  // Reinitialise le timer
  //------------------------------------------------------------------------------   
	void Reset();

  //------------------------------------------------------------------------------
  // Debut d'un decompte du temps [qui sera ajoute au tps precedent]
  //------------------------------------------------------------------------------   
	void Start();
  
  //------------------------------------------------------------------------------
  // Fin d'un decompte du temps
  //------------------------------------------------------------------------------   
  void Stop();

  //------------------------------------------------------------------------------
  // Recuperation des temps enregistres et du nombre de decomptes effectues
  //------------------------------------------------------------------------------   
  void GetResults(CATULONG32 &oTpsCpu, CATULONG32 &oTpsEla, int &oNb);

  //------------------------------------------------------------------------------
  // Ecritures
  //------------------------------------------------------------------------------   
  void WriteResults();
  int  WriteResults(CATULONG32 iTpsCpuTotal);

private: 
//===========================================================================================================
      
  // Timer
  CATTimerId    _Timer;

  // Exploitation timer  
  CATULONG32    _TpsCpu;   // en millisecondes
  CATULONG32    _TpsEla;   // en millisecondes
  int           _Nb;
	CATBoolean    _Running;  // TRUE entre Start et Stop

  
private:
//===========================================================================================================
  
  //------------------------------------------------------------------------------
  // Juste pour eviter que le compilo ne definisse par lui-meme ces operateurs
  //------------------------------------------------------------------------------    
  //CATTopHealPerf();
  CATTopHealPerf(CATTopHealPerf& iObj);
  CATTopHealPerf& operator=(const CATTopHealPerf & iObj);

};

#endif

// Ne rien ecrire sous cette ligne
//===========================================================================================================

