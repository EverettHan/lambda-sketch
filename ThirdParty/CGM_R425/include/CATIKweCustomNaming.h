// COPYRIGHT Dassault Systemes 2001
//===================================================================
//
// CATIKweCustomNaming.h
// Define the CATIKweCustomNaming interface
//
//===================================================================
//
//===================================================================
//
//  Mar 2001  Creation: Code generated by the CAA wizard 
//===================================================================
#ifndef CATIKweCustomNaming_H
#define CATIKweCustomNaming_H

/** 
* @CAA2Level L1
* @CAA2Usage U4 CATKweExposeObjectAdapter
*/

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern IID ExportedByKnowledgeItf IID_CATIKweCustomNaming;
#else
extern "C" const IID IID_CATIKweCustomNaming;
#endif


#include "CATBoolean.h"
#include "CATUnicodeString.h"

//------------------------------------------------------------------

/**
* Interface dedicated to custom parameters naming.
* This interface allows implementers to bypass standard parameters naming : usually, parameters names (if they are not renamed)
* are built with the concatenation of fathers separated  by \, and the name of each object is retrieved thanks to CATIAlias interface.
* If one of the fathers implement CATIKweCustomNaming, its custom name is used if UseCustomName returns CATTrue, and its custom father is used if
* UseCustomFather returns CATTrue.
* <p><b>BOA information</b>: this interface can be implemented
* using the BOA (Basic Object Adapter).
* To know more about the BOA, refer to the "Object Modeler" chapter in the CAA Encyclopedia.</p>
*/
class ExportedByKnowledgeItf CATIKweCustomNaming: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:

/**
* Return CATTrue in your implementation if you want this object to be ignored in the parameter naming mechanism
*/
	virtual CATBoolean IgnoreInNaming() = 0;

/**
* Return CATTrue in your implementation if you want a custom father in parameter naming mechanism
*/
	virtual CATBoolean UseCustomFather() = 0;
	
/**
* Return CATTrue in your implementation if you want a custom name in parameter naming mechanism
*/
	virtual CATBoolean UseCustomName() = 0;
	
/**
* Custom name to use if UseCustomName returns True. Must be different from empty string.
*/
	virtual CATUnicodeString GetCustomName() = 0;

/**
* Custom father to use if UseCustomFather returns True. Must be different from NULL_var. The returned object has to implement CATISpecObject
*/
	virtual CATBaseUnknown_var GetCustomFather() = 0;
	
	
	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

CATDeclareHandler(CATIKweCustomNaming, CATBaseUnknown);
//------------------------------------------------------------------

#endif
