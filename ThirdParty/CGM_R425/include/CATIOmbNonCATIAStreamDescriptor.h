// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIOmbNonCATIAStreamDescriptor.h
// Define the CATIOmbNonCATIAStreamDescriptor interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  cfo
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef CATIOmbNonCATIAStreamDescriptor_H
#define CATIOmbNonCATIAStreamDescriptor_H

#include "CATOmbNonCATIADocument.h"
#include "CATBaseUnknown.h"
class CATUnicodeString;
class CATIOmbNonCATIASDPersistencyMngt;
class CATIOmbNonCATIADocumentApplicativeBehavior;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbNonCATIADocument IID IID_CATIOmbNonCATIAStreamDescriptor;
#else
extern "C" const IID IID_CATIOmbNonCATIAStreamDescriptor;
#endif

//------------------------------------------------------------------
/**
* This interface is used to add specific behaviors of Non CATIA SD
*/
class ExportedByCATOmbNonCATIADocument CATIOmbNonCATIAStreamDescriptor : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** @deprecated
  * Use ProjectFile instead
  **/
  virtual HRESULT MakeProjectionAsFileForExternalUse(CATUnicodeString& oFilePath, CATIOmbNonCATIASDPersistencyMngt* iNonCATIASDPersistencyMngt = NULL) = 0;

  /** @deprecated
  * Use ProjectFile instead
  **/
  virtual HRESULT MakeProjectionAsFileForExternalUse(CATUnicodeString& oFilePath, const CATUnicodeString& iProposedFileName, CATIOmbNonCATIASDPersistencyMngt* iNonCATIASDPersistencyMngt = NULL) = 0;

  /**
  * Gets the SD projection status
  *        returns the complete projected file path, if current projection
  *
  * @param oFilePath (out)
  *        the absolute file path resulting of the projection
  *        the validity of the path is not checked if the projection has been set using SetProjectionPath
  *
  * @return
  *        S_OK   : a projection exists
  *        S_FALSE: the document has not been projected
  *        E_FAIL : a problem occured
  **/
  virtual HRESULT HasBeenProjected(CATUnicodeString& oFilePath) = 0;

  /**
  * Removes the current projection
  *
  * @param iProjectedFilePath [in]
  *        the absolute file path of the current projection
    * Projection removal policy:
  * - No current system or user projection: nothing done, returns E_INVALIDARG.
  * - A system projection already exists, performed by a previous call to MakeProjection/ExportFile:
  *        If projection file is found in the system projection cache, it is deleted, it returns S_OK.
  *        If projection file is not found, meaning  iProjectedFilePath is different from current projection file name, nothing done, it returns S_FALSE.
  * - A user projection already exists, performed by a previous call to SetWorkingFileAsProjection:
  *      Depending on applicative implementation for OnRemoveWorkingFile method of CATIOmbNonCATIADocumentApplicativeBehavior, stored by current document extension object:
  *      If projection file is found in the system projection cache and :
  *           OnRemoveWorkingFile returns FALSE: Nothing done. it returns S_FALSE.
  *           OnRemoveWorkingFile returns TRUE: projection file is deleted, it returns S_OK.
  *      If projection file is not found, meaning iProjectedFilePath is different from current projection file name, nothing done, it returns S_FALSE.
  *
  * @return
  *        S_OK   : projection succesfully removed. SD can be projected again
  *        S_FALSE: input file path doesn't match the current projected file path or removal forbidden by user
  *        E_FAIL : input file path doesn't exist or an internal problem occurred
  **/
  virtual HRESULT RemoveProjectedFile(const CATUnicodeString& iProjectedFilePath) = 0;

  /** @deprecated
  * Use ExportFile instead
  **/
  virtual HRESULT ExportFileOutOfSessionAsProjectionOnStreamDescriptor(const CATUnicodeString& iFilePath, const CATBoolean iForceOverwrite = FALSE) = 0;

  /** @deprecated
   * Use ImportFile instead
   **/
  virtual HRESULT ImportFileAsProjectionOnStreamDescriptor(const CATUnicodeString& iFilePath, CATIOmbNonCATIASDPersistencyMngt* iNonCATIASDPersistencyMngt = NULL) = 0;

  /**
  * Force dirty check on the SD projection.
  * @param iForceDirty
  *     If set to true the stream descriptor will be set as dirty (and saved at next save operation) even if the stream has not been modified.
  * @return
  *        S_OK      : if projection is dirty
  *        S_FALSE   : projection is not dirty
  *        E_FAIL    : internal error on dirty status evaluation
  **/
  virtual HRESULT ForceDirtyCheck(CATBoolean iForceDirty = FALSE) = 0;

  /** @deprecated
   * Use SetWorkingFileAsProjection instead
   **/
  virtual HRESULT SetProjectionPath(const CATUnicodeString& iFilePath, CATIOmbNonCATIASDPersistencyMngt* iNonCATIASDPersistencyMngt = NULL) = 0;

  // ===============> New set of APIS replacing old Projection/Export/Import/SetProjectionPath <===============
  // 
  // Applicative behaviors previously held by interface CATIOmbNonCATIASDPersistencyMngt are transfered to and enhanced by new CATIOmbNonCATIADocumentApplicativeBehavior interface
  // Please replace old APIs by the new set described here:

   /**
  * Projects the stream handled by this Stream Descriptor into a system file path
  * Projected file life cycle is managed either by the system (internal projection) or by the user (user projection)
  * Projection policy:
  * - No previous system/user projection:
  *      a system projection is performed to a local disk file path, into a system named file.
  *      Returns S_OK and the projection path newly set.
  * - A system projection already exists (previously set by ProjectFile or ImportFile):
  *      Nothing done. It returns S_FALSE and the current system projection path.
  * - A user projection already exists (previously set by SetWorkingFileAsProjection):
  *      Depending on applicative implementations for OnReplace/RemoveWorkingFile methods of CATIOmbNonCATIADocumentApplicativeBehavior, used as input:
  *        OnReplaceWorkingFile returns FALSE: Nothing done. Returns S_FALSE and the current system projection path.
  *        OnReplaceWorkingFile returns TRUE: a system projection is performed to a local disk file path, into a system named file,
  *                                           and if OnRemoveWorkingFile returns TRUE, previous user projection file is deleted from disk.
  *                                           Returns S_OK and the projection path newly set.
  * @param iNonCATIADocBehavior [in]
  *        pointer on CATIOmbNonCATIADocumentApplicativeBehavior behaviors
  * @param oFilePath [out]
  *        The absolute file path locating the projection
  * @return
  *        S_OK   : projection done
  *        S_FALSE: the Non CATIA document is already being projected or no replace requested
  *        FAILED : projection failed
  **/
  virtual HRESULT ProjectFile(CATIOmbNonCATIADocumentApplicativeBehavior* iNonCATIADocBehavior, CATUnicodeString& oFilePath) = 0;

  /**
   * Projects the stream handled by this Stream Descriptor into a system file path
   * Projected file life cycle is managed either by the system (internal projection) or by the user (user projection)
   * Projection policy:
   * - No previous system/user projection:
   *      a system projection is performed to a local disk file path, into the input iProposedFileName.
   *      Returns S_OK and the projection path newly set.
   * - A system projection already exists(previously set by ProjectFile or ImportFile):
   *      Nothing done. It returns S_FALSE if ProposedFileName is the current system projection Name, E_FAIL otherwise.
   *                    It returns the current system projection path.
   * - A user projection already exists (previously set by SetWorkingFileAsProjection):
   *      Depending on applicative implementations for OnReplace/RemoveWorkingFile methods of CATIOmbNonCATIADocumentApplicativeBehavior, used as input:
   *        OnReplaceWorkingFile returns FALSE: Nothing done. It returns S_FALSE if ProposedFileName is the current system projection Name, E_FAIL otherwise.
   *                                                          It returns the current user projection path.
   *        OnReplaceWorkingFile returns TRUE: a system projection is performed to a local disk file path, into the input iProposedFileName.
   *                                           and if OnRemoveWorkingFile returns TRUE, previous user projection file is deleted from disk.
   *                                           Returns S_OK and the projection path newly set.
   * @param iProposedFileName [in]
   *        the user input file name of the projection
   *        ex: toto.xls and not E:\docs\toto.xls
   * @param iNonCATIADocBehavior [in]
   *        pointer on CATIOmbNonCATIADocumentApplicativeBehavior behaviors
   * @param oFilePath [out]
   *        The absolute file path locating the projection
   * @return
   *        S_OK   : projection done
   *        S_FALSE: the Non CATIA document is already being projected or no replace requested
   *        FAILED : projection failed:
   *                 - the Non CATIA document is already being projected, but with a different file name
   *                 - invalid proposed file name: bad system file naming conventions or input file extension doesn't match the SD persistency type
   *                                               error ERR_OMB_0702 is raised into CATIOmyIncidentcollector
   *                 - projection fails at file copy. Error ERR_OMB_0703 is raised into CATIOmyIncidentcollector
   *                                                  Error ERR_OMB_0070 is raised into CATIOmyIncidentcollector + STG_E_MEDIUMFULL output (if disk full)
   *                 - internal error
   *
   * Excepted in multicad case, is is preferable to use the previous MakeProjection method, as it ensures the unicity of the file name,
   * otherwise user has to ensure it on its own.
   **/
  virtual HRESULT ProjectFile(const CATUnicodeString& iProposedFileName, CATIOmbNonCATIADocumentApplicativeBehavior* iNonCATIADocBehavior, CATUnicodeString& oFilePath) = 0;

  /**
  * Exports the source stream handled by this Stream Descriptor to a user file path (CheckOut)
  * Exported file life cycle is not managed by the system, but by the caller
  * Export policy:
  * - No current system/user projection: Stream is copied from session cache to iFilePath
  * - A current system/user projection: Stream is copied from projection path to iFilePath
  *
  * @param iFilePath [in]
  *        the absolute file path of the projection
  * @param iForceOverwrite [in]
  *        TRUE: allows to overwrite an existing iFilePath content.
  *         FALSE: returns S_FALSE if already existing iFilePath.
  * @return
  *        S_OK   : Export successfull
  *        S_FALSE: No overwrite requested on existing iFilePath
  *        FAILED : Export failed:
  *                  - input file extension doesn't match the SD persistency type
  *                  - input file is the current system projection path. Error ERR_OMB_0700 is raised into CATIOmyIncidentcollector
  *                  - source file overwriting forbidden (overwrite mode). Error ERR_OMB_0701 is raised into CATIOmyIncidentcollector
  *                  - export fails at file copy. Error ERR_OMB_0703 is raised into CATIOmyIncidentcollector
  *                                               Error ERR_OMB_0070 is raised into CATIOmyIncidentcollector + STG_E_MEDIUMFULL output (if disk full)
  *                  - an internal error occured
  **/
  virtual HRESULT ExportFile(const CATUnicodeString& iFilePath, const CATBoolean iForceOverwrite) = 0;

  /**
  * Imports the input file content on the current projection path (system CheckIn)
  * The system copies the input file content into the (new) current system projection file.
  * Projection policy:
  * - No previous system/user projection:
  *     a system projection is performed to a local disk file path, into a system named file, that becomes the import target.
  * - A system projection already exists (previously set by ProjectFile or ImportFile): it is the current import target.
  * - A user projection already exists (previously set by SetWorkingFileAsProjection):
  *      Depending on applicative implementations for OnReplace/RemoveWorkingFile methods of CATIOmbNonCATIADocumentApplicativeBehavior, used as input:
  *        OnReplaceWorkingFile returns FALSE: Nothing done. Returns S_FALSE.
  *        OnReplaceWorkingFile returns TRUE: a system projection is performed to a local disk file path, into a system named file, that becomes the import target,
  *                                           and if OnRemoveWorkingFile returns TRUE, previous user projection file is deleted from disk.
  * @param iFilePath [in]
  *        the absolute file path of the projection (user or system)
  *        this path must exist
  *        the extension of the file name must match the SD persistency type
  * @param iNonCATIADocBehavior [in]
  *        pointer on CATIOmbNonCATIADocumentApplicativeBehavior behaviors
  * @return
  *        S_OK   : Import successfull
  *        S_FALSE: iFilePath is an exixting file and No overwrite requested
  *        FAILED : Import failed
  *                  - input file path doesn't exist
  *                  - input file extension doesn't match the SD persistency type
  *                  - an internal problem occurred
  *
  * Note: After CheckIn, the SD becomes dirty and is to be saved
  **/
  virtual HRESULT ImportFile(const CATUnicodeString& iFilePath, CATIOmbNonCATIADocumentApplicativeBehavior* iNonCATIADocBehavior) = 0;

  /**
  * Sets the input file path as the current user projection (user CheckIn)
   * Projection policy:
  * - No previous system/user projection: input file path becomes the current user projection
  * - A system/user projection already exists (previously set by ProjectFile or ImportFile):
  *      Depending on applicative implementations for OnReplace/RemoveWorkingFile methods of CATIOmbNonCATIADocumentApplicativeBehavior, used as input:
  *        OnReplaceWorkingFile returns FALSE: Nothing done. Returns S_FALSE.
  *        OnReplaceWorkingFile returns TRUE: the eventual system projection is removed from local disk file path
  *                                           the eventual user projection is replaced by input file path, that becomes the current user projection
  *                                           and if OnRemoveWorkingFile returns TRUE, eventual previous user projection file is deleted from disk.
  *
  * - When operation returns OK, SD is projected by user:
  *    . The new current user projected file will be uploaded to the session cache and FCS at next Save, as any system projection
  *    . HasBeenProjected still answers S_OK and returns the user path
  *    . Life cycle of the projected user file is no more managed by the SD: it is to be deleted explicitely by user if necessary, either using OnRemoveWorkingFile here or later, out of APIs described here.
  *
  * @param iFilePath (in)
  *        the complete user file path of the projection file to be considered at next save
  * @param iNonCATIADocBehavior [in]
  *        pointer on CATIOmbNonCATIADocumentApplicativeBehavior behaviors
  * @return
  *        S_OK   : checkin successfull
  *        FAILED : checkin failed:
  *                  - input file path doesn't exist
  *                  - input file extension doesn't match the SD persistency type
  *                  - input file is the current system projection path. Error ERR_OMB_0700 is raised into CATIOmyIncidentcollector
  *                  - SD is a result from authoring one (AuthoringVisu, ...)
  *                  - an internal problem occurred
  *
  * Note: After CheckIn, the SD becomes dirty and is to be saved
  **/
  virtual HRESULT SetWorkingFileAsProjection(const CATUnicodeString& iFilePath, CATIOmbNonCATIADocumentApplicativeBehavior* iNonCATIADocBehavior) = 0;

  /**
  * Gets the OLE edition capability for this Non CATIA document
  *        This status is read on current windows install from the Non CATIA document extension stored by document Stream Descriptor
  * @return
  *        TRUE  : current document (extension) is seen as editable by WINDOWS through OLE protocol
  *        FALSE : current document (extension) is not editable by WINDOWS (but may be read/opened ..etc.. by other software)
  *                OR document standalone (not attached to a Stream Descriptor)
  **/
  virtual CATBoolean IsOleEditionAvailable() = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler(CATIOmbNonCATIAStreamDescriptor, CATBaseUnknown);

#endif
