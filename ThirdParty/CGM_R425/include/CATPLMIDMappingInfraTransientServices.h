/* -*-c++-*- */
#ifndef _CATPLMIDMappingInfraTransientServices_H
#define _CATPLMIDMappingInfraTransientServices_H
/* -*-c++-*- */
/**
 * @level Private
 * @usage U1
 */

#define AuthorizedModule 999
#define CATPLMIdentifier                  AuthorizedModule
#define TransitionEngine                  AuthorizedModule
#define CATOmbMigrationAccess             AuthorizedModule
#define CATDCInfraMappingTbl              AuthorizedModule
#define CATOxiPLMIDBuildersAndMarshallers AuthorizedModule
#define PLMBatchVPLMServices              AuthorizedModule
#define CATSRMODTValidationToolBaseImpl   AuthorizedModule
#define AdpTests                          AuthorizedModule
#define CATFavoritesStreamServices        AuthorizedModule
#define PLMCOEXMapping                    AuthorizedModule
#define TSTPlmidTool                      AuthorizedModule
#if _MK_MODNAME_ == AuthorizedModule
#else
#error Forbidden Access To PLMID Infra mapping builders from a non-authorized module 
@error
#endif

#undef CATPLMIdentifier
#undef TransitionEngine
#undef CATOmbMigrationAccess
#undef CATDCInfraMappingTbl
#undef CATOxiPLMIDBuildersAndMarshallers
#undef PLMBatchVPLMServices
#undef CATSRMODTValidationToolBaseImpl
#undef AdpTests
#undef CATFavoritesStreamServices
#undef PLMCOEXMapping
#undef TSTPlmidTool

#include "IUnknown.h"
#include "CATPLMIdentificationAccess.h"
#include "CATPLMIDElementaryInfos.h"
#include "CATOmxArray.h"

class CATPLMID;
class CATPLMID_Any;
class CATPLMID_RepositoryLocation;
class CATPLMRepositoryName;
class CATPLMTypeId;
class CATPLMID;
class CATBinary;
class CATString;

/**
* Transient restricted services for mapping infrastructure
*/
class ExportedByCATPLMIdentificationAccess CATPLMIDMappingInfraTransientServices
{
public:
  /**
   * obsolete, meaningless and dangerous, stay away
   * Generate a corrupted PLMID zero filled logicalid and majorid
   *   if you meant to use a physicalid, use a physicalid
   *   if you meant to use a pair (type, physicalid), use a pair (type, physicalid)
   *   if you meant to use a PLMID, build a non corrupted PLMID using anything but this method
   */
  static HRESULT GenerateShortPLMID(
    const CATPLMRepositoryName& iRepositoryName,
    const CATPLMTypeId& iTypeId,
    const CATPLMID_Any& iPhysicalIdentifier,
    CATPLMID& oPLMID);

  /**
  * Stream the contents of a short PLMID.
  * The generated binary stream format is invariant and can be compared with previous ones.
  *
  * @param iPLMID
  *        The PLMID to be streamed
  * @param oBytes
  *        The binary result
  * @return
  *        S_OK   : if succeeded
  *        E_FAIL : otherwise
  *
  * (p.s. : Checking HRESULT is not an option)
  */
  static HRESULT StreamShortPLMID(const CATPLMID & iPLMID, CATBinary & oBytes);

  /**
  * Unstream the contents of short PLMID (Stable version)
  *
  * @param iBytes
  *        The binary
  * @param oPLMID
  *        The PLMID
  * @param oMessageVersion
  *        The version
  * @return
  *        S_OK   : if succeeded
  *        E_FAIL : otherwise
  *
  * (p.s. : Checking HRESULT is not an option)
  */
  static HRESULT UnstreamShortPLMID(const CATBinary & iBytes, CATPLMID & oPLMID, BYTE * oMessageVersion = NULL);

  /**
   * Extract PLMID information from a stream generated by
   *   CATPLMID_STREAM_STRING::Stream for CATString versions
   * or
   *   CATPLMID_STREAM_BINARY::Stream for CATBinary versions
   * Useful if you have blobbed a PLMID inside database (which is illegal) and after database migration/upgrade some of the types are incorrect
   *
   * warning: The versions which do not output a CATOmxArray only support single PLMID's (no path)
   */
  static HRESULT UnstreamElementaryIdentificationInformation(const CATBinary & iBytes, CATOmxArray<CATPLMIDElementaryInfos>& oElementaryInfos);
  static HRESULT UnstreamElementaryIdentificationInformation(const CATBinary & iBytes, CATPLMIDElementaryInfos & oElementaryInfos);
  static HRESULT UnstreamElementaryIdentificationInformation(const CATString & iString, CATOmxArray<CATPLMIDElementaryInfos>& oElementaryInfos);
  static HRESULT UnstreamElementaryIdentificationInformation(const CATString & iString, CATPLMIDElementaryInfos & oElementaryInfos);
};

#endif
