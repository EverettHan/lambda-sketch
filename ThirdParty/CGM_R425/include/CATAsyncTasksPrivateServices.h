//===================================================================
// COPYRIGHT Dassault Systemes 2014/05/13
//===================================================================
// CATAsyncTasksPrivateServices.cpp
// Header definition of class CATAsyncTasksPrivateServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2014/05/13 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncTasksPrivateServices_H
#define CATAsyncTasksPrivateServices_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncTasksServices_NG.h"
#include "CATAsyncTaskID_NG.h"

//-----------------------------------------------------------------------
// Modules Restriction
//-----------------------------------------------------------------------
#define AuthorizedModule     999
// Check No Hack
#if _MK_MODNAME_ == AuthorizedModule
  #error Forbidden Access To CATAsyncTasksPrivateServices from a non-authorized module
  // Fatal error on solaris
  @error 
#endif
// List of authorized infrastructure modules
// CATPLMServices
#define CATPLMAsync                     AuthorizedModule
// CATPLMImplAdapterAsync
#define CATPLMImplAdapterAsync          AuthorizedModule
// ObjectModelerSystem
#define CATAsyncTasksPlatform_NG           AuthorizedModule
// CATPLMImplAdpaterQL
#define CATPLMxReadWriteXMQL                AuthorizedModule
// ObjectModelerSysteM.tst
#define AsyncPlatform_KOALA             AuthorizedModule
// CATPLMImplAdapter
#define CATPLMToolkit             AuthorizedModule

#if _MK_MODNAME_ == AuthorizedModule
#else
  #error Forbidden Access To CATAsyncTasksPrivateServices from a non-authorized module
  // Fatal error on solaris
  @error
#endif
#undef CATPLMAsync
#undef CATPLMImplAdapterAsync
#undef CATAsyncTasksPlatform_NG
#undef CATPLMxReadWriteXMQL
#undef AsyncPlatform_KOALA
#undef CATPLMToolkit

//-----------------------------------------------------------------------

class ExportedByCATAsyncTasksPlatform CATAsyncTasksPrivateServices : public CATAsyncTasksServices
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATAsyncTasksPrivateServices();
  virtual ~CATAsyncTasksPrivateServices();

  /**
  * Cancels the asynchronous task.
  * The task may be logical or physical, however a physical task cannot be canceled if it is attached to a logical task unless ibForce is TRUE
  * A not stared task cannot be canceled.
  * An ended task cannot be canceled.
  * If the task is a logical task, all the physical tasks attached are canceled (only if they are not finished).
  * The CallBack of all async tasks implied by the cancel order are called.
  * All async tasks implied by the cancel have their status turning to Fail. (<code>IsAsyncTaskSucceeded</code> method return <code>E_FAIL</code>)
  *
  * @param
  * <br/> [in] iTaskId: the async task to cancel
  * @return
  * <code>S_OK</code>: the async is correctly canceled (and all the potential physical tasks attached too)
  * <code>E*</code>: unexpected error:the async task is not canceled because:
  *                   - a condition is not repected
  *                   - the async task platform is not working
  */
  HRESULT CancelAsyncTask(const CATAsyncTaskID & iTaskId, CATBoolean ibForce);

  /**
  * Lock or Unlock the async task
  * The lock means the task can never be started until the lock is released
  *
  * @param
  * <br/> [in] iTaskId: The Async Tasks to set lock
  * <br/> [in] ibLock: if TRUE, locks the task, if FALSE, unlock the task
  * @return
  * <code>S_OK</code>: The lock is correctly set
  * <code>E_FAIL</code>: The task does not exist or it is started
  */
  HRESULT SetAsyncTaskLock(const CATAsyncTaskID & iTaskId, CATBoolean ibLock);

private:
  
  CATAsyncTasksPrivateServices (const CATAsyncTasksPrivateServices &) = delete;
  CATAsyncTasksPrivateServices& operator=(const CATAsyncTasksPrivateServices&)= delete;
};

//-----------------------------------------------------------------------

#endif
