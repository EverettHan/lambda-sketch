// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// VPMIDicParameter.h
// Define the VPMIDicParameter interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2009  Creation: Code generated by the CAA wizard  IWI
//===================================================================
/**
 * @level Private
 * @usage U3
 */
#ifndef VPMIDicParameterB_H
#define VPMIDicParameterB_H

#include "VPMIDicInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByVPMIDicInterfaces IID IID_VPMIDicParameterB;
#else
extern "C" const IID IID_VPMIDicParameterB ;
#endif

//------------------------------------------------------------------

/**
* Interface representing xxx.
*
* <br><b>Role</b>: Components that implement
* VPMIDicParameter are ...
* <p>
* Do not use the VPMIDicParameter interface for such and such

*
* @example
*  // example is optional
*  VPMIDicParameter* currentDisplay = NULL;
*  rc = window-&gt;QueryInterface(IID_VPMIDicParameter,
*                                     (void**) &amp;currentDisplay);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByVPMIDicInterfaces VPMIDicParameterB: public CATBaseUnknown
{
  CATDeclareInterface;

  public:
    /**
    * Return true when the Parameter is a Multivaluated parameter (oIsMultivaluated). Return false otherwise
    * @param oIsMultivaluated
    */
    virtual HRESULT isMultivaluated(CATBoolean & oIsMultivaluated ) = 0;

     /**
    * Return true when the Parameter is an input Parameter. Return false otherwise
    * @param oIsInput
    */
    virtual HRESULT isInput(CATBoolean & oIsInput ) = 0;

     /**
    * Return true when the Parameter is an input Parameter. Return false otherwise
    * @param oIsInput
    */
    virtual HRESULT isOutput(CATBoolean & oIsOutput ) = 0;

     /**
    * Return the lower bound of the parameter when the parameter is Multivaluated. Return 1 when the parameter is not multivaluated
    * @param oLowerBound
    */
    virtual HRESULT getLowerBound(int & oLowerBound ) = 0;

     /**
    * Return the upper bound of the parameter when the parameter is Multivaluated. Return 1 when the parameter is not multivaluated
    * @param oUpperBound
    */
    virtual HRESULT getUpperBound(int & oUpperBound ) = 0;

    /**
    * Return the DataType of the parameter
    * @param oDataType
    */
    virtual HRESULT getDataType (CATString & oDataType ) = 0;

     /**
    * Return for Name of this Parameter
    * @param oName
    */
    virtual HRESULT getName(CATString & oName ) = 0;
};

//------------------------------------------------------------------

#endif
