//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/09/13
//===================================================================
// CATAdpProtectedQueryFilterFactory.cpp
// Header definition of class CATAdpProtectedQueryFilterFactory
//===================================================================
//
// Usage notes: This class is used to create the query filter.
// There are preset parameters which can be set.
// Usage is for query class @href CATAdpExtendedQueryService
//
//===================================================================
//  2010/12/10 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1  
*/

#ifndef CATAdpProtectedQueryFilterFactory_H
#define CATAdpProtectedQueryFilterFactory_H

#include "CATPLMIntegrationAccess.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListOfCATString.h"
#include "CATAdpQueryFilter.h"
#include "CATIAdpType.h" 



//-----------------------------------------------------------------------

/*
* Class to get query filter for @CATAdpExtendedQueryServices
* <br><b>Role</b>: Provides a @href CATAdpQueryFilter which can be used with the @href CATAdpExtendedQueryServices
* <ul>
* <li> To process a query, you need this. see @href CATAdpExtendedQueryServices for more options</li>  
* </ul>
*/
class ExportedByCATPLMIntegrationAccess CATAdpProtectedQueryFilterFactory
{
public:
  /**
  * @deprecated V6R2013
  * @nodoc
  */
  static const CATAdpQueryFilter GetFilterFromStringValue(CATIAdpType * piType, const  CATString &  iAttr,  const CATUnicodeString & iValue, const  CATBoolean  &iModeSensitive=FALSE, const  CATBoolean  &iReturnWithQueryMask=FALSE);
  /*
  * Get query filter built with a single constraint on a string value
  * <br><b>Role:</b>Will give a query filter of a @href CATAdpQueryFilter prebuilt. 
  * <li>The query filter is built with a single constraint on a attribute whose type is string</li>
  * <li>The operator is LIKE</li>
  * <li>CATAssert if input values are invalid</li>
  * @param piType 
  * The PLM type
  * @param iAttr
  * The attribute name
  * @param iValue
  * The attribute value on which a constraint with operator LIKE is built
  * @param iModeSensitive
  * To activate  mode  sensitive  case  for  query or not. The default value is FALSE.  
  * @param iReturnWithQueryMask
  * To activate the  attribute  completion  of  query  result  with  the  query  mask or not. The default value is FALSE.  
  * @return the object  CATAdpQueryFilter
  */
  static const CATAdpQueryFilter GetFilterFromStringValue(const CATPLMTypeH &iType, const  CATString &  iAttr,  const CATUnicodeString & iValue, const  CATBoolean  &iModeSensitive=FALSE, const  CATBoolean  &iReturnWithQueryMask=FALSE);

  /**
  * @deprecated V6R2013
  * @nodoc
  */

  static const CATAdpQueryFilter GetFilterFromStringValues(CATIAdpType * piType, const CATListOfCATString &iAttrs, const CATListOfCATUnicodeString &iValues, const  CATBoolean  &iModeSensitive=FALSE, const  CATBoolean  &iReturnWithQueryMask=FALSE);

  /*
  * Get query filter built with constraints on string values
  * <br><b>Role:</b>Will give a query filter of a @href CATAdpQueryFilter prebuilt. 
  * <li>The query filter is built with constraints on a list of attributes whose each type is string<li>
  * <li>The operator is LIKE on each attribute value<li>
  * <li>CATAssert if input values are invalid<li>
  * @param piType 
  * The PLM type
  * @param iAttrs
  * The list of attribute names. Each attribute type is string.
  * @param iValues
  * The list of string values on which a constraint with operator LIKE is built. Both lists must have the same size.
  * @param iModeSensitive
  * To activate  mode  sensitive  case  for  query or not. The default value is FALSE.  
  * @param iReturnWithQueryMask
  * To activate the  attribute  completion  of  query  result  with  the  query  mask or not. The default value is FALSE.  
  * @return the object  CATAdpQueryFilter
  */

  static const CATAdpQueryFilter GetFilterFromStringValues(const CATPLMTypeH &iType, const CATListOfCATString &iAttrs, const CATListOfCATUnicodeString &iValues, const  CATBoolean  &iModeSensitive=FALSE, const  CATBoolean  &iReturnWithQueryMask=FALSE);
  /*
  * Get query filter built with a single constraint on a string value with case sensitive mode for query 
  * <br><b>Role:</b>Will give a query filter of a @href CATAdpQueryFilter prebuilt. 
  * <li>The query filter is built with a single constraint on a attribute whose type is string</li>
  * <li>The operator is LIKE</li>
  * <li>CATAssert if input values are invalid</li>
  * @param piType 
  * The PLM type
  * @param iAttr
  * The attribute name
  * @param iValue
  * The attribute value on which a constraint with operator LIKE is built
  * @param iReturnWithQueryMask
  * To activate the  attribute  completion  of  query  result  with  the  query  mask or not. The default value is FALSE.  
  * @return the object  CATAdpQueryFilter
  */
  static const CATAdpQueryFilter GetFilterFromStringValueWithCSMode(const CATPLMTypeH &iType, const  CATString &  iAttr,  const CATUnicodeString & iValue, const  CATBoolean  &iReturnWithQueryMask=FALSE);
  /*
  * Get query filter built with constraints on string values with case sensitive mode for query
  * <br><b>Role:</b>Will give a query filter of a @href CATAdpQueryFilter prebuilt. 
  * <li>The query filter is built with constraints on a list of attributes whose each type is string<li>
  * <li>The operator is LIKE on each attribute value<li>
  * <li>CATAssert if input values are invalid<li>
  * @param piType 
  * The PLM type
  * @param iAttrs
  * The list of attribute names. Each attribute type is string.
  * @param iValues
  * The list of string values on which a constraint with operator LIKE is built. Both lists must have the same size.
  * @param iModeSensitive
  * To activate the  attribute  completion  of  query  result  with  the  query  mask or not. The default value is FALSE.  
  * @return the object  CATAdpQueryFilter
  */

  static const CATAdpQueryFilter GetFilterFromStringValuesWithCSMode(const CATPLMTypeH &iType, const CATListOfCATString &iAttrs, const CATListOfCATUnicodeString &iValues, const  CATBoolean  &iReturnWithQueryMask=FALSE);

};

//-----------------------------------------------------------------------

#endif
