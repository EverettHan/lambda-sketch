//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/11/07
//===================================================================
// CATVidCtlTreeView.h
// Header definition of class CATVidCtlTreeView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/11/07 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATVidCtlTreeView_H
#define CATVidCtlTreeView_H

#include <VisuDialog.h>
#include <CATVidCtlAbstractItemsView.h>

/** @ingroup groupVidModelViewView
 * Control able to display list of data items stored inside a CID model
 * (for example the CATVidMdlStandardTree object).
 *
 * For the moment, it's only a basic treeview control without multi-column
 * support, that is to say, a control able to display items only in one column.
 *
 * @par Example
 * This basic sample shows you how to construct a model using introspectable
 * elements, set a data template to the tree to explain how your data items
 * must be drawn and, then, associate the model to the tree view (The elements
 * added to the tree model are data blocks, i.e. introspectable objects built
 * at run-time without needing .sypintro files.):
 *
 * @par
 * @code
 * // Create the tree view
 * CATVidCtlTreeView * pTreeView = CATVidCtlTreeView();
 *
 * // Create the model
 * CATVidMdlStandardTree * pTreeModel = new CATVidMdlStandardTree();
 *
 * if (pTreeView && pTreeModel)
 * {
 *    // Create a datablock to fill the model
 *    CATSYPDataBlockFactory dataBlockFactory;
 *    dataBlockFactory.AddProperty("TextPpty", "CATUnicodeString", CATSYPDataBlockFactory::ReadWrite, "", CATBoxingOfCATUnicodeString::Box("My default value"));
 *    dataBlockFactory.AddProperty("Icon", "CATPixelImage", CATSYPDataBlockFactory::ReadWrite, "", pClosedFolderIcon, 0);
 *
 *    CATSYPDataBlock * pRootData = dataBlockFactory.CreateDataBlock();
 *    CHECK_POINTER_RETV(pRootData, NULL);
 *    pRootData->SetProperty("TextPpty", CATBoxingOfCATUnicodeString::Box("Root"));
 *    pRootData->SetProperty("Icon", pClosedFolderIcon);
 *
 *    // Initialize root element
 *    CATVidMdlTreeItem * pItem = new CATVidMdlTreeItem(pRootData, NULL);
 *    pTree->SetRootElement(pItem);
 *
 *    CATUnicodeString value("Directory ");
 *    int nbFirstLevelChildren = 10;
 *    int nbSecondLevelChildren = 3;
 *
 *    // first level children items
 *    for (int i = 0 ; i < nbFirstLevelChildren ; ++i)
 *    {
 *       CATSYPDataBlock * pDataBlock = dataBlockFactory.CreateDataBlock();
 *       CHECK_POINTER_RETV(pDataBlock, NULL);
 *       CATUnicodeString number;
 *       number.BuildFromNum(i);
 *       CATUnicodeString currentValue = value + number;
 *       pDataBlock->SetProperty("TextPpty", CATBoxingOfCATUnicodeString::Box(currentValue));
 *       pDataBlock->SetProperty("Icon", pClosedFolderIcon);
 *
 *       pTree->Append(pDataBlock, pTree->GetRoot());
 *       CATVidMdlIndex firstLvlIdx = pTree->CreateIndex(i, 0, pTree->GetRoot());
 *
 *       // second level children items
 *       for (int j = 0 ; j < nbSecondLevelChildrn ; ++j)
 *       {
 *         CATSYPDataBlock * pDataBlock2 = dataBlockFactory.CreateDataBlock();
 *         CHECK_POINTER_RETV(pDataBlock2, NULL);
 *         CATUnicodeString number2;
 *         number2.BuildFromNum(j);
 *         CATUnicodeString currentValue2 = "Sub" + value + number + "_" + number2;
 *         pDataBlock2->SetProperty("TextPpty", CATBoxingOfCATUnicodeString::Box(currentValue2));
 *         pDataBlock2->SetProperty("Icon", pClosedFolderIcon);
 *
 *         pTree->Append(pDataBlock2, firstLvlIdx);
 *         CATVidMdlIndex secondLvlIdx = pTree->CreateIndex(j, 0, firstLvlIdx);
 *       }
 *    }
 *
 *    // Set the view properties and associate it to the model
 *    pTreeView->SetUniformItemSizes(1);
 *    pTreeView->SetItemsScrollMode(CATVid::ItemPerItem);
 *    pTreeView->SetSelectionMode(CATVid::MultiRange);
 *    pTreeView->SetDataTemplate("DefaultBasicTreeViewItem", "CATSYPTstDataTemplate.CATSYPStyle");
 *    pTreeView->SetSourceModel(pTreeModel);
 *    pTreeView->SetStyle("Default");
 * }
 * @endcode
 *
 * @note
 * You should only use uniform item sizes since non uniform sizes are not supported yet for a tree view.
 */
class ExportedByVisuDialog CATVidCtlTreeView: public CATVidCtlAbstractItemsView
{
  CATDeclareClass;
public:
  /** Default constructor */
  CATVidCtlTreeView ();
  /** Destructor */
  virtual ~CATVidCtlTreeView ();

  /**
   * Construct a CATVidCtlTreeView with a standard style.
   *
   * @return a pointer on the newly created CATVidCtlTreeView object or NULL
   * in case of failure.
   */
  static CATVidCtlTreeView * CreateTreeView();
  /**
   * Set the header name of the column where the tree should be displayed in multi view mode.
   *
   * @param SetDisplayOnHeader : the id of the column the tree must be displayed on.
   */
  void SetDisplayOnHeader(const CATUnicodeString & i_idColumn);

  /**
   * Get the header name of the column where the tree is displayed in multi view mode.
   *
   * @return the id of the column the tree must be displayed on.
   */
  const CATUnicodeString & GetDisplayOnHeader() const;

  /**
   * Collapse the model item referenced by the given index and updates the view.
   *
   * @param i_index the index that reference the model item to collapse.
   *
   * @return 1 if collapse is done, 0 if the item is already collapsed.
   */
  int Collapse(const CATVidMdlIndex & i_index);
  /**
   * Collapse the model item referenced by the given index.
   * Don't update the view.
   *
   * @param i_index the index that reference the model item to collapse.
   *
   * @return 1 if collapse is done, 0 if the item is already collapsed.
   */
  int CollapseWithoutUpdate(const CATVidMdlIndex & i_index);
  /**
   * Collapse the branch of the model item referenced by the given index and updates the view.
   *
   * @param i_index the index that reference the model item which branch to collapse.
   */
  void CollapseBranch(const CATVidMdlIndex & i_index);
  /**
   * Collapse all expanded model items.
   */
  void CollapseAll();
  /**
   * Expand the model item referenced by the given index and updates the view.
   *
   * @param i_index the index that reference the model item to expand.
   *
   * @return 1 if expand is done, 0 if the item is already expanded.
   */
  int Expand(const CATVidMdlIndex & i_index);
  /**
   * Expand the model item referenced by the given index.
   * Don't update the view.
   *
   * @param i_index the index that reference the model item to expand.
   *
   * @return 1 if expand is done, 0 if the item is already expanded.
   */
  int ExpandWithoutUpdate(const CATVidMdlIndex & i_index);
  /**
   * Expand all expandable model items.
   */
  void ExpandAll();
  /**
   * Expand all expandable model items to the given depth.
   *
   * @param i_depth the depth to which expand model items.
   */
  void ExpandToDepth(int i_depth);
  /**
   * Expand the model item referenced by the given index to the given depth.
   *
   * @param i_depth the depth to which expand the model item.
   */
  void ExpandToDepth(int i_depth, const CATVidMdlIndex & i_index);
  /**
   * Is the model item referenced by the given index expanded?
   *
   * @param i_index the index referencing the model item which is expanded or not.
   *
   * @return TRUE if the model item is expanded, otherwise return FALSE.
   */
  CATBoolean IsExpanded(const CATVidMdlIndex & i_index);
  /**
   * Sets the model item referenced by the given index to either expand or collapse, depending on the value of i_expanded:
   * i_expanded = 1 -> expand
   * i_expanded = 0 -> collapse
   *
   * @param i_index the index to either expand or collapse.
   * @param i_expanded if TRUE expand, otherwise collapse.
   */
  void SetExpansion(const CATVidMdlIndex & i_index, CATBoolean i_expanded);
  /**
   * Sets the model item referenced by the given index to either:
   * expand if it was collapsed
   * collapse if it was expanded
   *
   * @param i_index the index to either expand or collapse.
   */
  void ToggleExpansion(const CATVidMdlIndex & i_index);

  /**
   * Check the model item referenced by the given index.
   * Note : the datatemplate need to have a Checked property binded to the CheckState of a CATVidCtlCheckbox widget.
   *
   * @param i_index the index that reference the model item to check.
   *
   * @return 1 if check is done, 0 if no Checked property is found.
   */
  int Check(const CATVidMdlIndex & i_index);
  /**
   * Uncheck the model item referenced by the given index.
   * Note : the datatemplate need to have a Checked property binded to the CheckState of a CATVidCtlCheckbox widget.
   *
   * @param i_index the index that reference the model item to uncheck.
   *
   * @return 1 if check is done, 0 if no Checked property is found.
   */
  int Uncheck(const CATVidMdlIndex & i_index);
  /**
   * Put the model item referenced by the given index in mixed state (not checked nor unchecked).
   * Note : the datatemplate need to have a Mixed property binded to the MixedState of a CATVidCtlCheckbox widget.
   *
   * @param i_index the index that reference the model item to put in a mixed state.
   *
   * @return 1 if the mixed state is done, 0 if no Mixed property is found.
   */
  int SetMixedState(CATBoolean i_mixedState, const CATVidMdlIndex & i_index);
  /**
   * Is the model item referenced by the given index checked?
   * Note : the datatemplate need to have a Checked property binded to the CheckState of a CATVidCtlCheckbox widget.
   *
   * @param i_index the index referencing the model item which is checked or not.
   *
   * @return TRUE if the model item is checked, otherwise return FALSE.
   */
  CATBoolean IsChecked(const CATVidMdlIndex & i_index);
  /**
   * Is the model item referenced by the given index in a mixed state?
   * Note : the datatemplate need to have a Mixed property binded to the MixedState of a CATVidCtlCheckbox widget.
   *
   * @param i_index the index referencing the model item which is in a mixed state or not.
   *
   * @return TRUE if the model item is in a mixed state, otherwise return FALSE.
   */
  CATBoolean IsMixed(const CATVidMdlIndex & i_index);
  /**
   * Set whether or not the root child of the tree has to be displayed or not a special style like expander control.
   *
   * @param i_RootChildrenBackgroundVisibleFlag TRUE if the root has to be displayed, FALSE otherwise.
   */
  void SetRootChildrenBackgroundVisibleFlag( const CATBoolean& i_RootChildrenBackgroundVisibleFlag );

  /**
   * Indicates whether or not the root child of the tree is displayed or not a special style like expander control.
   *
   * @return TRUE if the root is displayed, FALSE otherwise.
   */
  CATBoolean GetRootChildrenBackgroundVisibleFlag() const;

  /**
   * Set whether or not the checking of an item will automatically check all the child items.
   *
   * @param i_autoCheckFlag TRUE if the tree is in autocheck mode, FALSE otherwise.
   */
  void SetAutoCheckFlag(CATBoolean i_autoCheckFlag);

  /**
   * Indicates whether or not the checking of an item will automatically check all the child items.
   *
   * @return TRUE if the tree is in autocheck mode, FALSE otherwise.
   */
  CATBoolean GetAutoCheckFlag() const;

  /**
   * Sets the look of the expanders (see @ref CATVid#ExpanderLook).
   * Default policy is @c Arrow (see @ref CATVid#Arrow).
   *
   * @param i_expanderLook the look of the expanders.
   */
  void SetExpanderLook(CATVid::ExpanderLook i_expanderLook);
  /**
   * @return the look of the expanders
   * (@ref CATVid#ExpanderLook).
   */
  CATVid::ExpanderLook GetExpanderLook() const;

  /**
   * Sets the look of the arcs (see @ref CATVid#ArcLook).
   * Default policy is @c Line (see @ref CATVid#Line).
   *
   * @note: ExpanderLook has to be set on CATVid::Plus
   *        in order for the arcs to be displayed.
   *
   * @param i_arcLook the look of the arcs.
   */
  void SetArcLook(CATVid::ArcLook i_arcLook);
  /**
   * @return the look of the arcs
   * (@ref CATVid#ArcLook).
   */
  CATVid::ArcLook GetArcLook() const;

  /**
   * Sets a flag to display tree item separators, 2 pixels below the cell.
   * Warning to use CellSpacing with at least 2, to avoid overlapping.
   */
  void SetUseTreeItemSeparatorFlag(int i_useTreeItemSeparatorFlag);
  /**
   * @return the flag to display tree items separators. 
   */
  int GetUseTreeItemSeparatorFlag() const;

  /**
   * Set indentation of items for each level of the tree view (measured in pixels).
   *
   * @param i_indentation value of indentation in pixels.
   */
  void SetIndentation(int i_indentation);

  /**
   * Get indentation of items for each level of the tree view (measured in pixels).
   *
   * @return value of indentation in pixels.
   */
  int GetIndentation() const;

  /**
   * Set expander zone width (measured in pixels). Min value is 9.
   *
   * @param i_expanderZoneWidth the width of the expander zone in pixels. 
   */
  void SetExpanderZoneWidth(int i_expanderZoneWidth);
  /**
   * Get expander zone width (measured in pixels).
   *
   * @return the width of the expander zone in pixels.
   */
  int GetExpanderZoneWidth() const;
  /**
   * Sets a flag to expand/collapse tree node when clicking anywhere in the cells of its node.
   *
   * @param i_expandOnCellClickFlag the flag to expand/collapse tree node when clicking anywhere in the cells of its node.
   */
  void SetExpandOnCellClickFlag(int i_expandOnCellClickFlag);
  /**
   * @return the flag to expand/collapse tree node when clicking anywhere in the cells of its node.
   */
  int GetExpandOnCellClickFlag() const;
  /**
   * Get the current visibility of the item referenced by the given index.
   * An item which is child of a collapse item or has a collapse item
   * in its parentage is not visible.
   *
   * @param i_index the index that referenced the item to get the visibility.
   *
   * @return 1 if the item is visible, 0 if it is not visible.
   */
  int IsVisible(const CATVidMdlIndex & i_index);
  /**
   * Make the item referenced by the given index visible
   * If it is the child of a collapsed item or has one or several collapsed
   * items in its parentage, expand all these items and update the view.
   *
   * @param i_index the index that references the index to make visible.
   *
   * @return 1 if the item has been made visible, 0 if the item is already visible.
   *
   * @note be careful: asserts when giving an invalid index.
   */
  int MakeVisible(const CATVidMdlIndex & i_index);
  /**
   * Make the item referenced by the given index visible.
   * Don't update the view.
   *
   * @param i_index the index that references the index to make visible.
   *
   * @return 1 if the item has been made visible, otherwise 0.
   *
   * @note be careful: asserts when giving an invalid index.
   */
  int MakeVisibleWithoutUpdate(const CATVidMdlIndex & i_index);

  virtual int GetTreeFlag()const{return 1;}

	/*
	* If this property if set to TRUE, when filtering on the Treeview model, the nodes matching the filter string will be forced to be visible.
	* Consequently, if this option is set to TRUE, filter can provoke an expand of some nodes to show matching nodes.
	* If this option is set to FALSE, there is no expand done to show matching filter nodes.
	*/
	void SetMakeVisibleAllFilteredNodesFlag(CATBoolean i_makeVisibleAllFilteredNodesFlag);

	/*
	* Get the MakeVisibleAllFilteredNodesFlag property value.
	*/
	CATBoolean GetMakeVisibleAllFilteredNodesFlag();

private:
// Copy constructor and equal operator
// -----------------------------------
  CATVidCtlTreeView (CATVidCtlTreeView &);
  CATVidCtlTreeView& operator=(CATVidCtlTreeView&);
};

//-----------------------------------------------------------------------

#endif
