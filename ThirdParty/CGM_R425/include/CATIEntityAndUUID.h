/**
* @level Protected
* @usage U3
*/

// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIEntityAndUUID.h
// Define the CATIEntityAndUUID interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mar 2008  Creation: Code generated by the CAA wizard  CRM
//===================================================================
#ifndef CATIEntityAndUUID_H
#define CATIEntityAndUUID_H

#include "CATIAEntity.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATIAEntity IID IID_CATIEntityAndUUID;
#else
extern "C" const IID IID_CATIEntityAndUUID ;
#endif

//------------------------------------------------------------------

/**
* Interface representing the methods to communicate with links services.
*
* <br><b>Role</b>: Components that implement
* CATIEntityAndUUID are link services that need information on containers to build correct links
* When UUID table is updated in CATIAwithUUID class, the incoming (or outcoming) elements of the table are sent 
* thanks to a listener
* <p>
* Do not use the CATIEntityAndUUID interface if you don't need information on containers

*
* @example
*  // example is optional
*  CATIEntityAndUUID* currentDisplay = NULL;
*  rc = ptr->QueryInterface(IID_CATIEntityAndUUID,
*                                     (void**) &amp;currentDisplay);
*
*/
class ExportedByCATIAEntity CATIEntityAndUUID: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
    *  This method will send an uuid and a pointer on a CATIAEntity that are added in uuid table.
    * @param iName
    *  The uuid of the current added element.
    * @param ipEntity
    *  The pointer on a CATIAEntity corresponding to the same current added element.
    * @param ipDocPath
    *  The path of the document in which the entity is stored. 
    * @return
    * <ul>
    * <li><code>S_OK</code> if the operation has succeeded.</li>
    * <li><code>E_FAIL</code> if the operation has failed. </li>
    * </ul>
    */
    virtual HRESULT SetEntityAndUUID(const CATIAuuid iName, CATIAEntity * ipEntity, const CATUnicodeString ipDocPath) = 0;

    /**
    *  This method will send an uuid and a pointer on a CATIAEntity that are removed from uuid table.
    * @param iName
    *  The uuid of the current removed element.
    * @param ipEntity
    *  The pointer on a CATIAEntity corresponding to the same current removed element.
    * @param ipDocPath
    *  The path of the document in which the entity is stored. 
    * @return
    * <ul>
    * <li><code>S_OK</code> if the operation has succeeded.</li>
    * <li><code>E_FAIL</code> if the operation has failed. </li>
    * </ul>
    */
    virtual HRESULT RemoveEntityAndUUID(const CATIAuuid iName, CATIAEntity * ipEntity, const CATUnicodeString ipDocPath) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
