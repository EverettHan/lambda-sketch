// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Oct 2005  Creation: Code generated by the CAA wizard  bes
//===================================================================
#ifndef CATOmbSdsStreamServices_H
#define CATOmbSdsStreamServices_H

/**
* @level   Private (CATPLMDocument, CATPLMClientCore)
* @usage   U1
*/

// CATPLMIntegrationInterfaces
#include "CATIPLMSaveFactory.h" // pour EndSaveStatus
// ObjectModelerCollection
#include "CATOmxList.h"
#include "CATOmxSharable.h"
#include "CATOmxSR.h"
// CATVirtualVaultSystem
#include "CATVVSUrl.h"
// SystemTS
#include "CATBoolean.h"
// CATPLMServices
#include "CATPLMStreamDescriptor.h"
// ObjectModelerBase
#include "CATOmbLoadableDataUniqueKey.h"
#include "CATOmbSessionService.h"
#include "CATOmbStreamDescriptorSessionService.h"
#include "CATOmbObjectStreamerServices.h"
#include "CATOmbStreamDescriptorFormat.h"
// CATPLMStreamDescriptor
#include "CATPLMStreamDescriptorForInfraOnly.h"
#include "CATPLMID.h"
#include "CATUuid.h"
#include "CATAsyncTrace.h"

class CATIPLMLogState;
class CATIPLMIntegRecordRead;
class CATIPLMIntegRecordWrite;
class CATIPLMEngineErrorReporter;
class CATBaseUnknown;
class CATUuid;
class CATComponentId;
class CATDocument;
class SDDefInfos;
class CATOmbImportExportParameters;
class CATOmbObjectStreams;
class CATIOmyIncidentCollector;
class CATIOmbConverter3;
class CATOmyCioGenerator;
class CATIOmbStreamDescriptor;
class CATOmbObjectStreamerServices;


// for multitree/multirelease delivery
#define SaveSdsOnEntityForPC2

class ExportedByCATPLMStreamDescriptor CATPLMStreamDescriptorDefinition : public CATOmxSharable
{
public:
  CATPLMStreamDescriptorDefinition(int iFormat, const CATUnicodeString& iRole, const CATUnicodeString& iLateType,
    const CATUnicodeString& iWatermarkStamp, const CATUnicodeString& iSynchroStamp, const CATUnicodeString& iPersistencyType, const CATUnicodeString& iPersistencyName);
  CATPLMStreamDescriptorDefinition(CATPLMStreamDescriptor iStreamDescInfo);
  CATPLMStreamDescriptorDefinition(SDDefInfos* iStreamDescInfo);
  CATPLMStreamDescriptorDefinition();
  ~CATPLMStreamDescriptorDefinition();

  void SetUrl(const CATVVSUrl& iUrl);
  void SetCATPLMStreamDescriptor(CATPLMStreamDescriptor iStreamDescInfo);

  CATVVSUrl GetUrl();
  CATUnicodeString GetPersistencyType();
  CATUnicodeString GetWatermarkStamp();
  int GetSessionWS() { return _sessionWS; }
  void GetInfos(CATUnicodeString& oFormat, CATUnicodeString& oRole, CATUnicodeString& oLateType);
  CATPLMStreamDescriptor GetCATPLMStreamDescriptor();
  CATPLMStreamDescriptor& GetCATPLMStreamDescriptorAsRef();
private:
  CATVVSUrl m_Url;
  int _sessionWS; // internal use. Only set when MD5 are used
  CATPLMStreamDescriptor streamDescInfo;
};

/**
* This class offers different services used for saving the stream descriptors of a repref.
*/
class ExportedByCATPLMStreamDescriptor CATOmbSdsStreamServices : public CATOmbSessionService
{
public:

  /**
  * Constructors
  */
  CATOmbSdsStreamServices(CATOmbSessionContext* ipSessionContext = NULL);

  CATOmbSdsStreamServices(CATOmbImportExportParameters& iParameters, CATOmbSessionContext* ipSessionContext = NULL);

  /**
  * Destructor
  */
  virtual ~CATOmbSdsStreamServices() {};

  /**
  * This method saves all the StreamDescriptors of a RepRef.
  * This method is to be deprecated in R205 and replaced by the following one.
  *
  * <br><b>Role</b>:
  * This method inits the RepRef save procedure.
  * It generates first all the SD that are synchronized with the Authoring SD.
  * It then creates new Watermark stamp for the modified stream descriptor.
  * Finally it asks the database to reserve an url for the modified stream.
  *
  * This method should be called before AnalyzeResultAndUpdateForSds.
  *
  * @param iRepRef [in]
  * @param iLogState [in]
  *   the log status
  * @param iRecordWrite [in]
  *   the save message that will be updated to take into account the SDs to save and sent to the PDM.
  * @param iTransId [in]
  *   the CuteIO transaction identifier
  * @param iopiErrorReporter [inout]
  *   The error reporter that will be filled in case of error.
  *
  * @return
  *   <code>S_OK</code>   method succeeded.
  *   <code>E_FAIL</code> unexpected error.
  *
  */
  // VCS R205 12/11/07 This method is to be deprecated and replaced by the following one
  HRESULT SavetoPDMForSds(CATBaseUnknown& iRepRef, CATIPLMLogState& iLogState, CATIPLMIntegRecordWrite& iRecordWrite, const CATUuid& iTransId, CATIPLMEngineErrorReporter& ioErrorReporter);

  /**
  * This method saves all the StreamDescriptors of a RepRef.
  *
  * <br><b>Role</b>:
  * This method inits the RepRef save procedure.
  * It generates first all the SD that are synchronized with the Authoring SD.
  * It then creates new Watermark stamp for the modified stream descriptor.
  * Finally it asks the database to reserve an url for the modified stream.
  *
  * This method should be called before AnalyzeResultAndUpdateForSds.
  *
  * @param iCID [in]
  *   the component identifier
  * @param iRecordWrite [in]
  *   the save message that will be updated to take into account the SDs to save and sent to the PDM.
  * @param iTransId [in]
  *   the CuteIO transaction identifier
  * @param iopiErrorReporter [inout]
  *   The error reporter that will be filled in case of error.
  *
  * @return
  *   <code>S_OK</code>   method succeeded.
  *   <code>E_FAIL</code> unexpected error.
  *
  */
  // VCS R205 12/11/07 New SavetoPDMForSds signature for more generic use
  HRESULT SavetoPDMForSds(CATComponentId& iCID, CATIPLMIntegRecordWrite& iRecordWrite, const CATUuid& iTransId, CATIPLMEngineErrorReporter& ioErrorReporter);

  HRESULT SavetoPDMForSdsOnEntity(CATComponentId& iCID, CATIPLMIntegRecordWrite& iRecordWrite, const CATUuid& iTransId, CATIPLMEngineErrorReporter& ioErrorReporter);
  /**
  * This method streams a RepRef into a PDM.
  *
  * <br><b>Role</b>:
  * This method streams all the unsaved Sds of a RepRef.
  * It assures that all SDs are sent to the PDM and finalizes the Save transaction.
  *
  * @param iRepRef [in]
  *   The RepRef to stream.
  * @param iRecRead [in]
  *   The PLM Message that described where the SDs have to be streamed.
  * @param iTransId [in]
  *   the CuteIO transaction identifier
  * @param iopiErrorReporter [inout]
  *   The error reporter that will be filled in case of error.
  *
  * @return
  *   <code>S_OK</code>   method succeeded.
  *   <code>E_FAIL</code> unexpected error.
  *
  */
  HRESULT AnalyzeResultAndUpdateForSds(CATBaseUnknown& iRepRef, CATIPLMIntegRecordRead& iRecRead, const CATUuid& iTransId, CATIPLMEngineErrorReporter& ioErrorReporter);


  /**
  * Checks the dirty status on all StreamDescriptor of the RepRef.
  *
  * <br><b>Role</b>: This method loops through all the SDs of a RepRef
  * to check their dirty status. If one SD is dirty, then the RepRef is said to be dirty.
  *
  * @param iRepRef [in]
  *   The RepRef to check
  * @param oDirty [out]
  *   the dirty status.
  *
  * @return
  *   <code>S_OK</code>   dirty status computed with success
  *   <code>E_FAIL</code> unexpected error
  *
  */
  HRESULT NeedsToStreamSDs(CATBaseUnknown& iComponent, CATBoolean& oNeedsToStream);

  /**
  * Validates or Cancels any operation that has occured on the RepRef during the streaming operation.
  *
  * <br><b>Role</b>:
  * If the save is successfull :
  *   - sets SD dirty status to false
  *   - sets the SD save status to true
  *   - validate all requests to secondary sd generation.
  * In all case,
  *   remove all temporary data
  *
  * @param iSuccess [in]
  *   <code> TRUE  </code> validates Save operation
  *   <code> FALSE </code> cancels save operation
  * @param ioErrorReporter [inout]
  *   The error reporter that will be filled in case of error.
   * @param iTransId [in]
  *   the CuteIO transaction identifier
  *
  * @return
  *   <code>S_OK</code>   dirty status computed with success
  *   <code>E_FAIL</code> unexpected error
  *
  */
  HRESULT SaveTransactionIsCompleted(const CATUuid& iTransId, const CATBoolean iSuccess, CATIPLMEngineErrorReporter& iopiErrorReporter);

  /**
   * Equivalent of SaveTransactionIsCompleted but for LocalSave
   */

  HRESULT EndLocalSaveTransaction(const CATUuid& iTransId, CATIPLMSaveFactory::EndSaveStatus iSaveStatus, CATIPLMEngineErrorReporter& iopiErrorReporter);

  /**
  * Associate a very light RepRef to a ComponentId
  *
  * @param iCID [in]
  *   The component as declared in TOS
  *
  * @return
  *   <code>S_OK</code>   a light RepRef has been successfully attached to the CATComponentId
  *   <code>E_FAIL</code> something went wrong
  *
  */
  HRESULT FillComponentIdWithLightRepRef(const CATComponentId& iCID);
  /**
  * Clean the PC2 contained under the CATComponentId if a failure occured during import process
  * Please do not use this method is you have not been explicitely asked to
  * @param iCID [in]
  *   The component as declared in TOS
  *
  * @return
  *   <code>S_OK</code>   we successfully cleaned the component
  *   <code>E_FAIL</code> something went wrong
  *
  */
  HRESULT CleanComponentAfterFailure(const CATComponentId& iCID);
  /**
  * Generates secondary streams descriptors and returns the list of ALL stream descriptors to be saved when saving a component
  *
  * @param iCID [in]
  *   The component to be saved.
  *   All secondary stream descriptors are generated from its authoring stream descriptor, that must already exist.
  * @param oListOfStreamDefinition [out]
  *   The list of stream descriptors definitions -one per stream descriptor to be saved-
  *   The authoring Stream descriptor is included, if to be saved.
  * @param iComputeMD5[in]
  *   if set to TRUE MD5 of the streams will be computed and SD will be updated with this MD5.It is higly recommended to set this argument to TRUE for new developments.
  *   This MD5 checksum will be used to check coherency of streams during its whole lifecyle.
  *   Note : in this case the document will be streamed in local cache during this method and will be kept for save transaction
  *   It is not recommended to use it (set to TRUE) before R420 level
  *
  * @return
  *   <code>S_OK</code>   list of stream descriptor definitions successfully generated
  *   <code>E_FAIL</code> something went wrong
  *
  */
  HRESULT ListSDsToSave(const CATComponentId& iCID, CATOmxList<CATPLMStreamDescriptorDefinition>& oListOfTargetStreamDefinition, CATBoolean iComputeMD5 = FALSE);
  HRESULT ListSDsToSave(CATBaseUnknown* iRepRef, CATOmxList<CATPLMStreamDescriptorDefinition>& oListOfTargetStreamDefinition, CATBoolean iComputeMD5 = FALSE);
  /**
  * Computes secondary streams and saves them along with all stream descriptors given from input definitions
  * If MD5 have been computed, streams already present will be copied to provided Urls
  *
  * @param irepRef [in]
  *   The RepRef to be saved
  * @param iListOfStreamDefinition [in]
  *   The list of the stream descriptor definitions -one for each stream descriptor to be saved-
  *   destination url has to be set on each CATPLMStreamDescriptorDefinition
  *
  * @return
  *   <code>S_OK</code>   All secondary streams computed and all the stream descriptors of the component successfully saved
  *   <code>E_FAIL</code> something went wrong
  *
  */
  HRESULT SaveSDs(const CATComponentId& iCID, CATOmxList<CATPLMStreamDescriptorDefinition> iListOfStreamDefinition, const CATUuid& iTransactionId);
  HRESULT SaveSDs(CATBaseUnknown* iRepRef, CATOmxList<CATPLMStreamDescriptorDefinition> iListOfStreamDefinition, const CATUuid& iTransactionId);

  //SWV1 Power'By
  /**
  * checks and/or generates secondary streams descriptors and returns the list of ALL stream descriptors to would be saved when saving a component
  * at this stage you only have the CATOmbLoadableDataUniquekey information (format, role, persistencytype) but you don't ave yet all the information of a CATPLMStreamDescriptor to be saved
  *
  * @param ioObjectInfos [inout]
  *   The component to be managed hold by a wrapper of type CATOmbObjectStreams.
  *   The component has at least its master StreamDescriptor
  *
  * @param iGenerationContext[in]
  *   context of generation
  *
  * @return
  *   <code>S_OK</code>   list of basic definitions for StreamDescriptor has been successfully generated
  *   <code>E_FAIL</code> something went wrong
  *
  */
  HRESULT ListSDsToSave(CATOmxList<CATOmbObjectStreams>& ioObjectInfos, unsigned int iGenerationContext);

  /**
  * generate or update a file on Rep according to an input XCAD file and Save it only in PLMCache.
  *
  * @param ioObjectInfos [inout]
  *   The list of components to be managed hold by a wrapper of type CATOmbObjectStreams.
  *   Each component has already computed the list of SDs to manage provided by ListSDsToSave
  *
  * @param iInputURL[in]
  *   the url that would provide the path or ILB to the data used to fill each document associated to a StreamDescriptor
  *   this url should be empty for viewable only generation
  *
  * @return
  *   <code>S_OK</code>   each document has been correctly generated/updated and streams saved in PLMCache
  *   <code>E_FAIL</code> something went wrong
  *
  */

  HRESULT UpdateSDsAttributesAndSaveInPLMCache(CATVVSUrl& iInputURL, CATOmxList<CATOmbObjectStreams>& ioObjectInfos);
  /**
  * associate for a Component the server url to the PLMCache url in order to prepare VVS transaction of upload
  *
  * @param ioObjectInfos [inout]
  *   The list of component to be managed hold by a wrapper of type CATOmbObjectStreams.
  *   Each component has already saved in PLCache the streams associarted to operated SDs provided previously by ListSDsToSave/UpdateSDsAttributesAndSaveInPLMCache
  *
  * @param iTransactionId[in]
  *   The VVS transaction
  *
  * @return
  *   <code>S_OK</code>   the association has been performed and  VVS transaction is ready for upload
  *   <code>CATOmy_E_V5V6_Catalog_Compliance</code> a V5-V6 certification error occurs at CATIAV5INV6 stream load step, but OMBBypassV5V6Certification parameter not set/set to false
  *                                                 on its input aggregating ObjectStreams.
  *                                                (S_OK if OMBBypassV5V6Certification parameter set to true on ALL input ObjectStreams getting the error, and no other fatal/severe error raised)
  *   <code>E_FAIL</code> something went wrong
  */
  HRESULT PrepareUploadOfSDsStreams(CATOmxList<CATOmbObjectStreams>& ioObjectInfos, const CATUuid& iTransactionId);

  /**
  * This API check and modify when need the value of StreamDescriptor attribute and provide the list of streams to be kept.
  * it is used during impott briefcase to manage legacy data that hold obsolete streams
  * @param iComponentType : The DSType (PLMType) of component to check (it could be 3Dhape, Drawing, FEM representation...)
  * @param ioListOfStreams : the list of identifier of the streams associated to StreamDescriptor attribute
  * @return
  *   S_OK if some change of streams has been performed
  *   S_FALSE if nothing to do
  *   E_FAIL something went wrong
  */
  HRESULT ComputeComponentStreamsCompliance(const CATUnicodeString& iComponentType, CATOmxList<CATPLMStreamDescriptor>& ioListOfStreams);


  void OnSaveToPDMFailure();
private:

  CATOmxSR<CATOmbImportExportParameters> _Parameters;;
};
#endif
