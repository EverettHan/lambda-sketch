// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIAdpValueWriter.h
// Define the CATIAdpValueWriter interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIAdpValueWriter_H
#define CATIAdpValueWriter_H

#include "CATPLMIntegrationAccess.h"
#include "CATBaseUnknown.h"

/**
 * @level Protected
 * @usage U3
 */

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationAccess IID IID_CATIAdpValueWriter;
#else
extern "C" const IID IID_CATIAdpValueWriter ;
#endif

//------------------------------------------------------------------


class CATUnicodeString;
class CATTime;
class CATBinary;

/**
 * Interface that gives a write access to an attribute value.
 * <br><b>Role</b>: provides a write access to an attribute value.
 * 
 * <ul><li>See @href CATAdpAttributeSet#GetAdpValueWriter if you want to get a CATIAdpValueWriter</li></ul>
 *
 * @example
 * CATIAdpValueWriter * piValueWriter=NULL;
 * if(SUCCEEDED(CATAdpAttributeSet::GetAdpValueWriter(piValueWriter)) && piValueWriter)
 * {
 *   if(SUCCEEDED(piValueWriter->SetValue(3.14))) // sets the value with a double.
 *     ...
 *   piValueWriter->Release(); piValueWriter=NULL;
 * }
 */
class ExportedByCATPLMIntegrationAccess CATIAdpValueWriter: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**
   * Sets the value with an integer value.
   * <br><b>Role</b>: Sets an attribute value with an integer.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const int iValue)=0;

  /**
   * Sets the value with a double value
   * <br><b>Role</b>: Sets an attribute value with a double.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const double iValue)=0;


  /**
   * Sets the value with a string value.
   * <br><b>Role</b>: Sets an attribute value with a string.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const CATUnicodeString & iValue)=0;

  /**
   * Sets the value with a time value.
   * <br><b>Role</b>: Sets an attribute value with a time.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const CATTime &iValue)=0;

  /**
   * Sets the value with a binary value.
   * <br><b>Role</b>: Sets an attribute value with a binary.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const CATBinary &iValue)=0;

  /**
   * Sets the value with a boolean value.
   * <br><b>Role</b>: Sets an attribute value with a boolean.
   * <ul><li>You can set a value only once.</li></ul>
   * @param iValue [in] the value
   * @return
   * <ul>
   *  <li><code>S_OK<code> if everything ran OK;
   *  <li><code>E_FAIL</code> if this method has been called on an already setted value.
   * </ul>
   */
  virtual HRESULT SetValue(const CATBoolean &iValue)=0;

};

//------------------------------------------------------------------

#endif
