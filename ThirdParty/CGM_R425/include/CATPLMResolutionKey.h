
//===================================================================
// COPYRIGHT Dassault Systemes 2017/12/12
//===================================================================
// CATPLMResolutionKey.cpp
// Header definition of class CATPLMResolutionKey
//===================================================================
//
// Usage notes:
//  resolution key (arguments resolution_intension and resolution_extension).
// 
// Extension
// The extension is a set of resolved commit references.Commit references are a triplet made of :
// •	iterationref : either a commit id or the string “SYSTAG:STAGING”
// •	branchid
// •	repositoryid
// Intension
// The intension is an ordered list of subkeys.Each subkey can have one of the following forms :
// •	SYSTAG:STAGING@branchName
// •	SYSTAG:HEAD@branchName
// •	TAG:tagName
//
//===================================================================
//  2017/12/12 Creation: Code generated by the 3DS wizard
//===================================================================


#ifndef CATPLMResolutionKey_H
#define CATPLMResolutionKey_H

#include "CATPLMServicesPPrime.h"
#include "CATPLMExtensionResolution.h"
#include "CATPLMIntensionResolution.h"
#include "CATOmxArray.h"
#include "CATOmxOrderedOSet.h"
#include "CATPLMObservable.h"

class CATOmxJsonObject;
class CATOmxJsonArray;

class  ExportedByCATPLMServicesPPrime CATPLMResolutionKey : CATPLMObservable
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATPLMResolutionKey();
  virtual ~CATPLMResolutionKey();

  /*
  * Creates a CATPLMIntensionResolution object and appends it to '_intension' attribute
  * This function should be used when the Intension subkey has the following format : 'SYSTAG:TagValue@BranchName' or 'TAG@TagValue
  * @param itagType    [in]
  *     enum tagType { SYSTAG, TAG }
  * @param iTagValue   [in]
  *     Value of tag : could be 'HEAD' 'STAGING' or a custumized value
  * @param iBranchName [in]
  *     optional argument, mandatory for itagType = SYSTAG and ignored if itagType = TAG
  * @return
  * <dt> <code>S_OK</code>   <dd> if everythings is alright.
  * <dt> <code>E_FAIL</code> <dd> if iBranchName  is not setted and the tag type is 'SYSTAG', which is not allowed, in this case, nothing is added to the ResolutionKey
  */
  HRESULT AddIntensionSubKey(CATPLMResolutionKeyNameSpace::tagType iTagType, const CATUnicodeString &iTagValue, const CATUnicodeString & iBranchName = "");

  /*
  * Add Intension to the ResolutionKey
  * input :
  * @param iIntension [in]
  *     IntensionSubKey to add to the resolution key (actually attribute _intension)
  * <dt> <code>S_OK</code>    <dd>  if everythings is alright.
  *  <dt> <code>E_FAIL</code> <dd>  if iIntension has been badly constructed, in this case, nothing is appends to the ResolutionKey
  */
  HRESULT AddIntensionSubKey(CATPLMIntensionResolution &iIntension);

  /*
  * Add Extension to the ResolutionKey
  * @param iExtension [in]
  *     ExtensionCommitReference to add to the resolution key (actually attribute _extension)
  * @return
  * <dt> <code>S_OK</code> <dd> if everythings is alright.
  */
  HRESULT AddExtensionCommitReference(CATPLMExtensionResolution &iExtension);

  /*
  * Creates a CATPLMExtensionResolution object and appends it to '_extension' attribute
  * input:
  * @param iIterationRef [in]
  *     'iterationref'  belonging to the commit reference triplet coulb be either either a commit id or the string “SYSTAG:STAGING”
  * @param iBranchId  [in]
  *     'branchid' belonging to the commit reference triplet
  * @param iRepositoryId [in]
  *     'repositoryid' belonging to the commit reference triple
  * @return
  * <dt> <code>S_OK</code> <dd> if everythings is alright.
  */
  HRESULT AddExtensionCommitReference(CATUnicodeString &iIterationRef, CATUnicodeString &iBranchId, CATUnicodeString &iRepositoryId);

  /*
  * Getter to the extension Commit References of the resolution Key
  */
  HRESULT GetExtension(CATOmxOrderedOSet<CATPLMExtensionResolution>& oExtension);
  /*
  * Getter to the Intension sub keys of the resolution Key
  */
  HRESULT GetIntension(CATOmxOrderedOSet<CATPLMIntensionResolution>& oIntension);

  /*
  *  Get the Intension in CATOmxJsonObject : the format is the following :
  *  Example :
  * {"resolution_intension":["SYSTAG:Head@master","TAG:STAGING@branch1"]}
  */
  HRESULT GetIntensionKeyAsJson(CATOmxJsonObject& oIntensionJson);

  /*
  *  Get the Extension in CATOmxJsonObject : the format is the following :
  *  Example :
  * {
  * "resolution_extension":
  *  [
  *     {
  *     "branchid": "0023456789ABCDEF0123456789ABCDEE",
  *     "iterationref": "SYSTAG:STAGING",
  *     "repositoryid": "0003456789ABCDEF0123456789ABCD22"
  *     },
  *     {
  *     "branchid": "0023456789ABCDEF0123456789ABCDEF",
  *     "iterationref": "0123456789ABCDEF0123456789ABCDEF",
  *     "repositoryid": "0003456789ABCDEF0123456789ABCDEF"
  *     }
  *   ]
  * }
  * @param  oJson [out]
  *     Jason object,  needs to be empty
  * @return
  *  <dt> <code>S_OK</code>          <dd>   if everythings is alright.
  *  <dt> <code>E_INVALIDARGS</code> <dd>   if 'oExtensionJson' is not empty.
  */
  HRESULT GetExtensionKeyAsJson(CATOmxJsonObject& oExtensionJson);

  // Implementation of CATPLMObservable interface (pure virtual)
  HRESULT AddObserver(CATPLMObserver * iObserver);
  HRESULT DeleteObserver(CATPLMObserver * iObserver);


  // Copy constructor and equal operator
  // -----------------------------------
  CATPLMResolutionKey(const CATPLMResolutionKey &);
  CATPLMResolutionKey& operator=(const CATPLMResolutionKey&);

private:
  HRESULT _NotifyObersvers();
  CATOmxOrderedOSet<CATPLMExtensionResolution> _Extension;
  CATOmxOrderedOSet<CATPLMIntensionResolution> _Intension;
  // CATOmxArray<CATPLMObserver, com_manager> _Observers;
};

//-----------------------------------------------------------------------

#endif
