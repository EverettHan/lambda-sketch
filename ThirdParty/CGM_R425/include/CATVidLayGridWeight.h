// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidLayGridWeight.h
// Header definition of CATVidLayGridWeight
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidGridWeight_H
#define CATVidGridWeight_H

#include "VisuDialog.h"
//#include "CATVidConstraints.h"
#include "CATBoolean.h"
#include "CATSysTSDataType.h"
#include "list.h"
#include <CATBaseUnknown.h>
#include <CATUnicodeString.h>
#include <nlohmann/json_fwd.hpp>

//-----------------------------------------------------------------------
/**
 * This class is used to specify weight properties of a grid.
 * <p>The weight is a <b>property of columns and rows that is used to compute
 * resizing of each rows/columns when the entire grid is resized</b>.<br>
 *
 * @par Theory
 * If you have only 2 columns, columnA with a weight of a, columnB with a weight of b<br>
 * -> columnA will resize proportionaly to a/(a+b), columnB will resize proportionaly to b/(a+b).<br>
 * It is in fact a barycenter.
 * </p>
 *
 * @par In CAPSYPStyle files
 * <p>%CATVidLayGridWeight are used on a grid to specify weight of each columns and rows.<br>
 * CATVidLayGrid introspects a %CATVidLayGridWeight, named <b>GridWeight</b></p>
 * @code
 * <CATVidLayGrid GridWeight="col0=2 col1=5 row2=0.5">
 *   ....
 * </CATVidLayGrid>
 * @endcode
 *
 * <p> All weights are facultative, default is 0.<br>
 * The style processor will then create a %CATVidLayGridWeight and set it on the grid :
 * @code
 * // For the above example :
 * CATVidLayGridWeight weight;
 * weight.SetColumnWeight(0,2);
 * weight.SetColumnWeight(1,5);
 * weight.SetRowWeight(2,0.5);
 * @endcode
 *
 * @see CATVidLayGrid
 * @see <a href="http://codewiki/codewiki/index.php/VID_:_Style_Processor"><b>CodeWiki -> Style processor</b></a>
 * @ingroup VIDLayout
 */
class ExportedByVisuDialog CATVidLayGridWeight
{
//  CATDeclareClass;

public:

  /**
  * Standard constructor
  */
  CATVidLayGridWeight ();
  /**
  * Standard destructor
  */
  virtual ~CATVidLayGridWeight ();
  /**
  * Copy constructor
  */
  inline CATVidLayGridWeight (const CATVidLayGridWeight &);
  inline CATVidLayGridWeight& operator=(const CATVidLayGridWeight&);

  int operator == (const CATVidLayGridWeight &) const;
  int operator != (const CATVidLayGridWeight &) const;

  /**
  * Sets the weight of the given column.
  * By default, the weight of all columns is 0, and the remaining space of
  * the frame is fairly attributed to all the column
  * If any column has a non-null weight, the remaining space is
  * assigned by proportion of the column weight regarding the sum of
  * all columns weight
  * @param i_index the index of row (starting at 0)
  * @param i_weight a positive float (default : 0)
  */
  void SetColumnWeight(unsigned int i_index, float i_weight);
  /**
  * @return column weight
  */
  float GetColumnWeight(unsigned int i_index) const;
  /**
  * Sets the weight of the given row.
  * By default, the weight of all rows is 0, and the remaining space of
  * the frame is fairly attributed to all the rows.
  * If any row has a non-null weight, the remaining space is
  * assigned by proportion of the row weight regarding the sum of
  * all rows weight.
  * @param i_index the index of row (starting at 0)
  * @param i_weight a positive float (default : 0)
  */
  void SetRowWeight(unsigned int i_index, float i_weight);
  /**
  * @return column weight of given index
  */
  float GetRowWeight(unsigned int i_index) const;

   /**
  * @serialize an CATVidLayGrid to CATUnicodeString
  * @return string value of serialization
  */
  HRESULT Serialize(CATUnicodeString& o_string);
  HRESULT Serialize(nlohmann::json &o_json);

protected:
  class Weight
  {
  public:
    Weight(float i_weight=0){_weight = i_weight;};
    ~Weight(){};

    float _weight;
  };

  ::list <Weight> _columns;
  ::list <Weight> _rows;
};

//-----------------------------------------------------------------------------
// CATVidLayGridWeight : copy constructor
//-----------------------------------------------------------------------------
inline CATVidLayGridWeight::CATVidLayGridWeight(const CATVidLayGridWeight& i_original)
{
  Weight* pWeight = NULL;

  for (int indexColumn=0; pWeight = i_original._columns[indexColumn]; indexColumn++)
  {
    _columns += new Weight(pWeight->_weight);
  }

  for (int indexRow=0; pWeight = i_original._rows[indexRow]; indexRow++)
  {
    _rows +=  new Weight(pWeight->_weight);
  }
}

//-----------------------------------------------------------------------------
// CATVidLayGridWeight : equal operator
//-----------------------------------------------------------------------------
inline CATVidLayGridWeight& CATVidLayGridWeight::operator=(const CATVidLayGridWeight& i_original)
{
  Weight* pWeight = NULL;
  for (int indexColumn=0; pWeight = _columns[indexColumn]; indexColumn++)
  {
    delete pWeight;
    pWeight = NULL;
  }
  _columns.empty();

  for (int indexRow=0; pWeight = _rows[indexRow]; indexRow++)
  {
    delete pWeight;
    pWeight = NULL;
  }
  _rows.empty();

  for (int indexColumn2=0; pWeight = i_original._columns[indexColumn2]; indexColumn2++)
  {
    _columns += new Weight(pWeight->_weight);
  }

  for (int indexRow2=0; pWeight = i_original._rows[indexRow2]; indexRow2++)
  {
    _rows +=  new Weight(pWeight->_weight);
  }

  return *this;
}

#endif
