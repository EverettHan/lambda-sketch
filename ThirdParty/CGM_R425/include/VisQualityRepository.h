//===================================================================
// COPYRIGHT Dassault Systemes 2016-01-20
//===================================================================
// VisQualityRepository.cpp
// Header definition of class VisQualityRepository
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016-01-20 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisQualityRepository_H
#define VisQualityRepository_H

#include "SGInfra.h"
#include "CATListOfCATUnicodeString.h"
#include "VisQualityData.h"

class CATSysPreferenceRepository;
class CATSettingRepository;

//-----------------------------------------------------------------------

class ExportedBySGInfra VisQualityRepository
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  VisQualityRepository ();
  virtual ~VisQualityRepository ();

  //////////////////////////////////////////  USER SETTINGS API  ///////////////////////////////////////////
  /**
  * User preset management (Active, Name, Data)
  */
  static CATBoolean GetIsActive(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetIsActive(VisQuality::PresetID iID, CATBoolean iIsActive, VisQuality::RenderMode iMode = VisQuality::Static);

  static VisQualityData GetPresetData(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetPresetData(VisQuality::PresetID iID, const VisQualityData &iData, VisQuality::RenderMode iMode = VisQuality::Static);

  static CATUnicodeString GetPresetName(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetPresetName(VisQuality::PresetID iID, const CATUnicodeString &iName, VisQuality::RenderMode iMode = VisQuality::Static);

  /**
  * Paramter override management (override parameter names, value)
  */
  static CATListOfCATUnicodeString GetOverrideParameters(VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetOverrideParameters(const CATListOfCATUnicodeString &iParamList,  VisQuality::RenderMode iMode = VisQuality::Static);

  static void GetOverrideData(VisQuality::RenderMode iMode, VisQualityData &ioData);
  static void SetOverrideData(VisQuality::RenderMode iMode, const VisQualityData &iData);

  /**
  * Admin locks
  */
  static CATUnicodeString GetParamOverrideLockName(const CATUnicodeString &iParamName="", VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetParamOverrideLock(CATBoolean toLock, const CATUnicodeString &iParamName="");
  static CATBoolean IsParamOverrideLocked(const CATUnicodeString &iParamName="");
  
  static char* GetUserPresetLockName(VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetUserPresetLock(CATBoolean toLock);
  static CATBoolean IsUserPresetLocked();

  static CATBoolean GetLastSelectedPage();
  static void SetLastSelectedPage(CATBoolean iIsActive);

  /**
  * Repository functions
  */
  static CATSettingRepository* GetRepository();
  static void Init(int force=0, VisQuality::RenderMode iMode = VisQuality::Static);
  static void Save();
  static void Commit();
  static void Rollback();


  //////////////////////////////////////////  USER PREFERENCES API  ///////////////////////////////////////////
  /**
  * Preference management (current preset, custom preset data)
  */
  static VisQuality::PresetID GetLastPreset(VisQuality::RenderMode iMode);
  static void SetLastPreset(VisQuality::PresetID iID, VisQuality::RenderMode iMode);

  static CATBoolean IsCustomPresetSet(VisQuality::RenderMode iMode);
  static void GetCustomPresetData(VisQuality::RenderMode iMode, VisQualityData& ioData, const VisQuality::PresetID iID = VisQuality::Custom);
  static void SetCustomPresetData(VisQuality::RenderMode iMode, const VisQualityData &iData, const VisQuality::PresetID iID = VisQuality::Custom);

  static CATBoolean GetPresetLinked(VisQuality::RenderMode iMode);
  static void SetPresetLinked(VisQuality::RenderMode iMode, CATBoolean isLinked);

  static VisQuality::PresetID GetCustomProfilePresetID(const VisQuality::RenderMode iMode);
  static void SetCustomProfilePresetID(const VisQuality::RenderMode iMode,const VisQuality::PresetID iID);

  /**
  * VQM user preset management
  */
  static CATBoolean GetIsVQMPresetActive(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetIsVQMPresetActive(VisQuality::PresetID iID, CATBoolean iIsActive, VisQuality::RenderMode iMode = VisQuality::Static);

  static CATUnicodeString GetVQMPresetName(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
  static void SetVQMPresetName(VisQuality::PresetID iID, const CATUnicodeString &iName, VisQuality::RenderMode iMode = VisQuality::Static);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  VisQualityRepository (VisQualityRepository &);
  VisQualityRepository& operator=(VisQualityRepository&);

  static void WriteDataInSetting(const CATString &iPrefix, const VisQualityData &iData, VisQuality::RenderMode iMode = VisQuality::Static);
  static void ReadDataFromSetting(const CATString &iPrefix, VisQualityData &ioData, VisQuality::RenderMode iMode = VisQuality::Static);
  //static const VisQualityData& GetDefaultOverrideData(VisQuality::RenderMode iMode);

  static CATSysPreferenceRepository *_pPreference;
  static CATSettingRepository *_pSetting;
};

//-----------------------------------------------------------------------

#endif
