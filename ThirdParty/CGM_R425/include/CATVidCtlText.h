// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlText.h
// Header definition of CATVidCtlText
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlText_H
#define CATVidCtlText_H

#include "VisuDialog.h"
#include "CATVidLayLayer.h"
#include "list.h"
#include "CATVidColor.h"
#include<CATMathPointf.h>
#include<CATVidCtl.h>
#include<CATVid.h>
#include<CATDlgUtility.h>
class CATVidGPText;
class CATVidGPSquare;
class CATUnicodeString;
class CATVidTooltip;
class CATVidHyperlink;
class CATVidMouseEventArgs;

//-----------------------------------------------------------------------
/**
 * @ingroup VIDControls
 */
class ExportedByVisuDialog CATVidCtlText: public CATVidLayLayer
{
  CATDeclareClass;
public:
  CATVidCtlText (CATCommand *i_pParent, const CATString & i_pIdentifier, CATBoolean i_wrapWordsFlag = FALSE);
  unsigned int AddLine(const CATUnicodeString& i_line);
  void Clear();
  int  GetLineCount() const;
  void GetLine( CATUnicodeString& o_line, unsigned int i_index=0 ) const;
  int  SetLine( const CATUnicodeString& i_line, unsigned int i_index=0 );
  void SetText( const CATUnicodeString &i_text);
  const CATUnicodeString& GetText() const;
  void ClearLine( int i_lineIndex=0 );
  void SetDefaultTextColor(const CATVidColor& i_color);
  void SetColor(const CATVidColor& i_color, unsigned int i_firstCharColorIndex, unsigned int i_nbCharColor);
  void SetBold(CATBoolean i_color, unsigned int i_firstCharColorIndex, unsigned int i_nbCharColor);
  void SetUnderline(CATBoolean i_boldFlag, unsigned int i_firstCharColorIndex, unsigned int i_nbCharColor);
  void SetHeight(float i_boldFlag, unsigned int i_firstCharColorIndex, unsigned int i_nbCharColor);
  void SetHyperlink(const CATUnicodeString& i_strURL,const CATUnicodeString& i_strToolTip, unsigned int i_firstCharColorIndex, unsigned int i_nbCharColor);
  void SetCursorShape(CATVid::MouseCursorShape i_cursor);
  CATVid::MouseCursorShape GetCursorShape() const;
  void SetColor(const CATVidColor& i_color);
  void SetIntegerValue( int i_integerValue);
  int  GetIntegerValue();
  void SetFloatValue( float i_floatValue);
  float GetFloatValue();
  void SetDoubleValue( double i_doubleValue);
  double GetDoubleValue();
  void SetWordWrapFlag(CATBoolean i_wordWrapFlag);
  CATBoolean GetWordWrapFlag() const;
  void SetFontHeight(unsigned int i_fontHeight);
  unsigned int GetFontHeight() const;
  void SetInterline(int i_interline);
  int GetInterline() const;
  void SetLeftMargin(unsigned int i_leftMargin);
  unsigned int GetLeftMargin() const;
  void SetTopMargin(unsigned int i_topMargin);
  unsigned int GetTopMargin() const;
  void    SetFont(CATUnicodeString i_Value);
  CATUnicodeString  GetFont()const;
  void       SetBold(CATBoolean i_Value);
  void       SetUnderline(CATBoolean i_Value);
  CATBoolean    GetUnderline() const;
  void       SetItalic (CATBoolean i_Value);
  void       SetTextColor(const CATVidColor& i_color); 
  // Get the text activate notification
  // ----------------------------------
  CATNotification *GetTextActivateNotification() const;
  // Get the mouse entry notification
  // ----------------------------------
  CATNotification* GetMouseEntryNotification() const;
  // Get the mouse leave notification
  // ----------------------------------
  CATNotification* GetMouseLeaveNotification() const;
  // Get the mouse release notification
  // ----------------------------------
  CATNotification* GetMouseReleaseNotification() const;
protected:
  virtual ~CATVidCtlText ();
  void UpdateRepresentation();
private:
  CATVidCtlText (CATVidCtlText &);
  CATVidCtlText& operator=(CATVidCtlText& original);
  void OnClick (CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
  void OnDoubleClick(CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);//3DPLM
  void OnMouseEntryCB (CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
  void OnMouseLeaveCB (CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
  void OnDragCB (CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
  /**
   * Open the hyperlink at given relative location and send the
   * `HyperlinkEvent' event and @ref CATVidHyperlinkNotification
   * notification.
   *
   * @param i_location the location in coordinate space of @ref
   * #_pTextGP widget.
   */
  void OpenHyperlinkAt(const CATMathPoint2Df &i_location);
 // Handle Mouse over event
  void OnMouseOver (CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
 // Create Tooltip
  void CreateTooltip(void);
protected:
  CATVidGPText*  _pTextGP;
  list <CATUnicodeString> _lineList;
private:
  CATVidTooltip *_pTooltip;
  CATVidGPSquare* _pSquareGP;
  CATVidColor _defaultTextColor;
  CATVidColor _color;
  CATBoolean _dragInProgress;
  CATVid::MouseCursorShape _cursorShape;
};

//-----------------------------------------------------------------------

#endif
