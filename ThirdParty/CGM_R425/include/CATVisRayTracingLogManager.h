//===================================================================
// COPYRIGHT Dassault Systemes 2020/01/16
//===================================================================
// CATVisRayTracingLogManager.cpp
// Header definition of class CATVisRayTracingLogManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2020/01/16 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATVisRayTracingLogManager_H
#define CATVisRayTracingLogManager_H
//-----------------------------------------------------------------------

#include "CATNotification.h"
#include "CATUnicodeString.h"

#include <memory>
#include <mutex>
#include <list>

#include "VisuRayTracingTools.h"

/**
* Specialized CATNotification class containing log information.
*/
class ExportedVisuRayTracingTools CATVisRayTracingLogNotification : public CATNotification
{
    CATDeclareClass;

public:
    /**
     * Information level for a log message.
     */
    enum class LogLevel {
        LOG_DEBUG = 0       //!< Message carry general information to developer (shown to developer).
        , LOG_DEBUG_WARNING //!< Message carry information when non fatal error occurred (shown to developer).
        , LOG_DEBUG_ERROR   //!< Message carry error information to developer (shown to developer).
        , LOG_PROGRESS      //!< Message carry information about progress of current operation
        , LOG_INFO          //!< Message carry general information (shown to user).
        , LOG_NEWSESSION    //!< Message arrives when new raytracing session has been started.
        , LOG_WARNING       //!< Message carry information clarifying current render result (shown to user).
        , LOG_ERROR         //!< Message carry information describing and error (shown to user).
        , LOG_FATAL         //!< Message carry information describing a fatal error (shown to user via dialog).
       };

    /**
     * Log information content.
     *
     * Note. Member message should contain WWH information. What the problem was. Why it happened. How to solve it.
     */
    struct ExportedVisuRayTracingTools LogInfo{
        mutable time_t timestamp = 0;           //!< Time this LogInfo was generated.
        LogLevel type = LogLevel::LOG_INFO;     //!< Information level for a log. 
        CATUnicodeString what = "";             //!< Message containing information about what happened.
        CATUnicodeString why = "";              //!< Message containing information about why it happened.
        CATUnicodeString how = "";              //!< Message containing information about how to solve it.
        CATUnicodeString reporter = "";         //!< Reporter.
        float progress = 0.0f;                  //!< Rendering progress if available.
        float samples = 0.0f;                   //!< Number of samples per pixel

        CATVisRayTracingLogNotification::LogInfo& CATVisRayTracingLogNotification::LogInfo::operator=(const CATVisRayTracingLogNotification::LogInfo& logInfo) {
            this->timestamp   = logInfo.timestamp;
            this->type        = logInfo.type;
            this->what        = logInfo.what;
            this->why         = logInfo.why;
            this->how         = logInfo.how;
            this->reporter    = logInfo.reporter;
            this->progress    = logInfo.progress;
            this->samples     = logInfo.samples;
            return *this;
        }
        
        static const CATUnicodeString& GetLogLevelAsString(LogLevel level);
        static const bool GetLogLevelFromString(const CATUnicodeString &iLogLevelString, LogLevel &oLogLevel);
        static const std::list<LogLevel> GetLogLevelList();
    };

    /**
    * Constructors/Destructors
    */
    CATVisRayTracingLogNotification();
    virtual ~CATVisRayTracingLogNotification();
    CATVisRayTracingLogNotification(const CATVisRayTracingLogNotification &) = delete;
    CATVisRayTracingLogNotification & operator=(const CATVisRayTracingLogNotification &) = delete;

    /**
     * Set the content of this notification.
     * @param message Log message.
     */
    void SetMessage(const CATVisRayTracingLogNotification::LogInfo &message) { _message = message; }

    /**
     * Get the content of this notification.
     * @return LogInfo object.
     */
    LogInfo GetMessage() { return _message; } 

private:
    LogInfo _message;
};

class CATVisRayTracingLogManagerTestService;
/**
* Implementation log manager. Using notification dispatching mechanism of the CATBaseUnknown.
*/
class ExportedVisuRayTracingTools CATVisRayTracingLogManager : public CATBaseUnknown
{
    CATDeclareClass;
    friend CATVisRayTracingLogManagerTestService;
public:
    /**
     * @brief Register callback method of a log notification subscriber.
     * @return CATCallback
     * @parameter CATBaseUnknown * subscriber Object implementing subscriber method.
     * @parameter CATSubscriberMethod method Adress of the subscriber method.
     * @return CARCallback Callback id of the registered subscriber method.
     */
    static CATCallback AddCallback(CATBaseUnknown* subscriber, CATSubscriberMethod method);


    /**
     * @brief Unregister callback method of a log notification subscriber.
     * @parameter CATBaseUnknown * iEventSubscriber Object implementing registered subscriber method.
     * @parameter CATCallback iCallback Id of an registered callback.
     */
    static void RemoveCallback(CATBaseUnknown* iEventSubscriber, CATCallback iCallback);

    /**
     * Dispatch log message to registered listeners.
     * @parameter const CATVisRayTracingLogNotification::LogInfo & message
     */
    static void Log(const CATVisRayTracingLogNotification::LogInfo& message);

    /**
     * Dispatch log message to registered listeners. Timestamp will be automatically attached
     * to the dispatched message.
     *
     * @parameter CATVisRayTracingLogNotification::LogLevel level Severety level of the log message.
     * @parameter const CATUnicodeString& String containing log message.
     */
    static void Log(CATVisRayTracingLogNotification::LogLevel type, const CATUnicodeString& what, const CATUnicodeString& why = "", const CATUnicodeString& how = "", const CATUnicodeString& reporter = "");

    /**
     * Dispatch log message regarding rendering process to registered listeners. Timestamp will be automatically attached
     * to the dispatched message.
     *
     * @parameter const CATUnicodeString& what String containing log message.
     * @parameter const CATUnicodeString& reporter String containing reporter id.
     * @parameter float progress Progress value from 0.0 to 1.0.
     */
    static void LogProgress(const CATUnicodeString& frameTime, const CATUnicodeString& elapsedTime, const CATUnicodeString& estimatedTime, const CATUnicodeString& reporter, float progress);

    /**
     * Dispatch log message regarding rendering process to registered listeners. Timestamp will be automatically attached
     * to the dispatched message.
     *
     * @parameter const CATUnicodeString& what String containing log message.
     * @parameter const CATUnicodeString& reporter String containing reporter id.
     * @parameter float progress Progress value from 0.0 to 1.0.
     * @parameter float Number of samples per pixel 
     */
    static void LogProgress(const CATUnicodeString& frameTime, const CATUnicodeString& elapsedTime, const CATUnicodeString& estimatedTime, const CATUnicodeString& reporter, float progress, float samples);

    virtual ~CATVisRayTracingLogManager();
private:
    // CATVisRayTracingLogManager is using singleton paradigm. Make constructor private.
    CATVisRayTracingLogManager();  

    void sendLog(const CATVisRayTracingLogNotification::LogInfo& message);
    static CATVisRayTracingLogManager& getInstance();

    // Multithreading
    std::mutex _mutex;

    // Instance
    static std::unique_ptr<CATVisRayTracingLogManager> _instance;
    static std::once_flag _onceFlag;
};


//-----------------------------------------------------------------------

#endif
