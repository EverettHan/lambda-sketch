//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/11/28
//===================================================================
// CATVidCtlBasicListItem.h
// Header definition of class CATVidCtlBasicListItem
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/11/28 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidCtlBasicListItem_H
#define CATVidCtlBasicListItem_H

#include "VisuDialog.h"
#include "CATVidCtl.h"
#include "CATUnicodeString.h"
#include "CATMathPoint2Df.h"

class CATPixelImage;

/**
 * A basic introspectable object to use as a data item inside a model.
 * This object can store a text attribute and an image attribute to use
 * as an icon.
 *
 * It's mainly used by the basic list view whose only purpose is to display
 * an icon associated to a text value.
 */
class ExportedByVisuDialog CATVidCtlBasicListItem : public CATBaseUnknown
{
  CATDeclareClass;
public:
  /** Default constructor */
  CATVidCtlBasicListItem ();

  /**
   * Constructor
   *
   * @param i_textLine text displayed by this item.
   *
   * @param i_pIcon icon displayed by this item.
   */
  explicit CATVidCtlBasicListItem(const CATUnicodeString & i_textLine, CATPixelImage * i_pIcon = NULL);

  /** Destructor */
  virtual ~CATVidCtlBasicListItem ();

  /**
   * Set the text value for this data item.
   *
   * @param i_text the text to set for this data item.
   */
  void SetText(const CATUnicodeString & i_text);

  /**
   * Get the text value associated to this data item.
   *
   * @returns the text value associated to this data item.
   */
  const CATUnicodeString & GetText() const;

  /**
   * Set the icon to associate to this data item.
   * AddRef is called on the given pointer.
   *
   * @param i_pIcon a pointer on the image to use as an icon
   */
  void SetIcon(CATPixelImage* i_pIcon);

  /**
   * Get the pointer on the image used as an icon.
   *
   * @returns the pointer on the image used as an icon
   */
  CATPixelImage * GetIcon() const;

  /**
   * Get the dimension of the displayed icon.
   *
   * @returns the dimension of the displayed icon.
   */
  const CATMathPoint2Df & GetIconDimension() const;

  /**
   * Set the selected flag.
   * 0 means that the item is not selected, other values
   * mean that the item is selected.
   *
   * @param i_selectedFlag the new value for the selected flag.
   */
  void SetSelectedFlag(int i_selectedFlag);

  /**
   * Get the value of the selected flag.
   *
   * @returns the value of the selected flag.
   */
  int GetSelectedFlag() const;

  /**
   * @return a new item, clone of this item. The @c SelectedFlag is 
   * reinitialized to @c FALSE.
   */
  CATVidCtlBasicListItem * CloneData();

private:
  // Copy constructor and assignement operator are disabled
  CATVidCtlBasicListItem (CATVidCtlBasicListItem &);
  CATVidCtlBasicListItem& operator=(CATVidCtlBasicListItem&);

  /**
   * Set the dimension of the icon.
   * This is set by the property of the same name
   * defined on the CATVidCtlBasicList control.
   * This member function is only dedicated to be used
   * by the friend class of CATVidCtlBaseListItem.
   *
   * @param i_dimension the new dimension of the icon
   */
  void SetIconDimension(const CATMathPoint2Df & i_dimension);

  /** The text to display */
  CATUnicodeString _text;
  /** The pixel image to use as icon */
  CATPixelImage * _pIcon;
  /** The displayed dimension of the icon */
  CATMathPoint2Df _iconDimension;
  /** The flag that is modified when the item is selected */
  int _selectedFlag;

  friend class CATVidCtlBasicList;

};

#endif
