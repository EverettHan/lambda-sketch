//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/25
//===================================================================
// CATOmxDefaultHttpClient.cpp
// Header definition of class CATOmxDefaultHttpClient
//===================================================================
//
// Usage notes:
// CATOmxSR<CATOmxHttpPost> spTempRequest(new CATOmxHttpPost(<url>), Steal);
// spTempRequest->SetServiceName("CloudView" or "3DSpace" or "VisuService" ...);
// {
//   CATOmxSR<CATOmxHttpEntity> spEntity(new CATOmxHttpStringEntity(<your query using MQL, JSON or any other language>), Steal);
//   spTempRequest->SetEntity(spEntity);
// }
// CATOmxSR<CATOmxHttpRequest> spRequest(spTempRequest);
//
// spRequest->AddHeader(<header 1>);
// ...
// spRequest->AddHeader(<header N>);
//
// CATOmxSR<CATOmxHttpResponse> spResponse;
// CATOmxSR<CATOmxHttpClient> spHttpClient(new CATOmxDefaultHttpClient(FALSE), Steal);// http of SYSTEM layer is used
//
// if (FAILED(spHttpClient->Execute(*spRequest, spResponse.AsPtrRef())) || !spResponse)
// {
//   return E_FAIL;
// }
//
// CATOmxHttpStatusLine httpStatus = spResponse->GetStatusLine();
// if (httpStatus.GetStatusCode() != 200)
// {
//   return E_FAIL;
// }
//
// CATOmxSR<CATOmxHttpEntity> spEntity(spResponse->GetEntity(), Steal);// MLK
// if (spEntity != NULL)
// {
//   CATOmxSR<CATIOmxInputStream> spInputStream;
//   CHK_SUCCESS_AND_RET_HR(spEntity->GetContent(spInputStream.AsPtrRef()));
//
//   CATOmxUTF8String utf8String;
//   CHK_SUCCESS_AND_RET_HR(CATOmxIOUtils::ToString(spInputStream, utf8String));
//   if (utf8String.length() == 0)
//   {
//     return E_FAIL;
//   }
// }
//===================================================================
//
// Provides a default http client implementation above http client provided by SYSTEM team.
//
//===================================================================
//  2018/05/25 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATOmxDefaultHttpClient_H
#define CATOmxDefaultHttpClient_H

#include "CATOmxHttp.h"
#include "CATOmxHttpClient.h"
#include "CATOmxSR.h"

class ExportedByCATOmxHttp CATOmxDefaultHttpClient: public CATOmxHttpClient
{
public:
  CATOmxDefaultHttpClient(CATBoolean iCompressionStatus);
  virtual ~CATOmxDefaultHttpClient();

  /**
  * if GetServiceName made on CATOmxHttpRequest returns NotDefined(CATAsyncHttpRequest), authentication is not managed
  * if GetServiceName made on CATOmxHttpRequest returns 3DSpace(CATAsyncHttpOn3DSpaceRequest), authentication is managed : we use DSYSysIsTimeout3DSpace option, Connect on provider is made
  * if GetServiceName made on CATOmxHttpRequest returns Visu service(CATAsyncHttpOnVisuServiceRequest), authentication is managed : we use DSYSysIsTimeoutOther option, Connect on provider does nothing
  * if GetServiceName made on CATOmxHttpRequest returns CloudView(CATAsyncHttpOnCloudViewRequest), authentication is managed : we use DSYSysIsTimeoutOther option, Connect on provider does nothing
  */
  HRESULT Execute(CATOmxHttpRequest& iRequest, CATOmxHttpResponse*& oResponse);

private:
  CATOmxDefaultHttpClient(CATOmxDefaultHttpClient &);
  CATOmxDefaultHttpClient& operator=(CATOmxDefaultHttpClient&);

  CATOmxSR<CATOmxHttpClient> _spHttpClient;

  CATBoolean _CompressionStatus;
};

#endif
