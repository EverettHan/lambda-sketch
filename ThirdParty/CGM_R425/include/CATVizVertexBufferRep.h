// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATVizVertexBufferRep.h
// Header definition of CATVizVertexBufferRep
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  svq
//===================================================================
#ifndef CATVizVertexBufferRep_H
#define CATVizVertexBufferRep_H

#include "SGInfra.h"
#include "CATVizPtrList.h"

#include "CATUnicodeString.h"
#include "CAT3DRep.h"
#include "CATVizPrimitive.h"
#include "CATVizPrimitiveSet.h"
#include "CATVisMacroForInterfaces.h"
#include "CATCGMScaleCategoryDef.h"

class CATVizVertexBufferRepIVisSG3DBodyBOAImpl;
class IVisSG3DBody;

class CATVisGPUStorageManager;
class CATVizVertexBuffer;
class CATVizProgressiveVertexBuffer;
class CATViz3DFace;
class CATViz3DEdge;
class CATViz3DLine;
class CATViz3DLODFace;
class CATVizUV3DFaceVBO;
class CATVizUV3DStdEdgeVBO;
class CATStreamer;
class CATRepPath;
class CAT3DGeomRep;
class CATCGRSetting;
class CATMappingOperator;


typedef struct _TemporarySwitchData
{
   _TemporarySwitchData()
   {
      Init();
   };

   ~_TemporarySwitchData()
   {
      free(lods);
      free(lodsAttributes);
      free(sets);
      Init();
   };

   void Init()
   {
      nbLODs               = 0;
      lods                 = NULL;
      lodsAttributes       = NULL;
      nbSets               = 0;
      sets                 = NULL;
      vertexBuffer         = NULL;
      nextLODPosInStreamer = -1;
   };

   void AddLOD(CATViz3DFace * iLOD, CATGraphicAttributeSet const&  iLODAttribute)
   {
      CATViz3DFace ** tmp_lods = (CATViz3DFace **)realloc(lods, (nbLODs+1)*sizeof(CATViz3DFace *));
	  if (tmp_lods) lods = tmp_lods; // static code analysis
      CATGraphicAttributeSet * tmp_lodsAttributes = (CATGraphicAttributeSet *)realloc(lodsAttributes, (nbLODs+1)*sizeof(CATGraphicAttributeSet ));
	  if (tmp_lodsAttributes) lodsAttributes = tmp_lodsAttributes; // static code analysis
      lods[nbLODs]           = iLOD;
      lodsAttributes[nbLODs] = iLODAttribute;
      nbLODs++;
   };

   void AddSet(CATVizPrimitiveSet * iSet)
   {
      CATVizPrimitiveSet ** tmp_sets = (CATVizPrimitiveSet **)realloc(sets, (nbSets+1)*sizeof(CATVizPrimitiveSet *));
	  if (tmp_sets) sets = tmp_sets; // static code analysis
      sets[nbSets] = iSet;
      nbSets++;
   };

   void SetLODs(unsigned int iNbLODs, CATViz3DFace ** iLODs, CATGraphicAttributeSet * iLODsAttributes)
   {
      nbLODs = iNbLODs;
      lods = iLODs;
      lodsAttributes = iLODsAttributes;
   }

   void SetSets(unsigned int iNbSets, CATVizPrimitiveSet ** iSets)
   {
      nbSets = iNbSets;
      sets = iSets;
   }

   void SetVertexBuffer(CATVizProgressiveVertexBuffer * iVertexBuffer)
   {
      vertexBuffer = iVertexBuffer;
   }

   CATVizProgressiveVertexBuffer * GetVertexBuffer() const
   {
      return vertexBuffer;
   }

public:
   unsigned int                     nbLODs;
   CATViz3DFace **                  lods;
   CATGraphicAttributeSet *         lodsAttributes;
   unsigned int                     nbSets;
   CATVizPrimitiveSet **            sets;
   int                              nextLODPosInStreamer;

private:
   CATVizProgressiveVertexBuffer *  vertexBuffer;

} TemporarySwitchData;

//-----------------------------------------------------------------------

/**
* Describe your class here.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
*/
class ExportedBySGInfra CATVizVertexBufferRep : public CAT3DRep
{
   CATDeclareClass;
   friend class CATDmuStreamVertexBufferRep;
   friend class SGCGRStreamerForVizVertexBufferRep;
   friend class CATVizUV3DRep;
   friend class CATVizSurfacicRepProxy;

public:
   CATVisDeclarePublicInterfaceAdhesion(CATVizVertexBufferRep, IVisSG3DBody, CATVizVertexBufferRepIVisSG3DBodyBOAImpl);

   // Standard constructors and destructors
   static CATVizVertexBufferRep* CreateRep();
   static CATVizVertexBufferRep* CreateRep(CATVizVertexBuffer *vertexBuffer, unsigned int nbSets = 0, CATVizPrimitiveSet **sets = NULL);

private:

   /** @deprecated R417 : Use CreateRep instead.*/
   CATVizVertexBufferRep();
   /** @deprecated R417 : Use CreateRep instead.*/
   CATVizVertexBufferRep (CATVizVertexBuffer *vertexBuffer, unsigned int nbSets = 0, CATVizPrimitiveSet **sets = NULL);

public:

   virtual ~CATVizVertexBufferRep();
   
   INLINE CATVizVertexBuffer * GetVertexBuffer() const;
   void SetVertexBuffer(CATVizVertexBuffer * iVB);

   // Sets
   void SetSets(unsigned int iNbSets, CATVizPrimitiveSet ** iSets);
   INLINE CATVizPrimitiveSet *SearchSet(CATVizGeomType iType) const;
   INLINE unsigned int GetNbSets() const;
   INLINE CATVizPrimitiveSet * GetSet(unsigned int i) const;
   /**
    * DEPRECATED: ambiguous! rather use SearchSet() 
    **/
   INLINE CATVizPrimitiveSet * GetSet(CATVizGeomType iType) const { return SearchSet(iType); }


   // LODs
   INLINE void AddLOD(CATViz3DFace * lod,  float lodSag, const CATGraphicAttributeSet & att);
   INLINE unsigned int NumberOfLODs();
   INLINE CATViz3DFace *LODFace(unsigned int index);
   //DEPRECATED : Use GetLODAttribute instead
#ifndef CATVIZVERTEXBUFFERREP_REMOVE_DEPRECATED
   INLINE CATGraphicAttributeSet *LODAttribute(unsigned int index);
#endif

   INLINE HRESULT GetLODAttribute(unsigned int index,CATGraphicAttributeSet& oGAS);

   INLINE float LODSag(unsigned int index);
   INLINE float GetSag();
   INLINE void SetAllocMode(int iAllocMode);
   INLINE int  GetAllocMode();
	void SetSag(float sag);

   INLINE void SetScale(CATCGMScaleCategory iScale);
   INLINE CATCGMScaleCategory GetScale() const;

   // Inheritance Streaming
   virtual void Stream(CATStreamer& iStr, int savetype=0);
   virtual void UnStream(CATStreamer& iStr);
   
   // Progressive LODs streaming
   virtual int  StreamLODLevel  (CATStreamer & oStr, int iLevel, const float * iTargetLODSags, float & ioRealMaxLevelSag, unsigned int & iLastMaxIndex);
   virtual int  UnStreamLODLevel(CATStreamer & iStr, int iLevel,unsigned int & ioCurrentNbVertices, unsigned int & ioCurrentNbNormals, unsigned int nbVerticesToUnstream, unsigned int nbNormalsToUnstream, TemporarySwitchData * oTemporaryData = NULL);

   // LightSceneGraph streaming
   virtual void StreamFaces  (CATStreamer & oStr, unsigned int iLastMaxIndex);
   virtual void UnStreamFaces(CATStreamer & iStr,unsigned int & ioCurrentNbVertices, unsigned int & ioCurrentNbNormals, unsigned int nbVerticesToUnstream, unsigned int nbNormalsToUnstream, TemporarySwitchData * oTemporaryData = NULL);
   virtual void StreamOtherSets  (CATStreamer & oStr, bool iSaveLineic, bool iSaveEdge, bool iSaveIsopars);
   virtual void UnStreamOtherSets(CATStreamer & iStr, TemporarySwitchData * oTemporaryData = NULL);

   // Drawing
   virtual void DrawShading (CATRender &iRender, int iInside);
   virtual void DrawPath (CATRender &  render, int iInside, CATRepPath & path);
   
   // Update texture coordinates
   virtual void UpdateTextureCoordinates (CATMappingOperator* iOperator = NULL);

   // Is this class an instance of CATVizSurfacicRepProxy ?
   virtual int IsAProxy();
   
   // Computes the rep's dominant attribute
   const CATGraphicAttributeSet * DominantAttribute() const;


   // index decoding
   CATVizPrimitive *RetrievePrimitiveFromDrawingIndex(unsigned int index);
   INLINE int GetFirstAvailableLOD();
   INLINE int GetNbLODsUnStreamed();

   virtual int  GetRepPosInStreamer();
   virtual void SetRepPosInStreamer(int pos);

	virtual unsigned int GetSizeInBytes(int iIncludeStructuralSize = 1);

  // Outlines color
  virtual void OutlinesAttribute(const CATRender &iRender, CATGraphicAttributeSet &oGAS);

  // VBO
  INLINE void SetVBODrawable(bool iActive);
  CATBoolean DoUpdateVBOFaces(CATVisGPUStorageManager * iStorageManager, CATVizUV3DFaceVBO * iFace);
  CATBoolean DoUpdateVBOEdges(CATVisGPUStorageManager * iStorageManager, CATVizUV3DStdEdgeVBO * iEdge);
  CATBoolean DoUpdateVBOVertexBuffers(CATVisGPUStorageManager * iStorageManager, CATVizVertexBuffer * iVB);

protected:
  virtual HRESULT ActivateRefinement(CATRender & iRender, int inside);

   virtual const vDrawInformation* GetDrawInformation();

    // VB
   CATVizVertexBuffer *_vertexBuffer;
   
   // LODs
   unsigned int _nbLODFaces   :8;
   unsigned int _allocMode    :1;
   unsigned int _nbSets       :4;
   unsigned int _exploded     :1;
   unsigned int _isVBODrawable :1;
 
   CATViz3DFace ** _lods;
   CATGraphicAttributeSet * _lodsAttributes;
   mutable const CATGraphicAttributeSet *  _dominantAttribute;

   union
	{
		float *_sags;
		double _sag;
	};

   CATCGMScaleCategory _scale;

   // CATVizGeomTypes
   CATVizPrimitiveSet **_sets;

   
   virtual HRESULT Explode();

private:
  friend class CATVizVertexBufferRepIVisREDrawableBOAImpl;
   
   HRESULT DrawFaces (CATRender & iRender, unsigned int & offset, int isPathIndex = 0, int isFurtive = 0);
   HRESULT DrawEdges (CATRender & iRender, unsigned int & offset, int isPathIndex = 0, int iFurtif = 0);
   HRESULT DrawPoints(CATRender & iRender, unsigned int & offset, int isPathIndex = 0);
   HRESULT DrawWireEdges(CATRender & iRender, unsigned int & offset, int isPathIndex = 0);
   HRESULT DrawOther (CATRender & iRender, unsigned int & offset, int isPathIndex = 0);
   
   void GetEdgeAttribute(const CATGraphicAttributeSet * iAtt, CATVizGeomType iType, CATRender & iRender, CATGraphicAttributeSet & oAtt, bool& oTransparEdge);
   
   /** @nodoc */
   virtual void UpdateTextureCoordinatesWithLegacy(CATMappingOperator* iOperator, CATULONG32 iLayer, CATULONG32 iInherit, const CATUnicodeString& iTCkey = "DEFAULT_TC_SET");

   CATVizVertexBufferRep (CATVizVertexBufferRep &);
   CATVizVertexBufferRep & operator=(CATVizVertexBufferRep &);

};

INLINE CATVizVertexBuffer * CATVizVertexBufferRep::GetVertexBuffer() const
{
   return _vertexBuffer;
}

INLINE CATVizPrimitiveSet * CATVizVertexBufferRep::SearchSet(CATVizGeomType iType) const
{
   if(!_sets) return NULL;
   for(unsigned int i=0;i<_nbSets;i++)
   {
      if(_sets[i] && (_sets[i]->GetGeomType() == iType))
         return _sets[i];
   }
   return NULL;
}

INLINE unsigned int CATVizVertexBufferRep::GetNbSets() const
{
   return _nbSets;
}

INLINE CATVizPrimitiveSet * CATVizVertexBufferRep::GetSet(unsigned int i) const
{
   return _sets[i];
}

INLINE void CATVizVertexBufferRep::AddLOD(CATViz3DFace * lod,  float lodSag, const CATGraphicAttributeSet & att)
{
   if(!lod)
      return;

   CATViz3DFace ** lods = new CATViz3DFace * [_nbLODFaces+1];
   float * lodSags = new float[_nbLODFaces+2]; //  Include mesh sag
   CATGraphicAttributeSet * lodAtts = new CATGraphicAttributeSet [_nbLODFaces+1];
   if(_nbLODFaces)
   {
      memcpy(lods, _lods, _nbLODFaces * sizeof(CATViz3DFace *));
      memcpy(lodSags, _sags, (_nbLODFaces + 1)*sizeof(float));
      memcpy(lodAtts, _lodsAttributes, (_nbLODFaces + 1)*sizeof(CATGraphicAttributeSet));

      delete [] _lods;
      delete [] _lodsAttributes;
      delete [] _sags;

      _lods = 0;
      _lodsAttributes = 0;
      _sags = 0;
   }
   else
      lodSags[0] = GetSag();

   lods[_nbLODFaces] = lod;
   lodAtts[_nbLODFaces] = att;
   lodSags[_nbLODFaces+1] = lodSag;

   _lods = lods;
   _sags = lodSags;
   _lodsAttributes = lodAtts;
   _nbLODFaces++;
}

INLINE unsigned int CATVizVertexBufferRep::NumberOfLODs()
{
   return _nbLODFaces;
}

INLINE CATViz3DFace * CATVizVertexBufferRep::LODFace(unsigned int index)
{
   if(index < _nbLODFaces)
      return _lods[index];
   return NULL;
}

INLINE HRESULT CATVizVertexBufferRep::GetLODAttribute(unsigned int index,CATGraphicAttributeSet& oGAS)
{
   if(index < _nbLODFaces)
   {
      oGAS =_lodsAttributes[index];
      return S_OK;
   }
   return E_FAIL;
}

#ifndef CATVIZVERTEXBUFFERREP_REMOVE_DEPRECATED

INLINE CATGraphicAttributeSet * CATVizVertexBufferRep::LODAttribute(unsigned int index)
{
   if(index < _nbLODFaces)
      return &_lodsAttributes[index];
   return NULL;
}

#endif

INLINE float CATVizVertexBufferRep::LODSag(unsigned int index)
{
   if(index < _nbLODFaces)
      return _sags[index+1];
   return 0;
}

INLINE float CATVizVertexBufferRep::GetSag()
{
   if (_nbLODFaces && _sags)
      return _sags[0];
   else
      return static_cast<float> (_sag);
}

INLINE void CATVizVertexBufferRep::SetScale(CATCGMScaleCategory iScaleCategory)
{
   _scale = iScaleCategory;
}

INLINE CATCGMScaleCategory CATVizVertexBufferRep::GetScale() const
{
   return _scale;
}

INLINE void CATVizVertexBufferRep::SetAllocMode(int iAllocMode)
{
   _allocMode = iAllocMode;
   for(unsigned int i=0;i<_nbSets;i++)
   {
      if (_sets[i])
      _sets[i]->SetAllocMode(iAllocMode);
   }
}

INLINE int CATVizVertexBufferRep::GetAllocMode()
{
   return _allocMode;
}

INLINE int CATVizVertexBufferRep::GetFirstAvailableLOD()
{
   unsigned int firstAvailableLOD = 0;
   while(!LODFace(firstAvailableLOD) && firstAvailableLOD < NumberOfLODs())
      firstAvailableLOD++;

   return firstAvailableLOD;
}

INLINE int CATVizVertexBufferRep::GetNbLODsUnStreamed()
{
   unsigned int nbLODsUnStreamed = 0;
   while(LODFace(NumberOfLODs()-1-nbLODsUnStreamed) && nbLODsUnStreamed <= NumberOfLODs())
      nbLODsUnStreamed++;

   return nbLODsUnStreamed;
}

INLINE void CATVizVertexBufferRep::SetVBODrawable(bool iActive)
{
  _isVBODrawable = iActive;
}

#endif
