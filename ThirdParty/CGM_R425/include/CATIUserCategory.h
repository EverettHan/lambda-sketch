// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIUserCategory.h
// Define the CATIUserCategory interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2005  Creation: Code generated by the CAA wizard  phb
//===================================================================
#ifndef CATIUserCategory_H
#define CATIUserCategory_H

/**
* @level Protected
* @usage U3 
*/

#include "CATInteractiveInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATListOfCATUnicodeString.h"

class CATString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATInteractiveInterfaces IID IID_CATIUserCategory;
#else
extern "C" const IID IID_CATIUserCategory ;
#endif

class CATIDeployedWorkbench;

//------------------------------------------------------------------
/**
* Interface representing a User Category.
* <p>
* (submenu structuring workbenches in the Start Menu).
* <br>
* @see CATIDeployedWorkbenchesManager
*/
class ExportedByCATInteractiveInterfaces CATIUserCategory: public CATBaseUnknown
{
	CATDeclareInterface;

public:
	/**
	* Retrieves the Identifier of the User Category.
	* <br>
	* (to retrieve resource/message catalogs, and maybe more)
	* @param oId
	*	The identifier of the user category
	* @return
	*	<b>S_OK</b> in case of success
	*/
	virtual HRESULT GetId( CATString& oId ) = 0;

	/**
	* Retrieves the Workbenches belonging to the User Category.
	* @param oLstWb
	*	The workbenches belonging to the user category
	* @return
	*	<b>S_OK</b> in case of success (but list may be empty)
	*/
	virtual HRESULT GetWorkbenches( CATLISTV(CATBaseUnknown_var)& oLstWb ) = 0;

	/**
	* Add a workbench to the User Category.
	* @param iWbId
	*	The identifier of the workbench to add
	* @param opDwb
	*	The added workbench (if operation successful)
	* @param iWorkshopName
	*	The identifier of the workshop to which the workbench will be hooked
	* @param iFactoryItf
	*	The identifier of the factory interface to which the workbench creation will be asked
	* @param iLstNames
	*	The list of additional informations' names (<b><i>name</i></b>[i]=value[i])
	* @param iLstValues
	*	The list of additional informations' values (name[i]=<b><i>value</i></b>[i])
	* @return
	*	<b>S_OK</b> in case of success
	*	<b>E_FAIL</b> in case of failure
	*/
	virtual HRESULT AddWorkbench
		( const CATString&					iWbId
		, CATIDeployedWorkbench*&			opDwb
		, const CATString*					iWorkshopName = NULL
		, const CATString*					iFactoryItf = NULL
		, const CATListOfCATUnicodeString*	iLstNames = NULL
		, const CATListOfCATUnicodeString*	iLstValues = NULL
		) = 0;

	/**
	* Remove a workbench from the User Category.
	* @param iWbId
	*	The identifier of the workbench to remove
	* @return
	*	<b>S_OK</b> in case of success
	*	<b>E_FAIL</b> in case of failure
	*/
	virtual HRESULT RemoveWorkbench( const CATString& iWbId ) = 0;


	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler (CATIUserCategory, CATBaseUnknown);

#endif
