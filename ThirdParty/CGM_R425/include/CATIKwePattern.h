// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIKwePattern.h
// Define the CATIKwePattern interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jul 2004  Creation: Code generated by the CAA wizard  tvq
//===================================================================
#ifndef CATIKwePattern_H
#define CATIKwePattern_H

#include "KnowledgeItfCPP.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItfCPP IID IID_CATIKwePattern;
#else
extern "C" const IID IID_CATIKwePattern ;
#endif

class CATIList_var;

//------------------------------------------------------------------

/**
* Describe the functionality of your interface here
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
*/
class ExportedByKnowledgeItfCPP CATIKwePattern: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	
	virtual HRESULT Execute(int withProgressTask) = 0;
	
	// en principe appel interne à Execute...
	// ca peut peut etre servir dans d'autres cas que le pattern expressionnel?
	//	  virtual HRESULT Init() = 0;
	//	  virtual HRESULT CommitModifications() = 0;
	
	// gestion des informations à enregistrer pendant l'execution
	virtual HRESULT RegisterInstantiationBegan(const CATIList_var &liste, int index, const CATBaseUnknown_var &object) = 0;
	virtual HRESULT RegisterInstantiationFinished(const CATBaseUnknown_var &object) = 0;
	virtual HRESULT RegisterKeepInstance(const CATBaseUnknown_var &object) = 0;
	virtual HRESULT RegisterReplaceInstance(const CATBaseUnknown_var &newObject, const CATBaseUnknown_var &oldObject) = 0;
	
	// gestion des listes
	virtual HRESULT GetLists(CATLISTV(CATBaseUnknown_var) & ioLists) = 0;
	virtual HRESULT CreateNewList(CATIList_var &result) = 0;
	virtual HRESULT RemoveList(int index) = 0;
	
	// copie des listes en début d'execute (les listes originales sont vidées)
	virtual HRESULT GetVolatileCopy(const CATIList_var &iList, CATIList_var &oCopy) = 0;
	
	enum UpdateMethod
	{
		Manual = 0,
		BeforeRootUpdate
	};
	
	virtual HRESULT GetUpdateMethod(CATIKwePattern::UpdateMethod &method) = 0;
	virtual HRESULT SetUpdateMethod(CATIKwePattern::UpdateMethod method) = 0;
	
	enum OnDeletionBehaviour
	{
		DeleteInstances = 0,
		KeepInstances 
	};
	
	virtual HRESULT GetOnDeletionBehaviour(CATIKwePattern::OnDeletionBehaviour &behaviour) = 0;
	virtual HRESULT SetOnDeletionBehaviour(CATIKwePattern::OnDeletionBehaviour behaviour) = 0;

  	enum PointingReplaceStrategy
	{
		Referencing = 0,
		Absolute
	};

  virtual HRESULT GetPointingReplaceStrategy(CATIKwePattern::PointingReplaceStrategy &strategy) = 0;
  virtual HRESULT SetPointingReplaceStrategy(CATIKwePattern::PointingReplaceStrategy strategy) = 0;

  enum MemoryPerformance
  {
	LowWithUndo = 0,
	HighWithNoUndo
  };

  virtual HRESULT SetMemoryPerformanceMode(CATIKwePattern::MemoryPerformance iMode) = 0;
  virtual HRESULT GetMemoryPerformanceMode(CATIKwePattern::MemoryPerformance &oMode) = 0;

  enum UIMode
  {
	  WithStopPanel = 0,
	  WithoutStopPanel
  };

  virtual HRESULT SetUIMode(CATIKwePattern::UIMode iMode) = 0;
  virtual HRESULT GetUIMode(CATIKwePattern::UIMode &oMode) = 0;

  enum ExecutionMode
  {
	  Complete = 0,
	  StopAtFirstUpdateError
  };
  
  virtual HRESULT SetExecutionMode(CATIKwePattern::ExecutionMode iMode) = 0;
  virtual HRESULT GetExecutionMode(CATIKwePattern::ExecutionMode &oMode) = 0;

  // not persistent
  // used to get/set "root product" for a proper behaviour of templates generated
  // in a batch mode, SetRoot call is recommanded
  // in an interactive mode, root is deduced from CATFrmEditor if not set...
  virtual HRESULT SetRoot(const CATBaseUnknown_var &iRoot) = 0;
  virtual HRESULT GetRoot(CATBaseUnknown_var &oRoot) = 0;


  virtual HRESULT LockInstance(const CATBaseUnknown_var &iObject) = 0;
  virtual HRESULT UnlockInstance(const CATBaseUnknown_var &iObject) = 0;
  virtual HRESULT IsInstanceLocked(const CATBaseUnknown_var &iObject) = 0;

  virtual HRESULT GetLockedInstancesList(CATIList_var &oList) = 0;

  virtual HRESULT SetUpgradeModeForExecution() = 0;
  virtual HRESULT GetUpgradeModeForExecution(int &upgradeMode) = 0;
	
	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};
CATDeclareHandler(CATIKwePattern, CATBaseUnknown);
//------------------------------------------------------------------

#endif
