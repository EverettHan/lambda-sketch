// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMCompassEventModel.h
// Define the CATIPLMCompassEventModel interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2008  Creation: Code generated by the CAA wizard  IOD
//===================================================================
#ifndef CATIPLMCompassEventModel_H
#define CATIPLMCompassEventModel_H

#include "CATPLMCompassStyle.h"
#include "CATBaseUnknown.h"
#include "CATAfrItf.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATAfrItf IID IID_CATIPLMCompassEventModel;
#else
extern "C" const IID IID_CATIPLMCompassEventModel ;
#endif

//------------------------------------------------------------------

/**
* Interface representing xxx.
*
* <br><b>Role</b>: Components that implement
* CATIPLMCompassEventModel are ...
* <p>
* Do not use the CATIPLMCompassEventModel interface for such and such

*
* @example
*  // example is optional
*  CATIPLMCompassEventModel* currentDisplay = NULL;
*  rc = window-&gt;QueryInterface(IID_CATIPLMCompassEventModel,
*                                     (void**) &amp;currentDisplay);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByCATAfrItf CATIPLMCompassEventModel: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * Remember that interfaces define only virtual pure methods.
     * Dont forget to document your methods.
     * <dl>
     * <dt><b>Example:</b>
     * <pre>
     *       
           *   MyFunction does this and that
           *   @param Arg1
           *      The first argument of MyFunction.
           *   @return
           *      Error code of function.
           * 
     * virtual int MyFunction (int Arg1) = 0;
     * </pre>
     * </dl>
     */

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
