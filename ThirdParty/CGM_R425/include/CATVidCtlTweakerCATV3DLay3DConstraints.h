// COPYRIGHT Dassault Systemes 2012
//===================================================================
//
// CATVidCtlTweakerCATV3DLay3DConstraints.h
// Header definition of CATVidCtlTweakerCATV3DLay3DConstraints
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2012  Creation: Code generated by the CAA wizard  jv8
//===================================================================
#ifndef CATVidCtlTweakerCATV3DLay3DConstraints_H
#define CATVidCtlTweakerCATV3DLay3DConstraints_H

#include <VisuImmersive3D.h>
#include <CATVidCtlTweaker.h>
#include <CATV3DLay3DConstraints.h>
#include <CATBasicBoxing.h>
#include <CATV3DBoxing.h>
#include <CATV3DOrientation.h>

class ExportedByVisuImmersive3D CATVidCtlTweakerCATV3DLay3DConstraints : public CATVidCtlTweaker
{
  CATDeclareTweaker(CATV3DLay3DConstraints);

public:

  // Standard constructors and destructors
  CATVidCtlTweakerCATV3DLay3DConstraints();

  // Overriden methods
  virtual void CATSYPModifyEditedProperties();

  void SetOrientation(CATV3DOrientation::Orientation i_Orientation);
  CATV3DOrientation::Orientation GetOrientation() const;

  void SetAxisOriginX(double i_value);
  double GetAxisOriginX() const;
  void SetAxisOriginY(double i_value);
  double GetAxisOriginY() const;
  void SetAxisOriginZ(double i_value);
  double GetAxisOriginZ() const;

  void SetAxisFirstDirectionX(double i_value);
  double GetAxisFirstDirectionX() const;
  void SetAxisFirstDirectionY(double i_value);
  double GetAxisFirstDirectionY() const;
  void SetAxisFirstDirectionZ(double i_value);
  double GetAxisFirstDirectionZ() const;

  void SetAxisSecondDirectionX(double i_value);
  double GetAxisSecondDirectionX() const;
  void SetAxisSecondDirectionY(double i_value);
  double GetAxisSecondDirectionY() const;
  void SetAxisSecondDirectionZ(double i_value);
  double GetAxisSecondDirectionZ() const;

  void SetAxisThirdDirectionX(double i_value);
  double GetAxisThirdDirectionX() const;
  void SetAxisThirdDirectionY(double i_value);
  double GetAxisThirdDirectionY() const;
  void SetAxisThirdDirectionZ(double i_value);
  double GetAxisThirdDirectionZ() const;

  void SetTranslationX(double i_value);
  double GetTranslationX();
  void SetTranslationY(double i_value);
  double GetTranslationY();
  void SetTranslationZ(double i_value);
  double GetTranslationZ();

  void SetBoundingSphereRadiusInMM(double i_radiusInMM);
  double GetBoundingSphereRadiusInMM()const;

  void SetZoomScaling(double i_zoomScaling);
  double GetZoomScaling() const;

  void SetKeepDimensionPxFlag(int i_keepDimensionPxFlag);
  int GetKeepDimensionPxFlag() const;

  /*void SetResetFathersRotationsFlag(int i_flag);
  int GetResetFathersRotationsFlag() const;*/

  void SetXAngleInDegree(double i_angle);
  double GetXAngleInDegree() ;
  void SetYAngleInDegree(double i_angle);
  double GetYAngleInDegree() ;
  void SetZAngleInDegree(double i_angle);
  double GetZAngleInDegree() ;

  void SetXAngleInDegreeAbsoluteLimit1(double i_angleInDegree1);
  double GetXAngleInDegreeAbsoluteLimit1() const;

  void SetXAngleInDegreeAbsoluteLimit2(double i_angleInDegree2);
  double GetXAngleInDegreeAbsoluteLimit2() const;

  void SetUseXAngleAbsoluteLimitsFlag(int i_flag);
  int GetUseXAngleAbsoluteLimitsFlag() const;

protected:

  virtual ~CATVidCtlTweakerCATV3DLay3DConstraints ();

private:

  // Copy constructor and equal operator
  CATVidCtlTweakerCATV3DLay3DConstraints (CATVidCtlTweakerCATV3DLay3DConstraints &);
  CATVidCtlTweakerCATV3DLay3DConstraints& operator=(CATVidCtlTweakerCATV3DLay3DConstraints& original);
};

#endif
