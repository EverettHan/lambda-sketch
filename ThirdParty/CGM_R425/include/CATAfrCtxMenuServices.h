//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2013/04/25
//===================================================================
// CATAfrCtxMenuServices.cpp
// Header definition of class CATAfrCtxMenuServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/04/25 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAfrCtxMenuServices_H
#define CATAfrCtxMenuServices_H

#include "CATAfrFoundation.h"
#include "CATString.h"
#include "CATEventSubscriber.h" 
#include "CATCmdAccess.h"
#include "CATCmdContainer.h"
#include "CATViewer.h"
#include "CATCollec.h"
#include "CATSysWeakRef.h"
#include "CATNotification.h"

//-----------------------------------------------------------------------

class ExportedByCATAfrFoundation CATAfrCtxMenuServices : public CATEventSubscriber
{
  CATDeclareClass;
public :

  /*enum ViewerForCtxMenu{
    AllViewers,
    TopBarViewerOnly,
    SpecificViewer,
  };*/

  class ExportedByCATAfrFoundation AfrGlobalCtxMenuNotification :  public CATNotification
  {
      CATDeclareClass;
      public:
          explicit AfrGlobalCtxMenuNotification(CATBaseUnknown* ipCtxMenu);
          virtual ~AfrGlobalCtxMenuNotification() = default;
          AfrGlobalCtxMenuNotification(AfrGlobalCtxMenuNotification &) = delete;
          AfrGlobalCtxMenuNotification& operator=(AfrGlobalCtxMenuNotification&) = delete;
          CATBaseUnknown * GetCtxMenu() const;
          
      private:
          CATBaseUnknown * _pCtxMenu;
  };

  /** @nodoc 
    * This method can only be used by the AFR Team
    */
  static CATCallback SubscribeToGlobalCtxMenuNotification(CATBaseUnknown * iEventSubscriber, CATSubscriberMethod iMethodToCall);

  /** @nodoc
    * This method can only be used by the AFR Team
    */
  static void UnsubscribeToGlobalCtxMenuNotification(CATBaseUnknown * iEventSubscriber, CATCallback iCallback);

  static int AddCtxSubMenu( const CATString & iName,
                            const CATUnicodeString & iTitle,
                            CATViewer* iViewer = NULL,
                            const CATString & iNextName = "", 
                            const CATString & iFatherName ="");

  static int AddCtxButton(const CATString & iName, 
                          const CATString & iHeaderID,
                          CATViewer* iViewer = NULL,
                          const CATString & iNextName = "", 
                          const CATString & iSubMenuName = "");
  
  static int AddCtxCheckButton( const CATString & iName, 
                                const CATString & iCheckHeaderID,
                                CATViewer * iViewer = NULL,
                                const CATString & iNextName = "", 
                                const CATString & iSubMenuName = "");

  static int AddCtxSeparator( const CATString & iName,
                              CATViewer * iViewer = NULL,
                              const CATString & iNextName = "", 
                              const CATString & iSubMenuName = "");

  static int RemoveCtxSubMenu(const CATString & iName,
                                CATViewer* iViewer = NULL);

  static int RemoveCtxButton( const CATString & iName, 
                              CATViewer* iViewer = NULL);
  
  static int RemoveCtxCheckButton( const CATString & iName, 
                                   CATViewer* iViewer = NULL);

   static int RemoveCtxSeparator( const CATString & iName, 
                                   CATViewer* iViewer = NULL);

   static CATAfrCtxMenuServices* GetCtxMenuServicesInstance();

private:
  // Standard constructors and destructors
  // -------------------------------------
  CATAfrCtxMenuServices();
  virtual ~CATAfrCtxMenuServices();

  // Copy constructor and equal operator
  // -----------------------------------
  CATAfrCtxMenuServices (CATAfrCtxMenuServices &);
  CATAfrCtxMenuServices& operator=(CATAfrCtxMenuServices&);

  // Other private methods
  // -----------------------------------

  int RemoveCtxMenuElementInModel(const CATString & iName,
                                 CATViewer*        iViewer,
                                 CATCmdAccess    * iFatherAccess);

  CATCmdAccess* SearchCtxMenuElementInModel(const CATString & iName,
                                            CATCmdAccess    * iFatherAccess);

  void BuildCtxMenuRepCB( CATCallbackEvent   iPublishedEvent,
                          void             * iPublishingObject,
                          CATNotification  * iNotification,
                          CATSubscriberData  iClientData,
                          CATCallback        iCallback);

  void AddViewerToListen(CATViewer * iViewer);

  int AddButton(const CATString & iName, 
                const CATString & iHeaderID,
                CATViewer* iViewer = NULL,
                const CATString & iNextName = "", 
                const CATString & iSubMenuName = "");

  CATCmdAccess* GetDialogDisplayModel();
  void AddForGetDialogDisplayModel(CATCmdAccess* toAdd, CATCmdAccess* & first, CATCmdAccess* & last);
  void AddTopBarViewer();
		
	void AddTopBarCallback();
	void RemoveTopBarCallback();

// Attributes
// -----------------------------------
private: 
  static CATAfrCtxMenuServices* _pCtxMenuServicesSingleton; 
  CATCmdContainer * _baseContainer;
  CATListPV * _listViewerToListen;
  static int _topBarViewerAdded;

friend class l_CATApplicationFrame;
friend class CATFrameCtxMenu;
// For unit tests purpose
friend class CATAfrCtxMenuServices_UT;
friend class AfrWindowManagerVIDMDI;

};

//-----------------------------------------------------------------------

#endif
