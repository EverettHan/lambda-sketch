// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATPLMComponentServices.h
// Header definition of CATPLMComponentServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U1
*/
#ifndef CATPLMComponentServices_H
#define CATPLMComponentServices_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMRepositoryName.h"

class CATIPLMProviderMgr;
class CATIPLMCompStatement;
class CATIPLMCompStatementService;
class CATIPLMCompTransactionService;
class CATIPLMCompMetaDataService;
class CATIPLMCompStreamService;
class CATIPLMCompConnectionService;
class CATIPLMErrorStack;
class CATIPLMCompMaturityService;
class CATIPLMCompProviderFeatureService;
class CATIPLMCompExpandService;
class CATIPLMCompAutoNamingService;
class CATIPLMCompVersioningService;
class CATIPLMCompProcedureCallService;
class CATIPLMCompJSProcedureCallService;
class CATIPLMCompChangeControlService;
class CATIPLMCompHistoryServices;
class CATIPLMCompEventMonitorServices;
class CATIPLMCompIterationService;
class CATIPLMAsyncInterfaces;
class CATIPLMAsyncTasksServices;
class CATIPLMCompNonLinearVersioningServiceWrite;
class CATIPLMCompNonLinearVersioningServiceWriteRestricted;
class CATIPLMCompNonLinearVersioningServiceReadRestricted;

/**
* @level Protected
* @usage U1
*/

/**
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.
 */
class ExportedByCATPLMServicesItf CATPLMComponentServices
{
public:

  /**
   * Returns the connection service which manages the connections with the PDMs.
   * ie the list of providers available in the CATIA Session.
   *
   * @param oConnectionService [out, CATBaseUnknown#Release]
   *    The CATIPLMCompConnectionService interface.
   * @return
   *
   */
  static HRESULT GetConnectionService(CATIPLMCompConnectionService ** oConnectionService);

  /**
  * Returns the Metadata service allowing to access to the data dictionary.
  *
  * @param oMetaDataService [out, CATBaseUnknown#Release]
  *    The CATIPLMMetaData interface.
  * @return
  *
  */
  static HRESULT GetMetaDataService(CATIPLMCompMetaDataService ** oMetaDataService);

  /**
   * Returns the Statement service allowing to Perform a Query on several PDMs.
   *
   * @param oStatementService [out, CATBaseUnknown#Release]
   *    The CATIPLMCompStatementService interface.
   * @return
   *
   */
  static HRESULT GetStatementService(CATIPLMCompStatementService ** oStatementService);

  /**
   * Returns directly the Statement CATIPLMCompStatement without creating useless pointer CATIPLMCompStatementService
   *
   * @param iStatementName
   *    NA.
   * @param iProviderName
   *    Query can be performed on choosen provider. If iProviderName == CATPLMRepositoryName_Null, we launch query on provider that has state "connected"
   * @return
   *   statement that must be released [CATBaseUnknown#Release]
   */
  static CATIPLMCompStatement* CreateStatement(const CATUnicodeString& iStatementName, const CATPLMRepositoryName& iProviderName = CATPLMRepositoryName_Null);

  /**
   * Returns the Transaction service allowing to modify Data inside PDMs under the control of a transaction.
   *
   * @param oTransactionService [out, CATBaseUnknown#Release]
   *    The CATIPLMCompTransactionService interface.
   * @return
   *
   */
  static HRESULT GetTransactionService(CATIPLMCompTransactionService ** oTransactionService);

  /**
  * Returns the Error Stack containing the list of Adapter/Provider errors.
  *
  * @param opErrorStack [out, CATBaseUnknown#Release]
  *    The CATIPLMErrorStack interface.
  * @return
  *
  */
  static HRESULT GetPLMErrorStack(CATIPLMErrorStack ** opErrorStack);


  /**
  * Returns the Maturity service allowing to query and modify maturity of an object inside PDMs.
  *
  * @param opMaturityService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompMaturityService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetPLMMaturityService(CATIPLMCompMaturityService ** opMaturityService);

  /**
  * Returns the ProviderFeature service allowing to query known behaviors to a provider.
  *
  * @param opProvFeatService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompProviderFeatureService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetPLMProviderFeatureService(CATIPLMCompProviderFeatureService ** opProvFeatService);

  /**
  * Returns the Expand service allowing to perform an Expand operation.<br>
  * This Expand PLMAdapter protocol is an pseudo event-driven push model for processing data with callback mechanism.
  * It differs from Statement Service because instead of using a callback mechanism, The Statement pattern returns events as requested by the application.
  * Each call Next() done by application returns Element of message to read.
  *
  * @param opExpandService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompExpandService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetExpandService(CATIPLMCompExpandService ** opExpandService);

  /**
  * Returns the AutoNaming service allowing to create a unique name from the server.<br>
  *
  * @param oAutoNamingService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompAutoNamingService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetAutoNamingService(CATIPLMCompAutoNamingService ** oAutoNamingService);

  /**
  * Returns the Versioning service allowing to create a unique name from the server.<br>
  *
  * @param oVersioningService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompVersioningService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetVersioningService(CATIPLMCompVersioningService ** oVersioningService);

  /**
  * Returns the Iteration service allowing to restore a specific iteration stored in the server.<br>
  *
  * @param oIterationService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompIterationService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetIterationService(CATIPLMCompIterationService ** oIterationService);

  /**
  * Returns the Procedure call service allowing to execute a Procedure on the provider.<br>
  *
  * @param oProcedureCallService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompProcedureCallService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetProcedureCallService(CATIPLMCompProcedureCallService ** oProcedureCallService);

  /**
  * Returns the Javascript Procedure call service.<br>
  * This service provides methods to execute a Javascript Procedure (also known as WipMid) on the provider.<br>
  *
  * @param oJSProcedureCallService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompJSProcedureCallService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetJSProcedureCallService(CATIPLMCompJSProcedureCallService ** oJSProcedureCallService);

  /**
  * Returns Non Linear Versioning service.<br>
  * This service provides methods to create and retrieve Non Linear Versioned objects.<br>
  *
  * @param oNonLinearVersioningService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompNonLinearVersioningService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetNonLinearVersioningServiceWrite(CATIPLMCompNonLinearVersioningServiceWrite*& oNonLinearVersioningService);

  static HRESULT GetNonLinearVersioningServiceWriteRestricted(CATIPLMCompNonLinearVersioningServiceWriteRestricted*& oNonLinearVersioningServiceWriteRestricted);

  static HRESULT GetNonLinearVersioningServiceReadRestricted(CATIPLMCompNonLinearVersioningServiceReadRestricted*& oNonLinearVersioningServiceReadRestricted);

  /**
  * Returns the change control service allowing to set or unset AuthorityControl flag.<br>
  *
  * @param oChangeControlService [out, CATBaseUnknown#Release]
  *    The CATIPLMCompChangeControlService interface.
  * @return
  * <code>S_OK  </code> The pointer is valid.<br>
  * <code>E_FAIL</code> Failure.
  */
  static HRESULT GetChangeControlService(CATIPLMCompChangeControlService ** oChangeControlService);

  /**
  * This method returns the History service.
  *
  * <br><b>Role</b>:
  * This method returns the History service.
  *
  * @param opHistoryService [out, CATBaseUnknown#Release]
  *   This method returns the singleton CATIPLMCompHistoryServices
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if everything ran ok, otherwise...
  *
  */
  static HRESULT GetHistoryServices(CATIPLMCompHistoryServices * & opHistoryService);

  /**
  * This method returns the Log service.
  *
  * <br><b>Role</b>:
  * This method returns the Log service.
  *
  * @param oEventMonitorService [out, CATBaseUnknown#Release]
  *   This method returns the singleton CATIPLMCompEventMonitorServices
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if everything ran ok, otherwise...
  *
  */
  static HRESULT GetEventMonitorServices(CATIPLMCompEventMonitorServices *&oEventMonitorService);

  /**
  * Returns the Statement service allowing to Perform a Query on several PDMs.
  *
  * @param opAsyncServices [out, CATBaseUnknown#Release]
  *    The CATIPLMCompStatementService interface.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if everything ran ok, otherwise...
  *
  */
  static HRESULT GetAsyncServices(CATIPLMAsyncInterfaces *& opAsyncServices);

  /**
  * Returns the Statement service allowing to Create Async PLM Tasks
  *
  * @param opAsyncTasksServices [out, CATBaseUnknown#Release]
  *    The CATIPLMCompStatementService interface.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if everything ran ok, otherwise...
  *
  */
  static HRESULT GetAsyncTasksServices(CATIPLMAsyncTasksServices *& opAsyncTasksServices);

  /**
  * Access the MetaDataService without Addrefing it
  *
  * <br><b>Role</b>:
  * Use this method to optimize MetaData access.
  * RC = CATPLMComponentServices::AccessMetaDataService()->GetPLMTypeFromTypeId (iTypeId,&oPLMType);
  *
  * @return (NO RELEASE ON POINTER RETURNED!!!!!!!)
  */
  static CATIPLMCompMetaDataService* RetrieveMetaDataService();

  /*@Deprecated*/
  static CATIPLMCompMetaDataService& AccessMetaDataService();

private:
  // leak in odt CATObjectModelerCommands.tst CATObjectModelerCommands_EmbeddedBitmap_Edit called in CATPLMCompMetaDataService::CleanAfterDisconnect() (then CATPLMProviderServices::ListFilteredProviderDescs())
  friend class CATPLMProviderServices;
  static HRESULT GetConnectionService(CATBoolean isCreationOfAdapterAuthorized, CATIPLMCompConnectionService ** oConnectionService);

};

//-----------------------------------------------------------------------

#endif
