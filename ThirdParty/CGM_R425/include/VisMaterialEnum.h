//===================================================================
// COPYRIGHT Dassault Systems 2017-09-14
//===================================================================
// VisMaterialEnum.cpp
// Header definition of class VisMaterialEnum
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017-09-14 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisMaterialEnum_H
#define VisMaterialEnum_H

#include "SGInfra.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"

#include <map>
#include <utility>

//-----------------------------------------------------------------------

class ExportedBySGInfra VisMaterialEnum
{
public:

  enum UVSlot // inspiered from CATMaterialApplicationImpl::TextureChannelType
  {
    eUVSlot_None = 0,
    eUVSlot_Default,
    eUVSlot_Lightmap,
    eUVSlot_Reserved, // do not use
    eUVSlot_Sticker, // for internal use only
    eUVSlot_Custom1,
    eUVSlot_Custom2,
    eUVSlot_Custom3,
    eUVSlot_Custom4,
    NB_UV_SLOTS,
    // to be removed, DO NOT USE
    eUVSlot_1 = eUVSlot_Default
  };

  static void Convert(VisMaterialEnum::UVSlot iSlot, CATUnicodeString &oStr);
  static void Convert(const CATUnicodeString &oStr, VisMaterialEnum::UVSlot &oSlot);

  //-----------------------------------------------------------------------

  typedef enum 
  {
    eTextureFunctionModulate = 0,
    eTextureFunctionBlend,
    eTextureFunctionDecal,
    eTextureFunctionReplace,
    NB_TEXTURE_FUNCTION
  } TextureFunction;

  //-----------------------------------------------------------------------

  typedef enum 
  {
    eTextureMappingUser = 0,
    eTextureMappingObjectLinearPlanar,
    eTextureMappingEyeLinearPlanar,
    eTextureMappingEnvironment,
    NB_TEXTURE_MAPPING
  } TextureMapping;

  //-----------------------------------------------------------------------

  typedef enum
  {
    eMappingNone,
    eMappingPlanar,
    eMappingSpherical,
    eMappingSphericalNormalized,
    eMappingCubic,
    eMappingCylindrical,
    eMappingInfiniteCylindrical,
    eMappingInfiniteCylindricalNormalized,
    eMappingInfiniteCylindricalNormAnglePres,
    NB_MAPPING_OPERATOR
  } MappingOperator;

  static void Convert(VisMaterialEnum::MappingOperator iMOP, CATUnicodeString &oStr);
  static void Convert(const CATUnicodeString &iStr, VisMaterialEnum::MappingOperator &oMOP);

  //-----------------------------------------------------------------------

  typedef enum
  {
    eProperty_LightMapMode = 0,
    NB_PROPERTY
  } Property;

  // Valid property values for eProperty_LightMapMode
  typedef enum
  {
    eLightMapMode_Luminosity = 0, // Light map value multiplies the diffuse and specular color (so it will darken the surface).
    eLightMapMode_Illuminance, // Light map value is multiplied with the surface albedo then it is added to the lighting composition.
    NB_LIGHTMAPMODE
  } LightMapMode;

  typedef enum {
    DEFAULT_MULTIPLICATION = 0,
    SEPARATE_TRANSLATION = 1,
    ROTATION_AROUND_CENTER = 2
  } UVTrfSemantic;

private:
  // Standard constructors and destructors
  // -------------------------------------
  VisMaterialEnum();
  virtual ~VisMaterialEnum();

  static void _Init();
  // Copy constructor and equal operator
  // -----------------------------------
  VisMaterialEnum(VisMaterialEnum &);
  VisMaterialEnum& operator=(VisMaterialEnum&);

  static CATListOfCATUnicodeString m_UVSlotNames;
  typedef std::map<CATUnicodeString, std::pair<MappingOperator, bool> > MappingOperatorNames_t;
  static MappingOperatorNames_t m_MappingOperatorNames;
};

//-----------------------------------------------------------------------

#endif
