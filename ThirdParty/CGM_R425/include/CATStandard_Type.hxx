// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _CATStandard_Type_HeaderFile
#define _CATStandard_Type_HeaderFile

#ifndef _Handle_CATStandard_Type_HeaderFile
#include "Handle_CATStandard_Type.hxx"
#endif

#ifndef _CATStandard_CString_HeaderFile
#include "CATStandard_CString.hxx"
#endif
#ifndef _CATStandard_Integer_HeaderFile
#include "CATStandard_Integer.hxx"
#endif
#ifndef _CATStandard_KindOfType_HeaderFile
#include "CATStandard_KindOfType.hxx"
#endif
#ifndef _CATStandard_Address_HeaderFile
#include "CATStandard_Address.hxx"
#endif
#ifndef _CATStandard_Transient_HeaderFile
#include "CATStandard_Transient.hxx"
#endif
#ifndef _CATStandard_Boolean_HeaderFile
#include "CATStandard_Boolean.hxx"
#endif
#ifndef _CATStandard_OStream_HeaderFile
#include "CATStandard_OStream.hxx"
#endif
class CATStandard_TypeMismatch;
class CATStandard_NoSuchObject;
class CATStandard_OutOfRange;
class CATStandard_AncestorIterator;

//ca ne compile plus

#include "SysCascade.h"

class CATStandard_Type : public CATStandard_Transient {

public:

 // Methods PUBLIC
 // 
/*
ExportedBySysCascade  static  Handle_CATStandard_Type Find(const CATStandard_CString aName) ;
ExportedBySysCascade  static  Handle_CATStandard_Type Find(const CATStandard_CString aName,const CATStandard_Integer aLen) ;
ExportedBySysCascade  static  CATStandard_Boolean Exist(const CATStandard_CString aName) ;
ExportedBySysCascade  static  CATStandard_Boolean Exist(const CATStandard_CString aName,const CATStandard_Integer aLen) ;
ExportedBySysCascade  static  CATStandard_Boolean Add(const CATStandard_CString aName,const Handle(CATStandard_Type)& aType) ;
ExportedBySysCascade  static  CATStandard_Integer NumberOfKnownTypes() ;
*/
//ExportedBySysCascade  static  Handle_CATStandard_Type GiveKnownTypeNumber(const CATStandard_Integer aNumber) ;
//ExportedBySysCascade  static  void Display_Types(CATStandard_OStream& S) ;
ExportedBySysCascade    CATStandard_CString Name() const;
ExportedBySysCascade    CATStandard_Integer Size() const;
ExportedBySysCascade  CATStandard_Type(const CATStandard_CString aName,const CATStandard_Integer aSize);
ExportedBySysCascade  CATStandard_Type(const CATStandard_CString aName);
ExportedBySysCascade  CATStandard_Type(const CATStandard_CString aName,const CATStandard_Integer aSize,const CATStandard_Integer aNumberOfParent,const CATStandard_Address aAncestors);
ExportedBySysCascade  CATStandard_Type(const CATStandard_CString aName,const CATStandard_Integer aSize,const CATStandard_Integer aNumberOfElement,const CATStandard_Integer aNumberOfParent,const CATStandard_Address anAncestors,const CATStandard_Address aElements);
ExportedBySysCascade  CATStandard_Type(const CATStandard_CString aName,const CATStandard_Integer aSize,const CATStandard_Integer aNumberOfParent,const CATStandard_Address anAncestors,const CATStandard_Address aFields);
ExportedBySysCascade    CATStandard_Boolean SubType(const Handle(CATStandard_Type)& aOther) const;
ExportedBySysCascade    CATStandard_Boolean IsImported() const;
ExportedBySysCascade    CATStandard_Boolean IsPrimitive() const;
ExportedBySysCascade    CATStandard_Boolean IsEnumeration() const;
ExportedBySysCascade    CATStandard_Boolean IsClass() const;
ExportedBySysCascade    CATStandard_Integer NumberOfParent() const;
ExportedBySysCascade    CATStandard_Integer NumberOfAncestor() const;
//ExportedBySysCascade    void ShallowDump(CATStandard_OStream& S) const;
/*ExportedBySysCascade    void Print(CATStandard_OStream& s) const;
  void operator<<(CATStandard_OStream& s) const
{
  Print(s);
}*/


ExportedBySysCascade  ~CATStandard_Type();


friend class CATStandard_AncestorIterator;


 // Type management
 //
 ExportedBySysCascade  friend Handle_CATStandard_Type& CATStandard_Type_Type_();
 ExportedBySysCascade  const Handle(CATStandard_Type)& DynamicType() const;
 ExportedBySysCascade  CATStandard_Boolean	       IsKind(const Handle(CATStandard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 
ExportedBySysCascade    CATStandard_Address Ancestors() const;
inline   void InLineDummy() const;


 // Fields PRIVATE
 //
CATStandard_CString myName;
CATStandard_Integer mySize;
CATStandard_KindOfType myKind;
CATStandard_Integer myNumberOfParent;
CATStandard_Integer myNumberOfAncestor;
CATStandard_Address myAncestors;


};


#include "CATStandard_Type.lxx"



// other inline functions and methods (like "C++: function call" methods)
//
/*inline void ShallowDump(const Handle_CATStandard_Type& me,CATStandard_OStream& S) {
 me->ShallowDump(S);
}
*/



#endif
