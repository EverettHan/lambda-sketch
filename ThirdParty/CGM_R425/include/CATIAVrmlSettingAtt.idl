// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIAVrmlSettingAtt.idl
// Automation interface for the VrmlSettingAtt element 
//
//===================================================================
//
// Usage notes:
//   New interface: Automation interface for the VrmlSettingAtt element
//
//===================================================================
//
//  Aug 2004  Creation: Code generated by the CAA wizard  pam
//===================================================================
#ifndef CATIAVrmlSettingAtt_IDL
#define CATIAVrmlSettingAtt_IDL

#include "CATIASettingController.idl"
#include "CATVariant.idl"
#include "CATSafeArray.idl"
#include "CATBSTR.idl"

// Putting your explanations in the following "JavaDoc"-like comment will enable mkdcidl to document your class.
/**  
 * The interface to access a CATIAVrmlSettingAtt.
 */
interface CATIAVrmlSettingAtt : CATIASettingController 
{
#pragma PROPERTY ImportUnit
    /**
     * Returns or sets the ImportUnit parameter (unit of imported Vrml files).
	 * @param oImportUnit - iImportUnit
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Millimeter.
	 * 	<br><tt>1 :</tt>   Centimeter.
	 * 	<br><tt>2 :</tt>   Meter.
	 *	<br><tt>3 :</tt>   Inch.
	 *	<br><tt>4 :</tt>   Foot.
     */
     HRESULT get_ImportUnit(out /*IDLRETVAL*/ long		oImportUnit);

	 HRESULT put_ImportUnit( in long	iImportUnit );

	/** 
	 * Retrieves environment informations for the ImportUnit parameter.
	 * <br><b>Role</b>:Retrieves the state of the ImportUnit parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetImportUnitInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ImportUnit parameter.
	 * <br><b>Role</b>:Locks or unlocks the ImportUnit parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetImportUnitLock( in  boolean iLocked );

#pragma PROPERTY ImportCreaseAngle
    /**
     * Returns or sets the ImportCreaseAngle parameter.
	 * The crease angle affects how DEFAULT normals are generated. If the angle between the geometric normals of two
	 * adjacent faces is less than the crease angle, normals will be calculated so that the faces are smooth-shaded 
	 * across the edge. Otherwise, normals will be calculated so that a lighting discontinuity across the edge is
	 * produce.
	 * @param oImportCreaseAngle - iImportCreaseAngle
	 *	Value of ImportCreaseAngle parameter.
	 *	<b>Legal values</b>:
	 *	<br> [0,inf]
     */
     HRESULT get_ImportCreaseAngle(out /*IDLRETVAL*/ double		oImportCreaseAngle);

     HRESULT put_ImportCreaseAngle( in double	iImportCreaseAngle );

	/** 
	 * Retrieves environment informations for the ImportCreaseAngle parameter.
	 * <br><b>Role</b>:Retrieves the state of the ImportCreaseAngle parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetImportCreaseAngleInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ImportCreaseAngle parameter.
	 * <br><b>Role</b>:Locks or unlocks the ImportCreaseAngle parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetImportCreaseAngleLock( in  boolean iLocked );

#pragma PROPERTY ExportVersion
	/**
	 * Returns or sets the ExportVersion parameter (version of exported Vrml files).
	 * @param oExportVersion - iExportVersion
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>1 :</tt>   VRML 1.0.
	 * 	<br><tt>2 :</tt>   VRML 97 (VRML 2.0).
	 */
     HRESULT get_ExportVersion(out /*IDLRETVAL*/ long		oExportVersion);

     HRESULT put_ExportVersion( in long	iExportVersion );

	/** 
	 * Retrieves environment informations for the ExportVersion parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportVersion parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportVersionInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportVersion parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportVersion parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportVersionLock( in  boolean iLocked );

#pragma PROPERTY ExportNormals
	/**
	 * Returns or sets the ExportNormals parameter (exported Vrml files will or will not contains normal informations).
	 * @param oExportNormals - iExportNormals
	 *	Value of ExportNormals parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain normal informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain normal informations.
	 */
     HRESULT get_ExportNormals(out /*IDLRETVAL*/ boolean		oExportNormals);

     HRESULT put_ExportNormals( in boolean	iExportNormals );

	/** 
	 * Retrieves environment informations for the ExportNormals parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportNormals parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportNormalsInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportNormals parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportNormals parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
	 HRESULT SetExportNormalsLock( in  boolean iLocked );

#pragma PROPERTY ExportEdges
	/**
	 * Returns or sets the ExportEdges parameter (exported Vrml files will or will not contains edge informations).
	 * @param oExportEdges - iExportEdges
	 *	Value of ExportEdges parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain edge informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain edge informations.
	 */
     HRESULT get_ExportEdges(out /*IDLRETVAL*/ boolean		oExportEdges);

     HRESULT put_ExportEdges( in boolean	iExportEdges );

	/** 
	 * Retrieves environment informations for the ExportEdges parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportEdges parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportEdgesInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportEdges parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportEdges parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportEdgesLock( in  boolean iLocked );

#pragma PROPERTY ExportTexture
	/**
	 * Returns or sets the ExportTexture parameter (exported Vrml files will or will not contains texture informations).
	 * @param oExportTexture - iExportTexture
	 *	Value of ExportTexture parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain texture informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain texture informations.
	 */
     HRESULT get_ExportTexture(out /*IDLRETVAL*/ boolean		oExportTexture);

     HRESULT put_ExportTexture( in boolean	iExportTexture );

	/** 
	 * Retrieves environment informations for the ExportTexture parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportTexture parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportTextureInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportTexture parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportTexture parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportTextureLock( in  boolean iLocked );

#pragma PROPERTY ExportTextureFile
	/**
	 * Returns or sets the ExportTextureFile parameter (Textures will be exported in the vrml file containing the geometry 
	 * or in external files).
	 * @param oExportTextureFile - iExportTextureFile
	 *	Value of ExportTextureFile parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Textures are exported in the Vrml file containing the geometry.
	 * 	<br><tt>1 :</tt>   Texture are exported in external files.
	 */
     HRESULT get_ExportTextureFile(out /*IDLRETVAL*/ long		oExportTextureFile);

     HRESULT put_ExportTextureFile( in long	iExportTextureFile );

	/** 
	 * Retrieves environment informations for the ExportTextureFile parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportTextureFile parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportTextureFileInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportTextureFile parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportTextureFile parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportTextureFileLock( in  boolean iLocked );

#pragma PROPERTY ExportTextureFormat
	/**
	 * Returns or sets the ExportTextureFormat parameter.
	 * @param oExportTextureFormat - iExportTextureFormat
	 *	Value of ExportTextureFormat parameter.
	 *	<b>Legal values</b>:
	 *	<br> NOT APPLICABLE
	 */
     HRESULT get_ExportTextureFormat(out /*IDLRETVAL*/ long		oExportTextureFormat);

     HRESULT put_ExportTextureFormat( in long	iExportTextureFormat );
	/** 
	 * Retrieves environment informations for the ExportTextureFormat parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportTextureFormat parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportTextureFormatInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportTextureFormat parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportTextureFormat parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportTextureFormatLock( in  boolean iLocked );
	 
//#pragma PROPERTY ExportBackgroundColor
	/**
	 * Returns or sets the ExportBackgroundColor parameter (Backgrounf color of exported Vrml files).
	 * @param oExportBackgroundColor - iExportBackgroundColor
	 *	Value of ExportBackgroundColor parameter.
	 *	<b>Legal values</b>:
	 *	<br>  R [0,255] G [0,255] B [0,255] 
	 */
     HRESULT GetExportBackgroundColor(out long ioR, out long ioG, out long ioB );

     HRESULT SetExportBackgroundColor( in    long  iR, in    long  iG, in    long  iB );

	/** 
	 * Retrieves environment informations for the ExportBackgroundColor parameter.
	 * <br><b>Role</b>:Retrieves the state of the ExportBackgroundColor parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetExportBackgroundColorInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ExportBackgroundColor parameter.
	 * <br><b>Role</b>:Locks or unlocks the ExportBackgroundColor parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetExportBackgroundColorLock( in  boolean iLocked );
};

// Interface name : CATIAVrmlSettingAtt
#pragma ID CATIAVrmlSettingAtt "DCE:687cdf4e-5490-4d2b-8abb4224d607c2f6"
#pragma DUAL CATIAVrmlSettingAtt

// VB object name : VrmlSettingAtt (Id used in Visual Basic)
#pragma ID VrmlSettingAtt "DCE:2b70131a-08b4-4cb5-a4cd9ce57e8846ab"
#pragma ALIAS CATIAVrmlSettingAtt VrmlSettingAtt

#endif
