// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPolyMCurveCleanOper.h
// Header definition of CATPolyMCurveCleanOper
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  March 2005  Creation: Code generated by the CAA wizard  rxu
//===================================================================
#ifndef CATPolyMCurveCleanOper_H
#define CATPolyMCurveCleanOper_H

#include "CATPolyMCurveAnalyzeOperators.h"
#include "CATPolyMCurveAnalyzeOper.h"

#include "CATLISTP_CATPolyMCurve.h"
#include "CATListPV.h"
#include "CATBoolean.h"
#include "CATListOfInt.h"

class CATPolyMPoint;


/**
* This operator cleans a closed mesh curve by (1) removing overlapping mesh points
* and mesh curve segments; (2) extracts sub-loops. Due to operation (1) a closed mesh
* curve may become several separate closed mesh curves.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
*/

class CATPolyMCurveSelfIntersectionMap;


class ExportedByCATPolyMCurveAnalyzeOperators CATPolyMCurveCleanOper: public CATPolyMCurveAnalyzeOper
{

public:

  // Standard constructors and destructors
  CATPolyMCurveCleanOper();
  virtual ~CATPolyMCurveCleanOper();

 /**
  * Run the operator
  * @return
  * S_OK: success;  E_FAIL otherwise.
  */
  HRESULT Run(CATListPtrCATPolyMCurve &ioMeshCurves);

 /**
  * Reports if at least one of the input curve has been cleaned (self intersection, overlaps removall)
  *
  * @return
  * FALSE if none of the curves has been cleaned.
  **/
  CATBoolean CurvesHaveBeenCleaned() const;

 /**
  * Gets how many loop curves have been extracted from input curves.
  **/
  int GetNbSubLoopCurves() const;

 /**
  * Gets how many loop curves have been extracted from input curves.
  **/
  int GetNbSubOpenCurves() const;

private:

  //Removes consecutive duplicate points except at the extremities (curve closure)
  HRESULT RemoveConsecutiveDuplicatePoints(CATPolyMCurve& ioCurve);

  //Exactly compares MPoints
  CATBoolean AreSamePoints(const CATPolyMPoint& iPoint1, const CATPolyMPoint& iPoint2) const;

  HRESULT AddCurves(CATListPtrCATPolyMCurve& ioCurves, const int iCurve, const CATListPV& iLoops, const CATListPV& iOpenCurves);

  HRESULT CreateCurveFromIndices(const CATListOfInt* iCurveIndices, CATPolyMCurve* iMasterCurve, const CATBoolean iCloseCurve, CATPolyMCurve*& oMCurve);

  //--------- Data:
  CATBoolean _CurvesHaveBeenCleaned;
  int _NbSubLoops, _NbSubOpenCurves;
};


#endif
