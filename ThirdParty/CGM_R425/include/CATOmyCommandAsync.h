//===================================================================
// COPYRIGHT Microsoft 2012/08/01
//===================================================================
// CATThrMessageAsync.cpp
// Header definition of class CATThrMessageAsync
//===================================================================
//
// Usage notes: CATCommand register to the CATMainThreadMessageQueue
//              This command allows to post messages, containting data,
//              from any Threads and receives the message on the 
//              Main Thread
//
//===================================================================
//  2012/08/01 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATOmyCommandAsync_H
#define CATOmyCommandAsync_H

#include "CATBaseUnknown.h"
#include "CATOMYDataStructure.h"
#include "CATThrMessage.h"
#include "CATCommand.h"
#include "CATOmxSQList.h"
#include "CATOmxArray.h"

#include "DSYSysMainThreadMsgQ.h"
//-----------------------------------------------------------------------

class CATOmyCommandAsyncBase;

class CATOmyWakeUpAsyncMsg : public DSYSysMainThreadMsgQ::Message
{
  DSYSysMainThreadMsgQMessageDecl(CATOmyWakeUpAsyncMsg);
};

class CATOmyThrMessageAsync
{
public:

  // Standard constructors and destructors
  // -------------------------------------
  CATOmyThrMessageAsync();
  virtual ~CATOmyThrMessageAsync();

  void SetAsyncCommand(CATOmyCommandAsyncBase * iAsyncCommand);

  CATOmyCommandAsyncBase * GetAsyncCommand();

  void SetDataBuffer(const void *ipData);

  void GetDataBuffer(const void *&opRefData);

private:

  // Copy constructor and equal operator
  // -----------------------------------
  CATOmyThrMessageAsync(CATOmyThrMessageAsync &);
  CATOmyThrMessageAsync& operator=(CATOmyThrMessageAsync&);

  CATOmyCommandAsyncBase * _AsyncCommand;

  const void * _pData;
};

#ifdef _WINDOWS_SOURCE
#pragma warning (push)
#pragma warning (disable : 4275)
#endif

class ExportedByCATOMYDataStructure CATOmyCommandAsyncBase : public DSYSysRefCounter
{

private:
  class CATOmyCommandAsyncCB : public DSYSysMainThreadMsgQ::Callback
  {
    virtual void operator() (DSYSysSharedPtr<CATOmyWakeUpAsyncMsg::Message> iMessage);
  };

protected:

  /**
  * Constructor
  *
  * @param
  * <br/> [in] iMsgName: name of messages emited
  *            used like an Id to filter messages from the CATMainThreadMessageQueue
  */
  CATOmyCommandAsyncBase();

  /**
  * Destructor
  */
  virtual ~CATOmyCommandAsyncBase();

  /**
  * Receive the Message emited by <code>PostDataMessage</code>
  * with the joined data
  * @param
  * <br/> [in] iDataMsg: @see <code>PostDataMessage</code>
  * <br/> [in] iDataLength: @see <code>PostDataMessage</code>
  */
  virtual void ReceiveDataMessage(void * iDataMsg, int iDataLength = -1) = 0;

  /**
  * Just Before posting the Data Message on the MainThreadMsgQueue
  * Call this method to override if needed
  * If the method failed, the message is not posted
  *
  * @return
  * <br/> S_OK: The message can be posted
  * <br/> E_*: the message cannot be posted
  */
  virtual HRESULT BeforePostingMessage() { return S_OK; }

public:

  /**
  * Post a Message of <code>iMsgName</code> on the MainThreadMsgQueue
  * with some data
  * @param
  * <br/> [in] iDataMsg: pointer to an object or array of pointers
  *            if iDataMsg has a DataLength of -1, iDataMsg is consider as a pointer (do not delete it)
  *            if iDataMsg has a DataLength of 0, iDataMsg must be NULL
  *            otherwise iDataMsg is considered as an array of pointer (do not delete the array contains)
  * <br/> [in] iDataLength: Length of iDataMsg
  */
  HRESULT PostDataMessage(void * iDataMsg, int iDataLength = -1);

  /**
  * Force to read the Messages on the MainThreadMsgQueue
  * The method is not blocking
  *
  * @param
  * <br/> [in][otptional] ibWaitMsg: wait first message
  *                       /!\ make sure a message will be posted in a secondary thread
  *
  * @return
  * <br/> S_OK: At least one message have been read
  * <br/> S_FALSE: No message have been read (cannot happen if ibWaitMsg to TRUE)
  * <br/> E_*: Unexpected errors
  */
  static HRESULT ForceReadingMessages(CATBoolean ibWaitMsg = FALSE);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATOmyCommandAsyncBase(CATOmyCommandAsyncBase &);
  CATOmyCommandAsyncBase& operator=(CATOmyCommandAsyncBase&);

  void TreatMessage(CATOmyThrMessageAsync * pThrMessage);

  static DSYSysMainThreadMsgQ* _pMsgQueue;

  static int _CommandAsyncCount;

  static CATOmyCommandAsyncCB * _pCommandAsyncCB;

  static CATBoolean _bMessageRead;

  static CATOmxSQList<CATOmyThrMessageAsync*, 1, INT_MAX> _MessagesStoredSQList;

  typedef CATOmxSQList<CATOmyThrMessageAsync*, 1, INT_MAX>::Node ThrMessageAsyncNode;

  friend class CATOmyCommandAsyncCB;
};

template <typename T>
class CATOmyCommandAsync : public CATOmyCommandAsyncBase
{
public:
  CATOmyCommandAsync() :CATOmyCommandAsyncBase(), _bByRef(FALSE) { }
  virtual ~CATOmyCommandAsync() { }

  /**
  * Post a Message of <code>iMsgName</code> on the MainThreadMsgQueue
  * with some data
  * @param
  * <br/> [in] ipMsgData: pointer to an object
  *                       this object's lifecycle has to be handled by caller
  */
  HRESULT PostMessage(T* ipMsgData = NULL) { return PostDataMessage((void*)ipMsgData); }

  /**
  * Post a Message of <code>iMsgName</code> on the MainThreadMsgQueue
  * with some data
  * @param
  * <br/> [in] iMsgData: object reference
  *                      object is copied before posting message
  */
  HRESULT PostMessage(T& iMsgData) { _bByRef = TRUE; return PostDataMessage(new T(iMsgData)); }

  /**
  * Receive the Message emited by <code>PostDataMessage</code>
  * with the joined data
  * @param
  * <br/> [in] iDataMsg: @see <code>PostDataMessage</code>
  * <br/> [in] iDataLength: @see <code>PostDataMessage</code>
  */
  virtual void ReceiveMessage(T& iMsgData) { }

  /**
  * Receive the Message emited by <code>PostDataMessage</code>
  * with the joined data
  * @param
  * <br/> [in] iDataMsg: @see <code>PostDataMessage</code>
  * <br/> [in] iDataLength: @see <code>PostDataMessage</code>
  */
  virtual void ReceiveMessage(T* ipMsgData) { }

private:

  virtual void ReceiveDataMessage(void * iDataMsg, int iDataLength = -1)
  {
    T* pData = static_cast<T*>(iDataMsg);
    if (_bByRef)
    {
      ReceiveMessage(*pData);
      delete pData;
    }
    else
    {
      ReceiveMessage(pData);
    }
    pData = NULL;
  }

  CATBoolean _bByRef;

};

#ifdef _WINDOWS_SOURCE
#pragma warning(pop)
#endif

//-----------------------------------------------------------------------

#endif

#ifdef CATOmyCommandAsync_Migrated
#undef CATOmyCommandAsync
#else
#define CATOmyCommandAsync CATOmyCommandAsyncBase
#endif
