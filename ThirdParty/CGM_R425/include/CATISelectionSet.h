// COPYRIGHT Dassault Systemes 2001
//===================================================================
//
// CATISelectionSet.h
// Define the CATISelectionSet interface
//
//===================================================================
//
// Usage notes:
//   Add, remove, find et list elements of a Selection Set Elements
//
//===================================================================
//
//  Oct 2001  Creation: Code generated by the CAA wizard  CLE
//===================================================================
/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */
#ifndef CATISelectionSet_H
#define CATISelectionSet_H

#include "UIModelInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATISelectionSetElement_var.h"

class CATISelectionSetElement;
class CATPathElement;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByUIModelInterfaces IID IID_CATISelectionSet;
#else
extern "C" const IID IID_CATISelectionSet ;
#endif

//------------------------------------------------------------------

/**
 * Interface to manage the elements of a Selection Set.
 * <br><b>Role:</b> A Selection Set is created, found and deleted with @href CATISelectionSetsFactory .
 *              <br>A Selection Set contains elements (@href CATISelectionSetElement ). An element is a feature 
 *                  or a sub-element (face, edge, vertex, ...) and is refered by a CATPathElement. 
 */
class ExportedByUIModelInterfaces CATISelectionSet: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**
    *   Adds a new element.
    *   @param iElementPath
    *      The path of the Element to be added.
    *   @param oSetElement
    *      The created element, release is needed.
    *   @param iCheckUnicity
    *   <br><b>Legal values</b>: 
    *   <ul>
    *     <li>1 to check if the element is already present in set </li>
    *     <li>0 not to check if the element is already present in set </li>
    *   </ul>
    *   @return
    *      The error code of function :
    *  <ul>
    *    <li>S_OK if the element is added</li>
    *    <li>E_FAIL if the element is not added</li>
    *  </ul>
    */
  virtual HRESULT AddElement (const CATPathElement   * iElementPath,
                              CATISelectionSetElement*& oSetElement,
                              int iCheckUnicity=1) = 0 ;

  /**
    *   Removes an element.
    *   @param iSetElement
    *      The element to remove.
    *   @return
    *      The error code of function :
    *  <ul>
    *    <li>S_OK if the element is removed</li>
    *    <li>S_FALSE if the element is not removed</li>
    *  </ul>
    */
  virtual HRESULT RemoveElement (const CATISelectionSetElement* iSetElement) = 0 ;

  /**
    *   Removes all elements.
    *   @return
    *      The error code of function :
    *  <ul>
    *    <li>S_OK if all the elements are removed</li>
    *    <li>E_FAIL if all the elements are not removed</li>
    *  </ul>
    */
  virtual HRESULT RemoveAllElements () = 0 ;

  /**
    *   Retrieves the list of elements.
    *   @param oListOfSetElement
    *      The list of elements
    *   @return
    *      The error code of function :
    *  <ul>
    *    <li>S_OK if the method succeeded</li>
    *    <li>E_FAIL if an error occured</li>
    *  </ul>
    */
  virtual HRESULT ListElement (CATListOfCATISelectionSetElement_var *& oListOfSetElement) = 0 ;

 /**
   * Returns a status about the presence of the Selection Set element in the Selection Set.
   * @param iSetElement
   *        The Selection Set element to look for.
   *  @return
   *        The status
   *  <br><b>Legal values</b>: 
   *  <ul>
   *    <li>1 if the Selection Set element is already present in the Selection Set </li>
   *    <li>0 the Selection Set element is not present in the Selection Set</li>
   *  </ul>
   */
  virtual int IsMember (const CATISelectionSetElement * iSetElement) = 0 ;

 /**
   * Returns a status about the presence of the element in the Selection Set.
   * @param iElementPath
   *        The path of the element to look for.
   *  @return
   *        The status
   *  <br><b>Legal values</b>: 
   *  <ul>
   *    <li>1 if the Selection Set element is already present in the Selection Set </li>
   *    <li>0 the Selection Set element is not present in the Selection Set</li>
   *  </ul>

   */
  virtual int IsMember (const CATPathElement * iElementPath) = 0 ;


  /**
    *   Finds an element in the Selection Set.
    *   @param iElementPath
    *      The path of the element to look for.
    *   @param oSetElement
    *      The Selection Set element corresponding to the path in the Selection Set.
    *   @return
    *      The error code of function :
    *  <ul>
    *    <li>S_OK if the element is found</li>
    *    <li>E_FAIL if the element is not found</li>
    *  </ul>
    */
  virtual HRESULT FindElement (const CATPathElement   * iElementPath,
                               CATISelectionSetElement*& oSetElement) = 0 ;

  /**
    *   Computes the CATPathElement of the Selection Set element.
    *   @param oSetElement
    *      The element in the current Selection Set.
    *   @param oElementPath
    *      The path of the Selection Set element.
    *   @return
    *      The error code of function.
    *  <ul>
    *    <li>S_OK if the path is computed</li>
    *    <li>E_FAIL if the path is not computed</li>
    *  </ul>
    */
  virtual HRESULT GetElementPath (const CATISelectionSetElement*& iSetElement,
                                  CATPathElement *& oElementPath) = 0 ;

 /**
   *  Returns the count of elements in the Selection Set.
   * @return 
   *         The size of the set.
   */
  virtual int GetSize () =0;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler (CATISelectionSet, CATBaseUnknown);

//------------------------------------------------------------------

#endif
