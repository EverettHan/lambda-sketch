//===================================================================
// COPYRIGHT Dassault Systemes 2014/12/05
//===================================================================
// CATIPLMCompWspReservationTransaction.cpp
// Header definition of class CATIPLMCompWspReservationTransaction
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2014/12/05 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIPLMCompWspReservationTransaction_H
#define CATIPLMCompWspReservationTransaction_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
class CATUnicodeString;
class CATPLMID;
class CATIPLMCompWspReservationRecordWrite;
class CATIPLMCompRecordReadSet;


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf  IID IID_CATIPLMCompWspReservationTransaction ;
#else
extern "C" const IID IID_CATIPLMCompWspReservationTransaction ;
#endif


/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Component Id without knowing the PDM it belongs to.<br>
 *
 * CATIPLMCompWspReservationTransaction manages the list of record (the table of data).
 * The status-change message can be seen as a set of Record and in a record through the CATIPLMCompWspReservationRecordWrite interface,  you will change an Object reservation status.
 */
class ExportedByCATPLMServicesItf CATIPLMCompWspReservationTransaction : public CATBaseUnknown
{
CATDeclareInterface;

public:
  /**
  * Retrieves the name of the transaction.
  * This name can be used by error software to index the error stack (see CATIPLMErrorStack.h).
  * @param oName [out] The name.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt><dd>Success</dd>
  *     <dt>E_FAIL</dt><dd>A problem occurred during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT GetName(CATUnicodeString & oName) = 0;

  /**
   * Initializes the transaction object.
   * This function is called the first time @href #Next is called.
   * @return
   *   Error code of function :
   *   <dl>
   *     <dt>S_OK</dt><dd>Success</dd>
   *     <dt>E_UNEXPECTED</dt><dd>The function was already called.</dd>
   *     <dt>E_FAIL</dt><dd>A problem occurred during the operation.</dd>
   *   </dl>
   */
  virtual HRESULT Initialize() = 0;

  /**
  * Creates the next CATIPLMCompWspReservationRecordWrite corresponding to the given CATPLMID.
  *
  * @param  iObject [in]
  *     The CATPLMID of the object you want to modify within the RecordWrite.
  * @param oRecordWrite [out]
  *     The new CATIPLMCompWspReservationRecordWrite object.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt><dd>Success</dd>
  *     <dt>E_FAIL</dt><dd>A problem occurred during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT Next(const CATPLMID & iObject, CATIPLMCompWspReservationRecordWrite *& opRecordWrite) = 0;

  /**
  * Execute all the operations included in the transaction. 
  * 
  * This method returns a CATIPLMCompRecordReadSet which allows accessing to the return message. 
  * By calling Next method, analyze the report on each operation (record) done.
  *
  * @param  oRecordReportSet [out, CATBaseUnknown#Release]
  *     Provides access to the list of record.(The message)
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Success: All the objects reservation status were successfuly changed</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>The change of reservation statuses failed. No change were performed.
  *     A report is available.
  *     Get further information by using CATIPLMCompRecordReadSet returned.
  *     </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A fatal communication problem occurs during the operation.
  *     Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT ExecuteWspReservationRequest(CATIPLMCompRecordReadSet *& oRecordReportSet) = 0;

  /**
  * Sets the Workspace associated to the transaction.
  * Should be done before any ::Next statement to make sure that streaming can be achieved.
  *	@param  iId [in]
  *			The CATPLMID of the workspace.
  *	@return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt><dd>Success</dd>
  *     <dt>E_INVALIDARG</dt><dd>The CATPLMID object is not valid</dd>
  *   </dl>
  */
  virtual HRESULT SetWorkspace(const CATPLMID & iId) = 0;

};

//-----------------------------------------------------------------------

#endif
