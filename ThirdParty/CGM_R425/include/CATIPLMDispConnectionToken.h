// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMDispConnectionToken.h
// Define the CATIPLMDispConnectionToken interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2005  Creation: Code generated by the CAA wizard  sbq
//===================================================================
#ifndef CATIPLMDispConnectionToken_H
#define CATIPLMDispConnectionToken_H

// PPRDispatcherCClient framework
#include "CATPLMDispatcherItf.h"

// System framework
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMDispatcherItf IID IID_CATIPLMDispConnectionToken;
#else
extern "C" const IID IID_CATIPLMDispConnectionToken ;
#endif

//------------------------------------------------------------------

/**
 * This token contains all the required information to connect to a data source.
 * <p>
 *
 * Implementations should extend the base implementation of this interface: 
 * @see PPRDispatcherCClient.CATPLMDispConnectionTokenImplBase
 *
 * Connection information specific to a given protocol is accessible through other interfaces.
 * Known queryable interfaces are:
 * @see PPRDispatcherCClient.CATIPLMDispIIOPConnectionToken, PPRDispatcherCClient.CATIPLMDispVaultConnectionToken
 */
class ExportedByCATPLMDispatcherItf CATIPLMDispConnectionToken: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

   /**
    * Returns the token id
    * <br><b>Role:</b>This method allows to get a token identifier
    * @param oId
    *   Ouput parameter, connection token identifier.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error. Report to GetLastError for more information.</li>
    *  </ul>
    */
   virtual HRESULT GetConnectionTokenId(CATUnicodeString **oId) = 0;

   /**
    * Returns the main protocol to be used when connecting to the data source.
    * <br><b>Role:</b>This method allows to get the main protocol used to connect to the data source.
    * <br>Main known protocols are: HTTP, HTTPS, IIOP.
    * @param oProtocol
    *   Ouput parameter, IIOP for Orbix.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error. Report to GetLastError for more information.</li>
    *  </ul>
    */
   virtual HRESULT GetConnectionMainProtocol(CATUnicodeString **oProtocol) = 0;
	 
   /**
    * Returns the connection PLM server alias name.
    * <br><b>Role:</b>This method allows to get the PLM server alias name.
    * @param oPLMServerAliasName
    *   Ouput parameter.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error. Report to GetLastError for more information.</li>
    *  </ul>
    */
	 virtual HRESULT GetConnectionPLMServerAliasName(CATUnicodeString *oPLMServerAliasName) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

#define CATPLMDISP_PROTOCOL_IIOP "iiop"
#define CATPLMDISP_PROTOCOL_HTTP "http"
#define CATPLMDISP_PROTOCOL_HTTPS "https"
#define CATPLMDISP_PROTOCOL_INPROCESS "inprocess"

//------------------------------------------------------------------

#endif
