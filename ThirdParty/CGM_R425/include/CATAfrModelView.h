
//===================================================================
// COPYRIGHT Microsoft 2011/07/08
//===================================================================
// CATAfrModelView.cpp
// Header definition of class CATAfrModelView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/07/08 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAfrModelView_H
#define CATAfrModelView_H

#include "CATAfrItf.h"
#include "CATCommand.h"
//---------------------------------------------------------------------- System
#include "CATUnicodeString.h"
#include "CATBaseUnknown_WR.h"
#include "CATSysWeakRef.h"

class CATAfrSYPModelViewMetaData;
class CATSYPDataBlock;
class CATSYPEventFactory;

class CATSYPEventHandlersSupport;
class CATSYPTemplateData;
class CATSYPEventArgs;
class CATSYPEventHandler;
class CATSYPEvent;
//-----------------------------------------------------------------------
/**
* Base class representing the view of a Afr Component model.
*
* This class can be derived but it should not be instantiated by your own way. 
* You have to use the factory CATIAfrModelViewFactory and return your instance in the CreateInstanceModelView method.
*/
class ExportedByCATAfrItf CATAfrModelView: public CATCommand

{
  CATDeclareClass;

public:
  //======================================================================================
  //                                    Events
  //======================================================================================
  /* Get the event Delete*/
  static CATSYPEvent *  Delete();

  /* Get the event Init*/
  static CATSYPEvent *  Init();

  // Standard constructors and destructors
  // -------------------------------------
  CATAfrModelView (CATCommand * iParent=NULL,CATString * const iIdentifier=NULL);
  CATAfrModelView (CATBaseUnknown * ipDataBlock);
  virtual ~CATAfrModelView ();

  virtual void RequestDelayedDestruction();

  /**
  *
  * <br><b>Role</b>: Return the dataBlock given in the constructor
  * 
  * @return the dataBlock
  * 
  */
  CATBaseUnknown *  GetModel() ;

  /**
  *   Initialize the component view.<br/>
  *   It can be a container of component or an atomic component.
  *   @param ipParent
  *      The parent command. Dialog components need to know their parent.
  *   @param iId
  *      An Id to build a unique name for the Dialog object. Comes from the model object (CATAfrModelView)
  *   @return the component created. It can be itself or a command characterizing this model (Ex @href CATDlgToolbar, @href CATVidLayGrid, @href CATVidCtlForm...)
  */
  virtual CATCommand * InitComponentView(CATCommand * ipParent, CATString & iId);

  /**
  *   Delete the component view previously created.
  *   No necessary to delete the commands inside.
  */
  virtual void DeleteComponentView() ;

  /**
  *   If the model is a "container", then this method will be call to add a component in the comonent view.
  *   @param ipParent
  *      The command to add
  */
  virtual void AddComponent(CATCommand * ipComponent) ;

  /**
  *  Override this method to be called when all components are added
  */
  virtual void FinalizeView();

  /**
  *   Resets the view Implements this methods when your model is dynamically modified.
  *   It allows to re-initialize values of your view. 
  */
  virtual void ResetView();

  /*   If the model is a "container", then this method will be call to add a component in the comonent view.
  *   @param ipParent
  *      The command to add
  */
  virtual void AddComponentModel(CATBaseUnknown * ipModel) ;

  /**
  * Insert an item into the model.
  *
  * @param i_spElement the element to insert in the model
  */
  virtual void Insert(const int& i_index, CATBaseUnknown * ipModel);

  /* Remove a model for container.
  *   @param ipModel
  *      The model to remove
  */
  virtual void RemoveComponentModel(CATBaseUnknown * ipModel) ;

  /**
  * Update the view model.
  *   @param i_spObject
  *      The model to update
  */
  virtual void UpdateView( const CATBaseUnknown_var &i_spObject );

  // Add a handler for a given event.
  //
  // The handlers will be called in the order of their registration.
  //
  // If this function is called during the dispatch of an event, the
  // registered event handler won't be called for this dispatch but
  // will only be called for next dispatches.
  //
  // It is possible to call mutliple times this function with the same
  // event and the same handler instance. In that case there will be
  // multiple registrations; no checks are made for duplication (the
  // caller will have to call @ref #RemoveHandler multiple times).
  //
  // @param i_pEvent the event that we are interested in. Note that @c
  // AddRef will be called on the event. Can't be @c NULL.
  //
  // @param i_pHandler the handler to call. Can't be @c NULL. 
  // @c AddRef will be called on this pointer. Note that the type of 
  // @c CATSYPEventArgs supported by this handler will be compared to
  // the type of arguments of the event. It must be a super-type of
  // the one of the event.
  //
  // @param i_handleConsumedEvents @c !=0 if the handler should be
  // called for consumed events.
  //
  // @return @c !=0 if succeeded, @c 0 if failed to add handler due to
  // invalid input or internal error (in that case a @ref FAILURE has
  // been raised).
  //
  // @see #AddHandlerFunction
  // @see @AddHandlerWRefMeth
  // @see #RemoveHandler 
  int AddHandler(CATSYPEvent *i_pEvent, CATSYPEventHandler *i_pHandler, int i_handleConsumedEvents = 0);

  // Remove an handler for an event.
  //
  // If this function is called during the dispatch of an event, the
  // unregistered event handler will be called for this dispatch but
  // will not be called for next dispatches.
  //
  // If the same handler has been added multiple times, this function
  // removes the first found registration (starting the look up from
  // the most ancient registration).
  //
  // @param i_pEvent the event. Can't be @c NULL.
  //
  // @param i_pHandler the handler. Can't be @c NULL.
  //
  // @return @c !=0 if succeeded, @c 0 if failed to remove handler due
  // to invalid input or internal error (in that case a @ref FAILURE has
  // been raised) or if the handler was never registered for the given
  // event (in that case NO @ref FAILURE is raised, it is valid to do
  // so; this is important for auto-remove handlers).
  //
  // @see #AddHandler
  int RemoveHandler(CATSYPEvent *i_pEvent, CATSYPEventHandler *i_pHandler);
  // Dispatch the event.
  //
  // The event will be dispatched in the tree hierarchy depending on
  // the porpagation mode of the event (@ref
  // CATSYPEvent#GetPropagation).
  //
  // The list of handlers that will be called will be frozen before
  // the first handler is called; as a consequence, changes in the
  // tree hierarchy or in the handlers for the event at each node
  // won't have any effect on the dispatch of this event (but will
  // have effect on next dispatches, even on dispatches that may be
  // triggered by handlers of this event).
  //
  // This call is synchronous; it is blocking until the dispatch is
  // ended.
  //
  // The origin on the event argument (@ref CATSYPEventArgs#GetOrigin)
  // must be either @c NULL or equal to this object. If @c NULL, it
  // will be positioned by this function to this object.
  //
  // The instance of arguments used on this function will be passed to
  // all handlers called during the dispatch.
  // 
  // @param i_pArgs the arguments of the event to dispatch (the
  // dispatched event is retreived though @ref
  // CATSYPEventArgs#GetEvent). @ref CATSYPEventArgs#GetOrigin must be
  // either this object of @c NULL.
  //
  // @return @c !=0 if the dispatch succeeded, @c 0 if failed.
  int Dispatch(CATSYPEventArgs *i_pArgs);
  /** 
  * Get the event factory to use to build widgets' events.
  *
  * This function should be used through the @ref
  * CATImplementSYPEvent macro.
  *
  * @return the event factory. Never @c NULL.
  *
  * @see CATImplementSYPEvent
  */
  static CATSYPEventFactory *GetEventFactory();
  //CATISYPPresenter interface methods
  virtual void SetChild(CATBaseUnknown_var i_spToConnect) ;
  virtual CATBaseUnknown_var GetChild();
  //A décommenter une fois que AfrInterfaces prerequera IntrospectionInfrastructures
  /**
  * @copydoc CATISYPTemplate#SetTemplateName
  */
  void SetTemplateName(const CATUnicodeString& i_templateName);
  /**
  * @copydoc CATISYPTemplate#GetTemplateName
  */
  const CATUnicodeString& GetTemplateName() const;
  /**
  * @copydoc CATISYPTemplate#SetVariationName
  */
  void SetVariationName(const CATUnicodeString& i_variationName);
  /**
  * @copydoc CATISYPTemplate#GetVariationName
  */
  const CATUnicodeString& GetVariationName() const;
  /**
  * @copydoc CATISYPTemplate#SetTemplatedView
  */
  virtual void SetTemplatedView(CATBaseUnknown_var& i_spView, CATSYPTemplateData* i_pTemplateData){SetChild(i_spView);}

  /**
  * Gets the template data.
  */
  virtual CATSYPTemplateData * GetTemplateData(){return _pTemplateData;};
  /**
  /**
  * Sets/Gets the introspectable name of an element that indicate where the view should be append 
  */
  void SetSypNamePosition(const CATUnicodeString & iNamePosition){_sypNamePosition = iNamePosition;};
  const CATUnicodeString & GetSypNamePosition(){return _sypNamePosition;}; 
  /**
  * Sets/Gets the finalyze view  that indicates that a view is finalyzed (when all items have been append)
  */
  const int & GetFinalizeViewFlag() const;
  virtual  void SetFinalizeViewFlag(const int & i_finalyzeViewFlag);
  /**
   * Sets/Gets the DeletingView flag that indicates that the view is going to
   * be deleted.
   */
  int GetDeletingViewFlag() const;
  void SetDeletingViewFlag(int i_deletingViewFlag);
  /**
  * Retrieves an element of the current view hierarchy, set by #SetTemplatedView.
  *
  * No assertion will be thrown if no object with this name has been found, the caller needs to test the pointer and
  * eventually assert himself. You can use #RetrieveSypNamedObject to assert in case of @c FAILURE.
  * 
  * @return @c NULL if the component was not found; else it returns a pointer to the component.
  * @c AddRef has not been called on the returned component so it must not be @c Released by the caller.
  *
  */
  virtual CATBaseUnknown * RetrieveSYPElementByName(const CATUnicodeString & iElementName);
  /**
  * Get the father model view for this component
  */
  CATAfrModelView * GetFatherView() const;


  /**
  * Set the extra dataBlock to enhance the view 
  */
  virtual void SetExtraDataBlock(CATSYPDataBlock * ipExtraDataBlock, const CATUnicodeString & iTemplateName = "");

  /** Get / Set the property Weight. */
  const float & GetWeight() const;
  void SetWeight(const float &i_weight);


protected:
  /**
  *
  * <br><b>Role</b>: Get the first  commun collection in the views hierarchy if there. By Convention, the parent view should have an element with the the name "CommunCollection" .
  * The commun collection is searched when the child view got an element that is named "CommunCollectionItem"
  * @return the commun collection
  * 
  */
  virtual CATBaseUnknown * GetCommunCollection();


  /** Get the View MetaData if Exists */
  CATAfrSYPModelViewMetaData * GetViewMetaData();

  /**
  *
  * Dispatch an event
  */
  int DispatchEvent(CATSYPEvent * i_pEvent);
  /** the template data */
  CATSYPTemplateData *        _pTemplateData; 


  /**
  * Sets the father view. This method is called in CATAfrModelView::AddComponent.
  */
  void SetFatherView(CATAfrModelView * ipModelView);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATAfrModelView (CATAfrModelView &);
  CATAfrModelView& operator=(CATAfrModelView&);




  /**
   * Get the child element from the weak ref member without addrefing it.
   *
   * @return the child element if any or NULL.
   */
  CATBaseUnknown * GetChildFromWeakRef();



  /** Name of the template */
  CATUnicodeString _templateName;
  /** variation Name of the template */
  CATUnicodeString _variationName;
  /**Introspectable name of an element that indicate where the view should be append */
  CATUnicodeString _sypNamePosition;
  /** the child of this view*/
  CATSysWeakRef * _pChildWeakRef;
  /** the support to manage events*/
  CATSYPEventHandlersSupport * _pSupport;
  /** the datablock that serves of model to generate the view */
  CATBaseUnknown * _pDataBlock;
  /** Flag that indicates that a view is finalyzed (when all items have been append) */
  int       _finalizeViewFlag;
  /** Flag that indicates that the view is going to be deleted */
  int       _deletingViewFlag;
  /** the weak ref of the father view*/
  CATBaseUnknown_WR _wrFatherView;
  /**
  * The factory of events for widgets.
  *
  * It will be instantiated  the first time it is needed.
  *
  * @see #GetEventFactory
  */
  static CATSYPEventFactory *     _pEventFactory;
  friend class CATAfrModelViewEventPathBuilder;
  friend class CATAfrSYPModelView;
float       _weight;
};

//-----------------------------------------------------------------------

#endif


