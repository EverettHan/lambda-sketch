/* -*-c++-*-*/ 
//==========================================================================
// COPYRIGHT DASSAULT SYSTEMES 1997 
//==========================================================================
//
// CATConnectPiece:
// Class defining the trajectory of a profile on two geometric objects
//
/**
* Interface representing a piece of the resulting surface of a 
* CATConnect operator.
* <br>A <tt>CATConnectPiece</tt> is a C2 continuous biparametric entity, 
* whereas the global surface is C0 continuous. It is determined by two guide
* curves with synchronized parameters and a geometric profile defined at the
* <tt>CATConnect</tt> creation.
*/
// Connect operator includes constant radius fillet, variable radius fillet,
// edge-surface fillet, curve-surface fillet and chamfer.
//
//
//==========================================================================
//
// Usage notes:
// This class is generated by CATConnect operator
//
//========================================================================== 
// Dec. 97      Documentation                  C. Keribin
// 20/10/14 Q48 Modifications for X-scale replay mechanism
// 25/11/14 Q48 Update signature of UnStreamGeometry to match CATConnectPieceCx2
//========================================================================== 
#ifndef CATConnectPiece_h
#define CATConnectPiece_h

#include "CATMathDef.h"
#include "CATGMModelInterfaces.h"
#include "CATConnectDef.h"
#include "CATCrvParam.h"
#include "CATListOfCATPointOnEdgeCurves.h"
#include "CATIsoParameter.h"
#include "CATCGMVirtual.h"
#include "IUnknown.h"

class CATGeometry;
class CATPCurve;
class CATCurve;
class CATSurface;
class CATPointOnSurface;
class CATPointOnCurve;
class CATCrvParam;
class CATSurParam;
class CATPointOnEdgeCurve;
class CATMathSetOfPointsND;
class CATMathSetOfLongs;
class CATMathVector2D;
class CATMathVector;
class CATGeometry;
//class CATBoolean;
class CATMathInterval;

class CATCGMStream;		// FCX 7.2001
class CATGeometryPack;
class CATCGMOutput;
class CATLISTP(CATCrvParam);
class CATMathSetOfVectors;
class CATConnectSmooth;

// CWM: For G2 Blend
class CATConnectG2Piece;
class CATConnect;
class CATGeoODTScaleManager;
class CATConnectPieceBothSideTwistArea;
/**
* Defines options for the clone process.
* @param OptionCloneAll
* All output items are duplicated
* @param OptionKeepGuideCurves
* All output items are duplicated except the guides on the supports
*/
enum CATConnectPieceCloneOption { OptionCloneAll, OptionKeepGuideCurves };

//-----------------------------------------------------------------------------
//
// CATConnectPiece class specification :
// A CATConnectPiece represents a contineous biparametric entity defined by 
// the profile specification. It is determined by 2 guide curves with
// synchronized parameter.
//
//-----------------------------------------------------------------------------
class ExportedByCATGMModelInterfaces CATConnectPiece  : public CATCGMVirtual
{    
public:
  
  virtual ~CATConnectPiece();
  
  //------------------------------------------------------------------------------
  // Clean Method after dummy creation operation
  //------------------------------------------------------------------------------
  virtual void CleanAfterCreateFaces()=0;

  //---------------------------------------------------------------------------
  // GetGuideOrientation returns the orientation of a guide.
  //---------------------------------------------------------------------------
  /**
  * Returns the orientation of a CATConnectPiece guide curve.
  * @param iSupportId
  * <dl><dt><tt>CATConnectFirstSupport</tt><dd> for returning the
  * CATConnect operator first operand orientation 
  *    <dt><tt>CATConnectSecondSupport</tt><dd> for returning the
  * CATConnect operator second operand orientation</dl>
  *    <dt><tt>CATConnectThirdSupport</tt><dd> for returning the
  * CATConnect operator guide orientation (for variable fillet and chamfer)</dl>
  * @return
  * <dl><dt><tt>1</tt> <dd>the surface normal represents the outside of the matter.
  *    <dt><tt>-1</tt><dd>the surface normal is oriented inside the matter.</dl>
  */
  virtual CATLONG32 GetGuideOrientation(const CATLONG32 iSupportID) const=0;
  
  //---------------------------------------------------------------------------
  // Get an information which is specific to a particular operator.
  virtual void GetCaracteristicInformation(const int iInfoNumber, void * oInformation) const=0;
  
  //---------------------------------------------------------------------------
  // Clone returns a copy of this CATConnectPiece
  // (or NULL if this function is not implemented)
  //---------------------------------------------------------------------------
  /**
  * Returns a pointer to a new CATConnectPiece class
  * @param iOption
  * The clone option : OptionCloneAll or OptionKeepGuideCurves
  */
  virtual CATConnectPiece * Clone(CATConnectPieceCloneOption iOption = OptionCloneAll)=0;
  
  // FCX 12.2004
  //---------------------------------------------------------------------------
  // Compare the parameters of two pieces (usefull for CGMReplay)
  // (not the geometry compared in the CATGeometryPack)
  //---------------------------------------------------------------------------
  /**
  * Returns TRUE or FALSE
  * @param iPieceToCompare
  * The piece to compare
  */
  virtual CATBoolean CompareParameters(const CATConnectPiece * iPieceToCompare, CATCGMOutput & os, int VersionOfStream) const=0;

  // SMT1 8.2016
  //---------------------------------------------------------------------------
  // Compare preprocessed twist information of two pieces (usefull for CGMReplay)
  //---------------------------------------------------------------------------
  /**
  * Returns TRUE or FALSE
  * @param iPieceToCompare
  * The piece to compare
  */

  struct CATConnectPieceBothSideTwistArea { double LimitParameters[2]; };
  virtual CATBoolean CompareTwists(const CATConnectPiece * iPieceToCompare) const=0;
  virtual void GetTwistData(
  CATMathSetOfLongs *&ioTwistDiagnostic,
  CATMathSetOfPointsND *& ioTwistPosition,
  CATConnectPieceBothSideTwistArea *& ioBothSideTwistArea,
  CATListOfDouble & ioTwistStarts,
  CATListOfDouble & ioTwistEnds) const = 0;

  // SMT1 8.2017
  //---------------------------------------------------------------------------
  // Compare computed guide orientation of two pieces (for CGMReplay)
  //---------------------------------------------------------------------------
  /**
  * Returns TRUE or FALSE
  * @param iPieceToCompare
  * The piece to compare
  */

   virtual CATBoolean CompareGuideOri(const CATConnectPiece * iPieceToCompare) const=0;

   // SMT1 9.2020
  //---------------------------------------------------------------------------
  // Compare deformation of two pieces ( for CGMReplay)
  //---------------------------------------------------------------------------
  /**
  * Returns TRUE or FALSE
  * @param iPieceToCompare
  * The piece to compare
  */

   virtual CATBoolean CompareG1Deformation(const CATConnectPiece * iPieceToCompare) const=0;


  //---------------------------------------------------------------------------
  // GetFilletRadius
  //---------------------------------------------------------------------------
  /**
  * Returns the fillet radius at the point defined by iParam and iSupportID
  * @param iSupportID
  * ID of the support
  * @param iParam 
  * Parameter of the point on this support
  * @param oRadius
  * fillet radius
  */
  virtual void GetFilletRadius(	const CATLONG32 iSupportID, const CATCrvParam & iParam, double & oRadius)=0;
  
  //---------------------------------------------------------------------------
  // Modified By : AJD : 2004:4:13
  // ComputeMaxGap
  // This method computes the maximum gap possible between connect solutions
  // for given g0/g1 gaps in any of the support geometries
  //---------------------------------------------------------------------------
  /**
  * Returns if computation of maximum gap is successful or not
  * @param iSupportIDs
  * ID of the support lists which have gap
  * @param iCrvParams 
  * Parameter of the point on track curve on this support
  * @param iG0Gaps
  * Directional G0 Gap on the support
  * @param iG1Gaps
  * G1 Gap on the support, its given as cross product of 2 vectors which are slightly sharp
  * @param iAnglesOfIncidence
  * Angle of incidence of track curve with cross edge, its given as cross product of 2 vectors
  * @param oMaxGaps
  * Maximum gap possible between connect solution on each of support
  */
  virtual CATBoolean ComputeMaxGap(const CATMathSetOfLongs &iSupportIDs,
                                   const CATLISTP(CATCrvParam) &iCrvParams,
                                   const CATMathSetOfVectors &iG0Gaps,
                                   const CATMathSetOfVectors &iG1Gaps,
                                   const CATMathSetOfVectors &iAnglesOfIncidence,
                                   CATListOfDouble &oMaxGaps) = 0;
  
  //---------------------------------------------------------------------------
  // GetSpineLimits returns the limit parameters of the spine
  // (for variable fillet and chamfer).
  //---------------------------------------------------------------------------
  /**
  * Returns the limits on the CATConnect spine curve (for variable fillet and chamfer).
  * @param oStartParam
  * The start parameter.
  * @param oEndParam
  * The end parameter.
  * @param oOrientation
  * The guide orientation.
  */
  virtual void GetSpineLimits(CATCrvParam & oStartParam, CATCrvParam & oEndParam, CATLONG32 oOrientation) const=0;
  
  //---------------------------------------------------------------------------
  virtual void GetSupportCurveLimits(CATCrvParam & oStartParam, CATCrvParam & oEndParam, CATLONG32 & oOrientation, const CATLONG32 iParamID) const=0;
  
  //---------------------------------------------------------------------------
  virtual void Report(const CATLONG32 iOriginalID, const CATCrvParam & iOriginalParam, const CATLONG32 iFinalID, CATCrvParam & iFinalParam) const=0;
  
  virtual void ReportFromConnectSurface(const CATSurParam & iOriginalParam, const CATLONG32 iFinalID, CATCrvParam & oFinalParam,
    CATLONG32 iSupport1, CATLONG32 iSupport2) const=0; 
  
  virtual void GetConnectSurfaceDirection(CATIsoParameter &oIsoParameter, CATLONG32 & oOrientation,
                                          CATLONG32 iSupport1, CATLONG32 iSupport2) const=0;
  
  //---------------------------------------------------------------------------
  // GetGuideOn provides the guide curve and its orientation
  // regarding to the specified support.
  //---------------------------------------------------------------------------
  /**
  * Creates a CATConnectPiece intersection edge.
  * @param iSupportId
  * <dl><dt><tt>CATConnectFirstSupport</tt><dd> for creating on the CATConnect operator first operand.
  *     <dt><tt>CATConnectSecondSupport</tt><dd> for creating on the CATConnect operator second operand</dl>
  * @param oGuideCurve
  * The pointer to the created boundary (CATPointOnCurve or CATPCurve).
  * @param oOrientation
  * The parameter defining which side of the surface has to be kept. The 
  * natural orientation of an intersection edge is given by the vector
  * product of each surface normals.
  * <dl><dt><tt>CATConnectGuideLeftOrientation</tt><dd> The vector product
  * of the natural edge orientation and the <tt>oGuideCurve</tt> normal
  * defines the matter side.
  *    <dt><tt>CATConnectGuideRightOrientation</tt><dd>The opposite of the 
  * vector product of the natural edge orientation and the <tt>oGuideCurve</tt> normal
  * defines the matter side.
  *    <dt><tt>CATConnectGuideDoubleOrientation</tt><dd>
  *</dl>
  */
  virtual void GetGuideOn(const CATLONG32 iSupportID, CATGeometry *& oGuideCurve, CATLONG32 & oOrientation)=0;
  /**
  * Do not use.
  */
  virtual void GetGuideOn(CATCurve *iSupportCurve, CATPCurve *&oGuideCurve, CATLONG32 &oOrientation)=0;
  /**
  * Do not use.
  */
  virtual void GetGuideOn(CATPCurve *iSupportPCurve, CATPCurve *&oGuideCurve, CATLONG32 &oOrientation)=0;
  
  //---------------------------------------------------------------------------
  // CreateSurface creates the connect surface and two boundaries 
  //     curves in the guide direction. Il gives also the orientation
  //     of the created connect surface.
  //
  // CreateSurfaceBorder creates the specific border of CATConnect 
  //      solution in function of the guide type.
  //---------------------------------------------------------------------------
  /**
  * Retrieves the connecting surface of a CATConnectPiece and its boundaries.
  *<br>Creates the objects if necessary.
  * @param oConnectSurface The pointer to the created CATSurface.
  * @param oOrientation
  * <dl><dt><tt>CATConnectCentripetalOrientation</tt>
  *       <dd>the surface normal represents the outside of the matter.
  *    <dt><tt>CATConnectCentrifugalOrientation</tt>
  *       <dd>the surface normal is oriented inside the matter.
  *</dl>
  * @param oPCurve1 The pointer to the boundary on the CATConnect first operand.
  * @param oPCurve2 The pointer to the boundary on the CATConnect second operand.
  */
  virtual void CreateSurface(CATSurface *& oConnectSurface, 
                             CATLONG32 & oOrientation,
                             const CATCrvParam & iStartU,
                             const CATCrvParam & iEndU,
                             const CATLONG32 iParamID,
                             const CATLONG32 iBorders,
                             CATGeometry * oBorders[])=0;
  
  /**
  * Creation of the surface (if necessary) 
  * with four borders and their CrvLimits on iSupport1 and iSupport2
  */
  virtual void CreateSurface(CATSurface *& oConnectSurface,
                             CATLONG32 & oOrientation,
                             const CATCrvParam  & iStart,
                             const CATCrvParam  & iEnd,
                             const CATLONG32 iParamID,
                             const CATLONG32 iSupport1,
                             const CATLONG32 iSupport2,
                             const CATLONG32 iBorders,
                             CATGeometry* oBorders[],
                             CATCrvLimits* oLimits)=0;
  
  virtual void SetCreationLimits(const CATCrvParam & iStartU, const CATCrvParam & iEndU, const CATLONG32 iParamID) =0;
  
  virtual void CreateCurve(CATCurve * & oConnectCurve, CATCrvLimits &oLimits, const CATCrvParam &iCreateParam, 
    const CATLONG32 iParamID, const CATLONG32 iSupport1, const CATLONG32 iSupport2)=0;
  
  //---------------------------------------------------------------------------
  // TwistedSurface check the connect surface is twisted.
  //---------------------------------------------------------------------------
  /**
  * Tests if a CATConnectPiece is twisted.
  */
  virtual CATBoolean TwistedSurface(const CATCrvParam & iStartU, const CATCrvParam & iEndU, const CATLONG32 iParamID, CATLONG32 & oNature, CATLONG32 & oPosition)=0;
  
  /**
  * Tests if a CATConnectPiece is twisted.
  */
  virtual CATBoolean TwistedSurface(const CATCrvParam & iStartU, const CATCrvParam & iEndU, const CATLONG32 iParamID, CATMathSetOfLongs & oNature, CATMathSetOfPointsND & oPosition)=0;
  
  /**
  * Tests if a CATConnectPiece has poor quality pointed deformations.
  */
  virtual CATBoolean PointedSurfacePoorQuality( const CATCrvParam & iStartU, const CATCrvParam & iEndU, const CATLONG32 iParamID, double iContactTol, double iTangencyTol, CATMathSetOfPointsND & oPosition)=0;
  
  /**
  * Return TRUE, the gap and sharpness on the pointing point if a pointing deformation has been computed.
  * FALSE if there is no pointing deformation.
  */
  virtual CATBoolean PointingPointQuality( double & oGap, double & oSharpness )=0;
  
  /**
  * Tests if TwistedSurface metho is pertinent.
  */
  virtual CATBoolean IsTwistDetectionPertinent()=0;
  
  /**
  * Tests if a CATConnectPiece is closed.
  */
  virtual CATBoolean IsClosed() const =0;
  
  /**
  * Tests if a CATConnectPiece can be extrapolated.
  */
  virtual CATBoolean CheckExtrapol(const CATLONG32 iNumberOfSupport=0, void * iLimitsTable=0) const=0;
  
  virtual void SetSupportIndexTable(const CATLONG32 *iTable)=0;
  virtual void GetSupportIndex(const CATLONG32 iTopoIndex, CATLONG32 & oGeoIndex)=0;
  
  /**
  * Deformation of tracks of a ConnectPiece.
  * Size of arrays are equal to number of supports.
  * iStartRef and iEndRef are the parameters on tracks associated with iStartPtTarget and iEndPtTarget.
  * iStartPtTarget and iEndPtTarget represent the 2D points to be reached by the deformation.
  * Optional arguments :
  *     - ioStartClampRef and ioEndClampRef represent the parameters on tracks where the deformation should stop,
  *     i.e. the deformation is local.
  *     - ioStartTgTarget and ioEndTgTarget if you want to impose not only points but also tangents.
  * return value is 1 if the deformation is kept. Else indicate some kind of error.
  */
  virtual CATLONG32 DeformTracks(CATCrvParam ** ioStartRef, 
                                 CATSurParam ** iStartPtTarget,
                                 CATCrvParam ** ioEndRef, 
                                 CATSurParam ** iEndPtTarget,
                                 CATCrvParam ** ioStartClampRef=0, 
                                 CATCrvParam ** ioEndClampRef=0,
                                 CATMathVector2D ** ioStartTgTarget=0,
                                 CATMathVector2D ** ioEndTgTarget=0)=0;
  
  
  /**
  * Returns the CATConnectStopDiagnostic for the start and the 
  * end of the CATConnectPiece 
  *
  * The diagnostics can be : CATConnectNoStop (0)
  CATConnectStopByDomain (1)
  CATConnectStopByUserConstraintOnSurface1 (2)
  CATConnectStopByUserConstraintOnSurface2 (3)
  CATConnectStopBySingularity (4)
  CATConnectStopByNullAngle (5)   
  CATConnectStopByCutOnMasterSupport (6)
  CATConnectStopByInfiniteLength (7)
  */
  virtual void GetStartAndEndDiagnostic(CATLONG32 & oStartDiag, CATLONG32 & oEndDiag)=0;
  
  virtual void SetPointingDeformationData( CATBoolean iPointeStart, CATBoolean iPointeEnd ) = 0;
  
  // FCX 12.2004 : pour le CGMReplay fillet en pointe
  virtual void SetPointingDeformationData(CATBoolean iRequested, short iLocation, CATLONG32 iStatus, double iLength, CATLONG32 iDiagnostic) = 0;
  virtual void GetPointingDeformationData(CATBoolean &oRequested, short &oLocation, CATLONG32 &oStatus, double &oLength, CATLONG32 &oDiagnostic, double &oMaxGap, double &oMaxSharpness) const = 0;
  
  //---------------------------------------------------------------------------
  // Retrieve dimension points of this ConnectPiece
  virtual CATLONG32 GetDimension ()=0;
  
  //---------------------------------------------------------------------------
  // Retrieve extreme points of this ConnectPiece
  virtual void GetExtremities(double * oStartPoint, double * oEndPoint) = 0;
  
  //---------------------------------------------------------------------------
  // Retrieve indexes - In a set of pieces computed by one given operator,
  // the topology should connect extremities with same indexes.
  // Indexes start at 1.
  virtual void GetExtremitiesIndex(CATLONG32 & oStartIndex, CATLONG32 & oEndIndex) = 0;
  
  //---------------------------------------------------------------------------
  // Retrieve number of points of this ConnectPiece
  virtual CATLONG32 GetNumberOfPoints()=0;
  
  //----------------------------------------------------------------------------
  // If the chosen orientation creterion is not sufficient to orient the piece,
  // return 1. Otherwise, 0.
  virtual CATLONG32 GetNonOrientablePiece()=0;
  
  //---------------------------------------------------------------------------
  // Retrieve iSupportID-th support of this ConnectPiece
  virtual CATGeometry * GetSupport(const CATLONG32 iSupportID) = 0;

  //Special info for G1 Track deformation
  virtual void SetDeformedPoints(const CATMathSetOfLongs &iDeformedPoints) = 0;
  virtual CATLONG32 GetDeformedIntervals(CATMathInterval* &oDeformedIntervals) = 0;
  
  // Retrieve Piece Configuration 
  // see definition in CATConnectDefines.h
  // CATConnectRegular           
  // CATConnectDegenerated1     
  // CATConnectDegenerated2     
  // CATConnectCircle1         
  // CATConnectCircle2         
  // CATConnectBlockedSphere    
  // CATConnectTriTangent       
  virtual CATLONG32 GetConnectConfiguration()=0;
  
  // Gestion CGMReplay FCX 7.2001
  virtual void GetNumberOfSupportPiece()=0;
  virtual void StreamGeometry(CATCGMStream &, CATGeometryPack *&)=0;
  virtual void StreamParam(CATCGMStream &)=0;
  virtual void UnStreamGeometry(CATCGMStream & str, CATGeometryPack * iPack, const int iVersionOfStream = 1, const CATGeoODTScaleManager* iScaleManager = NULL)=0;
  virtual void UnStreamParam(CATCGMStream &,int=1)=0;
  virtual void Dump(CATCGMOutput &)=0;
  
  // FCX 12.2004 : pour les CGMReplay fillet en pointe
  virtual void StreamPointingDeformation(CATCGMStream &)=0;
  virtual void UnStreamPointingDeformation(CATCGMStream & str, const int VersionOfStream = 1, const CATGeoODTScaleManager* iScaleManager = NULL) = 0;
  virtual void DumpPointingDeformation(CATCGMOutput &os)=0;

  //SMT1 8.2017: CGMReplay GuideOrientation (BothSideTwist)

  virtual void DumpGuideOrientation(CATCGMOutput &os)=0;

  // PKC le 29/03/2005 but variable G1
  // set list of CrvParam where the Quality Of Surface Interpolation must be optimal (to insure G1 continuity on internal edges of ribon)
  virtual void SetSurfaceInterpolExactPoints(const CATSetOfCrvParams &CATSetOfCrvParams, const CATLONG32 iParamID)=0; 
  virtual void GetSurfaceInterpolExactPoints(CATSetOfCrvParams &CATSetOfCrvParams, CATLONG32 & oParamID)=0; 

  // set one by one CrvParam where the Quality Of Surface Interpolation must be optimal
  // this method is made to add imposed points after twist detection and judt before surface cration
  virtual void SetSurfaceInterpolAdditionalExactPoints(const CATCrvParam &iParam, const CATLONG32 iParamID)=0;

  // CWM 06.2005 : Drop3 Fillet Variable G1
  // Set smooth plane direction curve used with explicit interpolation of the surface
  virtual void SetConnectSmoothOp(CATConnectSmooth * iConnectSmooth)=0;

  //SOU
  virtual CATBoolean GetAuxInfo(void *oInfo) const = 0;

  // CWM 06.2005 : For Automatic keep edge
  virtual HRESULT IsTangentToBumperSurface(const CATLONG32    iNumSurface, 
                                           const CATLONG32    iRefSupportID, 
                                           const CATCrvParam &iRefCrvParam,
                                           const CATLONG32    iCurveSupportID,
                                           CATBoolean        &oIsTangent) = 0;
  virtual HRESULT GetNormalOnTrack(const CATLONG32    iSupportID,
                                   const CATCrvParam &iCrvParam,
                                   CATMathVector     &oSurfaceNormal) = 0;

  // CWM: For G2 Blend
  virtual CATConnectG2Piece * GetConnectG2Piece() = 0;

  virtual CATConnect* GetFactoryConnect() const = 0;
};

#endif
