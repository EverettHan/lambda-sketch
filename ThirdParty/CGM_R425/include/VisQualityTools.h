//===================================================================
// COPYRIGHT Dassault Systemes 2015-10-28
//===================================================================
// VisQualityTools.cpp
// Header definition of class VisQualityTools
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015-10-28 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisQualityTools_H
#define VisQualityTools_H

#include "SGInfra.h"
#include "CATListOfCATUnicodeString.h"
#include "VisQualityData.h"
#include "CATCommand.h"

#include <vector>

class CATVizViewer;
class VisQualityCleanup;
class VisQualityParser;
class VisQualityToolsForEditor;
class VisQualityServices;

//-----------------------------------------------------------------------
// For internal use only. API might change without intimation. DO NOT USE.
//-----------------------------------------------------------------------

// Role : The principle class of new visualization quality management infra.
// Responsibility:
// - Holds information related to all quality related parameters (name, type, range)
// - Maintains list of presets
// - Get/Set quality presets for a viewer
// 
class ExportedBySGInfra VisQualityTools : public CATCommand 
{
  friend class VisQualityCleanup;
  friend class VisQualityParser;
  friend class VisQualityToolsForEditor;
  friend class VisQualityServices;

 CATDeclareClass;
public:
  enum ToolsType {Static, Dynamic, GIStatic, GIDynamic, GIBatch};
public:
  // Use this function to get instance of this class 
  // (you can't call Release on instance returned)
  // in: isStaticMode: bool flag to indicate mode of the class
  // out: tools dealing with static mode when isStaticMode==TRUE, othervise tools for dynamic mode
  static VisQualityTools* GetTools(CATBoolean isStaticMode);

  // New API , which gives tools for GI also.
  static VisQualityTools* GetTools(ToolsType iToolType);

  /**************************************************************************************/
  /* Functions related to viewer                                                        */
  /**************************************************************************************/
  // Function to apply particular preset. Quality parameters will be queried from list of presets
  void ApplyPresetID(CATVizViewer* piViewer, VisQuality::PresetID iID);

  // Function to apply provided set of quality parameters
  // preset is CUSTOM unless data is same as any other preset
  void ApplyPresetData(CATVizViewer* piViewer, const VisQualityData& iData);

  // Function to update (reapply) quality preset
  void UpdateQuality(CATVizViewer* piViewer);

  // Function to get preset applied to a viewer 
  VisQuality::PresetID GetAppliedPreset(CATVizViewer* piViewer, VisQualityData& oData) const;

  // return data applicable to viewer
  VisQualityData GetPresetData(CATVizViewer* piViewer, VisQuality::PresetID iID) const;

  /**************************************************************************************/
  /* Functions related to preset name                                                   */
  /**************************************************************************************/
  // Returns NLS compatible preset name for a given preset ID
  static CATUnicodeString GetPresetDisplayName(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);

  // Returns preset ID for a given name
  static VisQuality::PresetID GetPresetID(const CATUnicodeString &iName, VisQuality::RenderMode iMode = VisQuality::Static);

  /**************************************************************************************/
  /* Functions related to preset data                                                   */
  /**************************************************************************************/
  // Function to get quality parameters for a preset ID
  // return: 0 on success, !=0 when preset doesn't exist
  virtual int GetPresetData(VisQuality::PresetID iID, VisQualityData& oData, const CATString &iQualityMode="") const = 0;
  
  //// Returns preset ID whose quality parameters are same as given paramaters 
  //virtual VisQuality::PresetID GetPresetID(const VisQualityData& iData)const = 0;

  /**************************************************************************************/
  /* Functions related to parameter info                                                */
  /**************************************************************************************/
  virtual CATBoolean IsParamDisabled(const CATUnicodeString& iParamName);
  virtual VisQualityData ApplyOverrideOnData(const VisQualityData& iData) const;

  static const CATListOfCATUnicodeString& GetParameterList();
  static const CATListOfCATUnicodeString& GetParameterList(const VisQuality::RenderMode iRenderMode);

  virtual void GetDisabledParameterConditions(const CATUnicodeString& iKey, std::vector<std::vector<std::pair<CATUnicodeString, CATUnicodeString> > >& oConditions) const = 0;

  static VisQualityTools::ToolsType GetToolType(VisQuality::RenderMode iMode);
  /**************************************************************************************/
  /* other functions                                                                    */
  /**************************************************************************************/
  CATDeclareCBEvent (PRESET_MODIFIED);
  CATDeclareCBEvent (OVERRIDE_MODIFIED);
  CATDeclareCBEvent(RENDERMODE_MODIFIED);

  //++KML4
  //Function to update NRE parameter of GI with the last preset set in NRE mode
  virtual void UpdateGIPresetWithNRE(VisQuality::RenderMode iMode = VisQuality::Static);
  //--
  
  //++KML4
  //Function to check whether video memory is enough to enable denoiser by default
  CATBoolean GetIsEnoughVramForDenoiser();
  //--

  virtual void UpdateVQMUserPreset(VisQuality::PresetID iID, VisQuality::RenderMode iMode = VisQuality::Static);
protected:
  virtual void _ApplyPreset(CATVizViewer* piViewer, VisQuality::PresetID iID, const VisQualityData& iData) = 0; 
  virtual int _SetPresetData(VisQuality::PresetID iID, const VisQualityData& iData, const CATString &iOverrideMode="") = 0;
  virtual int _DisablePreset(VisQuality::PresetID iID) = 0;


  virtual void _AddDisabledParameterCondition(const CATUnicodeString& iKey, const CATUnicodeString& iCondition) = 0;

  virtual void _Initialize();

  static void _SetPresetName(VisQuality::PresetID iID, const CATUnicodeString &iName="", VisQuality::RenderMode iMode = VisQuality::Static);

  // Standard constructors and destructors
  // -------------------------------------
  VisQualityTools (CATString iName, VisQuality::RenderMode iRenderMode);
  virtual ~VisQualityTools ();

  const VisQuality::RenderMode _mode;
  static CATListOfCATUnicodeString _paramList;
  static CATListOfCATUnicodeString _GIParamList;
  static CATBoolean _paramListInitDone;
  static CATListOfCATUnicodeString _presetDisplayName;
  static CATListOfCATUnicodeString _GIpresetDisplayName;
  static CATBoolean _isEnoughVramForDenoiser;

private:
  // Copy constructor and equal operator
  // -----------------------------------
  VisQualityTools (VisQualityTools &);
  VisQualityTools& operator=(VisQualityTools&);
   
};


//-----------------------------------------------------------------------

#endif
