// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPLMStreamDescriptor.h
// Header definition of CATPLMStreamDescriptor
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2005  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U1
*/
#ifndef CATPLMStreamDescriptor_H
#define CATPLMStreamDescriptor_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATBoolean.h"
#include "CATOmxKeyValueBlock.h"
#include "CATOmxKeyString.h"
#include "CATOmxAny.h"
#include "CATPLMSDProperties.h"
#include "CATWOmxBinaryStream.h"
#include "CATOmxDefaultCollecManager.h"
#include "CATOmxCollecManager.h"

/**
* Stream Descriptor : provides description of Stream.
* Identifier of Stream is composed by Format and Role. these values provide the Stream UID for a PLM Component.
*/
class ExportedByCATPLMServicesItf CATPLMStreamDescriptor: public CATBaseUnknown, public CATPLMSDProperties
{
public:

  // Standard constructors and destructors
  // -------------------------------------

  CATPLMStreamDescriptor (int iFormat, CATUnicodeString iRole, CATUnicodeString iTypeLate, int iMarkStamp);

  CATPLMStreamDescriptor (  int iFormat, CATUnicodeString iRole, CATUnicodeString iTypeLate,
                            int iMarkStamp,
                            const CATUnicodeString & iPersistencyType);

  CATPLMStreamDescriptor (  int iFormat, CATUnicodeString iRole, CATUnicodeString iTypeLate,
                            int iMarkStamp,
                            const CATUnicodeString & iPersistencyType,
                            const CATUnicodeString & iPersistencyName);

  CATPLMStreamDescriptor (  int iFormat,
                            const CATUnicodeString & iRole,
                            const CATUnicodeString & iTypeLate,
                            const CATUnicodeString & iMarkStamp,
                            const CATUnicodeString & iSynchroStamp,
                            const CATUnicodeString & iPersistencyType,
                            const CATUnicodeString & iPersistencyName);

  CATPLMStreamDescriptor (  int iFormat,
                            const CATUnicodeString & iRole,
                            const CATUnicodeString & iTypeLate,
                            const CATUnicodeString & iMarkStamp,
                            const CATUnicodeString & iSynchroStamp,
                            const CATUnicodeString & iPersistencyType,
                            const CATUnicodeString & iPersistencyName,
                            const CATBoolean & iIsLargeFile);

  CATPLMStreamDescriptor(int iFormat,
    const CATUnicodeString & iRole,
    const CATUnicodeString & iTypeLate,
    const CATUnicodeString & iMarkStamp,
    const CATUnicodeString & iSynchroStamp,
    const CATUnicodeString & iPersistencyType,
    const CATUnicodeString & iPersistencyName,
    const CATBoolean & iIsLargeFile,
    const CATLONG64 iSize);

  CATPLMStreamDescriptor ( const CATOmxKeyValueBlock& iBlock);

  CATPLMStreamDescriptor(const CATPLMSDProperties& iSD);

  CATPLMStreamDescriptor(){}

  virtual ~CATPLMStreamDescriptor ();

  /**
   * Returns the Format as enum value. Either Authoring or AuthoringVisu...
   */
  HRESULT GetFormat( int * oFormat) const;

  /**
  * Same as above except the format is returned as a string to match M1 behavior
  */
  HRESULT GetFormat(CATUnicodeString& oFormat) const;
  /**
   * Returns the Role
   */
  HRESULT GetRole ( CATUnicodeString * oRole) const  ;

  /**
   * Returns the TypeLate
   */
  HRESULT GetTypeLate ( CATUnicodeString * oTypeLate) const;

 /**
   * Returns the Persistency Type. (similar to extension)
   */
  HRESULT GetPersistancyType ( CATUnicodeString & oPersistencyType) const;

  /**
   * Returns the Persistency Type. (similar to extension)
   */
  HRESULT GetPersistancyName ( CATUnicodeString & oPersistencyName) const;

  /**
   * Returns the Water MarkStamp. (unsigned int) Used to identified the iteration of the stream
   */
  HRESULT GetWaterMarkStamp  ( int * oMarkStamp) const;

  /**
   Returns the MarkStamp (SDv2 for M1)
   */
  void GetWaterMarkStamp( CATUnicodeString& oWaterMarkStamp ) const;

  /**
   Returns the SynchroStamp (SDv2 for M1)
   */
  void GetSynchroStamp( CATUnicodeString& oSynchroStamp ) const;

  /**
   Specify if the stream has been created with constructor with argument iIsLargeFile or not
  */
  void IsLargeFileManaged(CATBoolean& oIsLargeFileManaged) const;

  /**
   Return the information about the size of the file (large files (up to 2GB) )
   if stream has been created with constructor without argument iIsLargeFile, oIsLargeFile == FALSE
  */
  void IsLargeFile(CATBoolean& oIsLargeFile) const;

   /**
   * operator ==
   * compares the format and role of 2 streamdescriptors, this should not be used as this comparison is only valid for SDv0 stream desc and not for SDv1
   */
  int operator == ( const CATPLMStreamDescriptor& other ) const ; 

  /**
   * Compare the identifying parameters of 2 stream descriptor to indicate if they are equivalent.
   * Identifying parameters are _PersistencyName _Role and _Format
   * This comparison is valid regardless of whether the stream desc being compared are SDv0 or SDv1
   * @param iOther the stream desc to compare to this
   * @return S_OK if iOther and this are equivalent, S_FALSE otherwise
   *
   */
  HRESULT isEquivalent(const CATPLMStreamDescriptor & iOther) const;

  HRESULT GetVVSUrl(CATUnicodeString &oVVSUrl) const{return GetUrl(oVVSUrl);}

  //Setter and Getter for size of the stream in bytes. if not defined, value -1 should be used.
  HRESULT SetSize(CATLONG64 iSize);
  HRESULT GetSize(CATLONG64& oSize);

  /** 
  * @nodoc
  */
  void OverrideLateType (CATUnicodeString &iNewLateType);

  static HRESULT Stream(const CATPLMStreamDescriptor& iSD, CATWOmxBinaryStream& ioStream);
  
  static HRESULT Unstream(CATWOmxBinaryStream& iStream, CATPLMStreamDescriptor*& oSD);

  CATOmxKeyValueBlock GetBlock() const;

  CATPLMStreamDescriptor (const CATPLMStreamDescriptor& iCopy);

  CATPLMStreamDescriptor& operator=(const CATPLMStreamDescriptor& iCopy);

};

//en attente de suppression dans CATDpxOmxCollection
//template <> CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMStreamDescriptor*>::manager () ;
//-----------------------------------------------------------------------

#endif
