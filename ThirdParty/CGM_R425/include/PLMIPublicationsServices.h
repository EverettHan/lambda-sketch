// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIPublicationsServices.h
// Define the PLMIPublicationsServices interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2009  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIPublicationsServices_H
#define PLMIPublicationsServices_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATBaseUnknown.h"
#include "CATPLMModelerPublicationItf.h"
class PLMIOmbVirtualObjectDescriptor_var;
class PLMIIterator;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerPublicationItf IID IID_PLMIPublicationsServices;
#else
extern "C" const IID IID_PLMIPublicationsServices ;
#endif

#define PLMPublicationsServices_Component "PLMPublicationsServices"

//------------------------------------------------------------------

/**
 * Interface providing services related to PLM publications
 *
 * @example
 *  PLMIPublicationsServices *pPublicationsServices = NULL;
 *  if (SUCCEEDED(::CATInstantiateComponent(PLMPublicationsServices_Component,IID_PLMIPublicationsServices,(void **)&pPublicationsServices))&&pPublicationsServices)
 *  {
 *    ...
 *  }
 *  CATSysReleasePtr(pPublicationsServices);
 */
class ExportedByCATPLMModelerPublicationItf PLMIPublicationsServices: public CATBaseUnknown
{
  CATDeclareInterface;

public:

    /**
     * Creates a Virtual Object Descriptor by recursively adding the descriptions of the published virtual objects recursively encountered.<br>
     * That is to say that as long as publications are come across, the descriptions of the published objects are recursively added to the descriptor returned,
     * until a final target object which is not a publication itself is eventually found! Only publications participate in this unfolding protocol, no other PLM objects
     * participate to this protocol.
     *
     *  @param  ipConcreteOrVirtualObject
     *      A concrete or virtual object <u>retrieved from a relation</u>: <br>
     *      - A concrete object corresponds to a PLM object or a pointable object located inside a stream. <br>
     *      - A virtual object designates a composite object that does not have a real existence (an object adhering to CATIOmbVirtualObject). <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  ospUnfoldedDescriptor
     *      The unfolded Virtual Object Descriptor returned. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL_var. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL_var if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @param  ibUnfoldUsingRelationalView
     *      A boolean to tell wether or not the recursive unfolding process should use the relational view rather than using the links.<br>
     *      Optional input parameter. <br>
     *      By default, this parameter is passed as FALSE.<br>
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT CreateDescriptorFromUnfoldedConcreteOrVirtualObject(const CATBaseUnknown *ipConcreteOrVirtualObject, PLMIOmbVirtualObjectDescriptor_var &ospUnfoldedDescriptor, const CATBoolean &ibUnfoldUsingRelationalView=FALSE) = 0;

    /**
     * Returns an iterator to navigate on VODescriptors (equivalent to a given VODescriptor) based on exiting Publications. <br>
     * Note: This method works only on VODescriptors corresponding to a target in a representation.
     *
     * <br><b>Role:</b> This method computes all equivalent VODescriptors shortcuts to already existing 
     * Publications pointing directly or indirectly (Publications of Publications) to the target designated by the input VODescriptor <tt>ispVODescriptor</tt>.<br>
     * The output is a @href PLMIIterator on these VODescriptors shortcuts, that are sorted by increasing size 
     * of their path of first instances.
     *
     *  @param   ispVODescriptor
     *      The VODescriptor representing the input object.
     *  @param   opIterator
     *      An iterator on a list of VODescriptor pointing Publications.
     *  @return
     *      <code>S_OK</code> if the method succeeds and an iterator was successfully created. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT BuildEquivalentVODescUsingExistingPublications(PLMIOmbVirtualObjectDescriptor_var& ispVODescriptor, PLMIIterator *&opIterator) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIPublicationsServices, CATBaseUnknown);

//------------------------------------------------------------------

#endif
