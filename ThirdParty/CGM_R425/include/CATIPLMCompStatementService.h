// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMCompStatementService.h
// Define the CATIPLMCompStatementService interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompStatementService_H
#define CATIPLMCompStatementService_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompStatementService;
#else
extern "C" const IID IID_CATIPLMCompStatementService ;
#endif

class CATIPLMCompStatement;
class CATUnicodeString;
class CATPLMRepositoryName;
class CATIPLMCompApplicationLoader;

//------------------------------------------------------------------

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Component Id without knowing the PDM it belongs to.<br>
 *
 * In order to perform a query to find objects by attribute, by Identifier, by relations , you need to get a CATPLMStatement. 
 * A CATPLMStatement  object is used to send query statement to the PDM system. It provides basic methods for executing statements and retrieving results.
 *
 * In order to query the PDM system to find some attributes values of a list of PLM objects, you need to get a CATIPLMCompApplicationLoader.
 * The list of attributes is totally defined by an application identifier given in input of the creation method.
 */
class ExportedByCATPLMServicesItf CATIPLMCompStatementService: public CATBaseUnknown
{
  CATDeclareInterface;

public:
  
  /**
  *	Creates a CATPLMStatement object for sending statements to the database.
  *	@param  iStatementName
  *			The Statement name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  *	@param  oStatement [out, CATBaseUnknown#Release]
  *			The new CATIPLMCmptStatement object.
  *	@return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateStatement(CATUnicodeString *iStatementName, CATIPLMCompStatement **oStatement, CATPLMRepositoryName *iProviderName=NULL ) =0;

  /**
  * Set of authorized ApplicationIdentifier
  */  
  enum ApplicationIdentifier
  {
    AppId_Navigate,
    AppId_UWPNav,
    AppId_Open,
    AppId_CompletionOpen,
    AppId_ExchangeStatus,
    AppId_Validate,
    AppId_ELRPortInfo,
    AppId_OfflineContent
  };
  
  /**
  *	Creates a CATIPLMCompApplicationLoader object for sending queries to the cache and if not found to the database.
  *	@param  iApplicationIdentifier
  *			This application name defines the content of the query for each type.
  *	@param  oLoader [out, CATBaseUnknown#Release]
  *			The new CATIPLMCompApplicationLoader object.
  *	@return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateApplicationLoader( ApplicationIdentifier iApplicationIdentifier, CATIPLMCompApplicationLoader *& oLoader) = 0;

};

//------------------------------------------------------------------

#endif
