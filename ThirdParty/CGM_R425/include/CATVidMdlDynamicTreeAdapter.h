//===================================================================
// COPYRIGHT Dassault Systemes 2012/03/07
//===================================================================
// CATVidMdlDynamicTreeAdapter.h
// Header definition of class CATVidMdlDynamicTreeAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/03/07 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATVidMdlDynamicTreeAdapter_H
#define CATVidMdlDynamicTreeAdapter_H

#include <VisuDialog.h>
#include <CATVidMdlTreeAdapter.h>
#include <CATVidMdlTreeItem.h>
#include <CATBaseUnknown.h>
#include <CATBaseUnknown_var.h>

/** @ingroup groupVidModelViewModel
 * This CID model adapter is used for creating dynamic tree model.
 * In order to display this model with the CATVidCtlTreeView control,
 * you need to use introspectable objects OR to build introspectable objects
 * from your CATBaseUnknown_var data item (see Usage).
 * 
 * @par Advantage of this adapter:
 * It does not store any additional data in memory.
 *
 * @par Inconvenient of this adapter:
 * It does not store a pointer on the parent of each node, so the GetParentData and the GetDataRow
 * methods have to be implemented. Reading a data can be slow because it is not stored in a 
 * cache memory.
 *
 * @par Usage
 * In order to use this model adapter, you have to derive from it and to reimplement
 * the virtual methods GetChild, GetChildrenCount, GetParentData and GetDataRow.
 * You can choose to build and return your introspectable objects directly in the GetChild 
 * method (returns a datablock for instance) OR you can choose to reimplement the 
 * GetIntrospectable method (build an introspectable from a CATBaseUnknown_var by filling
 * a datablock for instance).
 *
 * If your GetChild method does not return all the time the same instance of the data item stored 
 * in your model (e.g. you build your introspectable in the GetChild method), you must
 * reimplement CATIVidMdl::IsEqual method in order to inform the model how to compare two data items
 * (e.g. compare two unique properties such as a path, ...).
 * 
 */
class ExportedByVisuDialog CATVidMdlDynamicTreeAdapter: public CATVidMdlTreeAdapter
{
  CATDeclareClass;
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATVidMdlDynamicTreeAdapter ();
  virtual ~CATVidMdlDynamicTreeAdapter ();

  /**
   * Get the child at the i_row position under your CATBaseUnknown_var item.
   *
   * @param i_parent the parent item.
   * @return the child at the i_row position under i_parent (!!! if not introspectable, please reimplement the GetIntrospectable method)
   */
  virtual CATBaseUnknown_var GetChild(int i_row, const CATBaseUnknown_var & i_parent) = 0;
  /**
   * Get the number of children under a given CATBaseUnknown_var item.
   *
   * @param i_parent the parent item.
   * @return the number of children under i_parent.
   */
  virtual int GetChildrenCount(const CATBaseUnknown_var & i_parent) = 0;
  /**
   * Get the parent of your CATBaseUnknown_var item.
   *
   * @param i_item the item to get the parent of.
   * @return the parent item of i_item.
   */
  virtual CATBaseUnknown_var GetParentData(const CATBaseUnknown_var & i_item) = 0;
  /**
   * Get the row of your CATBaseUnknown_var item (ordered position among all the children of your item starting at 0).
   *
   * @param i_item the item to get the row of.
   * @return the row of i_item.
   */
  virtual int GetDataRow(const CATBaseUnknown_var & i_item) = 0;
  /**
   * @copydoc CATIVidMdl#GetIntrospectable
   */
  virtual CATISYPIntrospectable_var GetIntrospectable(const CATBaseUnknown_var & i_item);

  /**
   * Set the root element data with the given CATBaseUnknown_var.
   *
   * @param i_root the new root element data to install in the model.
   *
   * @note in a dynamic tree, the root data is also the root element.
   */
  void SetRootData(const CATBaseUnknown_var & i_root);
  /**
   * @return the root element data.
   */
  CATBaseUnknown_var GetRootData(int i_Column = 0) const;

  /**
   * @copydoc CATIVidMdl#HasIndex
   */
  virtual int HasIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#CreateIndex
   */
  virtual CATVidMdlIndex CreateIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetParent
   */
  virtual CATVidMdlIndex GetParent(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetRowCount
   */
  virtual int GetRowCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetColumnCount
   */
  virtual int GetColumnCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetElement
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetRoot
   */
  virtual CATVidMdlIndex GetRoot(int i_Column = 0);
  /**
   * @copydoc CATIVidMdl#Reset
   */
  virtual void Reset();
  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();
  /**
   * Get the model item referenced by the given index.
   *
   * @return the CATBaseUnknown_var item referenced by the given index, if none, return the root element.
   */
  CATBaseUnknown_var GetItemFromIndex(const CATVidMdlIndex & i_index);

	/**
	* @copydoc CATIVidMdl#RemoveList
	*/
	virtual CATBoolean RemoveList(const CATSYPDynArray<CATVidMdlIndex> & i_listOfIndexes);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidMdlDynamicTreeAdapter (CATVidMdlDynamicTreeAdapter &);
  CATVidMdlDynamicTreeAdapter& operator=(CATVidMdlDynamicTreeAdapter&);

private:
  CATBaseUnknown_var _rootElement;
};

//-----------------------------------------------------------------------

#endif
