//===================================================================
// COPYRIGHT Dassault Systeme 2012/06/28
//===================================================================
// CATV3DCtlRobot.h
// Header definition of class CATV3DCtlRobot
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/06/28 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATV3DCtlRobot_H
#define CATV3DCtlRobot_H

#include <VisuImmersive3D.h>
#include <CATV3DCtl.h>
#include <CATV3DTopWidget.h>
#include <CATBaseUnknown_WR.h>
#include <CATMathPoint.h>
#include <CATMathPointf.h>
#include <CATListOfInt.h>
#include <CATSYPDeclareEnumFactory.h>

class CATSYPEventArgs;
class CATV3DMouseEventArgs;
class CATV3DTranslationEventArgs;
class CATV3DRotationEventArgs;
class CATMathAxis;

/**
 *
 */
class ExportedByVisuImmersive3D CATV3DCtlRobot : public CATV3DCtl
{
  CATDeclareClass;
public:
  /** Constructor*/
  CATV3DCtlRobot ();
  /** Destructor*/
  virtual ~CATV3DCtlRobot ();

  /**
   * @fn static CATV3DCtlRobot * CATV3DCtlRobot::CreateV3DRobot(CATViewpoint* i_pViewpoint,
   * const CATBoolean& iScaleAnimation=TRUE);
   *
   * @brief Creates V3D robot.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param [in,out] i_pViewpoint If non-null, the viewpoint.
   * @param iScaleAnimation       (Optional) zero-based index of the scale animation.
   *
   * @return null if it fails, else the new V3D robot.
   */

  static CATV3DCtlRobot * CreateV3DRobot(CATViewpoint* i_pViewpoint, const CATBoolean& iScaleAnimation=TRUE);

  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the Robot when receiving
   * a translate event from an handle.
   *
   * This event is issued from the @ref Translate event @ref
   * CATV3DCtlHandleTranslation#Translate.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Translate();

  /**
   * Get the @c Rotate event.
   *
   * The @c Rotate event is dispatched on the HandleRotation when receiving
   * a rotate event from an handle.
   *
   * This event is issued from the @ref Translate event @ref
   * CATV3DCtlHandleRotation#Rotate.
   *
   * @par EventProperties
   *   - Name: @c "Rotate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Rotate();

  /**
   * Get the @c Scale event.
   *
   * The @c Scale event is dispatched on the HandleScale when receiving
   * a Scale event from an handle.
   *
   * This event is issued from the @ref Translate event @ref
   * CATV3DCtlHandleScale#Translate.
   *
   * @par EventProperties
   *   - Name: @c "Scale"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Scale();

  /**
   * RobotTransformationElement defines the V3DRobot elements of transformation.
   * @see #SetTransfoElemVisibleFlag
   */
  enum RobotTransformationElement {
    Unknown=0,
    /** All translations elements. */
    Translation,
    /** Direction translation elements. */
    TranslationX, TranslationY, TranslationZ,
    /** Plane translation elements. */
    TranslationXY, TranslationYZ, TranslationZX,
    /** All rotation elements. */
    Rotation,
    /** Line rotation elements. */
    RotationX, RotationY, RotationZ,
    /** Point rotation elements. */
    RotationCenter,
    /** All direction translation elements. */
    TranslationXYZ,
    /** All scaling elements. */
    Scaling,
    /** Direction scaling elements. */
    ScalingX, ScalingY, ScalingZ,
    /** All label elements. */
    Label,
    /** Direction label elements. */
    LabelX, LabelY, LabelZ,
    /** Point manipulation element (robot center). */
    Dock
  };

  /**
   * SnapItemType defines the V3DRobot possible snap types.
   * @see #GetSourceType
   */
  enum SnapItemType {stNone=0, Line, Plane, Point};

  /**
   * @enum LookType
   *
   * @brief Values that represent LookType.
   */
  enum LookType {
    /** The Robot default look, robot is not checked/conected.
       This is the robot look wen cornered/docked. */
    DefaultCornered=0,
    /** The Robot is checked.
       This look is used when the robot is conected to the geometry or if there is a selection. */
    Conected,
    /** The Robot is unchecked.
       This look is used when the robot is not conected to the geometry or if there is no selection. */
    Disconected,
    /** The Robot is 2D shaped.
       This look is used for specific 2D uses as textures manipulations. */
    Robot2D,
    /** The Robot is used for orienting manipulators */
    Orientator,
    /** The Robot is used selecting robot element separatly */
    Check
  };

  /**
   * @fn void CATV3DCtlRobot::RunResizeAnimation(const float &iImposFrom,const float &iImposTo);
   *
   * @brief Executes the resize animation operation.
   *
   * @param iImposFrom The animation origin resize factor.
   * @param iImposTo   The animation target resize factor.
   */
  void RunResizeAnimation(const float &iImposFrom,const float &iImposTo);

  /**
   * @brief Sets visible elements.
   *
   * @param iElementsList  The elements to set visibility
   *  &lt;br&gt;
   *  <b>Legal values Elements type :</b>
   *  <dl>
   *     RobotTransformationElement
   *  </dl>
   * @param iVisibleFlag   The visibilityle flag to set.
   * @param iHideAllOthers (Optional) If the requested visible flag is TRUE, Hide all the elements
   * not in the list.
   */
  void SetVisibleElements(const CATListOfInt &iElementsList, const CATBoolean& iVisibleFlag, const CATBoolean& iHideAllOthers = TRUE);

   /**
    * @brief Gets visible elements.
    *
    * @param [in,out] oElementsList The visible elements
    *  &lt;br&gt;
    *  <b>Legal values</b> Elements type :
    *  <dl>
    *  &lt;dt&gt;&lt;tt&gt; RobotTransformationElement
    *  </dl>
    */
   void GetVisibleElements(CATListOfInt &oElementsList);

   /**
   * @brief Sets enable elements.
   *
   * @param iElementsList  The elements to set enable flag (element not pickable and gosted view)
   *  &lt;br&gt;
   *  <b>Legal values Elements type :</b>
   *  <dl>
   *     RobotTransformationElement
   *  </dl>
   * @param iEnableFlag   The enable flag to set.
   * @param iEnableAllOthers (Optional) If the requested visible flag is FALSE, Enable all the elements
   * not in the list.
   */
  void SetEnableElements(const CATListOfInt &iElementsList, const CATBoolean& iEnableFlag, const CATBoolean& iEnableAllOthers = TRUE);

  /**
    * @brief Gets enable elements.
    *
    * @param [in,out] oEnableElementsList The enable elements
    * @param [in,out] oDisableElementsList The disable elements
    *  &lt;br&gt;
    *  <b>Legal values</b> Elements type :
    *  <dl>
    *  &lt;dt&gt;&lt;tt&gt; RobotTransformationElement
    *  </dl>
    */
  void GetEnableElements(CATListOfInt &oEnableElementsList, CATListOfInt &oDisableElementsList);

  /**
   * @fn  void CATV3DCtlRobot::Set2DStyle(const CATBoolean& i2DStyle);
   *
   * @brief Sets 2D style.
   *
   * @param i2DStyle  Zero-based index of the 2D style.
   */
  void Set2DStyle(const CATBoolean& i2DStyle);
  const CATBoolean& Get2DStyle() const;

  void SetOrientatorStyle(const CATBoolean& iOrientatorStyle);
  const CATBoolean& GetOrientatorStyle() const;

  void SetCheckStyle(const CATBoolean& iCheckStyle);
  const CATBoolean& GetCheckStyle() const;

  void SetHandleScalingCheckStates(const CATBoolean& iState);

  void SetLabel(const CATListOfCATUnicodeString& i_LabelText);

  void ShowAll();

  void HideAll();

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationX, TranslationY, TranslationZ.
   * @param iVisibleFlag the visible flag to set on translation widgets.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetTranslationVisibleFlag(const CATBoolean& iTranslationVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationX, TranslationY, TranslationZ.
   * @see #GetTransfoElemVisibleFlag
   */
  CATBoolean GetTranslationVisibleFlag();

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationXY, TranslationYZ, TranslationZX.
   * @param iVisibleFlag the visible flag to set on plane translation widgets.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetPlaneTranslationVisibleFlag(const CATBoolean& iTranslationVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationXY, TranslationYZ, TranslationZX.
   * @see #GetTransfoElemVisibleFlag
   */
  CATBoolean GetPlaneTranslationVisibleFlag();

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationX, RotationY, RotationZ.
   * @param iVisibleFlag the visible flag to set on rotations widgets.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetRotationVisibleFlag(const CATBoolean& iTranslationVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::RotationX, RotationY, RotationZ.
   * @see #GetTransfoElemVisibleFlag
   */
  CATBoolean GetRotationVisibleFlag();

    /**
   * Sets the enable flag of RobotTransformationElement::TranslationX, TranslationY, TranslationZ.
   * @param iEnablelag the enable flag to set on translation widgets.
   * @see #SetTransfoElemEnablelag
   */
  void SetTranslationEnableFlag(const CATBoolean& iTranslationEnablelag);
  /**
   * @return the enable flag of RobotTransformationElement::TranslationX, TranslationY, TranslationZ.
   * @see #GetTransfoElemEnablelag
   */
  CATBoolean GetTranslationEnableFlag();

  /**
   * Sets the enable flag of RobotTransformationElement::TranslationXY, TranslationYZ, TranslationZX.
   * @param iEnablelag the enable flag to set on plane translation widgets.
   * @see #SetTransfoElemEnablelag
   */
  void SetPlaneTranslationEnableFlag(const CATBoolean& iTranslationEnablelag);
  /**
   * @return the enable flag of RobotTransformationElement::TranslationXY, TranslationYZ, TranslationZX.
   * @see #GetTransfoElemEnablelag
   */
  CATBoolean GetPlaneTranslationEnableFlag();

  /**
   * Sets the enable flag of RobotTransformationElement::RotationX, RotationY, RotationZ.
   * @param iEnablelag the enable flag to set on rotations widgets.
   * @see #SetTransfoElemEnablelag
   */
  void SetRotationEnableFlag(const CATBoolean& iTranslationEnableFlag);
  /**
   * @return the enable flag of RobotTransformationElement::RotationX, RotationY, RotationZ.
   * @see #GetTransfoElemEnablelag
   */
  CATBoolean GetRotationEnableFlag();

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationXY.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTXYVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationXY.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTXYVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationXZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTXZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationXZ.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTXZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationYZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTYZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationYZ.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTYZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleRXYVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::RotationZ.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleRXYVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationY.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleRXZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::RotationY.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleRXZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationX.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleRYZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::RotationX.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleRYZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationCenter.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleRCenterVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::RotationCenter.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleRCenterVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationX.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTXVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationX.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTXVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationY.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTYVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationY.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTYVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::TranslationZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::ScaleX.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleSXVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::ScaleX.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleSXVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::ScaleY.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleSYVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::ScaleY.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleSYVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::ScaleZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleSZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::ScaleZ.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleSZVisibleFlag() const;

    /**
   * Sets the visibility flag of RobotTransformationElement::LabelX.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleLXVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::LabelX.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleLXVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::LabelY.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleLYVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::LabelY.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleLYVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::LabelZ.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleLZVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::LabelZ.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleLZVisibleFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::Dock.
   * @param iVisibleFlag the visible flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemVisibleFlag
   */
  void SetHandleTOVisibleFlag(const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of RobotTransformationElement::Dock.
   * @see #GetTransfoElemVisibleFlag
   */
  const CATBoolean& GetHandleTOVisibleFlag() const;

  /**
   * Sets the visibility flag of a RobotTransformationElement. An unvisible widget will participate
   * to the layout depending on the LayoutWhenUnvisibleFlag property.
   * A RobotTransformationElement can have its visible flag to TRUE but not being visible on screen,
   * if V3DCtlRobot is not visible. To have the information about visibility
   * state of a RobotTransformationElement, call GetTransfoElemVisibleFlag.
   * @param iTransfoElem the RobotTransformationElement sub element of the robot.
   * @param iVisibleFlag the visible flag to set on the RobotTransformationElement widget.
   * @see #SetLayoutWhenUnvisibleFlag
   * @see #SetVisibleFlag
   */
  void SetTransfoElemVisibleFlag(RobotTransformationElement iTransfoElem, const CATBoolean& iVisibleFlag);
  /**
   * @return the visible flag of a RobotTransformationElement.
   * @see #SetTransfoElemVisibleFlag
   */
  CATBoolean GetTransfoElemVisibleFlag(RobotTransformationElement iTransfoElem);

  /**
   * Sets the flag modifying the enable state of the robot element widget.
   * The disabled element is not pickable and is look is changed.
   * if one of its parent is not enabled. To have the information about enability (?)
   * state of a widget, call GetTransfoElemEnableFlag.
   * @param iTransfoElem the RobotTransformationElement sub element of the robot.
   * @param iEnableFlag the enable flag to set on the RobotTransformationElement widget.
   * @see #SetEnableFlag
   */
  void SetTransfoElemEnableFlag(RobotTransformationElement iTransfoElem, const CATBoolean& iEnableFlag);
  /**
   * @return the enable flag of a RobotTransformationElement.
   * @see #SetTransfoElemEnableFlag
   */
  CATBoolean GetTransfoElemEnableFlag(RobotTransformationElement iTransfoElem);

  /**
   * @return the CheckState of a specified scaling RobotTransformationElement.
   */
  CATBoolean GetHandleScaleCheckState(CATV3DCtlRobot::RobotTransformationElement iTransfoElem);

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationXY.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTXYEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationXY.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTXYEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationXZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTXZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationXZ.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTXZEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationYZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTYZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationYZ.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTYZEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleRXYEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::RotationZ.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleRXYEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationY.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleRXZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::RotationY.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleRXZEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationX.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleRYZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::RotationX.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleRYZEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::RotationCenter.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleRCenterEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::RotationCenter.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleRCenterEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationX.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTXEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationX.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTXEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationY.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTYEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationY.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTYEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::TranslationZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::TranslationZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTZEnableFlag() const;

    /**
   * Sets the visibility flag of RobotTransformationElement::ScaleX.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleSXEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::ScaleX.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleSXEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::ScaleY.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleSYEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::ScaleY.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleSYEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::ScaleZ.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleSZEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::ScaleZ.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleSZEnableFlag() const;

  /**
   * Sets the visibility flag of RobotTransformationElement::Dock.
   * @param iEnableFlag the Enable flag to set on the widget. Default value is TRUE.
   * @see #SetTransfoElemEnableFlag
   */
  void SetHandleTOEnableFlag(const CATBoolean& iEnableFlag);
  /**
   * @return the Enable flag of RobotTransformationElement::Dock.
   * @see #GetTransfoElemEnableFlag
   */
  const CATBoolean& GetHandleTOEnableFlag() const;

  void SetHandleSXCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleSXCheckState() const;

  void SetHandleSYCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleSYCheckState() const;

  void SetHandleSZCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleSZCheckState() const;

  void SetHandleRXYCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleRXYCheckState() const;

  void SetHandleRYZCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleRYZCheckState() const;

  void SetHandleRXZCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleRXZCheckState() const;

  void SetHandleRCenterCheckState(const CATBoolean& iState);
  const CATBoolean& GetHandleRCenterCheckState() const;

  void SetLabelX(const CATUnicodeString& i_text);
  const CATUnicodeString& GetLabelX() const;

  void SetLabelY(const CATUnicodeString& i_text);
  const CATUnicodeString& GetLabelY() const;

  void SetLabelZ(const CATUnicodeString& i_text);
  const CATUnicodeString& GetLabelZ() const;

  void SetUserResizeFactor(const float& iFactor);
  const float& GetUserResizeFactor() const;

  void SetUserResizeFlag(const CATBoolean& iFlag);
  const CATBoolean& GetUserResizeFlag() const;

  void SetShowManipulatedSenderOnlyFlag(const CATBoolean& iFlag);
  const CATBoolean& GetShowManipulatedSenderOnlyFlag() const;

  void SetHandleTXStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTXStepFlag() const;

  void SetHandleTXStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTXStepScaleFactor() const;

  void SetHandleTXStepIncrement(const double& iStepIncrement);
  const double& GetHandleTXStepIncrement() const;

  void SetHandleTYStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTYStepFlag() const;

  void SetHandleTYStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTYStepScaleFactor() const;

  void SetHandleTYStepIncrement(const double& iStepIncrement);
  const double& GetHandleTYStepIncrement() const;

  void SetHandleTZStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTZStepFlag() const;

  void SetHandleTZStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTZStepScaleFactor() const;

  void SetHandleTZStepIncrement(const double& iStepIncrement);
  const double& GetHandleTZStepIncrement() const;

  void SetHandleRXYStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleRXYStepFlag() const;

  void SetHandleRXYStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleRXYStepScaleFactor() const;

  void SetHandleRXYStepIncrement(const double& iStepIncrement);
  const double& GetHandleRXYStepIncrement() const;

  void SetHandleRXZStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleRXZStepFlag() const;

  void SetHandleRXZStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleRXZStepScaleFactor() const;

  void SetHandleRXZStepIncrement(const double& iStepIncrement);
  const double& GetHandleRXZStepIncrement() const;

  void SetHandleRYZStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleRYZStepFlag() const;

  void SetHandleRYZStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleRYZStepScaleFactor() const;

  void SetHandleRYZStepIncrement(const double& iStepIncrement);
  const double& GetHandleRYZStepIncrement() const;

  void SetHandleTXYStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTXYStepFlag() const;

  void SetHandleTXYStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTXYStepScaleFactor() const;

  void SetHandleTXYStepIncrement(const double& iStepIncrement);
  const double& GetHandleTXYStepIncrement() const;

  void SetHandleTXZStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTXZStepFlag() const;

  void SetHandleTXZStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTXZStepScaleFactor() const;

  void SetHandleTXZStepIncrement(const double& iStepIncrement);
  const double& GetHandleTXZStepIncrement() const;

  void SetHandleTYZStepFlag(const CATBoolean& iState);
  const CATBoolean& GetHandleTYZStepFlag() const;

  void SetHandleTYZStepScaleFactor(const double& iScaleFactor);
  const double& GetHandleTYZStepScaleFactor() const;

  void SetHandleTYZStepIncrement(const double& iStepIncrement);
  const double& GetHandleTYZStepIncrement() const;

  void SetHandleTXYStepAxis(const int& iStepAxis);
  const int& GetHandleTXYStepAxis() const;

  void SetHandleTXZStepAxis(const int& iStepAxis);
  const int& GetHandleTXZStepAxis() const;

  void SetHandleTYZStepAxis(const int& iStepAxis);
  const int& GetHandleTYZStepAxis() const;

  /*
   * Sets the visibility flag of HandleTXCheckState
   * @param iCheckFlag the Check flag to set on the widget. Default value is FALSE.
   */
  void SetHandleTXCheckState(const CATBoolean& iCheckFlag);
  /**
   * @return the Check flag of HandleTXCheckState
   */
  const CATBoolean& GetHandleTXCheckState() const;

  /**
   * Sets the Check flag of HandleTXCheckState
   * @param iCheckFlag the Check flag to set on the widget. Default value is FALSE.
   */
  void SetHandleTYCheckState(const CATBoolean& iCheckFlag);
  /**
   * @return the Check flag of HandleTXCheckState
   */
  const CATBoolean& GetHandleTYCheckState() const;

  /**
   * Sets the Check flag of HandleTXCheckState
   * @param iCheckFlag the Check flag to set on the widget. Default value is FALSE.
   */
  void SetHandleTZCheckState(const CATBoolean& iCheckFlag);
  /**
   * @return the Check flag of HandleTXCheckState
   */
  const CATBoolean& GetHandleTZCheckState() const;

  /**
   * Sets the LookType of Robot
   * @see #LookType
   */
  void SetLookType(const LookType& iLookType);
  /**
   * @return the LookType of Robot
   * @see #LookType
   */
  CATV3DCtlRobot::LookType GetLookType();

  /**
   * @return @ TRUE if the robot is docked/cornered, @c FALSE else.
   *
   * @see #SetLookType
   * @see #LookType
   */
  const CATBoolean& GetDockState() const;

  /**
   * Sets the robot position using layout constraint axis
   * @see #SetLay3DConstraints
   */
  void SetAxis(const CATMathAxis& iAxis, const CATBoolean& iWithTranslationAnimation=FALSE);
  /**
   * @return the robot position
   *
   * @see #SetAxis
   */
  CATMathAxis GetAxis();

  /**
   * sets the manipulator position to a new position from the initial position position with an amplitude ImposDist.
   * @param iImposDist
   * The distance to force translation.
   */
  void SetOriginf(const CATMathPointf &iOriginf);
  /**
   * @return the imposed distance from initial position.
   * @see SetAbsDistance
   */
  CATMathPointf GetOriginf() const;

  /**
   * @return the RobotTransformationElement under the mouse.
   * Can be used to know which RobotTransformationElement is manipulated
   *
   * @see #RobotTransformationElement
   */
  CATV3DCtlRobot::RobotTransformationElement GetTransfoType();

  /**
   * @return the RobotTransformationElement global type under the mouse.
   * Can be either @c Unknown @c Translation @c Rotation @c Scaling @c Label
   * Can be used to know which kind of element is manipulated
   *
   * @see #RobotTransformationElement
   */
  CATV3DCtlRobot::RobotTransformationElement GetGeneralTransfoType();

  /**
   * @return the SnapItemType resulting of robot manipulation.
   *
   * @see #SnapItemType
   */
  CATV3DCtlRobot::SnapItemType GetSourceType();

  /**
   * Handles all events of robot view. Should be private.
   */
  void HandleEvent(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);

  /**
   * Handles all translate events of the robot manipulators
   * (HandleTranslation and HandlePlaneTranslation). 
   */
  void HandleTranslate(CATBaseUnknown * i_pSender, CATV3DTranslationEventArgs * i_pArgs);

  /**
   * Handles all rotate events of the robot manipulators
   * (HandleRotation).
   */
  void HandleRotate(CATBaseUnknown * i_pSender, CATV3DRotationEventArgs * i_pArgs);

  /**
   * Handles all Scale events of the robot manipulators
   * (HandleScale). 
   */
  void HandleScale(CATBaseUnknown * i_pSender, CATV3DTranslationEventArgs * i_pArgs);

  /**
   * Service to hide the viewer reference axis. Useful wen docking the robot on botom right corner
   */
  void SetViewerReferenceAxisVisibility(const int iVisibility);

  /**
   * Sets the auto position update behavior flag.
   * Give a default position behavior to the handle (Aplly transformation to the view)
   * In any cases, this flag is FALSE if the handle isn't the highest top widget.
   * @param iAutoPositionFlag the flag to set on the handle. Default value is FALSE
   * @see #GetAutoPositionUpdateFlag
   */
  void SetAutoPositionUpdateFlag(const CATBoolean& iAutoPositionFlag);
  /**
   * @return the follow position behavior flag.
   * @see #SetAutoPositionUpdateFlag
   */
  const CATBoolean& GetAutoPositionUpdateFlag() const;

private:
  void RunTranslationAnimation(const CATMathPointf &iImposFrom,const CATMathPointf &iImposTo);

  void ManageCheck(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);

  void UnCheckAll();

  void SetAllElementsVisibleFlag(const CATBoolean& iVisibleFlag);

  void ShowManipulatedSenderOnly();

  void RestoreElementsStates();

  void UpdateVisibleElementList(RobotTransformationElement iTransfoElem, const CATBoolean& iVisibleFlag);

private:
  CATV3DCtlRobot (CATV3DCtlRobot &);
  CATV3DCtlRobot& operator=(CATV3DCtlRobot&);

  CATBoolean _HandleTXYEnableFlag;
  CATBoolean _HandleTXZEnableFlag;
  CATBoolean _HandleTYZEnableFlag;
  CATBoolean _HandleRXYEnableFlag;
  CATBoolean _HandleRXZEnableFlag;
  CATBoolean _HandleRYZEnableFlag;
  CATBoolean _HandleRCenterEnableFlag;
  CATBoolean _HandleTXEnableFlag;
  CATBoolean _HandleTYEnableFlag;
  CATBoolean _HandleTZEnableFlag;
  CATBoolean _HandleSXEnableFlag;
  CATBoolean _HandleSYEnableFlag;
  CATBoolean _HandleSZEnableFlag;
  CATBoolean _HandleTOEnableFlag;

  CATBoolean _HandleSXCheckState;
  CATBoolean _HandleSYCheckState;
  CATBoolean _HandleSZCheckState;

  CATBoolean _HandleRXYCheckState;
  CATBoolean _HandleRYZCheckState;
  CATBoolean _HandleRXZCheckState;
  CATBoolean _HandleRCenterCheckState;

  CATBoolean _HandleTXCheckState;
  CATBoolean _HandleTYCheckState;
  CATBoolean _HandleTZCheckState;

  CATBoolean _HandleTXStepFlag;
  CATBoolean _HandleTYStepFlag;
  CATBoolean _HandleTZStepFlag;
  CATBoolean _HandleRXYStepFlag;
  CATBoolean _HandleRXZStepFlag;
  CATBoolean _HandleRYZStepFlag;
  CATBoolean _HandleTXYStepFlag;
  CATBoolean _HandleTXZStepFlag;
  CATBoolean _HandleTYZStepFlag;

  double _HandleTXStepScaleFactor;
  double _HandleTYStepScaleFactor;
  double _HandleTZStepScaleFactor;
  double _HandleRXYStepScaleFactor;
  double _HandleRXZStepScaleFactor;
  double _HandleRYZStepScaleFactor;
  double _HandleTXYStepScaleFactor;
  double _HandleTXZStepScaleFactor;
  double _HandleTYZStepScaleFactor;

  double _HandleTXStepIncrement;
  double _HandleTYStepIncrement;
  double _HandleTZStepIncrement;
  double _HandleRXYStepIncrement;
  double _HandleRXZStepIncrement;
  double _HandleRYZStepIncrement;
  double _HandleTXYStepIncrement;
  double _HandleTXZStepIncrement;
  double _HandleTYZStepIncrement;

  int _HandleTXYStepAxis,_HandleTXZStepAxis,_HandleTYZStepAxis;

  int _ReferenceAxisVisibility;

  CATUnicodeString _LabelX, _LabelY, _LabelZ;

  CATBoolean _2DStyle;
  CATBoolean _CheckStyle;
  CATBoolean _OrientatorStyle;
  CATBoolean _IsScaling;
  CATBoolean _hasTranslated;
  CATBoolean _hasRoted;
  CATBoolean _HaveBeenGhosted;
  int _IsShowingManipulatedSenderOnly;

  RobotTransformationElement _TransfoType;
  RobotTransformationElement _GeneralTransfoType;
  LookType _LookType;

  SnapItemType _sourceType;

  CATListOfInt _VisibleElementList;

  float _UserResizeFactor;
};

CATSYP_DECLARE_ENUMFACTORY (ExportedByVisuImmersive3D, CATV3DCtlRobot__LookType);

#endif
