#ifndef CATVidCtlCustomCombo_h
#define CATVidCtlCustomCombo_h

// COPYRIGHT Dassault Systemes 2013

// VisuImmersiveDialog
#include <CATVidCtlBaseCombo.h>
#include <VisuDialog.h>

// IntrospectionInfrastructure framework
#include <CATISYPIntrospectable.h>
#include <CATSYPArray.h>

// System framework
#include <CATBoolean.h>
#include <CATUnicodeString.h>

/**
 * @ingroup VIDControls
 *
 * Class representing a customizable combo box widget. 
 * The CATVidCtlCustomCombo class is based on the CID model / view infrastructure, giving the flexibility to
 * developers to customize the combo box data model and view.
 *
 * This class gives the ability to override the data template of the items displayed in the combo box drop-down list 
 * (for example to add some additional information or commands) thanks to the SetDataTemplate method. 
 * It allows also the customization of the top line data template (with the SetTopLineDataTemplateName method) : 
 * the selected item displayed in the top line can then have a different look than the items displayed in the drop-down list.
 *
 * If you only need a simple standard combo box with icons and text as items, you can use the CATVidCtlSimpleCombo class.
 */
class ExportedByVisuDialog CATVidCtlCustomCombo : public CATVidCtlBaseCombo
{
  CATDeclareClass;

public:

  static CATVidCtlCustomCombo * CreateCustomCombo(CATCommand *i_pParent, const CATString & i_pIdentifier);

  // Constructors
  CATVidCtlCustomCombo(CATCommand *i_pParent, const CATString & i_pIdentifier);
  CATVidCtlCustomCombo();

  /**
   * Sets the data template to use to build the view of each item displayed by
   * the combo box.
   * This method must be called before adding items to the combo box.
   *
   * @param i_dataTemplate the data template name to use to build the view of
   * each item displayed by the combo box. Can't be an empty unicode string.
   *
   * @param i_styleSheet the sypstyle file in which the data template is defined.
   * Can't be an empty unicode string.
   */
  void SetDataTemplate(const CATUnicodeString& i_dataTemplateName, const CATUnicodeString& i_styleSheet);

  /**
   * Returns the stylesheet in which the data template to use to compute the view of
   * displayed items is defined.
   */
  CATUnicodeString GetDataTemplateStyleSheet() const;

  /**
   * Returns the name of the data template to use to compute the view of displayed items.
   */
  CATUnicodeString GetDataTemplateName() const;

  /**
   * Sets the name of the data template to use to compute the view of the top line.
   * The style sheet is the one specified by the DataTemplateStyleSheet property value.
   * If the TopLineDataTemplateName property is not defined, then the DataTemplateName
   * property value will be used.
   */
  void SetTopLineDataTemplateName(const CATUnicodeString& i_topLineDataTemplateName);

  /**
   * Returns the name of the data template to use to compute the view of the top line.
   */
  CATUnicodeString GetTopLineDataTemplateName() const;

  /**
   * Sets the name of the data template to use to compute the view of the top line when
   * no item is selected in the combo box.
   * The style sheet is the one specified by the DataTemplateStyleSheet property value.
   * If the DefaultTopLineDataTemplateName property is not defined, then the TopLineDataTemplateName
   * property value will be used. If the TopLineDataTemplateName property is not defined, 
   * then the DataTemplateName property value will be used.
   */
  void SetDefaultTopLineDataTemplateName(const CATUnicodeString& i_defaultTopLineDataTemplateName);

  /**
   * Returns the name of the data template to use to compute the view of the top line when 
   * no item is selected in the combo box.
   */
  CATUnicodeString GetDefaultTopLineDataTemplateName() const;

  /** 
   * Sets the default data used to generate the top line widget when 
   * no item is selected in the combo box.
   */
  void SetDefaultTopLineData(const CATISYPIntrospectable_var& i_defaultTopLineData);

  /** 
   * Returns the default data used to generate the top line widget when 
   * no item is selected in the combo box.
   */
  CATISYPIntrospectable_var GetDefaultTopLineData() const;

  /**
   * Sets the given line data at the specified index, by inserting a new line or modifying the existing one.
   * The view of the corresponding line will be generated by using the data template specified with the 
   * properties DataTemplateStyleSheet and DataTemplateName.
   * @param i_lineData
   * Data representing the model of the line to insert or to modify
   * @param i_index
   * Index corresponding to the line to insert or to modify
   * @param i_modifyFlag
   * If this parameter is set to FALSE, a new line is inserted at the given index, if set to TRUE, the existing line
   * is modified.
   * @return the index of the added or modified line
   */
  int SetLineData(const CATISYPIntrospectable_var& i_lineData, int i_index = -1, CATBoolean i_modifyFlag = FALSE);

  /**
   * Retrieves the line data at the given index.
   */
  CATISYPIntrospectable_var GetLineData(int i_index) const;

  /**
   * Appends the given list of introspectable items to the combo box model.
   */
  void AddLines(const CATSYPDynArray<CATBaseUnknown_var> & i_lines);
  
  /**
   * Returns the data used to generate the top line widget
   */
  CATISYPIntrospectable_var GetTopLineData() const;

  /**
   * Inserts a separator item into the combo box at the given index.
   * @param i_index index where the separator must be inserted.  
   * If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. 
   * If the index is zero or negative, the new item is prepended to the list of existing items.
   */
  void InsertSeparator(int i_index);

  /**
   * Inserts a header item into the combo box at the given index.
   * @param i_index index where the header must be inserted.  
   * If the index is equal to or higher than the total number of items, the new item is appended to the list of existing items. 
   * If the index is zero or negative, the new item is prepended to the list of existing items.
   * @param i_headerText text of the header
   */
  void InsertHeader(int i_index, const CATUnicodeString& i_headerText);

  /**
   * Sets the text height of the headers.
   * By default, the HeaderTextHeight property is set to 16.
   * @see InsertHeader
   */
  void SetHeaderTextHeight(unsigned int i_headerTextHeight);

  /**
   * Returns the text height of the headers.
   */
  unsigned int GetHeaderTextHeight() const;

  /**
  * Set the property used for the keyboard navigation.
  * Note that if this property is not set, no keyboard navigation with "letter key" will be possible for this combo type.
  */
  void SetUsedPropertyForkeyboardNav(const CATUnicodeString iProperty);

  /**
  * Returns the text height of the headers.
  */
  CATUnicodeString GetUsedPropertyForkeyboardNav()const;

protected:

  virtual ~CATVidCtlCustomCombo();

	virtual void TemplateDataUpdated();

private:
  // Copy constructor and equal operator
  CATVidCtlCustomCombo (CATVidCtlCustomCombo &);
  CATVidCtlCustomCombo& operator=(CATVidCtlCustomCombo& original);

  CATUnicodeString _usedPropertyForkeyboardNav;
};

#endif // CATVidCtlCustomCombo_h
