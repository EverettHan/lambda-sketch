// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPolyMCurveLoopExtractionOper.h
// Header definition of CATPolyMCurveLoopExtractionOper
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  March 2005  Creation: Code generated by the CAA wizard  rxu
//===================================================================
#ifndef CATPolyMCurveLoopExtractionOper_H
#define CATPolyMCurveLoopExtractionOper_H

#include "CATPolyMCurveAnalyzeOperators.h"
#include "CATPolyMCurveAnalyzeOper.h"

#include "CATListOfInt.h"
#include "CATListPV.h"
#include "CATBoolean.h"


/**
 * This operator regularize a closed mesh curve by (1) removing overlapping mesh points
 * and mesh curve segments; (2) extracts sub-loops. Due to operation (1) a closed mesh
 * curve may become several separate closed mesh curves.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */

class CATPolyMCurveSelfIntersectionMap;


class ExportedByCATPolyMCurveAnalyzeOperators CATPolyMCurveLoopExtractionOper: public CATPolyMCurveAnalyzeOper
{

public:

   // Standard constructors and destructors
   CATPolyMCurveLoopExtractionOper();
   virtual ~CATPolyMCurveLoopExtractionOper();

  /**
   * Set curve parameters
   * @param iNumPoints
   *   the number of points
   * @param iIntersctionMap
   *   the curve intersection map.
   * @param iIsCurveClosed
   *   TRUE if the curve is closed (start and end points are the same)
   */
   void SetParameters(const int iNumPoints, const CATPolyMCurveSelfIntersectionMap* iIntersctionMap, const CATBoolean iIsCurveClosed);

  /**
   * Run the operator
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
   HRESULT Run();

  /**
   * Returns the results
   * @param oLoops
   *  List of mesh curves indices each forms a separate closed loop.
   *  Caller has to release the memory.
   * @param oOpenCurves
   *  List of mesh curves indices each forms an open curve.
   *  Caller has to release the memory.
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
   HRESULT GetResults(CATListPV& oLoops, CATListPV& oOpenCurves);

private:

   enum 
   {
      NonProcessedSegment = 0,
      ProcessedSegment
   };

   void ReleaseResult();
   void FlagMasterCurveSegments(const CATBoolean iFlagForOverlapExtraction);
   HRESULT ExtractLoopFromPoint(const int iPoint);
   HRESULT ExtractLoop(const int iLoopStartIndex, CATListOfInt& ioLoopPoints);
   HRESULT ExtractOpenCurveSegments();
   int NextPoint(const int iCrrPoint);

   //--------- Data:
   CATListPV _ResLoops, _ResOpenCurves;
   const CATPolyMCurveSelfIntersectionMap* _IntersectionMap;
   int _NumberOfPoints;
   CATListOfInt _SegmentFlags;
   CATBoolean _IsCurveClosed;
 };

#endif
