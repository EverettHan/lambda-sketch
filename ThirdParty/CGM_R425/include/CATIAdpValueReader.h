// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIAdpValueReader.h
// Define the CATIAdpValueReader interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIAdpValueReader_H
#define CATIAdpValueReader_H


/**
 * @level Protected
 * @usage U3
 */


#include "CATPLMIntegrationAccess.h"
#include "CATBaseUnknown.h"
#include "CATOmxAny.h"


class CATUnicodeString;
class CATTime;
class CATBinary;



#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationAccess IID IID_CATIAdpValueReader;
#else
extern "C" const IID IID_CATIAdpValueReader ;
#endif

//------------------------------------------------------------------

/**
 * This interface provides a read access to an attribute value.
 * <br><b>Role</b>: provides a read access to an attribute value.
 */


class ExportedByCATPLMIntegrationAccess CATIAdpValueReader: public CATBaseUnknown
{
  CATDeclareInterface;

  /**
   * These are the different types the CATIAdpValueReader can be.
   */
  enum AdpValueType{
    integer_val,
    double_val,
    string_val,
    time_val,
    binary_val,
    boolean_val,
    userdefined_val,
    undefined};

  public:

  /**
   * Returns the type of the value.
   * <br><b>Role</b>: This method gives the type of the attribute value.
   * <ul><li>So for example if the value is an <code>integer_val</code>, use #GetIntValue to get the value.</li></ul>
   * @return
   *   The type of the attribute value;
   *   If the value is unset, it returns undefined.
   */
  virtual AdpValueType GetType()=0;

  /**
   * Gets the value of an integer.
   * <br><b>Role</b>: Gives the value of an integer value.
   * @param oValue [out] The integer value.
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the integer value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type integer_val.</li>
   *   </ul>
   */
  virtual HRESULT GetIntValue(int & oValue) =0;

  /**
   * Gets the value of a double.
   * <br><b>Role</b>: Gives the value of a double value.
   * @param oValue [out] the double value.
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the double value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type double_val.</li>
   *   </ul>
   */
  virtual HRESULT GetDoubleValue(double & oValue) =0;

  /**
   * Gets the value of a string.
   * <br><b>Role</b>: Gives the value of a string value.
   * @param oValue [out] the string value.
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the string value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type string_val.</li>
   *   </ul>
   */
  virtual HRESULT GetStringValue(CATUnicodeString & oValue) =0;

  /**
   * Gets the value of a time.
   * <br><b>Role</b>: Gives the value of a time value.
   * @param oValue [out] the CATTime value.
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the time value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type time_val.</li>
   *   </ul>
   */
  virtual HRESULT GetTimeValue(CATTime & oValue) =0;

  /**
   * Gets the value of a binary.
   * <br><b>Role</b>: Gives the value of a binary value
   * @param oValue [out] the CATBinary value
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the binary value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type binary_val.</li>
   *   </ul>
   */
  virtual HRESULT GetBinaryValue(CATBinary & oValue) =0;

  /**
   * Gets the value of a boolean.
   * <br><b>Role</b>: Gives the value of a boolean value.
   * @param oValue [out] the boolean value.
   * @return
   *   <ul>
   *   <li><code>S_OK</code> if the boolean value is correctly provided.</li>
   *   <li><code>E_FAIL</code> if the value is not of type boolean_val.</li>
   *   </ul>
   */
  virtual HRESULT GetBooleanValue(CATBoolean & oValue) =0;

  /**
  * Gets the value.
  */
  virtual CATOmxAny GetOmxAny()=0;
};

//------------------------------------------------------------------

#endif
