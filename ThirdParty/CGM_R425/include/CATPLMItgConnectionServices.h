// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPLMItgConnectionServices.h
// Header definition of CATPLMItgConnectionServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  PMM
//===================================================================
/**
* @level Protected
* @usage U1
*/
#ifndef CATPLMItgConnectionServices_H
#define CATPLMItgConnectionServices_H

#include "CATPLMIntegrationBase.h"

#include "CATBoolean.h"
#include "IUnknown.h"
#include "CATOmxArray.h"
#include "CATUnicodeString.h"
#include "CATOmxList.h"
#include "CATOmyAsserts.h"
#include "CATIPLMCompConnectionInstance.h"
#include "CATPLMRepositoryName.h"

class CATPLMConnectionParameters;
class CATUnicodeString;
class CATListValCATString;

//-----------------------------------------------------------------------

/**
* Class to manage PLM connections to VPDM.
*
* <br><b>Role</b>: This class provides all basic functions to manage connection to Virtual Product Data Model.
*   The connection consists in creating  an access to the repository storing the VPDM. The repository is also named <b>provider</b>.
*   You probably should use identification services to valuate user and password.
*
*   <ul> The available repository are:
*   <li>ENOVIA , named <b>EV5</b> in all APIs</li>
*   </ul>
*/
class ExportedByCATPLMIntegrationBase CATPLMItgConnectionServices
{
public:

  /**
   * Connects to a repository.
   * <br><b>Role:</b>This method allows you to connect to a repository.
   * This method does not work anymore with User and Password which are ignored since identifcation services introduction.
   * @param iRepository
   *   The repository name.
   * @param iUserID
   *   The user name for connection
   * @param iUserPasswd
   *   The user password for connection
   * @param iServer
   *   The server name for connection (expected format is:
   *   '<ServerName>:<PortNumber>/<Uri>' (M1) , or '<ServerName>:<PortNumber>'
   *   '<fullfilename (directory/whatyouwant.xml)>:<otherdirectory>' or '<fullfilename (directory\whatyouwant.xml)>#<otherdirectory>' (TST) )
   * @param iRole
   *   The user role on server for connection
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: Connection successfull. </li>
   *   <li><tt>S_FALSE</tt>: Already connected. </li>
   *   <li><tt>E_FAIL</tt>: Error during connection.</li>
   *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
   *  </ul>
   */
  static HRESULT ConnectToProvider(const char * iRepository,
                                   const CATUnicodeString & iUserID,
                                   const CATUnicodeString & iUserPasswd,
                                   const CATUnicodeString & iServer,
                                   const CATUnicodeString & iRole);
  /**
   * Connects to a repository.
   * <br><b>Role:</b>This method allows you to connect to a repository.
   * @param iRepository
   *   The repository name.
   * @param iConnectionParam
   *   The CATAdpConnectionParameters
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: Connection successfull. </li>
   *   <li><tt>S_FALSE</tt>: Already connected. </li>
   *   <li><tt>E_FAIL</tt>: Error during connection.</li>
   *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
   *  </ul>
   */
  static HRESULT ConnectToProvider(const char * iRepository,
                                   CATPLMConnectionParameters* iConnectionParam);

  /**
   * Checks connection to a repository.
   * <br><b>Role:</b>This method verifies that connection is valid.
   * @param iRepository
   *   The repository name.
   * @param oIsConnected
   *   TRUE if already connected, FALSE otherwise.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: Check successfully done. </li>
   *   <li><tt>E_FAIL</tt>: Error during check.</li>
   *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
   *  </ul>
   */
  static HRESULT IsConnected(const char * iRepository,
                             CATBoolean& oIsConnected);

  /**
   * Disconnects from a repository.
   * <br><b>Role:</b>This method allows you to disconnect from a repository.
   * @param iRepository
   *   The repository name.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: Disconnection successfull. </li>
   *   <li><tt>S_FALSE</tt>: Already disconnected. </li>
   *   <li><tt>E_FAIL</tt>: Error during disconnection.</li>
   *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
   *  </ul>
   */
  static HRESULT Disconnect(const char * iRepository);


  /**
   * Returns the list of connected repository.
   * <br><b>Role:</b>This method allows you to get The list of connected repository.
   * @param oProviders
   *   The list of repository name.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: successfull. </li>
   *   <li><tt>E_FAIL</tt>: Error during operation.</li>
   *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct.</li>
   *  </ul>
   */
  static HRESULT GetConnectedProviders(CATOmxList<CATIPLMCompConnectionInstance> & oRepositoryList);
  static HRESULT GetConnectedProviders(CATListValCATString &oProviders);
  //Use with CATOmxArray preferably 
  //template<class Collec>
  //static HRESULT GetConnectedProviders(Collec & oRepositoryList)
  //{
  //   CATOmxList<CATIPLMCompConnectionInstance> spConnectedProviders;
  //   CHK_SUCCESS_AND_RET_HR(GetConnectedProviders(spConnectedProviders));
  //   for(int i = 1; i<= spConnectedProviders.Size(); i++)
  //   {
  //      CATPLMRepositoryName repName;
  //      CATOmxSR<CATIPLMCompConnectionInstance> pConnection = spConnectedProviders[i];
  //      CHK_AND_CONT(pConnection);
  //      if(SUCCEEDED(pConnection->GetType(&repName)))
  //          oRepositoryList.Append(repName.ConvertToChar());
  //   }  
  //   return S_OK;
  // }


  /**
   * Switch the security context of the user.
   * <br><b>Role:</b>This method will try to clean internal data to accept the switch.
   * @param iRepository
   *   The repository for the switch.
   * @param iRole
   *   The new role to use.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: successfull. </li>
   *   <li><tt>E_FAIL</tt>: Error during operation. The switch was not performed</li>
   *  </ul>
   */
  static HRESULT SwitchSecurityContext(const char * iRepository, const CATUnicodeString & iRole);

};
//-----------------------------------------------------------------------

#endif
