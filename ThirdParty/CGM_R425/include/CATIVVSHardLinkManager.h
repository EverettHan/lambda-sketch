/**
 * @level Private
 * @usage U3
 */
//===================================================================
// COPYRIGHT Microsoft 2011/05/19
//===================================================================
// CATIVVSHardLinkManager.cpp
// Header definition of class CATIVVSHardLinkManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/05/19 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIVVSHardLinkManager_H
#define CATIVVSHardLinkManager_H

#include "VVSVaultSiteProtocol.h"
#include "CATBaseUnknown.h"

#include "CATUnicodeString.h"
#include "CATVVSUrl.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByVVSVaultSiteProtocol  IID IID_CATIVVSHardLinkManager;
#else
extern "C" const IID IID_CATIVVSHardLinkManager;
#endif

class ExportedByVVSVaultSiteProtocol CATIVVSHardLinkManager : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** 
  * Indicate whether the vault site in charge of the given url support LargeFile protocol
  *
  * @param iUrl
  *  LargeFile Url
  * @return
  *  <ul><li><code>S_OK</code>: the vault site supports LargeFile protocol</li>
  *      <li><code>S_FALSE</code>: the vault site does not support LargeFile protocol</li>
  *      <li><code>E*</code>: unexpected error.</li>
  *  </ul>
  */
  virtual HRESULT SupportLargeFile(const CATVVSUrl& iUrl) = 0;

  /** 
  * Creates an URL that can be used to create Hardlink.
  * <role/>
  * The path is implicitly stored in the output url, it can be retrieve with the service <code>ConvertHardLinkUrlToPath</code>
  * In M1, this url contains the path of the WorkingDir and of the StagingDir
  * @param iSubPath
  *  Callers must provide a file name and eventually some subdirectories in which the hard link has to be created. 
  *  For Example : dir1/dir2/file.extension
  * @param oCompleteUrl  
  *  Url containing the file access.
  *  Note: The Site field of the Url indicates which logical file system stores the file
  * @return
  *  <ul><li><code>S_OK</code>: the file was successfully created.</li>
  *      <li><code>E_ACCESSDENIED</code>: The path already contains a file .</li>
  *      <li><code>E*</code>: unexpected error.</li>
  *  </ul>
  */
  virtual HRESULT ComputeURLForLargeFileAccess (const CATUnicodeString& iSubPath, CATVVSUrl& oCompleteUrl) = 0;

  /** 
  * Retrieve the valid full file path of the hardlink 
  *
  * @param iSrcUrl
  *  Hardlink Url of an existing file 
  * @param oFullPath  
  *  The hardlink full path 
  * @return
  *  <ul><li><code>S_OK</code>: the hard link was successfully created.</li>
  *      <li><code>E*</code>: unexpected error.</li>
  *  </ul>
  */
  virtual HRESULT ConvertHardLinkUrlToPath(const CATVVSUrl& iSrcUrl, CATUnicodeString & oFullPath) = 0;

};

//-----------------------------------------------------------------------

#endif
