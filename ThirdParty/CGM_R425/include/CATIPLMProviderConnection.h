// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMProviderConnection.h
// Define the CATIPLMProviderConnection interface
//
//===================================================================
//
// Usage notes:
//   Manages the connection to the repository.
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U5
*/
#ifndef CATIPLMProviderConnection_H
#define CATIPLMProviderConnection_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#include "CATListValCATPLMCertificateToken.h"
#include "CATPLMResolutionKey.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMProviderConnection;
#else
extern "C" const IID IID_CATIPLMProviderConnection;
#endif

class CATPLMConnectionParameters;
class CATBinary;
class CATIPLMDispConnectionToken;
class CATUnicodeString;

//------------------------------------------------------------------

/**
* Interface managing the connection to the repository.
*/
class ExportedByCATPLMServicesItf CATIPLMProviderConnection : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Returns the connection parameters.
  * @param  oConnectionParameters [out, CATBaseUnknown#Release]
  *			connection parameters.
  *	@return
  *			Error code of function.
  */
  virtual HRESULT GetConnectionParameters(CATPLMConnectionParameters ** oConnectionParameters) = 0;

  /**
  * Returns the connection parameters as Binary stream.
  * @param  oConnectionParameters
  *			connection parameters.
  *	@return
  *			Error code of function.
  */
  virtual HRESULT GetConnectionParameters(CATBinary ** oConnectionParameters) = 0;

  /**
  * user and password necessary or not for current provider.
  * @param  oIsMandatory
  *			user and password necessary or not for current provider.
  *	@return
  *			Error code of function.
  */
  virtual HRESULT IsAuthentificationRequired(CATBoolean& oIsMandatory) = 0;

  /**
  * Returns S_OK if ready to connect - S_FALSE if not - E_FAIL if error -
  */
  virtual HRESULT IsReadyToConnect() = 0;

  /**
  * Prepare Connect by filling connection parameters involving in the CATPLMConnectionParameters Object.
  * As far as all required parameters are not valuated, the method provides updated CATPLMConnectionParameters as output
  * @param ioConnectionParameters
  *			connection parameters. This connection parameters can be updated. Some parameters can be added to the CATPLMConnectionParameters
  *	@return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>PrepareConnection is successful. Provider is ready to Connect</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Some Parameters are not valuated. Provider is not ready to Connect</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PrepareConnect(CATPLMConnectionParameters * ioConnectionParameters) = 0;

  /**
  * Prepare Connect by filling connection parameters as CATBinary
  * @param iConnectionParameters
  *			connection parameters.
  *	@return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>PrepareConnection is successful. Provider is ready to Connect</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Some Parameters are not valuated. Provider is not ready to Connect</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PrepareConnect(CATBinary * iConnectionParameters) = 0;

  /**
  *   Returns S_OK if connect - S_FALSE if not - E_FAIL if error -
  */
  virtual HRESULT IsConnected() = 0;

  /**
  *   Connect to the repository for the specified connection parameters involving in the PrepareConnect.
  *
  *	  @return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Connection is successful.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Connection partially done.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Connect() = 0;

  /**
  *   Disconnect to the repository
  *	@return
  *			Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Disconnection is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Already disconnected.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Disconnect() = 0;

  /**
  * Returns the Connection Token. If the provider is not connected and Ready to connect, this method connects to the repository
  * @param oToken
  *   Ouput parameter, connection token.
  * @return
  *   <ul>
  *   <li><tt>S_OK</tt>: Logon successful. </li>
  *   <li><tt>E_FAIL</tt>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</li>
  *  </ul>
  */
  virtual HRESULT GetConnectionToken(CATIPLMDispConnectionToken **oToken) = 0;

  /**
  * Returns the Certification Tokens declared by the provider.
  * @param oClientCertificates
  *   Ouput token list. This list will be checked by the PLMAdapter with a required token list.
  *   This can be empty.
  */
  virtual HRESULT GetPvCertificateTokens(CATListOfCATPLMCertificateToken  &oClientCertificates) = 0;

  /**
  * Asks the connection to switch the securirty context.
  * @param iNewSecurityContext
  *   This new security context should be one of the proposed security context for this user.
  */
  virtual HRESULT SwitchSecurityContext(const CATUnicodeString &iNewSecurityContext) = 0;


  /*
  * Setter of the ResolutionKey in PPrime Project
  * input:
  * @param iResolutionKey [in]
  *     Set the resolution key  associated to the CATIPLMProviderConnection Object
  * @return
  * <dt> <code>S_OK</code> <dd> if everythings is alright.
  */
  virtual HRESULT SetResolutionKey(CATPLMResolutionKey & iResolutionKey) = 0;

  /*
  * Getter of the ResolutionKey in PPrime Project
  * output:
  * @param oResolutionKey [out]
  *     Get the resolution key associated to the CATIPLMProviderConnection Object
  * @return
  * <dt> <code>S_OK</code> <dd> if everythings is alright.
  */
  virtual HRESULT GetResolutionKey(CATPLMResolutionKey & oResolutionKey) = 0;
};

CATDeclareHandler(CATIPLMProviderConnection, CATBaseUnknown);
//------------------------------------------------------------------

#endif
