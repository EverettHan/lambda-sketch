// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATSYPParallelTimeline.h
// Header definition of CATSYPParallelTimeline
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2007  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATSYPParallelTimeline_H
#define CATSYPParallelTimeline_H

#include <IntroInfra.h>
#include <CATSYPTimeline.h>
#include <CATISYPCollection.h>
#include <CATLISTV_CATBaseUnknown.h>
#include <CATLib.h>
#include <CATSYPDuration.h>

class CATSYPAnimationTimeline;


//----------------------------------------------------------------
// Class CATSYPParallelTimeline             
//----------------------------------------------------------------
/**
 * Base class for parrallel animations, i.e a component that groups animations.
 *
 * <b>Role</b>:
 * Regroups animations by providing functions to add timelines.<br/>
 * This is basically a list of CATSYPTimeline.<br/>
 * This is the base class for the storyboard (CATSYPStoryboard)<br/>
 *
 * <b>Wiki article :</b>
 * <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure#Animate_a_variable"><b>CodeWiki -> Animations -> Animate a variable</b></a>
 *
 * @see CATSYPTimeline
 * @see CATSYPStoryboard
 * @see CATSYPTimeline
 * @ingroup groupCIDIntrospection
 * @htmlinclude CATSYPTimeline.sypintro.html
 */
class ExportedByIntroInfra CATSYPParallelTimeline: public CATSYPTimeline
{
  CATDeclareClass;

public:
  /**
  * Constructs a group of timelines, which is also a timeline.
  * Default constructor.
  */
  CATSYPParallelTimeline ();
  /**
   * @name CATISYPCollection implementation
   */
  /*@{*/ 
	/** @copydoc CATISYPCollection#GetAt */
	virtual CATBaseUnknown_var GetAt( int i_index );
	/** @copydoc CATISYPCollection#GetCount */
	virtual int GetCount();
	/** @copydoc CATISYPCollection#Append */
	virtual void Append( const CATBaseUnknown_var &i_spObject );
	/** @copydoc CATISYPCollection#AppendList */
	virtual void AppendList( const CATSYPConstArray<CATBaseUnknown_var> &i_list );
	/** @copydoc CATISYPCollection#Remove */
	virtual void Remove( const CATBaseUnknown_var &i_spObject );
	/** @copydoc CATISYPCollection#RemoveList */
	virtual void RemoveList( const CATSYPConstArray<CATBaseUnknown_var> &i_list );
	/** @copydoc CATISYPCollection#Clear */
	virtual void Clear();
  /** @copydoc CATISYPCollection#Contains */
  virtual int Contains( const CATBaseUnknown_var &i_spObject );
	/** @copydoc CATISYPCollection#Append */
	virtual void Append( const CATLISTV(CATBaseUnknown_var) &i_list );
  /*@}*/

  CATISYPCollection_var GetItems(void) { return this; };
protected:
  /**
  * Virtual destructor.
  */
  virtual ~CATSYPParallelTimeline ();
  /**
  * @copydoc CATSYPTimeline::UpdateCurrentValue
  * Updates current value on all appended timelines.
  * Calls UpdateCurrentValue() on each timeline appended
  */
  virtual void UpdateCurrentValue();
  /**
  * Sets elapsed time on each appended timelines.
  * Calls SetElapsedTimeInSec(i_elapsedTimeInSec) on each timeline appended
  * @param i_elapsedTimeInSec elapsed time in seconds
  */
  virtual void SetElapsedTimeInSec(float i_elapsedTimeInSec);
private:
  /**
  * Copy constructor.
  */
  CATSYPParallelTimeline (CATSYPParallelTimeline &);
  /**
  * Equal operator
  */
  /**
  * Compute internal duration 
  */
  CATSYPDuration _ComputeInternalDuration(); 
  /**
  * Updates the duration when a child duration is modified
  */
  // 
  virtual void _UpdateDuration();

  CATSYPParallelTimeline& operator=(CATSYPParallelTimeline&);
  CATLISTV(CATBaseUnknown_var) _timelineList;
};
//-----------------------------------------------------------------------

#endif
