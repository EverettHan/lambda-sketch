// COPYRIGHT Dassault Systemes 2003

//===================================================================
//
// CATILieKnowledgeSheetSettingAtt.h
// Define the CATILieKnowledgeSheetSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  sob
//===================================================================
#ifndef CATILieKnowledgeSheetSettingAtt_H
#define CATILieKnowledgeSheetSettingAtt_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATILieKnowledgeSheetSettingAtt;
#else
extern "C" const IID IID_CATILieKnowledgeSheetSettingAtt ;
#endif

class CATSettingInfo;
class CATUnicodeString;

//------------------------------------------------------------------

/**  
* The interface to access a CATIAKnowledgeSheetSettingAtt.
* This interface may be used to read or modify in the CATIA\Tools\Option the settings values
* of Knowledge sheet.
*/

class ExportedByKnowledgeItf CATILieKnowledgeSheetSettingAtt: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the ParameterTreeViewWithValue attribute.
	* @param oParameterTreeViewWithValue
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to see parameter tree view without value
	* 	<br><tt>1 :</tt>   to see parameter tree view with value.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetParameterTreeViewWithValue( int&  ioParameterTreeViewWithValue ) = 0;
	
    /**
	* Sets the ParameterTreeViewWithValue attribute.
	* @param iParameterTreeViewWithValue
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to see parameter tree view without value
	* 	<br><tt>1 :</tt>   to see parameter tree view with value.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetParameterTreeViewWithValue( const int&    iParameterTreeViewWithValue ) = 0;
	
    /**
	* Retrieves the state of the ParameterTreeViewWithValue parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetParameterTreeViewWithValueInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the ParameterTreeViewWithValue parameter.
	* <br><b>Role</b>: Locks or unlocks the ParameterTreeViewWithValue parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetParameterTreeViewWithValueLock( unsigned char      iLocked ) = 0;
	
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the ParameterTreeViewWithFormula attribute.
	* @param ioParameterTreeViewWithFormula
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to see parameter tree view without formula
	* 	<br><tt>1 :</tt>   to see parameter tree view with formula.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetParameterTreeViewWithFormula( int&  ioParameterTreeViewWithFormula ) = 0;
	
    /**
	* Sets the ParameterTreeViewWithFormula attribute.
	* @param iParameterTreeViewWithFormula
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to see parameter tree view without formula
	* 	<br><tt>1 :</tt>   to see parameter tree view with formula.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetParameterTreeViewWithFormula( const int&    iParameterTreeViewWithFormula ) = 0;
	
    /**
	* Retrieves the state of the ParameterTreeViewWithFormula parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetParameterTreeViewWithFormulaInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the ParameterTreeViewWithFormula parameter.
	* <br><b>Role</b>: Locks or unlocks the ParameterTreeViewWithFormula parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetParameterTreeViewWithFormulaLock( unsigned char      iLocked ) = 0;
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the RelationsUpdateInPartContextSynchronousRelations attribute.
	* @param ioRelationsUpdateInPartContextSynchronousRelations
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   creation of unsynchronous relations
	* 	<br><tt>1 :</tt>   creation of synchronous relations.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextSynchronousRelations( int&  ioRelationsUpdateInPartContextSynchronousRelations ) = 0;


	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the ParameterNameSurroundedByTheSymbol attribute.
	* @param ioParameterNameSurroundedByTheSymbol
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to see parameter name not surrounded by the symbol "'"
	* 	<br><tt>1 :</tt>   to see parameter name surrounded by the symbol "'".
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetParameterNameSurroundedByTheSymbol( int&  ioParameterNameSurroundedByTheSymbol ) = 0;


    /**
	* Sets the RelationsUpdateInPartContextSynchronousRelations attribute.
	* @param iRelationsUpdateInPartContextSynchronousRelations
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   creation of unsynchronous relations
	* 	<br><tt>1 :</tt>   creation of synchronous relations.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextSynchronousRelations( const int&    iRelationsUpdateInPartContextSynchronousRelations ) = 0;
	
    /**
	* Retrieves the state of the RelationsUpdateInPartContextSynchronousRelations parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextSynchronousRelationsInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the RelationsUpdateInPartContextSynchronousRelations parameter.
	* <br><b>Role</b>: Locks or unlocks the RelationsUpdateInPartContextSynchronousRelations parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextSynchronousRelationsLock( unsigned char      iLocked ) = 0;
	
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the RelationsUpdateInPartContextEvaluateDuringUpdate attribute.
	* @param ioRelationsUpdateInPartContextEvaluateDuringUpdate
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   creation of relations not evaluate during update
	* 	<br><tt>1 :</tt>   creation of relations evaluate during update.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextEvaluateDuringUpdate( int&  ioRelationsUpdateInPartContextEvaluateDuringUpdate ) = 0;
	
    /**
	* Sets the RelationsUpdateInPartContextEvaluateDuringUpdate attribute.
	* @param ioRelationsUpdateInPartContextEvaluateDuringUpdate
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   creation of relations not evaluate during update
	* 	<br><tt>1 :</tt>   creation of relations evaluate during update.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextEvaluateDuringUpdate( const int&    iRelationsUpdateInPartContextEvaluateDuringUpdate ) = 0;
	
    /**
	* Retrieves the state of the RelationsUpdateInPartContextEvaluateDuringUpdate parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextEvaluateDuringUpdateInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the RelationsUpdateInPartContextEvaluateDuringUpdate parameter.
	* <br><b>Role</b>: Locks or unlocks the RelationsUpdateInPartContextEvaluateDuringUpdate parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextEvaluateDuringUpdateLock( unsigned char      iLocked ) = 0;
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the DesignTablesSynchronization attribute.
	* @param ioDesignTablesSynchronization
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   automatic synchronization at load for design table
	* 	<br><tt>1 :</tt>   interactive synchronization at load for design table
	* 	<br><tt>2 :</tt>   manual synchronization for design table.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesSynchronization( int&               ioDesignTablesSynchronization ) = 0;
	
    /**
	* Sets the DesignTablesSynchronization attribute.
	* @param iDesignTablesSynchronization
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   automatic synchronization at load for design table
	* 	<br><tt>1 :</tt>   interactive synchronization at load for design table
	* 	<br><tt>2 :</tt>   manual synchronization for design table.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesSynchronization( const int&                       iDesignTablesSynchronization ) = 0;
	
    /**
	* Retrieves the state of the DesignTablesSynchronization parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesSynchronizationInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the DesignTablesSynchronization parameter.
	* <br><b>Role</b>: Locks or unlocks the DesignTablesSynchronization parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesSynchronizationLock( unsigned char      iLocked ) = 0;
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the DesignTablesCopyData attribute.
	* @param ioDesignTablesCopyData
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   default mode for design table : copy data into models
	* 	<br><tt>1 :</tt>   default mode for design table : do not copy data into models.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesCopyData( int&              ioDesignTablesCopyData ) = 0;
	
    /**
	* Sets the DesignTablesCopyData attribute.
	* @param iDesignTablesCopyData
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   default mode for design table : copy data into models
	* 	<br><tt>1 :</tt>   default mode for design table : do not copy data into models.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesCopyData( const int&                       iDesignTablesCopyData ) = 0;
	
    /**
	* Retrieves the state of the DesignTablesCopyData parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesCopyDataInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
	* Locks or unlocks the DesignTablesCopyData parameter.
	* <br><b>Role</b>: Locks or unlocks the DesignTablesCopyData parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesCopyDataLock( unsigned char      iLocked ) = 0;

	// UFM
	//***********************************************************************
	// Ensure consistency with the IDL interface that will delegate its work
	// Check allowed signatures in System.CATSysSettingController
	//***********************************************************************
	/**
	* Retrieves the DesignTablesRepRef attribute.
	* @param ioDesignTablesRepRef
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   default mode for design table : the user cannot select reprefs.
	* 	<br><tt>1 :</tt>   default mode for design table : the user can select reprefs.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesRepRef( int&              ioDesignTablesRepRef ) = 0;

	/**
	* Sets the DesignTablesRepRef attribute.
	* @param iDesignTablesRepRef
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   default mode for design table : the user cannot select reprefs.
	* 	<br><tt>1 :</tt>   default mode for design table : the user can select reprefs.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesRepRef( const int&                       iDesignTablesRepRef ) = 0;

	/**
	* Retrieves the state of the DesignTablesRepRef parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetDesignTablesRepRefInfo( CATSettingInfo*    oInfo ) = 0;

	/** 
	* Locks or unlocks the DesignTablesRepRef parameter.
	* <br><b>Role</b>: Locks or unlocks the DesignTablesRepRef parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetDesignTablesRepRefLock( unsigned char      iLocked ) = 0;

	/**
	* Retrieves the RelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion attribute.
	* @param ioRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   confirmation of creation of relations  evaluate during update is not asked.
	* 	<br><tt>1 :</tt>   confirmation of creation of relations  evaluate during update is asked.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion( int&  ioRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion ) = 0;
	
    /**
	* Sets the RelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion attribute.
	* @param ioRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   confirmation of creation of relations  evaluate during update is not asked.
	* 	<br><tt>1 :</tt>   confirmation of creation of relations  evaluate during update is asked.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion( const int&    iRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion ) = 0;
	/**
	* Retrieves the state of the RelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT GetRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestionInfo( CATSettingInfo*    oInfo ) = 0;
	/** 
	* Locks or unlocks the SetRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestionLock parameter.
	* <br><b>Role</b>: Locks or unlocks the RelationsUpdateInPartContextEvaluateDuringUpdateNoQuestion parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure.
	*/
	virtual HRESULT SetRelationsUpdateInPartContextEvaluateDuringUpdateNoQuestionLock( unsigned char      iLocked ) = 0;
};

//------------------------------------------------------------------

#endif
