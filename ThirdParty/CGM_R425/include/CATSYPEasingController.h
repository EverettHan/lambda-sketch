//===================================================================
// COPYRIGHT Dassault Systemes 2013/06/04
//===================================================================
// CATSYPEasingController.cpp
// Header definition of class CATSYPEasingController
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/06/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATSYPEasingController_H
#define CATSYPEasingController_H

#include <IntroInfra.h>
#include <CATSYPDeclareEnumFactory.h>

//-----------------------------------------------------------------------

class ExportedByIntroInfra CATSYPEasingController
{
public:
	
	enum EasingMode{
		Linear			= 0, 
		QuadIn,			//1
		QuadOut,		//2
		QuadInOut,		//3
		CubicIn,		//4
		CubicOut,		//5
		CubicInOut,		//6 
		QuartIn,		//7
		QuartOut,		//8
		QuartInOut,		//9
		QuintIn,		//10
		QuintOut,		//11
		QuintInOut,		//12
		SineIn,			//13
		SineOut,		//14
		SineInOut,		//15
		ExpoIn,			//16
		ExpoOut,		//17
		ExpoInOut,		//18
		CircIn,			//19
		CircOut,		//20
		CircInOut,		//21
		ElasticIn,		//22
		ElasticOut,		//23
		ElasticInOut,	//24
		BackIn,			//25
		BackOut,		//26
		BackInOut,		//27
		BounceIn,		//28
		BounceOut,		//29
		BounceInOut		//30
	}; 

	// f = current time
	// e = from value
	// h = change value (= to - from)
	// g = duration 

	static float LinearEase(float f, float e, float h, float g);
	static float QuadInEase(float f, float e, float h, float g); 
	static float QuadOutEase(float f, float e, float h, float g); 
	static float QuadInOutEase(float f, float e, float h, float g); 
	static float CubicInEase(float f, float e, float h, float g); 
	static float CubicOutEase(float f, float e, float h, float g); 
	static float CubicInOutEase(float f, float e, float h, float g); 
	static float QuartInEase(float f, float e, float h, float g); 
	static float QuartOutEase(float f, float e, float h, float g); 
	static float QuartInOutEase(float f, float e, float h, float g); 
	static float QuintInEase(float f, float e, float h, float g); 
	static float QuintOutEase(float f, float e, float h, float g); 
	static float QuintInOutEase(float f, float e, float h, float g); 
	static float SineInEase(float f, float e, float h, float g); 
	static float SineOutEase(float f, float e, float h, float g); 
	static float SineInOutEase(float f, float e, float h, float g); 
	static float ExpoInEase(float f, float e, float h, float g); 
	static float ExpoOutEase(float f, float e, float h, float g); 
	static float ExpoInOutEase(float f, float e, float h, float g); 
	static float CircInEase(float f, float e, float h, float g); 
	static float CircOutEase(float f, float e, float h, float g); 
	static float CircInOutEase(float f, float e, float h, float g); 
	static float ElasticInEase(float f, float e, float h, float g); 
	static float ElasticOutEase(float f, float e, float h, float g); 
	static float ElasticInOutEase(float f, float e, float h, float g); 
	static float BackInEase(float f, float e, float h, float g); 
	static float BackOutEase(float f, float e, float h, float g); 
	static float BackInOutEase(float f, float e, float h, float g); 
	static float BounceInEase(float f, float e, float h, float g); 
	static float BounceOutEase(float f, float e, float h, float g); 
	static float BounceInOutEase(float f, float e, float h, float g); 

	// Helpers
	static float Evaluate(CATSYPEasingController::EasingMode iEasingMode, float f, float e, float h, float g);

};

CATSYP_DECLARE_ENUMFACTORY(ExportedByIntroInfra, CATSYPEasingController__EasingMode);
//-----------------------------------------------------------------------

#endif
