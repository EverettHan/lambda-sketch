// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIContextualLink.h
// Define the PLMIContextualLink interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2009  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIContextualLink_H
#define PLMIContextualLink_H

/**
 * @level Protected
 * @usage U3
 */

#include "PLMModelerContextualLinkItf.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMModelerContextualLinkItf IID IID_PLMIContextualLink;
#else
extern "C" const IID IID_PLMIContextualLink ;
#endif

#ifndef PLMIContextualLink_GetVODescriptor_AVAILABLE
#define PLMIContextualLink_GetVODescriptor_AVAILABLE
#endif

// --- Forward declaration
class PLMIContextualLinksManager;
class PLMIOmbVirtualObjectDescriptor_var;
class CATIPLMNavReference;
class CATIOmbProxySpecifications ;
class CATIOmbFunction ;

//------------------------------------------------------------------

/**
 * Interface representing a Contextual Link.
 *
 * <br><b>Role</b>: This interface allows to retrieves information related to the contextual link.
 *
 * @href PLMIContextualLinksManager
 */
class ExportedByPLMModelerContextualLinkItf PLMIContextualLink: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
   *  Returns the Context of the contextual link.
   *
   *  @param  ospContext
   *      The context of the contextual link under the shape of a virtual object descriptor. <br>
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
   *      This parameter is returned to caller as NULL if method fails. <br>
   *      This parameter is valuated if method succeeds.
   *  @return
   *      <code>S_OK</code> if the method succeeds and the context of the contextual link is returned. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetContext(PLMIOmbVirtualObjectDescriptor_var &ospContext) = 0;

  /**
   *  Returns the Input of the contextual link.
   *
   *  @param  opInput [CATBaseUnknown#Release]
   *      The input of the contextual link under the shape of a virtual object. <br>
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
   *      This parameter is returned to caller as NULL if method fails. <br>
   *      This parameter is valuated if method succeeds.
   *  @param  iIID
   *      The desired interface...
   *  @return
   *      <code>S_OK</code> if the method succeeds and the input of the contextual link is returned. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetInput(CATBaseUnknown *&opInput, const IID &iIID = IID_CATBaseUnknown) = 0;

  /**
   *  Returns the Input <b>relational view</b> (Set of PLM entities corresponding to the Input) of the contextual link. <br>
   *  This method is specially usefull in visualization mode.
   *
   *  @param  ospInputRelationView
   *      A virtual object descriptor describing the Input relational view. <br>
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL_var. This method returns an error otherwise. <br>
   *      This parameter is returned to caller as NULL_var if method fails. <br>
   *      This parameter is valuated if method succeeds.
   *  @return
   *      <code>S_OK</code> if the method succeeds and a relational view of the Input has been computed. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetInputRelationView(PLMIOmbVirtualObjectDescriptor_var &ospInputRelationView) = 0;

  /**
   *  Returns the PLM entity managing this contextual link.
   *
   *  @param  opManager [CATBaseUnknown#Release]
   *      A PLM entity managing contextual links. <br>
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
   *      This parameter is returned to caller as NULL if method fails. <br>
   *      This parameter is valuated if method succeeds.
   *  @return
   *      <code>S_OK</code> if the method succeeds and the contextual link manager is returned. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetManager(PLMIContextualLinksManager *&opManager) = 0;

  /**
   *  Returns the Reference corresponding the root of the contextual link Context.
   *
   *  @param  opRootContext [CATBaseUnknown#Release]
   *      A reference. <br>
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
   *      This parameter is returned to caller as NULL if method fails. <br>
   *      This parameter is valuated if method succeeds.
   *  @return
   *      <code>S_OK</code> if the method succeeds and the root context is returned. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetRootContext(CATIPLMNavReference *&opRootContext) = 0;


  /**
   * TO DOCUMENT
   */
  virtual HRESULT GetVODescriptor (PLMIOmbVirtualObjectDescriptor_var & ospVOdesc, CATBoolean iFold = TRUE, 
        CATIOmbProxySpecifications * ipProxySpecs = NULL, CATIOmbFunction * ipFunction = NULL) = 0 ; 

  int operator==( const PLMIContextualLink& iCtxLink ) const;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIContextualLink, CATBaseUnknown);

//------------------------------------------------------------------

#endif
