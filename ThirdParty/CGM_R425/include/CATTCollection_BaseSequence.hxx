// File generated by CPPExt (Value)
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.

#ifndef _CATTCollection_BaseSequence_HeaderFile
#define _CATTCollection_BaseSequence_HeaderFile

#ifndef _CATStandard_Address_HeaderFile
#include "CATStandard_Address.hxx"
#endif
#ifndef _CATStandard_Integer_HeaderFile
#include "CATStandard_Integer.hxx"
#endif
#ifndef _CATStandard_Boolean_HeaderFile
#include "CATStandard_Boolean.hxx"
#endif
class CATStandard_NoSuchObject;
class CATStandard_OutOfRange;


#ifndef _CATStandard_Macro_HeaderFile
#include "CATStandard_Macro.hxx"
#endif

#include "SysCascade.h"

class CATTCollection_BaseSequence  {

public:

 // Methods PUBLIC
 // 
inline   CATStandard_Boolean IsEmpty() const;
inline   CATStandard_Integer Length() const;
ExportedBySysCascade    void Reverse() ;

ExportedBySysCascade    void Exchange(const CATStandard_Integer I,const CATStandard_Integer J) ;





protected:

 // Methods PROTECTED
 // 
ExportedBySysCascade  CATTCollection_BaseSequence();
ExportedBySysCascade    void Clear(const CATStandard_Address DelNode) ;
ExportedBySysCascade    void PAppend(const CATStandard_Address Node) ;
ExportedBySysCascade    void PPrepend(const CATStandard_Address Node) ;
ExportedBySysCascade    void PInsertAfter(const CATStandard_Integer Index,const CATStandard_Address Node) ;
ExportedBySysCascade    void PInsertAfter(const CATStandard_Integer Index,CATTCollection_BaseSequence& S) ;
ExportedBySysCascade    void PPrepend(CATTCollection_BaseSequence& S) ;

ExportedBySysCascade    void PAppend(CATTCollection_BaseSequence& S) ;
ExportedBySysCascade    void PSplit(const CATStandard_Integer Index,CATTCollection_BaseSequence& Sub) ;
ExportedBySysCascade    void Remove(const CATStandard_Integer Index,const CATStandard_Address DelNode) ;
ExportedBySysCascade    void Remove(const CATStandard_Integer FromIndex,const CATStandard_Integer ToIndex,const CATStandard_Address DelNode) ;

ExportedBySysCascade    CATStandard_Address Find(const CATStandard_Integer Index) const;


 // Fields PROTECTED
 //
CATStandard_Address FirstItem;
CATStandard_Address LastItem;
CATStandard_Address CurrentItem;
CATStandard_Integer CurrentIndex;
CATStandard_Integer Size;


private: 

 // Methods PRIVATE
 // 
ExportedBySysCascade  CATTCollection_BaseSequence(const CATTCollection_BaseSequence& Other);
ExportedBySysCascade    void Nullify() ;


 // Fields PRIVATE
 //


};


#include "CATTCollection_BaseSequence.lxx"



// other inline functions and methods (like "C++: function call" methods)
//


#endif
