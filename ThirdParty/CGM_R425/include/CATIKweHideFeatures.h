// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIKweHideFeatures.h
// Define the CATIKweHideFeatures interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  TVQ
//===================================================================
#ifndef CATIKweHideFeatures_H
#define CATIKweHideFeatures_H

#include "KnowledgeItf.h"
#include "CATBoolean.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATIKweHideFeatures;
#else
extern "C" const IID IID_CATIKweHideFeatures ;
#endif

//------------------------------------------------------------------
// this protocol is used in the parameter naming algorithm
// for a parameter, this interface is interrogated for each of its ancestry, and last one implementing it is asked for visibility of all objects under it (features and parameters)
// (reason: be able to manage the visibility or non visibility of a parameter under a user feature who publishes it, and if the user feature his itself under a user feature. The parameter
// is then visible only if the second user feature publishes it also)
class ExportedByKnowledgeItf CATIKweHideFeatures: public CATBaseUnknown

{
  CATDeclareInterface;

  public:
	  // argument should always be a child feature (recursively) or a child parameter (may be a new literal, so not a feature)
	  // implementation should not check it if not necessary for performance reasons 
	  // 
	  virtual CATBoolean HideChild(const CATBaseUnknown_var &iChild) = 0;
};
CATDeclareHandler(CATIKweHideFeatures, CATBaseUnknown);
//------------------------------------------------------------------

#endif
