//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2014x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2013/09/19
//===================================================================
// PLMIExchangeExperienceOperation.cpp
// Header definition of class PLMIExchangeExperienceOperation
//===================================================================
//
// Usage notes: Define the experience operation.
//
//===================================================================
//  2013/09/19 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceOperation_H
#define PLMIExchangeExperienceOperation_H

#include "PLMExchangeInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListOfCATBoolean.h"

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceOperation ;

class PLMIExchangeExperienceDesignInfo;

class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceOperation: public CATBaseUnknown
{
   CATDeclareInterface;

public:


   /**
   * <b> SetFromStatusLink :</b> Set the source status where the current operation is available.
   * An operation can be triggered from multiple status.
   * Also set the sensitivity of the link. Both list must have the same size.
   *
   * @param iStrStatusId [in] 
   * input list of status id.
   *
   * @param iListIsSensitive [in] 
   * input list of boolean stating whether or nor the status link is sensitive.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL.   
   */
   virtual HRESULT SetFromStatusLink(CATListOfCATUnicodeString & iListStrStatusId, CATListOfCATBoolean & iListIsSensitive) = 0;

   /**
   * <b> SetFromStatusLink :</b> Set the destination status after the operation execution.
   * An operation can only go toward a single status.   
   *
   * @param iStrStatusId [in] 
   * input status id.
   *
   */
   virtual void SetToStatusLink(const CATUnicodeString & iStrStatusId) = 0;

   /**
   * <b> SetIsApplicableForCoreType :</b> Set for which core type the operation is available for.   
   * Please use the type PLMExchangeExperienceObjectType defined in PLMExchangeExperienceDictionary.
   * If applicable on mutiple core type, then use | operation to concatenate the type. 
   * i.e : (   PLMType_Reference | PLMType_Instance |PLMType_RepReference ) == Applicable for the listed core type.
   * By default it's applicable for all the types defined in the dictionary.
   *
   * @param iApplicableOnCoreTypeMask [in] 
   * input core type mask on where the operation is applicable.
   *
   */
   virtual void SetIsApplicableForCoreType(int & iApplicableOnCoreTypeMask) = 0;

   /** 
   * <b>OperationState:</b> Define the different state available for an operation.
   * <u>State_Enabled</u> : The operation is enabled meaning an interaction will be possible by the user. This state is always available and is set by default (Design info NLS key : ".Enabled").
   * <u>State_Disabled</u> : When disabled, the operation is no longer interactive but it can still be enabled. To be able to use this state, it needs to be added through PLMIExchangeExperienceOperationLink::AddState beforehand. (Design info NLS key : ".Disabled").
   * <u>State_Forbidden</u> : When forbidden, the operation is no longer possible and it cannot be enabled anymore. To be able to use this state, it needs to be added through PLMIExchangeExperienceOperationLink::AddState beforehand. (Design info NLS key : ".Forgotten").
   */
   enum OperationState
   {
      State_Enabled     = 0x00000001,
      State_Disabled    = 0x00000002,
      State_Forbidden   = 0x00000004
   };

   /**
   * <b> AddState :</b> Add an operation state for the current link (PLMIExchangeExperienceOperation::OperationState). 
   * By default, only the enabled state is available.
   * If the operation can be disabled or can be forbidden, then you'll need to accordingly add the different state, to be able to set them later on.
   * 
   * @param iOperationState [in]
   * input operation state to add,  defined by PLMIExchangeExperienceOperation::OperationState.
   *
   * @param opDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release]
   * output design info to set for the added state. Refer to PLMExchangeExperienceDesignProperties for possible properties id.
   * An automatic filling of the design info will be attempted based on the operation string id given and the added state NLS key. 
   * ie. - The operation key is : MyCatalogName.Operation1
   *     - AddState is called with with the disabled state key. Its associated NLS key is = ".Disabled" (define in the definition of the enum OperationState above).
   *     - For an operation state, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the name having an associated NLS key equal to ".Name" .   
   *     For this name property, the automatic mechanism will therefore look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Operation.Disabled.Name" .
   *
   * @return
   *    Legal values:  S_OK if the method succeeds  
   *                   S_FALSE, the state is already added for the current operation.
   *                   E_FAIL.
   */ 
   virtual HRESULT AddState(PLMIExchangeExperienceOperation::OperationState iOperationState, PLMIExchangeExperienceDesignInfo * & opDesignInfo) = 0;

   /**
   * <b> SetDefaultState :</b> Set the default state for the current link (PLMIExchangeExperienceOperation::OperationState). 
   * By default, its state is Enabled.
   * 
   * @param iOperationState [in]
   * input operation state to set as default,  defined by PLMIExchangeExperienceOperation::OperationState.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL.
   */ 
   virtual HRESULT SetDefaultState(PLMIExchangeExperienceOperation::OperationState iOperationState) = 0;
   
};

//-----------------------------------------------------------------------

#endif
 
