// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIOmiSwitchEngine.h
// Define the CATIOmiSwitchEngine interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  bes
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef CATIOmiSwitchEngine_H
#define CATIOmiSwitchEngine_H

#include "CATOmiSwitchEngineItf.h"
#include "CATBaseUnknown.h"
#include "CATOmxIter.h"


extern ExportedByCATOmiSwitchEngineItf IID IID_CATIOmiSwitchEngine;

#include "CATLISTP_CATOmiSwitchOperation.h"

class CATOmbSwitchWizard;
class CATOmiLoadingModeRule;
class CATOmbLoadingModeRuleSet;

/**
  * Filter to be applied at CATOmiSwitchOperation(s) read after Validate or Execute steps
  * @param All
  *   All Operations involved in switch Validation or Execute step
  * @param  Regular;
  *   All Operations involved in switch Validation or Execute step and successful, with no error or warning
  * @param Warned
  *   All Operations set with warning or information by switch Validation or Execute step
  * @param InError
  *   All Operations set in Error by switch Validation or Execute step
  */
typedef unsigned char FilterOps;

namespace CATOmiOps
{
  static const unsigned All = 0x000;
  static const unsigned Regular = 0x001;
  static const unsigned Warned = 0x002;
  static const unsigned InError = 0x004;
}

/**
* Interface to change the target mode of a repref.
* This interface switched a RepRef from an initial loaging mode to a target loading mode.
* One can retrieve a pointer to this interface by calling the session service :
* CATOmbSwitchEngineServices::CreateSwitchEngine.
*/
class ExportedByCATOmiSwitchEngineItf CATIOmiSwitchEngine : public CATBaseUnknown
{

  CATDeclareInterface;

public:

  /**
  * Adds a rule to determine the target loading mode of the RepRef.
  * <br><b>Role</b>
  * @param iLoadingRule
  *    a loading mode rule object
  * @return <ul>
  *            <li> S_OK : if the provided object is valid
  *            <li> E_FAIL : unexpected error. ie iLoadinMode.IsNull() = FALSE
  *         </ul>
  */
  virtual HRESULT AddLoadingModeRule(const CATOmiLoadingModeRule& iLoadingRule) = 0;

  /**
  * Adds a set of rules to determine the target loading mode of the RepRef.
  * <br><b>Role</b>
  * @param iLodingRules
  *    a list of loading mode rule object
  * @return <ul>
  *            <li> S_OK : if the provided object is valid
  *            <li> E_FAIL : unexpected error. ie iLoadinMode.IsNull() = FALSE
  *         </ul>
  */
  virtual HRESULT AddLoadingModeRules(const CATOmbLoadingModeRuleSet& iLoadingRules) = 0;

  /**
  * Adds an Object to the list of components to be switched.
  * <br><b>Role</b>
  * @param iObject
  *    a component to be switched by the engine
  * @return <ul>
  *            <li> S_OK : if the provided object is valid (IsNull()=FALSE)
  *            <li> S_FALSE : if the provided object was already included in the objects to be switched
  *            <li> E_INVALIDARG : otherwise
  *         </ul>
  */
  virtual HRESULT AddObjectToTreat(const CATBaseUnknown &iObject) = 0;

  /**
  * Removes an object to the list of components to be switched.
  * <br><b>Role</b>
  * @param iObject
  *    the component to be removed.
  * @return <ul>
  *            <li> S_OK : if the provided object has been removed
  *            <li> E_FAIL : if the object was not included in the components to be switched.
  *         </ul>
  */
  virtual HRESULT RemoveObjectToTreat(const CATBaseUnknown &iObject) = 0;

  /**
  * Checks that each requested switch operation is possible.
  * <br><b>Role</b>
  *
  * @param oRefusedSwitchs
  *        The list of Switch operations for which the transaction is refused.
  *        Callers should not delete the switch operations contained in the list.
  *
  * @return <ul>
  *            <li> S_OK : if all switchs are valid.
  *            <li> S_FALSE : if some switchs were refused
  *         </ul>
  */
  virtual HRESULT ValidateSwitchOperations(CATLISTP(CATOmiSwitchOperation) &oRefusedSwitchs) = 0;

  /**
  * Checks that each requested switch operation is possible using switch wizard.
  * <br><b>Role</b>
  *
  * @param ioSwitchWizard
  *			Object that helps to solve errors on switch validation. (please refer to CATOmbSwitchWizard.h)
  *
  * @return <ul>
  *            <li> S_OK : if all switchs are valid.
  *            <li> S_FALSE : if some switchs were refused
  *         </ul>
  */

  virtual HRESULT ValidateSwitchOperations(CATOmbSwitchWizard& ioSwitchWizard) = 0;

  /**
  * Execute switch operations.
  * <br><b>Role</b>
  * @param oFailedSwitchs
  *        The list of Switch operations for which the transition failed.
  *        Callers should not delete the switch operations contained in the list.
  *
  * @return <ul>
  *            <li> S_OK : if all switchs were successfully.
  *            <li> S_FALSE : if some switchs were refused.
  *
  *         </ul>
  */
  virtual HRESULT ExecuteSwitchOperations(CATLISTP(CATOmiSwitchOperation) &oFailedSwitchs) = 0;

  /**
  * Gets switch operations involved in validation step.
  * @param iFilter
  *  Eventual filter on the severity of the eventual operation error, read by CATOmiSwitchOperation::GetAssociatedError
  *  iFilter = CATOmiOps::InError  gets the same list as oRefusedSwitchs from ValidateSwitchOperations, that is the list of switches NOT validated for execution
  *  iFilter = CATOmiOps::Warned | CATOmiOps::Info gets the list of operations validated and containing warnings/informations to be eventually displayed by UI
  *
  * @return
  *  An iterator on the list of All/Failed/Warned Switch operations, created by and involved in the validation step,
  *  eventually filtered by error type.
  *  Callers should NOT delete the switch operations contained in the list.
  *  To be called just after ValidateSwitchOperations(*) method, that builds this list.
  */
  virtual CATOmxIter<CATOmiSwitchOperation> GetSwitchOperationsFromValidate(FilterOps iFilter) = 0;

  /**
  * Gets switch operations involved in execution step.
  * @param iFilter
  *  Eventual filter on the severity of the eventual operation error, read by CATOmiSwitchOperation::GetAssociatedError
  *  iFilter = CATOmiOps::InError  gets the same list as oFailedSwitchs from ExecuteSwitchOperations, that is the list of switches NOt executed correctly
  *  iFilter = CATOmiOps::Warned | CATOmiOps::Info gets the list of operations executed and containing warnings/informations to be eventually displayed by UI
  *
  * @return
  *  An iterator on the list of All/Failed/Warned Switch operations, created by and involved in the execution step,
  *  eventually filtered by error type.
  *  Callers should NOT delete the switch operations contained in the list.
  *  To be called just after ExecuteSwitchOperations(*) method, that builds this list.
  */
  virtual CATOmxIter<CATOmiSwitchOperation> GetSwitchOperationsFromExecute(FilterOps iFilter) = 0;
};

//------------------------------------------------------------------

#endif
