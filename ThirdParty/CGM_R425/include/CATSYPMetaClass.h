#ifndef CATSYPMetaClass_H
#define CATSYPMetaClass_H

#include <CATBaseUnknown.h>
#include <IntroInfra.h>
#include <CATSYPHashMap.h>
#include <CATSYPPropertyDescriptor.h>
#include <CATSYPEventDescriptor.h>
#include <CATSYPEventHandlerDescriptor.h>
#include <CATSYPArray.h>
#include <CATSYPCommandNotificationDescriptor.h>
#include <CATSYPCommandCallbackDescriptor.h>
#include <CATSYPRefCounted.h>

class CATSYPEventHandlersSupportDescriptor;

/**
 * Definition of the function pointer used to create a new instance of 
 * an introspectable object.
 */
typedef CATBaseUnknown* (* CATSYPInstanciateFunc)();
/**
 * Introspection meta class, describing some properties of a C++ object.
 * It is built by a CATSYPMetaClassBuilder, that is generated by the introspection compiler.
 * To get the metaclass of an introspectable object, call the static method
 * CATSYPMetaClass#ForName(className)
 * Then the descriptors of properties, attached properties, events, event handlers are
 * accessible.
 */
class ExportedByIntroInfra CATSYPMetaClass : public CATSYPRefCounted
{
public:
  /**
   * Retrieve a syp meta class for a given class name or declarative class name.
   * WARNING : You should use the className if known either declarative class name 
   * If not already build, it is instanciated by calling CATCreateExternalObject
   * on a specific CATSYPMetaClassBuilder, located in a dll precised in a .CATFactory
   * Once build, it is pushed in a dictionnary, as a singleton.
   */
  static CATSYPMetaClass* ForName(const CATUnicodeString& i_classNameOrDeclarativeName); 
  static CATSYPMetaClass* ForMetaObject( CATMetaClass* i_metaObject); 
 /**
   * Instanciates the class it describes the introspection. 
   * Will return NULL if the class is not instanciable.
   * The sypintro compiler will not generate instanciation code for sypintro description
   * that let figure in their main tag the attribute instances="false". This is needed
   * if the described class has no default constructor, or is abstract.
   */
  CATBaseUnknown* Instantiate() const;
  /**
   * 
   */
  CATBoolean IsInstantiable() const;
  /**
   * Recovers the meta class of the parent class, declared in the .sypintro main tag
   */
  const CATSYPMetaClass* GetParentMetaClass() const;
  /**
   * Returns the descriptor of the requested property.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPPropertyDescriptor
   */
  const CATSYPPropertyDescriptor&     GetPropertyDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested property.
   * @param i_name the name of the property
   * @return the property descriptor
   */
  const CATSYPAttachedPropertyDescriptor& GetAttachedPropertyDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested method.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPMethodDescriptor
   */
  const CATSYPMethodDescriptor&     GetMethodDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested event.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPEventDescriptor
   */
  const CATSYPEventDescriptor& GetEventDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested event handler.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPEventDescriptor
   */
  const CATSYPEventHandlerDescriptor& GetEventHandlerDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested command notification.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPCommandNotificationDescriptor
   */
  const CATSYPCommandNotificationDescriptor&  GetCommandNotificationDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the requested command callback.
   * @param i_name the name of the entry
   * @return the descriptor
   * @see CATSYPCommandCallbackDescriptor
   */
  const CATSYPCommandCallbackDescriptor&  GetCommandCallbackDescriptor( const CATUnicodeString &i_name ) const;
  /**
   * Returns the descriptor of the support for event handlers.
   *
   * This function will search recursively, starting with this
   * meta-class and going up the parent meta-classes (using @ref
   * #GetParentMetaClass).
   *
   * @note
   * There may not be a support for event handlers. For example an
   * introspectable object that don't dispatch any event does not need
   * to have a support for handlers. In that case this function
   * returns @c NULL.
   *
   * @return the support. @c NULL if there is no support for event
   * handlers on any class up to the root parent.
   */
  const CATSYPEventHandlersSupportDescriptor *GetEventHandlersSupportDescriptor() const;
  /**
   * Returns the type of a property by a string.
   * @param i_name the i_name of the property
   * @return the type of a property by a string. Is NULL in case of error.
   */
  const CATUnicodeString& GetPropertyType( const CATUnicodeString &i_name ) const;
  /**
   * Return the intropsectable entry type of the requested entry name.
   * @return the type, or UnknownEntry if not found
   */
  CATSYPDescriptorBase::IntrospectableEntryType GetIntrospectableEntryType( const CATUnicodeString &i_name ) const;
  /**
   * Returns value indicating if a property is readonly, write only or read/write.
   * @param i_name the name of the property
   * @see CATSYPPropertyDescriptor#Access
   */
  CATSYPPropertyDescriptor::Access GetPropertyAccess( const CATUnicodeString &i_name ) const;
  /**
   * Recover a list of @href CATSYPPropertyDescriptor, containing informations about
   * all the introspectable properties.
   * @param io_propertiesList list of  @href CATSYPPropertyDescriptor that will be filled.
   */
  void GetPropertiesList(CATSYPDynArray<CATSYPPropertyDescriptor>& io_propertiesList) const;
  /**
   * Recover a list of @href CATSYPPropertyDescriptor, containing all the informations about
   * only the introspectable properties defined in this class.
   * @param io_propertiesList list of  @href CATSYPPropertyDescriptor that will be filled.
   */
  void GetOwnPropertiesList(CATSYPDynArray<CATSYPPropertyDescriptor>& io_propertiesList) const;
  /**
   * Recover a list of  @href CATSYPAttachedPropertyDescriptor, containing informations about
   * all the introspectable attached properties.
   * @param io_propertiesList a list of  @href CATSYPAttachedPropertyDescriptor that will be filled.
   */
  void GetAttachedPropertiesList(CATSYPDynArray<CATSYPAttachedPropertyDescriptor>& io_propertiesList) const;
  /**
   * Recover a list of  @href CATSYPAttachedPropertyDescriptor, containing informations about
   * only the introspectable attached properties defined in this class.
   * @param io_propertiesList a list of  @href CATSYPAttachedPropertyDescriptor that will be filled.
   */
  void GetOwnAttachedPropertiesList(CATSYPDynArray<CATSYPAttachedPropertyDescriptor>& io_propertiesList) const;
  /**
   * Recover a list of @href @href CATSYPEventDescriptor, containing the names of the 
   * introspecable events.
   * @param io_eventsList a list of @href CATSYPEventDescriptor that will be filled.
   */
  void GetEventsList(CATSYPDynArray<CATSYPEventDescriptor>& io_eventsList) const;
  /**
   * Recover a list of @href @href CATSYPCommandNotificationDescriptor, containing the names of the 
   * introspecable command notifications.
   * @param io_commandNotificationsList a list of @href CATSYPCommandNotificationDescriptor that will be filled.
   */
  void GetCommandNotificationsList(CATSYPDynArray<CATSYPCommandNotificationDescriptor>& io_commandNotificationsList) const;
  /**
   * Recover a list of @href @href CATSYPCommandCallbackDescriptor, containing the names of the 
   * introspecable command callbacks.
   * @param io_commandCallbacksList a list of @href CATSYPCommandCallbackDescriptor that will be filled.
   */
  void GetCommandCallbacksList(CATSYPDynArray<CATSYPCommandCallbackDescriptor>& io_commandCallbacksList) const;
  /**
   * Recover a list of @href @href CATSYPEventDescriptor, containing the names of the 
   * introspecable events defined directly in this class.
   * @param io_eventsList a list of @href CATSYPEventDescriptor that will be filled.
   */
  void GetOwnEventsList(CATSYPDynArray<CATSYPEventDescriptor>& io_eventsList) const;
  /**
   * Recover a list of @href @href CATSYPEventHandlerDescriptor, containing the names of the 
   * introspecable event handlers.
   * @param io_eventsList a list of @href CATSYPEventHandlerDescriptor that will be filled.
   */
  void GetEventHandlersList(CATSYPDynArray<CATSYPEventHandlerDescriptor>& io_eventsList) const;
  /**
   * Recover a list of @href @href CATSYPEventHandlerDescriptor, containing the names of the 
   * introspecable event handlers defined directly in this class.
   * @param io_eventsList a list of @href CATSYPEventHandlerDescriptor that will be filled.
   */
  void GetOwnEventHandlersList(CATSYPDynArray<CATSYPEventHandlerDescriptor>& io_eventsList) const;
  /**
   * Recover a list of @href @href CATSYPCommandNotificationDescriptor, containing the names of the 
   * introspecable command notifications defined directly in this class.
   * @param io_commandNotificationsList a list of @href CATSYPCommandNotificationDescriptor that will be filled.
   */
  void GetOwnCommandNotificationsList(CATSYPDynArray<CATSYPCommandNotificationDescriptor>& io_commandNotificationsList) const;
  /**
   * Recover a list of @href @href CATSYPCommandCallbackDescriptor, containing the names of the 
   * introspectable command callbacks defined directly in this class.
   * @param io_commandCallbacksList a list of @href CATSYPCommandCallbackDescriptor that will be filled.
   */
  void GetOwnCommandCallbacksList(CATSYPDynArray<CATSYPCommandCallbackDescriptor>& io_commandCallbacksList) const;
  /**
   * @return the class name of the C++ described by this syp meta class.
   */
  INLINE const CATUnicodeString& GetClassName() const
  {
    return _className;
  }
  INLINE const CATUnicodeString& GetDeclarativeClassName() const
  {
    return _declarativeClassName;
  }
  INLINE const CATUnicodeString& GetAliasClassNamespace() const
  {
    return _aliasClassNamespace;
  }  /**
   * @return a flag indicating if the type correspond to a value or a pointer on a CATBaseUnknown
   */
  int GetValueTypeFlag( const CATUnicodeString &i_name ) const;
private:
  /** 
   * Constructor, called by CATSYPMetaClassBuilder.
   *
   * @param i_pEventHandlersSupportDescriptor descriptor of event
   * handlers. May be @c NULL. If not @c NULL a copy will be made by
   * this constructor.
   */ 
  CATSYPMetaClass(
    const char* i_className,
    const char* i_declarativeClassName,
    const char* i_aliasClassNamespace,
    CATSYPHashMap<CATUnicodeString, CATSYPDescriptorBase*>* i_pEntries,
    CATSYPEventHandlersSupportDescriptor *i_pEventHandlersSupportDescriptor,
    CATSYPInstanciateFunc i_pInstanciate,
    CATSYPMetaClass* i_pParentMetaClass
    );
  /** Destructor, called by CATSYPMetaClassDestroyer */
  ~CATSYPMetaClass();
  /**
   * Registers a new created MetaClass.
   * @param i_pMetaClass the CATSYPMetaClass object to register.
   */
  static void Register(CATSYPMetaClass * i_pMetaClass);
private:
  CATSYPMetaClass* _pParentMetaClass;
  CATSYPHashMap<CATUnicodeString, CATSYPDescriptorBase*>* _pEntries;
  /** the descriptor for the support of event handlers. May be @c
      NULL. */
  CATSYPEventHandlersSupportDescriptor *_pEventHandlersSupportDescriptor;
  CATSYPInstanciateFunc _pInstanciateFunc;
  CATUnicodeString _className;
  CATUnicodeString _declarativeClassName;
  CATUnicodeString _aliasClassNamespace;
  friend class CATSYPMetaClassBuilder;
  friend class CATSYPMetaClassDestroyer;
  friend class CATSYPDataBlockFactory;

};
#endif
