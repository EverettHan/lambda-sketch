// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidFraDialogBox.h
// Header definition of CATVidFraDialogBox
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidFraDialogBox_H
#define CATVidFraDialogBox_H

// SYSTEM -----------------------------
#include <CATVidCtl.h>
#include <CATVidFraWindow.h>
#include <CATBaseUnknown_WR.h>
// VID --------------------------------
#include <VisuDialog.h>
#include <CATVidEnum.h>
#include <CATVidFraBoxProperties.h>
#include <CATVidFraLayoutData.h>
#include <CATVid.h>
// DIALOG -----------------------------
#include <CATDlgUtility.h>
// VID --------------------------------
class CATVidModelWidget;
class CATVidLaySideAttachConstraints;
class CATVidLayDockConstraints;
class CATVidCtlButton;
class CATVidLay2DSyncToViewpointConstraints;
class l_CATVidFraWindow;
// VISU -------------------------------
class CATVizViewer;
class CATVisuAnimationWeakRef;
// SYSTEM -----------------------------
class CATString;
class CATUnicodeString;
// MATH -----------------------------
class CATMathPoint2Df;
//-----------------------------------------------------------------------------

/**
 * @ingroup VIDFrame
 * Dialog Box.
 */
class ExportedByVisuDialog CATVidFraDialogBox : public CATVidFraWindow
{
  CATDeclareClass;

public:

  // To create a dialog box, please call the function CATVidCreateDialogBox 
  // defined in CATVidFraUtilities.h 
  // This standard constructor doesn't build visualization.
  CATVidFraDialogBox(CATCommand *i_pParent, const CATString & i_pIdentifier);

  // Set/Get float constraints
  void SetFloatConstraint(const CATVidLaySideAttachConstraints& i_constraint);
  const CATVidLaySideAttachConstraints& GetFloatConstraints() const;
  
  // Set/Get dock constraints
  void SetDockConstraint(const CATVidLayDockConstraints& i_constraint);
  const CATVidLayDockConstraints& GetDockConstraints() const;

  // Set/Get label constraints
  void SetLabelConstraint(const CATVidLay2DSyncToViewpointConstraints& i_constraint);
  const CATVidLay2DSyncToViewpointConstraints& GetLabelConstraints() const;

  void SetBarTitleFlag(CATBoolean i_barTitleFlag);
  CATBoolean GetBarTitleFlag() const;

  void SetDecorationFlag(CATBoolean i_noDecorationFlag);
  CATBoolean GetDecorationFlag() const;
  CATBoolean GetResizableState() const;
  CATBoolean GetResizableAndDecorationState() const;
  CATBoolean GetBarTitleState() const;
  virtual CATBoolean GetTitleBarVisibleState() const;

  void SetDiscretionLevel(const unsigned int& i_discretionLevel);
  const unsigned int GetDiscretionLevel() const;

  /**
   * Specifies whether the window uses a background or not.
   * By default, the UseBackgroundFlag property is set to FALSE.
   */
  void SetUseBackgroundFlag(CATBoolean i_useBackgroundFlag);

#ifndef VID_DEPRECATED
  void SetActive(){SetActiveFlag(TRUE);};
  void SetVisibility( CATBoolean i_visibility);
  CATBoolean GetVisibility();

  void Minimize() {SetMinimizeFlag(TRUE);};
  void Restore() {SetMinimizeFlag(FALSE);};
  void Insert () {SetExtractedFlag(FALSE);};

  void SetUseCloseButtonFlag(CATBoolean i_useCloseButtonFlag){SetCloseButtonFlag(i_useCloseButtonFlag);};
  CATBoolean GetUseCloseButtonFlag() const{return GetCloseButtonFlag();};
  void SetUseMinimizeButtonFlag(CATBoolean i_useMinimizeButtonFlag){SetMinimizeButtonFlag(i_useMinimizeButtonFlag);};
  CATBoolean GetUseMinimizeButtonFlag() const{return GetMinimizeButtonFlag();};
  void SetUseExtractButtonFlag(CATBoolean i_useExtractButtonFlag){SetExtractButtonFlag(i_useExtractButtonFlag);};
  CATBoolean GetUseExtractButtonFlag() const{return GetExtractButtonFlag();};
  void SetAlphaFilterValue(unsigned int i_alphaFilterValue){SetOpacity(i_alphaFilterValue);};
  unsigned int GetAlphaFilterValue() const{return GetOpacity();};

  void Minimize(const CATUnicodeString &i_eventName, const CATBaseUnknown_var &i_input, CATBaseUnknown_var &o_output);
  void Close(const CATUnicodeString &i_eventName, const CATBaseUnknown_var &i_input, CATBaseUnknown_var &o_output);
  void Extract(const CATUnicodeString &i_eventName, const CATBaseUnknown_var &i_input, CATBaseUnknown_var &o_output);
#endif

  // Get the dialog life cycle
  CATVidLifeCycle GetDialogLifeCycle() const;

  void Extract();

  // Call InsertInViewer instead
  void SetViewer(CATVizViewer* i_pVizViewer){InsertInViewer(i_pVizViewer);};

  // Get the applicative widget
  CATVidModelWidget* GetApplicativeWidget() const;

  // Get the dialog style
  CATVidStyle GetDialogStyle() const;

  // Set/Get the dialog type
  void SetDialogType(CATVidDialogType i_dialogType);
  CATVidDialogType GetDialogType() const;

  /**
   * Returns TRUE if the DialogType property of the window can be changed, FALSE otherwise.
   * @see CATVidFraBoxProperties::SetAllowDialogTypeSwitchFlag
   */
  CATBoolean GetAllowDialogTypeSwitchFlag() const;

  /**
   * Sets the areas of the main parent window where this window can be docked.
   * A window can be docked if its DialogType property is set to CATVidDockDialog
   * or if its AllowDialogTypeSwitchFlag property is set to TRUE.
   * By default, all the docking areas are allowed.
   * Example of code modifying the allowed docking areas of a window :
   * @code
   *   pWindow->SetAllowedDockAreas(CATVidFraWindow::DockAreas(CATVidFraWindow::LeftDockArea | CATVidFraWindow::RightDockArea));
   * @endcode
   *
   * Example of code disabling the docking capability of a window :
   * @code
   *   pWindow->SetAllowedDockAreas(CATVidFraWindow::DockAreas(CATVidFraWindow::NoneDockArea));
   * @endcode
   */
  void SetAllowedDockAreas(CATVidFraWindow::DockAreas i_areas);

  CATUnicodeString GetDockText() const;

  CATBoolean GetActivableFlag() const;

  void SetActivateInDockFlag(CATBoolean i_activateInDockFlag);
  CATBoolean GetActivateInDockFlag() const;

  CATBoolean GetDockSideIndex() const;

  /**
   * Gets the label side on which the anchor point is attached.
   */
  unsigned int GetLabelAttachedSide() const;

  /**
   * Gets the 2D coordinates of the point where the binding line is attached to the label.
   */
  CATMathPoint2Df GetLabelAttached2DPoint() const;

  /**
   * Gets the 2D coordinates of the point where the binding line is attached to the viewer.
   */
  CATMathPoint2Df GetLabel3D_2DPoint() const;

  /**
    * Specifies whether the anchor point must be visible or not.
    * The anchor point visibility is dependent on the AnchorPointVisibleFlag property, on the type of window
    * (CATVidPhylactereDialog, CATVidFraLabel, ...) and on its location : if the window is docked or 
    * attached to a group, the anchor point will not be visible.
    * If a window is not visible, its anchor point is not visible either.
    * @see CATVidFraWindow::GetAnchorPointVisibleState
    */
  void SetAnchorPointVisibleFlag(CATBoolean i_anchorPointVisibleFlag);

  /**
    * Returns TRUE if the anchor point must be visible, FALSE otherwise.
    * The anchor point visibility is dependent on the AnchorPointVisibleFlag property, on the type of window
    * (CATVidPhylactereDialog, CATVidFraLabel, ...) and on its location : if the window is docked or 
    * attached to a group, the anchor point will not be visible.
    * If a window is not visible, its anchor point is not visible either.
    * @see CATVidFraWindow::GetAnchorPointVisibleState
    */
  CATBoolean GetAnchorPointVisibleFlag() const;

  /**
   * Specifies whether the window can be automatically extracted when the end user drags it
   * outside its associated viewer and automatically inserted when it drags it inside it, or not.
   * By default, the AutoExtractableFlag property is set to FALSE.
   * @see GetAutoExtractableFlag
   * @see SetExtractedFlag
   */
  void SetAutoExtractableFlag(CATBoolean i_autoExtractableFlag);

  CATVidWidget* GetHandledWidget() const;

  /**
   * Specifies which animation is used when the window visibility property is changed.
   * @param i_VisibilityPolicy the visibility policy. 
   * Default value is ScaleAnimation.
   * @see CATVidFraWindow#SetVisibleFlag
   * @see CATVid#VisibilityPolicy
   */
  void SetVisibilityPolicy(CATVid::VisibilityPolicy i_visibilityPolicy);

  // Dispatch a VIDInformation
  // --------------------------------------------------------------------------
  void TunnelInformation(const CATVidInformation& i_information);

  l_CATVidFraWindow& GetVidLetter() const {return *_pLetter;} ;
  void SetChild(CATBaseUnknown_var i_spToConnect);
  virtual CATBaseUnknown_var GetChild();

  /**
   * Sets the button to call when ENTER key is pressed and released 
   * while one of child widgets of this window has the focus.
   *
   * @note
   * If @a i_pButton is not @c NULL, this function will call 
   * @ref CATVidCtlButton#SetDefaultFlag to set the "default flag" on
   * the given button. This ensures that this button visualization
   * clearly states that it is the default button.
   *
   * @note
   * If there was already a default button set, @ref CATVidCtlButton#SetDefaultFlag
   * will be called on the previous default button to reset its
   * "default flag" to @c FALSE to ensure that the user does not
   * see multiple default buttons.
   *
   * @note
   * Only a weak-reference (@ref CATBaseUnknown_WR) will be kept on
   * the button.
   * 
   * @param i_pButton the button that will be the new default button.
   * Note that it can be @c NULL. In that case that removes any default
   * button from the dialog box.
   *
   * @see #GetDefaultButton
   * @see #SetEscapeButton
   */
  void SetDefaultButton(CATVidCtlButton * i_pButton);

  /**
   * Returns the button that will be called when ENTER key is press and released
   * while one of child widgets of this window has the focus.
   *
   * @return a pointer on the button. Note that @ref CATBaseUnknown#AddRef
   * has NOT been called on the returned value. It must not be released.<br/>
   * The returned value is @c NULL if there is no default button.
   * @see #SetDefaultButton
   * @see #GetEscapeButton
   */
  CATVidCtlButton * GetDefaultButton();

  /**
   * Sets the button to call when ESCAPE key is pressed and released 
   * while one of child widget of this window has the focus.
   *
   * @note
   * If @a i_pButton is not @c NULL, this function will call 
   * @ref CATVidCtlButton#SetAutoDefaultFlag to set the "auto-default flag" 
   * on the given button. This ensures that this button will be called if
   * ENTER is pressed/released while this button has the focus. Without
   * this flag, ENTER would be handled by the default button (@ref #SetDefaultButton).
   *
   * @note
   * If there was already a default button set, @ref CATVidCtlButton#SetAutoDefaultFlag
   * will be called on the previous default button to reset its
   * "auto-default flag" to @c FALSE to ensure that the user does not
   * see multiple default buttons.
   *
   * @note
   * Only a weak-reference (@ref CATBaseUnknown_WR) will be kept on
   * the button.
   * 
   * @param i_pButton the button that will be the new escape button.
   * Note that it can be @c NULL. In that case that removes any escape
   * button from the dialog box.
   *
   * @see #GetEscapeButton
   * @see #SetDefaultButton
   */
  void SetEscapeButton(CATVidCtlButton * i_pButton);

  /**
   * Returns the button that will be called when ESCAPE key is press and released
   * while one of child widget of this window has the focus.
   *
   * @return a pointer on the button. Note that @ref CATBaseUnknown#AddRef
   * has NOT been called on the returned value. It must not be released.<br/>
   * The returned value is @c NULL if there is no default button.
   *
   * @see #SetEscapeButton
   * @see #GetDefaultButton
   */
  CATVidCtlButton * GetEscapeButton();

  CATVidFraDialogBox ();
  void DockCB(const CATUnicodeString &i_eventName, const CATBaseUnknown_var &i_input, CATBaseUnknown_var &o_output);
protected:
  // Standard constructors and destructors
  // --------------------------------------------------------------------------
  virtual ~CATVidFraDialogBox();

  // Overriden methods
  virtual void WriteWindowPreferences();

private:
  CATVidFraDialogBox (CATCommand *i_pParent, const CATString & i_pIdentifier
                        , CATVidModelWidget* i_pApplicativeWidget // Applicative Widget created by user.
                        , const CATVidFraBoxProperties& i_fraBoxProperties
                        , const CATVidFraLayoutData&    i_fraLayoutData
                        , CATVizViewer* i_pVizViewer
                      );
  // Copy constructor and equal operator
  // --------------------------------------------------------------------------
  CATVidFraDialogBox (CATVidFraDialogBox &);
  CATVidFraDialogBox& operator=(CATVidFraDialogBox&i_original);

  /**
   * @copydoc CATVidFraWindow#GetENTERButton
   * @note
   * Children class of this class must NOT override this function.
   * Instead they should use @ref #SetDefaultButton.
   */
  virtual CATVidCtlButton *GetENTERButton();
  /**
   * @copydoc CATVidFraWindow#GetESCButton
   * @note
   * Children class of this class must NOT override this function.
   * Instead they should use @ref #SetEscapeButton.
   */
  virtual CATVidCtlButton *GetESCButton();

  friend class l_CATVidFraWindow;

private:

  /** The default button of this box (a CATVidCtlButton instance) */
  CATBaseUnknown_WR _wrDefaultButton;
  /** The escape button of this box (a CATVidCtlButton instance) */
  CATBaseUnknown_WR _wrEscapeButton;
};

//-----------------------------------------------------------------------

#endif
