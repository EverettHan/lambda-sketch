/* -*-c++-*- */
// COPYRIGHT DASSAULT SYSTEMES 2005
/**
* @level Protected
* @usage U3
*/
//
//  Oct 2005  Creation: Code generated by the CAA wizard  juz
//===================================================================
#ifndef CATIPLMImpactGraphEngine_H
#define CATIPLMImpactGraphEngine_H

#include "CATPLMImpactGraph.h"
#include "CATBaseUnknown.h"
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMImpactGraph IID IID_CATIPLMImpactGraphEngine;
#else
extern "C" const IID IID_CATIPLMImpactGraphEngine;
#endif

#include "CATOmbPLMRelationshipSemantics.h"
#include "CATListOfCATString.h"
#include "CATPLMIGEngineNavigateOptions.h"
#include "CATPLMOmxCollections.h"

class CATPLMType;
class CATIPLMCompRecordReadSet;
class CATIPLMFilterConfig;
class CATIPLMFilterCondition;
class CATListValCATString;
class CATPLMID;
class CATString;
class CATIPLMFilterAttribute;


/**
* This interface defines the unique protocol of communication between the users and the impact graph engine.
* Use @href CATPLMIGEngineServices#CreateIGEngine to get a pointer on an impact graph engine.
* <br>Globally, the user can:
* <ul>
*   <li>Define a select clause in giving the object to treat, the orientation mode, the attributes to be retrieve by the query,
* the context mode, and the representation completion mode.</li>
*   <li>Define a where clause on semantic relations qualifiers (role and category), on objects attributes, on configuration
* attribute, and on modeler .</li>
*   <li>Run the engine.</li>
*   <li>Access to the result of the queries.</li>
* </ul>
*/
class ExportedByCATPLMImpactGraph CATIPLMImpactGraphEngine : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Defines the orientation of the impact query.
  * @param IG_ORIENT_UNDEFINED
  *  The unknown orientation.
  * @param IG_ORIENT_IMPACTSON
  *  The orientation definig an Impacts On query.
  * @param IG_ORIENT_IMPACTEDBY
  *  The orientation definig an Impacted By query.
  */
  enum CATPLMIGEngineOrientationMode
  {
    IG_ORIENT_UNDEFINED = 0,
    IG_ORIENT_IMPACTSON,
    IG_ORIENT_IMPACTEDBY,
    IG_ORIENT_IMPACTBOTH
  };

  // SelectClause
  /**
  * Enables to define an orientation mode.
  *
  * <br><b>Role</b>: Defines the impact orientation mode : ON or BY.
  * If not specified, the Run method will return an E_FAIL HRESULT.
  *
  * @param iMode [in]
  *   The orientation mode.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetOrientationMode(CATPLMIGEngineOrientationMode iMode) = 0;

  /**
  * Sets the object involving in the filter.
  *
  * @param iFilterObjectToTreat [in]
  *    The Filter Object To Treat
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetObjectToTreat(const CATPLMID& iPLMID) = 0;

  /**
  * Adds an object involving in the filter.
  *
  * @param iFilterObjectToTreat [in]
  *    The Filter Object To Treat
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT AddObjectToTreat(const CATPLMID& iPLMID) = 0;

  /**
  * Adds a select condition in the select clause. The select clause picks which objects and properties to return in the query result set.
  * @param iAttributeId
  *    the attribute value we want to get in the result. By default, the Attributes values in the result set corresponds to Query result mask defined for the queried type.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT AddSelectCondition(CATPLMType * iType, CATString * iAttributeId) = 0;

  /**
  * Adds a select condition in the select clause for an attribute on extension. The select clause picks which objects and properties to return in the query result set.
  *   @param ipExtType
  *    the type of the extension where the attribute is defined
  *   @param iAttributeId
  *    the attribute value we want to get in the result. By default, the Attributes values in the result set corresponds to Query result mask defined for the queried type.
  *   @param iRequestedBaseTypes
  *    List of base type where the extension could be found
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT AddExtensionSelectCondition(CATPLMType * ipExtType, CATString * iAttributeId, CATPLMTypeList& iRequestedBaseTypes) = 0;


  /**
  * Returns All extensions for the given type.
  */
  virtual HRESULT AddAllExtension(CATPLMType* iType) = 0;

  /**
  * Enables to define a context mode.
  *
  * @param iMode [in]
  *   The context mode. TRUE if the impact query is contextual, FALSE else. By default the context mode is TRUE.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetContextMode(CATBoolean iMode) = 0;

  /**
  * Enables to define navigate options.
  *
  * @param CATPLMIGEngineNavigateOptions iOptions [in]
  *   The navigate options. By default, there is no options.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetNavigateOptions(CATPLMIGEngineNavigateOptions iOptions) = 0;

  /**
  * Defines a completion mode for representations.
  * @param IG_REPCOMPLETION_OFF
  *  The mode without representation completion.
  * @param IG_REPCOMPLETION_ON
  *  The mode with representation completion.
  */
  enum CATPLMIGEngineRepCompletionMode {
    IG_REPCOMPLETION_OFF = 0,
    IG_REPCOMPLETION_ON,
    IG_REPCOMPLETION_FULL
  };

  /**
  * Enables to define a completion mode for representations.
  *
  * @param CATPLMImpactCompletionRepMode iMode [in]
  *   The completion mode. By default, there is no completion.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetCompletionRepMode(CATPLMIGEngineRepCompletionMode iMode) = 0;

  /**
  * Enables to define a Result completion mode for representations.
  * When an object has got semantic relations, it is retrieved with all its Semantic Relations,
  * even with those that have not been followed during the Impact Graph process.
  * With this mode activated, the objects in these Semantics Relations are retrieved.
  *
  * @param CATBoolean iMode [in]
  *   The completion result mode. By default, there is no completion result.
  *
  * @return
  *   <code>S_OK</code> Success.
  *   <code>E_FAIL</code> Failure.
  *
  */
  virtual HRESULT SetCompletionResultMode(CATBoolean iMode) = 0;

  // WhereClause
  /**
  * Sets a filter on roles of semantic relationships.
  *
  * @param CATListOfCATUnicodeString iList [in]
  *   The list of roles of SR to navigate on.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT SetSRRolesFilter(const CATListOfCATString& iList) = 0;

  /**
  * Sets a filter on semantics of semantic relationships.
  *
  * @param CATBoolean iOnVisibility [in]
  *   The filter defines a SRVisibility value.
  * @param SRVisibility iVisibility [in]
  *   The value of visibility semantic.
  * @param CATBoolean iOnPropagOnDelete [in]
  *   The filter defines a SRPropagOnDelete value.
  * @param SRVisibility iPropagOnDelete [in]
  *   The value of PropagOnDelete semantic.
  * @param CATBoolean iOnSynchroSensitivity [in]
  *   The filter defines a SRSynchroSensitivity value.
  * @param SRVisibility iSynchroSensitivity [in]
  *   The value of SynchroSensitivity semantic.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT SetSRCategoriesFilter(CATBoolean iOnVisibility, CATOmbPLMRelationshipSemantics::OmbSRVisibility iVisibility,
    CATBoolean iOnPropagOnDelete, CATOmbPLMRelationshipSemantics::OmbSRPropagOnDelete iPropagOnDelete,
    CATBoolean iOnSynchroSensitivity, CATOmbPLMRelationshipSemantics::OmbSRSynchroSensitivity iSynchroSensitivity) = 0;
  /**
  * Set modelers filter.
  *
  * <br><b>Role</b>: Defines the modeler on which the navigation is performed. By default, navigation is performed on all modelers.
  *
  * @param const CATListOfCATString& iList [in]
  *   The list of modelers.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT SetModelersFilter(const CATListOfCATString& iList) = 0;

  /**
  * Creates and returns a filter condition.
  *
  * <br><b>Role</b>: Enables to set a filter on attributes and configuration.
  *
  * @param CATIPLMFilterCondition * oFilterCondition [out]
  *   The returned filter condition.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT GetFilterCondition(CATIPLMFilterCondition*&  oFilterCondition) = 0;

  //Result
  /**
  * Runs the impact graph query. The orientation mode, and the object to treat at least must have be defined to success.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT Run() = 0;

  /**
  * Gets the result of the impact graph query.
  *
  * @param CATIPLMRecordReadSet * oRecordReadSet [out]
  *   The record read set containing the results.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT GetResult(CATIPLMCompRecordReadSet*& oRecordReadSet) = 0;

};

//------------------------------------------------------------------
CATDeclareHandler(CATIPLMImpactGraphEngine, CATBaseUnknown);

#endif
