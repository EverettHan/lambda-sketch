// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATPolyMCurveSegmentsOper.h
// Header definition of CATPolyMCurveSegmentsOper
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2004  Creation: Code generated by the CAA wizard  rxu
//===================================================================
#ifndef CATPolyMCurveSegmentsOper_H
#define CATPolyMCurveSegmentsOper_H

#include "CATPolyMCurveAnalyzeOperators.h"
#include "CATPolyMCurveAnalyzeOper.h"

#include "CATListOfInt.h"
#include "CATListPV.h"
#include "CATBooleanDef.h"

#include "CATLISTP_CATPolyMCurve.h"
#include "CATLISTV_CATPolyMPoint.h"

class CATIPolyMesh;
class CATPolyMPointTopoUtil;
class CATPolyMPoint;

class CATHTableOfIntToPtr;

//-----------------------------------------------------------------------

/**
 * This operator finds all the segments of the give mesh curve on each triangle
 * the curve passes through.
 * The mesh curve must be regularized. 
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedByCATPolyMCurveAnalyzeOperators CATPolyMCurveSegmentsOper: public CATPolyMCurveAnalyzeOper
{

public:

   // Standard constructors and destructors
   // -------------------------------------
   CATPolyMCurveSegmentsOper ();
   virtual ~CATPolyMCurveSegmentsOper ();

  /**
   * Set the mesh curve
   * @param iMCurve
   *   the curve.
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */

  HRESULT SetMeshCurve (CATPolyMCurve *iMCurve,
	  const CATBoolean ignoreVertexSegments = FALSE);
 
  HRESULT SetMeshCurves (const CATListPtrCATPolyMCurve & meshCurves,
	  const CATBoolean ignoreVertexSegments = FALSE);
 
  /**
   * Run the operator
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
   HRESULT Run ();

  /**
   * Get all the triangles the mesh curve passes through
   * @param oTriangles
   *   the triangles
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
  HRESULT GetTriangles( CATListOfInt &oTriangles ) const;
 
  /**
   * Get all segements of the mesh curve on a triangle
   * @param iTriangle
   *   the triangles
   * @param oMPointIndices
   *   list of the segments. Each segment is a list of indices to the curve
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
  HRESULT GetSegmentsOnTriangle
  (
    const int iTriangle,
    const CATBoolean segmentsInsideTriangle,
    CATListOfInt & meshCurveIndices,
    CATListPV &oSegments
  ) const;

  HRESULT NewGetSegmentsOnTriangle
  (
    const int iTriangle,
    const CATBoolean segmentsInsideTriangle,
    CATListOfInt & meshCurveIndices,
    CATListPV &oSegments
  ) const;

  /**
  * Get all mesh points that are on the specified triangle.
  */
  HRESULT GetMeshPointsOnTriangle (const int triangle,
    CATListOfInt & meshCurveIndices,
    CATListOfInt & meshPointIndices) const;

  /**
  * Get all bar points that are on the specified triangle.
  */
  HRESULT GetBarPointsOnTriangle (const int triangle,
    CATListOfInt & meshCurveIndices,
    CATListOfInt & meshPointIndices) const;

  /**
  * Get all triangle points that are on the specified triangle.
  */
  HRESULT GetTrianglePointsOnTriangle (const int triangle,
    CATListOfInt & meshCurveIndices,
    CATListOfInt & meshPointIndices) const;

  void Print (CATCGMOutput & stream) const;

private:

   // CATPolyMCurve     *_MCurve;
   // CATBoolean        _CurveClosed;
   // CATListOfInt      _Triangles;

   CATIPolyMesh * _polyMesh;
   CATPolyMPointTopoUtil *_TopoUtil;

   CATListPtrCATPolyMCurve _meshCurves;
   CATListOfInt _curveClosed;

   CATHTableOfIntToPtr * _map;

   CATBoolean _ignoreVertexSegments;
 
   void Init ();

   CATBoolean AddPoint
   (
      const int iTriangle,
      const int meshCurveIndex,
      const int iMPointIndex,
      const int iMPointType
   );
   HRESULT ExtractSegments
   (
   const int meshCurveIndex,
      const CATListOfInt   &iMPointIndices,
      CATListPV            &oSegments
   ) const;
   CATBoolean OnSameBar
   (
   const int meshCurveIndex,
      const int iPoint1Index,
      const int iPoint2Index
   ) const;
   CATBoolean IsSamePoint
   (
   const int meshCurveIndex,
      const int iPoint1Index,
      const int iPoint2Index
   ) const;

   CATBoolean NewExtractSegments (const int meshCurveIndex,
     const CATListOfInt & iMPointIndices,
     CATListPV & segments) const;

   CATBoolean ProcessMeshCurveByPoints (CATPolyMCurve * meshCurve,
     const int meshCurveIndex);

};

#endif
