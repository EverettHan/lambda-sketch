//===================================================================
// COPYRIGHT Dassault Systemes 2010/10/12
//===================================================================
// CATIAdpProtectedDWSOperations.cpp
// Header definition of class CATIAdpProtectedDWSOperations
//===================================================================
//
// Usage notes:
//	Interface used to manage operations on Designer Workspace components.
//
//===================================================================
//  2010/10/12 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIAdpProtectedDWSOperations_H
#define CATIAdpProtectedDWSOperations_H

#include "CATPLMIntegrationAccessRestrictedDWSUse.h"

//----System fwk
#include "CATBaseUnknown.h"									//JSOGROUP.m
#include "CATCollec.h"										//JSOGROUP.m
#include "CATErrorDef.h"									//JS0GROUP.m
#include "CATBoolean.h"										//JS0GROUP.m

// Global Unique IDentifier defined in .cpp 
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationAccessRestrictedDWSUse IID IID_CATIAdpProtectedDWSOperations;
#else
extern "C" const IID IID_CATIAdpProtectedDWSOperations ;
#endif

class CATAdpDWSLogStatus;
class CATAdpDWSReservationStatus;
class CATLISTP(CATIAdpPLMIdentificator);

/**
 * Interface used to manage operations on Designer Workspace components.
 * <b>Role</b>: It is a typing interface which provides services for Designer Workspace components.
 * @deprecated R418 CATAdpDWSReservationQuery
 */
class ExportedByCATPLMIntegrationAccessRestrictedDWSUse CATIAdpProtectedDWSOperations: public CATBaseUnknown
{
	 // Used in conjunction with CATImplementInterface in the .cpp file
CATDeclareInterface;

public:

	 /**
	 * Log a list of objects with their status into the connected Designer Workspace.
	 * <br><b>Role:</b>This method allows you to log a list of objects with their status into the connected Designer Workspace.
	 * @param iAdpObjectsToLogList [in/out]
	 *   The list of objects to log into the designer workspace.
	 *	 Each object identifier is associated to a @href CATPLMWorkspaceLogStatus status representing its log definition.
	 *	 This input is modified inside this method by looping over it.
	 * @return HRESULT
	 *     Error code of function.
	 *  <ul>
	 *   <li><b>S_OK</b>			No error occurred during the execution of the function.</li>
	 *   <li><b>E_UNEXPECTED</b>	No connection to Designer Workspace exists.</li>
	 *   <li><b>E_FAIL</b>			An error occurred during the execution of the function.</li>
	 *   <li><b>E_INVALIDARG</b>	Input argument is invalid.</li>
	 *  </ul>
	 *  @deprecated R418 
	 */
	 virtual HRESULT dwsLogObjectsToWorkspace(CATAdpDWSLogStatus& ioAdpObjectsToLogList)=0;

	 /**
	 * Lock or unlock the scope of objects built from the input list into the connected Designer Workspace according to boolean parameter. 
	 * <br><b>Role:</b>This method allows you to lock or unlock the scope of objects built from the input list into the connected Designer Workspace according to boolean parameter.
	 * @param ipIAdpObjectsIdsList [in]
	 *   The list of objects to lock or to unlock into the designer workspace.
	 * @param oAdpReservationStatus [out]
	 *	 The results of the operation. Each returned component is associated to a @href CATIPLMError and to the lock owner if exists.
	 *	 A not-empty set will result in an <code>E_INVALIDARG</code> return.
 	 *	 In case of error, rollback is managed on objects successfully locked or unlocked by performing inverse operation.
	 * @param ibObjectsMustBeLocked [in]
	 *   TRUE means objects must be locked. FALSE means objects must be unlocked.
	 * @return HRESULT
	 *     Error code of function.
	 *  <ul>
	 *   <li><b>S_OK</b>			No error occurred during the execution of the function.</li>
	 *   <li><b>S_FALSE</b>			Some objects are already locked/unlocked by the user.</li>
	 *   <li><b>E_UNEXPECTED</b>	No connection to Designer Workspace exists.</li>
	 *   <li><b>E_FAIL</b>			An error occurred during the execution of the function.</li>
	 *   <li><b>E_INVALIDARG</b>	Input argument is invalid.</li>
	 *  </ul>
	 *  @deprecated R418 CATAdpDWSReservationQuery
	 */
	 virtual HRESULT dwsSetWorkspaceObjectsReservation(	const CATLISTP(CATIAdpPLMIdentificator)& ipIAdpObjectsIdsList,
														CATAdpDWSReservationStatus& oAdpReservationStatus,
														CATBoolean ibObjectsMustBeLocked = TRUE)=0;

	 /**
	 * Compute the new versions scope from the input list of objects into the connected Designer Workspace. 
	 * <br><b>Role:</b>This method allows you to compute the new versions scope from the input list of objects into the connected Designer Workspace.
	 * @param ipIAdpObjectsIdsList [in]
	 *   The list of objects for which a new version must be created into the designer workspace.
	 * @param oAdpObjectsToLockAndLogList [out]
	 *   The results of the operation. Each returned component is associated to a @href CATIPLMError and to a @href CATPLMWorkspaceLogStatus status.
	 *	 A not-empty set will result in an <code>E_INVALIDARG</code> return.
	 * @return HRESULT
	 *     Error code of function.
	 *  <ul>
	 *   <li><b>S_OK</b>			No error occurred during the execution of the function.</li>
	 *   <li><b>E_UNEXPECTED</b>	No connection to Designer Workspace exists.</li>
	 *   <li><b>E_FAIL</b>			An error occurred during the execution of the function.</li>
	 *   <li><b>E_INVALIDARG</b>	Input argument is invalid.</li>
	 *  </ul>
	 *  @deprecated R418 
	 */
	 virtual HRESULT dwsCheckAndGetScopeToLockAndLogForVersioning(	const CATLISTP(CATIAdpPLMIdentificator)& ipIAdpObjectsIdsList,
																	CATAdpDWSLogStatus& oAdpObjectsToLockAndLogList)=0;

};

//-----------------------------------------------------------------------
CATDeclareHandler( CATIAdpProtectedDWSOperations, CATBaseUnknown );

#endif
