// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMErrorStack.h
// Define the CATIPLMErrorStack interface
//
//===================================================================
//
// Usage notes:
//    When an error occured, an "failed" HRESULT is returned,
//    a CATIPLMError is created and pushed in the CATIPLMErrorStack.
//    There is one CATIPLMErrorStack by provider.
//
//===================================================================
//
//  May 2003  Creation: Code generated by the CAA wizard  sru
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMErrorStack_H
#define CATIPLMErrorStack_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

class CATIPLMError;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMErrorStack;
#else
extern "C" const IID IID_CATIPLMErrorStack ;
#endif

//------------------------------------------------------------------

/**
 * Error stack.
 * It is a LIFO (Last In First Out) stack.
 */
class ExportedByCATPLMServicesItf CATIPLMErrorStack: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**
   * Push the error in the stack.
   * @param iErr
   *    Error to be pushed.
   */
  virtual HRESULT PushError( CATIPLMError * iErr ) = 0 ;
  /**
   * Pop the last pushed error in the stack.
   * @param oErr [out, CATBaseUnknown#Release]
   *    Popped error. If the stack is empty, <tt>oErr</tt> will be NULL 
   * @return
   *   An HRESULT value. 
   *   <br><b>Legal values</b>:
   *   <dl>
   *     <dt>S_OK</dt>
   *     <dd>The error is successfully popped.</dd>
   *     <dt>S_FALSE</dt>
   *     <dd>The stack is empty.</dd>
   *     <dt>E_FAIL </dt>
   *     <dd>A problem occurs during the process.</dd>
   *   </dl>
   */
  virtual HRESULT PopError( CATIPLMError ** oErr ) = 0 ;
  /**
   * Retrieve the number of errors in the stack.
   * @param oNbError
   *    Number of errors.
   */
  virtual HRESULT ErrorCount( int * oNbError ) = 0 ;
  /**
   * Retrieve an error by index in the stack.
   * @param iIndex
   *    Error index in the stack.
   *    <br><b>Legal values</b>: <tt>iIndex</tt> range starts with 1,
   *    but if <tt>iIndex</tt>==0, then the last error will be returned
   * @param oErr [out, CATBaseUnknown#Release]
   *    Error at the index <tt>iIndex</tt>.
   */
  virtual HRESULT GetError( int iIndex, CATIPLMError **oErr ) = 0 ;
  /**
   * Empty stack.
   */
  virtual HRESULT Empty() = 0 ;
      
};

//------------------------------------------------------------------

#endif
