// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATAdpSecurityServices.h
// Header definition of CATAdpSecurityServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  PMM
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATAdpSecurityServices_H
#define CATAdpSecurityServices_H

#include "CATPLMIntegrationAccess.h"
#include "IUnknown.h"

class CATIAdpType;
class CATString ;
class CATUnicodeString ;

/**
* Class to manage PLM connections Security.
*
* <b>Role</b>: provides run-time security services to
* PLM components that need to secure their data.
*/
class ExportedByCATPLMIntegrationAccess CATAdpSecurityServices
{
public:

  /**
  * Returns the security information of the specified repository. 
  * Some of Those security parameters could be different from connection parameters.
  * 
  * @param iRepository
  * The repository name.
  * @param oUserId
  * PLM User Identifier. (Connected User)
  * @param oOrganisationId
  * PLM Organization Identifier.
  * @param oProjectId
  * PLM Project Identifier.
  * @param oRoleId
  * PLM Role Identifier.
  * @return
  * Method execution status.
  * Possible values are:
  * S_OK    successfull;
  * S_FALSE The specified repository doesn't implement PLM security;
  * E_FAIL  when an error occurs.
  */
  static HRESULT GetSecurityParameters(const char * iRepository, CATUnicodeString & oUserId
    , CATUnicodeString & oOrganisationId
    , CATUnicodeString & oProjectId
    , CATUnicodeString & oRoleId);     
  // @deprecated
  static HRESULT GetSecurityParameters(const char * iRepository, CATString & oUserId
    , CATString & oOrganisationId
    , CATString & oProjectId
    , CATString & oRoleId);

  /**
  * Checks the security access to a global Command of the specified repository.
  * <br><b>Role</b>: This method computes the access to the specified global
  * command (e.g. <code>Tree sort</code>), thus indicating if that function
  * should be made available to the connected user by the relevant modeler(s).
  * 
  * @param iRepository
  * The repository name.
  * @param iCommandId
  * PLM global function name.
  * @return
  * Method execution status.
  * Possible values are:
  * S_OK    if the access to the function is granted;
  * S_FALSE if the access to the function is denied;
  * E_FAIL  when an error occurs while valuating the security access.
  */
  static HRESULT CheckAccess(const char * iRepository, const CATString & iCommandId);

  /**
  * Checks the security access to an entity Command.
  * <br><b>Role</b>: This method computes the access to the specified
  * function (e.g. <code>Delete</code>) of the specified PLM Type (e.g.
  * <code>RscPerson</code>), thus indicating if that Command should
  * be made available to the connected user by the relevant modeler(s).
  * 
  * @param iRepository
  * The repository name.
  * @param iType
  * PLM Type Identifier.
  * @param iFunction
  * PLM entity function name.
  * @return
  * Method execution status.
  * Possible values are:
  * S_OK    if the access to the function is granted;
  * S_FALSE if the access to the function is denied;
  * E_FAIL when an error occurs while valuating the security access.
  */
  static HRESULT CheckAccess(const char* iRepository, const CATIAdpType* iType, const CATString & iCommandId);

  /**
  * Create a one-use login ticket for CAA batch purpose.
  *
  * <br><b>Role</b>:
  *          It creates a ticket based on current user credentials.
  *          This ticket can be used to connect to ENOVIA using CAA API such as <code>CAAAdpCreateSession</code>.
  * 
  * @param iKey
  *          Currently unused, reserved for future.
  *          <br><b>Legal value</b>: This parameter should be null
  * @param oTicket
  *          The returned login ticket.
  * @return
  *          The login ticket creation status.
  *          <br>Possible values are:
  *          <dl>
  *              <dt>S_OK</dt>   <dd>When the ticket was created.</dd>
  *              <dt>E_FAIL</dt> <dd>When the ticket could not be created.</dd>
  *          </dl>
  */
  static HRESULT CreateOnceUseLoginTicket(const char * iRepository, const char *iKey, CATUnicodeString &oTicket);

};

#endif
