// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATIAFileAccessAdminSettingAtt.idl
// Automation interface for the FileAccessAdminSettingAtt element 
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
/**
 * @level Protected
 * @usage U3
 */
//
//===================================================================
//
//  Jan 2006  Creation: Code generated by the CAA wizard  JBT
//===================================================================
#ifndef CATIAFileAccessAdminSettingAtt_IDL
#define CATIAFileAccessAdminSettingAtt_IDL
/*IDLREP*/

#include "CATIASettingController.idl"
#include "CATVariant.idl"
#include "CATSafeArray.idl"
#include "CATBSTR.idl"

// Putting your explanations in the following "JavaDoc"-like comment will enable mkdcidl to document your class.
/**  
 * The interface to access a CATIAFileAccessAdminSettingAtt.
 */
interface CATIAFileAccessAdminSettingAtt : CATIASettingController 
{
#pragma PROPERTY AccessMode
    /**
     * Returns or sets the AccessMode parameter.
     * <p>
     * Ensure consistency with the C++ interface to which the work is delegated.
     */
     HRESULT get_AccessMode(inout /*IDLRETVAL*/ long		ioAccessMode);

     HRESULT put_AccessMode( in long		iAccessMode );

	 /** 
	 * Retrieves environment informations for the AccessMode parameter.
	 * <br><b>Role</b>:Retrieves the state of the AccessMode parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetAccessModeInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the AccessMode parameter.
	 * <br><b>Role</b>:Locks or unlocks the AccessMode parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetAccessModeLock( in  boolean iLocked );


#pragma PROPERTY ConfDLNamesMode
    /**
     * Returns or sets the ConfDLNamesMode parameter.
     * <p>
     * Ensure consistency with the C++ interface to which the work is delegated.
     */
     HRESULT get_ConfDLNamesMode(inout /*IDLRETVAL*/ boolean		ioConfDLNamesMode);

     HRESULT put_ConfDLNamesMode( in boolean	iConfDLNamesMode );

	 /** 
	 * Retrieves environment informations for the ConfDLNamesMode parameter.
	 * <br><b>Role</b>:Retrieves the state of the ConfDLNamesMode parameter 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetConfDLNamesModeInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the ConfDLNamesMode parameter.
	 * <br><b>Role</b>:Locks or unlocks the ConfDLNamesMode parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetConfDLNamesModeLock( in  boolean iLocked );
};

// Interface name : CATIAFileAccessAdminSettingAtt
#pragma ID CATIAFileAccessAdminSettingAtt "DCE:48dbadce-f98e-4457-bd6650c4a601741e"
#pragma DUAL CATIAFileAccessAdminSettingAtt

// VB object name : FileAccessAdminSettingAtt (Id used in Visual Basic)
/** 
 * Class FileAccessAdminSettingAtt is used for giving compiler specific directives
 */
#pragma ID FileAccessAdminSettingAtt "DCE:5fe0ed17-d597-4696-9f4adefb01bd4e1b"
/** 
 * Class FileAccessAdminSettingAtt is used for giving compiler specific directives
 */
#pragma ALIAS CATIAFileAccessAdminSettingAtt FileAccessAdminSettingAtt

#endif
