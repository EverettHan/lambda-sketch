//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/08/22
//===================================================================
// CATPLMSubstitutionServices.cpp
// Header definition of class CATPLMSubstitutionServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/08/22 Creation : M3M - Code generated by the 3DS wizard.
//===================================================================
/**
* @level Protected
* @usage U1
*/

#ifndef CATPLMSubstitutionServices_H
#define CATPLMSubstitutionServices_H


#include "CATIPLMNavInstance.h"
#include "CATIAdpPLMIdentificator.h"
#include "CATPLMComponentInterfaces.h"
#include "CATListPtrCATIPLMNavInstance.h"
#include "CATListPtrCATIAdpPLMIdentificator.h"

//-----------------------------------------------------------------------
/**
* Class to manage Substitution.
*
* <br><b>Role</b>: this class enables you to handle subtitution family.
*
*/
class ExportedByCATPLMComponentInterfaces CATPLMSubstitutionServices
{
public:

  CATPLMSubstitutionServices();
  virtual ~CATPLMSubstitutionServices();

  /**
  * Says whether an instance is substitutable within a modeler or not. If the instance is a substitute, it is not substitutable.
  *
  * @param ipInstance
  *   The Instance we are handling.
  *
  * @return
  *   S_OK         : Substitution is possible.
  *   E_FAIL       : Instance is not substitutable because it's not allowed by the modeler or it's a substitute.
  *   E_INVALIDARG : If any problem with argument type.
  */
  HRESULT IsSubstitutable(CATIPLMNavInstance * ipInstance);

  /**
  * Creates a substitute to an instance
  *
  * @param ipInstanceTosubstitute
  *   The Instance for which we are targeting to create a substitute.
  * @param ipSubstituteRef
  *   The reference that the new substitute will instantiate.
  * @param opSubstitute  [out, CATBaseUnknown#Release]
  *   The new substitute.
  *
  * @return
  *   S_OK         : Creation of the substitute succeeded.
  *   E_FAIL       : Creation of the substitute failed.
  *   E_INVALIDARG : If any problem with arguments types.
  */
  HRESULT CreateSubstitute(CATIPLMNavInstance * ipInstanceToSubstitute, CATIPLMNavReference* ipSubstituteRef, CATIPLMNavInstance *& opSubstitute);

  /**
  * Set an instance as Preferred and the previous Preferred as a substitute.
  *
  * @param ipInstance
  *   The Instance we are handling.
  *
  * @return
  *   S_OK         : Setting succeeded.
  *   E_FAIL       : There were an unexpected problem.
  *   E_INVALIDARG : If any problem with arguments types.
  */
  HRESULT SetAsPreferred(CATIPLMNavInstance * ipInstance);

  /**
  * Says whether an instance is Preferred or a substitute.
  *
  * @param ipInstance
  *   The Instance we are handling.
  *
  * @return
  *   S_OK         : It's the Preferred.
  *   S_FALSE      : It's a substitute.
  *   E_FAIL       : There were an unexpected problem.
  *   E_INVALIDARG : if any problem with arguments types.
  */
  HRESULT IsPreferred(CATIPLMNavInstance * ipInstance);

  /**
  * Gets the preferred instance within a family.
  *
  * @param ipInstance
  *   The Instance we are handling.
  * @param opPreferred [out, CATBaseUnknown#Release]
  *   The corresonding prefered
  *
  * @return
  *   S_OK         : Getting succeeded.
  *   E_FAIL       : Getting failed.
  *   E_INVALIDARG : if any problem with arguments types.
  */
  HRESULT GetPreferred(CATIPLMNavInstance * ipInstance, CATIPLMNavInstance *& opPreferred);

  /**
  * Says whether two instances have substitution relationship or not
  *
  * @param ipInstance1 ipInstance2
  *   The two instance we are comparing
  *
  * @return
  *   S_OK         : ipInstance1 is a substitute of ipInstance2
  *   S_FALSE      : ipInstance1 is the preferred of ipInstance2
  *   E_FAIL       : There is no relationship between both
  */
  HRESULT IsSubstituteOf(CATIPLMNavInstance * ipInstance1, CATIPLMNavInstance * ipInstance2);

  /**
  * Lists the loaded substitute family of an instance.
  *
  * @param ipInstance
  *   The instance we are handling.
  * @param opSubstituteFamily
  *   The list of substitution family.
  *
  * @return
  *   S_OK         : Retrieving the substitutes succeeded.
  *   E_FAIL       : There were an unexpected problem.
  *   E_INVALIDARG : If any problem with argument type.
  */
  HRESULT ListLoadedSubstitutionFamily(CATIPLMNavInstance * ipInstance, CATListPtrCATIPLMNavInstance & opSubstituteFamily);

  /**
  * Lists the identificators of all the substitute family of an instance (either already loaded in session and from database)
  *
  * @param ipInstance
  *   The instance we are handling.
  * @param opAllSubstitutesIDs
  *   The list of substitution family identificators.
  *
  * @return
  *   S_OK         : Retrieving the substitutes instances succeeded.
  *   E_FAIL       : There were an unexpected problem.
  *   E_INVALIDARG : if any problem with argument type.
  */
  HRESULT ListAllSubstitutionFamily(CATIPLMNavInstance * ipInstance, CATListPtrCATIAdpPLMIdentificator & opAllSubstitutesIDs);

private:
  CATPLMSubstitutionServices(CATPLMSubstitutionServices &);
  CATPLMSubstitutionServices& operator=(CATPLMSubstitutionServices&);
};

//-----------------------------------------------------------------------

#endif
