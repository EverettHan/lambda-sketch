// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMSynchronizationRequest.h
// Define the CATIPLMSynchronizationRequest interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMSynchronizationRequest_H
#define CATIPLMSynchronizationRequest_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h"
#include "CATPLMSynchronizationStrategy.h"
#include "CATPLMSynchronizationConstraint.h"
#include "CATPLMSynchronizationCompletionParameters.h"

class CATIPLMSynchronizationProposals;
class CATProxySpace;
class CATIPLMSpace;
class CATComponentId;
class CATLISTV(CATComponentId);
class CATIPLMComponent;
class CATLISTP(CATIPLMComponent);
class CATTime;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMSynchronizationRequest;
#else
extern "C" const IID IID_CATIPLMSynchronizationRequest;
#endif

//------------------------------------------------------------------

/**
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMSynchronizationRequest : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Declare user strategies.
  *
  * @param iStrategiesMask
  *        Declare accepted strategies.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserStrategies(CATPLMSynchronizationStrategy iStrategiesMask) = 0;

  /**
  * Declare constraints.
  *
  * @param iStrategiesMask
  *        Declare accepted strategies.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserConstraints(CATPLMSynchronizationConstraint iConstraintsMask) = 0;

  /**
  * Declare completion parameters.
  *
  * @param iCompletionParameters
  *        Control on completion parameters.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserCompletionParameters(const CATPLMCompletionParameters & iCompletionParameters) = 0;

  /**
  * The working context is a space contents.
  *
  * @param iSpace
  *        The space to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet(CATIPLMSpace * iWorkingSet) = 0;

  /**
  * The working context is a space contents (If FW prerequisite is authorized).
  *
  * @param iSpace
  *        The space to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet(const CATProxySpace & iWorkingSet) = 0;

  /**
  * The working context is a list of components.
  *
  * @param iListOfComponents
  *        The list of components to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet(const CATLISTP(CATIPLMComponent) & iWorkingSet) = 0;

  /**
  * The working context is a list of components (If FW prerequisite is authorized).
  *
  * @param iListOfComponents
  *        The list of components to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet(const CATLISTV(CATComponentId) & iWorkingSet) = 0;

  /**
  * Sets if the logicals equivalents for the deleted instances should be load or not.
  * By default, this behavior is deactivated.
  *
  * @param iLoadLogicalEquivalences
  *        A boolean.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT LoadLogicalEquivalencesForDeletedInstances(CATBoolean iLoadLogicalEquivalences) = 0;

  /**
  * Sets if the new instances should be load.
  * By default, this behavior is deactivated.
  *
  * @param iLoadNewInstances
  *        A boolean.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT LoadNewInstances(CATBoolean iLoadNewInstances) = 0;
  virtual HRESULT LoadNewInstances(CATBoolean iLoadNewInstances, const CATTime & iSelectAfterDate) = 0;

  virtual HRESULT LoadRerouteToAndAggregated(CATBoolean iSupportRerouteTo) = 0;

  /**
  * Compute synchronization proposals.
  *
  * @param oSynchronizationProposals [out, CATBaseUnknown#Release]
  *        !=NULL : A set of unresolved proposals.
  *        ==NULL : No concurrent modifications.
  * @return
  *        S_OK if concurrent modifications are found.
  *        S_FALSE if no concurrent modifications.
  *        E_FAIL if request failed.
  */
  virtual HRESULT ComputeProposals(CATIPLMSynchronizationProposals *& oSynchronizationProposals) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(CATIPLMSynchronizationRequest, CATBaseUnknown);
//------------------------------------------------------------------

#endif
