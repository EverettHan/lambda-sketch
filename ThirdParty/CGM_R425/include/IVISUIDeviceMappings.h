//===================================================================
// COPYRIGHT Dassault Systemes 2017/08/30
//===================================================================
// IVISUIDeviceMappings.cpp
// Header definition of class IVISUIDeviceMappings
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/08/30 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef IVISUIDeviceMappings_H
#define IVISUIDeviceMappings_H

#include "IVInterfaces.h"
#include "CATBaseUnknown.h"
#include "IVISUICollection.h"

#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"

extern ExportedByIVInterfaces  IID IID_IVISUIDeviceMappings ;


#include "CATLISTV_Clean.h"

#define CATLISTV_Append
#define CATLISTV_RemovePosition
#define	CATLISTV_RemoveAll
#define	CATLISTV_Locate

#undef CATCOLLEC_ExportedBy
#define CATCOLLEC_ExportedBy ExportedByIVInterfaces

#include "CATLISTV_Declare.h"
struct TrackerMapping
{
  CATUnicodeString trackerName;
  CATUnicodeString targetName;
  CATUnicodeString typeName;

  bool operator == (const TrackerMapping& mapping) const {
    return trackerName == mapping.trackerName && targetName == mapping.targetName && typeName == mapping.typeName;
  }

  bool operator != (const TrackerMapping& mapping) const {
    return !(*this == mapping);
  }

};

struct AnalogMapping
{
  CATUnicodeString analogName;
  CATUnicodeString transformName;
  CATUnicodeString actionName;
  bool operator == (const AnalogMapping& mapping) const {
    return analogName == mapping.analogName && transformName == mapping.transformName && actionName == mapping.actionName;
  }

  bool operator != (const AnalogMapping& mapping) const {
    return !(*this == mapping);
  }
};

struct ButtonMapping
{
  CATUnicodeString buttonName;
  CATUnicodeString transformName;
  CATUnicodeString actionName;
  CATUnicodeString typeName;

  bool operator == (const ButtonMapping& mapping) const {
    return buttonName == mapping.buttonName && transformName == mapping.transformName && actionName == mapping.actionName && typeName == mapping.typeName;
  }

  bool operator != (const ButtonMapping& mapping) const {
    return !(*this == mapping);
  }
};


CATLISTV_DECLARE(TrackerMapping);

typedef ExportedByIVInterfaces CATLISTV(TrackerMapping) TrackerMappingPtrList;

CATLISTV_DECLARE(AnalogMapping);

typedef ExportedByIVInterfaces CATLISTV(AnalogMapping) AnalogMappingPtrList;

CATLISTV_DECLARE(ButtonMapping);

typedef ExportedByIVInterfaces CATLISTV(ButtonMapping) ButtonMappingPtrList;


class ExportedByIVInterfaces IVISUIDeviceMappings: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  virtual const TrackerMappingPtrList& GetTrackerMappings() const = 0;
  virtual const AnalogMappingPtrList& GetAnalogMappings() const = 0;
  virtual const ButtonMappingPtrList& GetButtonMappings() const = 0;

};

//-----------------------------------------------------------------------
CATDeclareHandler( IVISUIDeviceMappings, CATBaseUnknown );

#endif
