#include "CATStandard_DimensionMismatch.hxx"
#include "CATStandard_RangeError.hxx"
#include "CATStandard_OutOfMemory.hxx"

#ifdef Array1_Traces
#include "CATCGMOutput.h"
static CATStandard_Integer Nb_Array1 =0;
#endif


//=======================================================================
//function : CATTCollection_Array1
//purpose  : 
//=======================================================================

CATTCollection_Array1::CATTCollection_Array1 (const CATStandard_Integer Low,
					const CATStandard_Integer Up) :
       myLowerBound(Low),
       myUpperBound(Up),
       isAllocated(CATStandard_True),
	   myStart(0)
{
  CATStandard_RangeError_Raise_if(Up < Low,"CATTCollection_Array1::Create");

  Array1Item* p;
#ifdef __OPTIM_ARRAY
  p = new char [(Up-Low+1)*sizeof (Array1Item)];
#else
  p = new Array1Item[Up-Low+1];
#endif

  if (!p) CATStandard_OutOfMemory::Raise("Array1 : Allocation failed");
  myStart = (void*)(p - myLowerBound);
#ifdef Array1_Traces
  Nb_Array1++;
  cgmout << "--- Trace Array 1 : Create Number : " << Nb_Array1 << cgmendl;
#endif

}



//=======================================================================
//function : Init
//purpose  : 
//=======================================================================

void CATTCollection_Array1::Init (const Array1Item& V) {
  Array1Item* p = &ChangeValue(myLowerBound);
  CATStandard_Integer i;
  for(i = myLowerBound; i <= myUpperBound; i++) {
    *p++ = V;
  }
}

//=======================================================================
//function : CATTCollection_Array1
//purpose  : C Array constructor
//=======================================================================

CATTCollection_Array1::CATTCollection_Array1(const Array1Item& AnItem,
				       const CATStandard_Integer Low,
				       const CATStandard_Integer Up) :
       myLowerBound(Low),
       myUpperBound(Up),
       isAllocated(CATStandard_False)
{

  CATStandard_RangeError_Raise_if(Up < Low,"Array1::CArray");
  myStart = (void*)( &AnItem - Low ); 
}

//=======================================================================
//function : Destroy
//purpose  : 
//=======================================================================

void CATTCollection_Array1::Destroy() 
{
  if (isAllocated) {
      Array1Item* p = &ChangeValue(myLowerBound);
      delete [] p;
#ifdef Array1_Traces
	  if (p) {
		  cgmout << "--- Trace Array 1 : Delete Number : " << Nb_Array1 << cgmendl;
		  Nb_Array1--;
		}
#endif
  }
}

//=======================================================================
//function : Assign
//purpose  : 
//=======================================================================

const CATTCollection_Array1& CATTCollection_Array1::Assign 
  (const CATTCollection_Array1& Right)
{
  if (&Right != this) {
    CATStandard_Integer max = Length() ;
    CATStandard_DimensionMismatch_Raise_if(max != Right.Length(),
					"DimensionMismatch in Array1::Operator=");
    
    Array1Item* p       = &ChangeValue(myLowerBound);
    const Array1Item* q = &Right.Value(Right.Lower());
    for (CATStandard_Integer i=0; i<max; i++){
      *p++ = *q++;
    }
  }
  return *this;
}





