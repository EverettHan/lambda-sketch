//===================================================================
// COPYRIGHT Dassault Systemes 2015/04/29
//===================================================================
// CATAsyncSplittableRequest.cpp
// Header definition of class CATAsyncSplittableRequest
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/04/29 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncSplittableRequest_H
#define CATAsyncSplittableRequest_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncRequest.h"

//-----------------------------------------------------------------------
class CATAsyncSplittableRequest;
typedef HRESULT (CATAsyncSplittableRequest::*ElementsAdder) (AsyncBuilderElements);

class ExportedByCATAsyncTasksPlatform CATAsyncSplittableRequest: public CATAsyncRequest
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATAsyncSplittableRequest(CATAsyncRequest_Type iType, CATAsyncAnswer_Type iAnswerType, const Params& iParams);
  CATAsyncSplittableRequest(CATAsyncRequest_Type iType, CATAsyncAnswer_Type iAnswerType, CATBoolean ibFinal, const Params& iParams);
  virtual ~CATAsyncSplittableRequest();

  /************************/
  /* Methods to implement */
  /************************/
  /**
  * Indicates if the elements count allowed to exectute at leat one new request
  *
  * @return
  * <code>TRUE</code>: if there are enough elements
  * <code>FALSE</code>: otherwise
  */
  virtual CATBoolean IsEnoughElements() = 0;

  /**
  * Get the a list of Sub-Request to executes
  *
  * @param
  * <br/> [out] oSubRequestsvector: vector of sub-Requests
  * <br/> [in] ibAllSubRequests: get all sub requests
  * @return
  * <code>S_OK</code>: if at lest one request is returned
  * <code>S_FALSE</code>: if no request is returned
  * <code>E_NOTIMPL</code>: the request cannot be templated
  * <code>E_INVALIDARG</code>: the request can be templated but is not
  * <code>E_*</code>: an error occured
  */
  virtual HRESULT GetSubRequests(CATOmxVector<CATAsyncRequest>& oSubRequestsvector, CATBoolean ibAllSubRequests) = 0;

protected:
  /**
  * If request is a template, get the elememts adder
  *
  * @param
  * <br/> [out] oElementAdder: method pointer that adds iElements
  * @return
  * <code>S_OK</code>: the elements adder is correctly returned
  * <code>E_FAIL</code>: an error occured
  */
  virtual HRESULT GetElementAdder(ElementsAdder& oElementAdder) = 0;

  /**
  * If request is a template, set the strategy to treat duplicate elements
  *
  * @param
  * <br/> [in] iDuplicateElements: strategy
  * @return
  * <code>S_OK</code>: already ok
  * <code>E_*</code>: an error occured
  */
  virtual HRESULT SetDuplicateElementsExt(AsyncBuilderDuplicateElements iDuplicateElements) = 0;

public:
  /**************************/
  /* Public generic methods */
  /**************************/
  /**
  * Add elements in param
  *
  * @param
  * <br/> [in] iElements: elements to add
  * @return
  * <code>S_OK</code>: if the elements are correctly added
  * <code>E_FAIL</code>: an error occured, the element is not added
  */
  HRESULT AddElements(AsyncBuilderElements iElements);

  /**
  * If request is a template, set the strategy to treat duplicate elements
  *
  * @param
  * <br/> [in] iDuplicateElements: strategy
  * @return
  * <code>S_OK</code>: if the strategy is correctly set
  * <code>S_FALSE</code>: if the strategy in param is already set
  * <code>E_NOTIMPL</code>: the request cannot be templated
  * <code>E_INVALIDARG</code>: the request can be templated but is not
  * <code>E_*</code>: an error occured
  */
  HRESULT SetDuplicateElements(AsyncBuilderDuplicateElements iDuplicateElements);

protected:
  /*
  * to comment
  */
  AsyncBuilderDuplicateElements GetDuplicateElementsMode() { return _duplicateElements; }

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATAsyncSplittableRequest (CATAsyncSplittableRequest &);
  CATAsyncSplittableRequest& operator=(CATAsyncSplittableRequest&);

  ElementsAdder _elementsAdder; // for request template

  AsyncBuilderDuplicateElements _duplicateElements; // for request template

  const CATBoolean _bFinal;

};

//-----------------------------------------------------------------------

#endif
