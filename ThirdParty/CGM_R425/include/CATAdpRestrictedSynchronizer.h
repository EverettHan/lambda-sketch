//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/12/09
//===================================================================
// CATAdpRestrictedSynchronizer.cpp
// Header definition of class CATAdpRestrictedSynchronizer
//===================================================================
//
// Usage notes: Class to manage refresh in session
//
// Sample to use it :
//
// CATUuid errorMonitorId;
// CATIAdpErrorMonitor* pErrorMonitor = 0;
// CATAdpErrorMonitorFactory::CreateErrorMonitor(errorMonitorId, pErrorMonitor);
// CATAdpRestrictedSynchronizer refresh(pErrorMonitor);
// Synchronizer.AddElements(iListOfPLMID);
//
// CATOmbLoadingModeRuleSet ruleset; // optional
// ruleset.ApplyPredefinedRules(<my_predefined_mode>);
//
// Synchronizer.Refresh(&ruleset);
//
//===================================================================
//  2012/01/23 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATAdpRestrictedSynchronizer_H
#define CATAdpRestrictedSynchronizer_H

#include "CATPLMIntegrationAccess.h"
#include "CATBaseUnknown.h"
#include "CATAdpRestrictedSynchronizerMode.h"

class CATAdpRestrictedSynchronizerImpl;
class CATOmbLoadingModeRuleSet;
class CATIAdpErrorMonitor;

//-----------------------------------------------------------------------

#define AuthorizedModule                  999
#define CATPLMIntegrationAccess           AuthorizedModule
#define CATPLMSynchronizationEngine       AuthorizedModule
#define CATComponentsFamily               AuthorizedModule

#if _MK_MODNAME_ == AuthorizedModule
#else
	    #error Forbidden access to CATAdpRestrictedSynchronizer from non-infrastructure module
        @error 
#endif

#undef CATPLMIntegrationAccess
#undef CATPLMSynchronizationEngine
#undef CATComponentsFamily

//-----------------------------------------------------------------------
/**
* Provides a basic way to refresh data one-to-one.
* Is working only on isolated components without managing NETWORK DEPENDENCY and INTEGRITY.
*/
class ExportedByCATPLMIntegrationAccess CATAdpRestrictedSynchronizer
{
public:

  // Standard constructors and destructors
  // -------------------------------------
  virtual ~CATAdpRestrictedSynchronizer ();

  /**
  * Class constructor
  * <br><b>Role</b>: 
  * Create a new Synchronizer
  * @param CATIAdpErrorMonitor
  * Error monitor to populate with errors.
  * You can also use @see CATAdpRestrictedSynchronizer#GetErrorMonitor to get it after
  */
  CATAdpRestrictedSynchronizer (CATAdpRestrictedSynchronizerMode iMode, CATIAdpErrorMonitor * iopErrorMonitor = NULL);

  /**
  * <br><b>Role</b>: 
  * Add element to refresh.
  * @param iComponent
  *        The component to process
  * @return
  * <dl>
  * <dt><code>S_OK</code><dd>  Operation succeeded </dd>
  * <dt><code>E_INVALIDARG</code> <dd> Bad argument, no element added </dd>
  * <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
  * </dl>
  */
  HRESULT AddElement(CATBaseUnknown * iComponent);

  /**
  * <br><b>Role</b>: 
  * <li>The components will be refreshed in the current AUTHORING session only if it has been CONCURRENTLY MODIFIED.</li>
  * <li>The transaction will be globally rejected otherwise</li>
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> if no issue</dd>
  * <dt><code>S_FALSE</code> <dd> if nothing to do</dd>
  * <dt><code>E_ACCESSDENIED</code> <dd>If transaction is rejected</>
  * <dt><code>E_FAIL</code> <dd> in case of failure</dd>
  * </dl>
  */
  HRESULT Refresh();

  /*
  * <li>Get an error monitor to iterate through errors.</li>
  */
  HRESULT GetErrorMonitor(CATIAdpErrorMonitor *& opErrorMonitor);

protected:

  CATAdpRestrictedSynchronizerImpl *_impl;


private:

  // Copy constructor and equal operator
  // -----------------------------------
  CATAdpRestrictedSynchronizer (CATAdpRestrictedSynchronizer &);
  CATAdpRestrictedSynchronizer& operator=(CATAdpRestrictedSynchronizer&);
};

//-----------------------------------------------------------------------

#endif
