//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/07/19
//===================================================================
// CATVidCtlListView.h
// Header definition of class CATVidCtlListView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/07/19 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidCtlListView_H
#define CATVidCtlListView_H

#include <VisuDialog.h>
#include <CATVidCtlAbstractItemsView.h>
#include <CATVid.h>

class CATVidLayCollection;

/** @ingroup groupVidModelViewView
 * Control able to display list of data items stored inside a CID model
 * (for example the CATVidMdlStandardList object).
 *
 * For the moment, it's only a basic listview control without multi-column
 * support, that is to say, a control able to display items only in one column.
 *
 * @par Example
 * This basic sample shows you how to construct a model using introspectable
 * elements, set a data template to the list to explain how your data items
 * must be drawn and, then, associate the model to the list view (The elements
 * added to the list model are data blocks, i.e. introspectable objects built
 * at run-time without needing .sypintro files.):
 *
 * @par
 * @code
 * // Create the list view
 * CATVidCtlListView * pListView = CATVidCtlListView::CreateListView();
 *
 * // Create the model
 * CATVidMdlStandardList * pListModel = new CATVidMdlStandardList;
 *
 * if (pListView && pListModel)
 * {
 *    // Insert some datablock objects inside the model
 *    CATSYPDataBlockFactory dbFactory;
 *    dbFactory.AddProperty("", "CATUnicodeString", CATSYPDataBlockFactory::ReadWrite, "", CATBoxingOfCATUnicodeString::Box("Default value"));
 *    CATUnicodeString value("My entry number ");
 *    for (int i = 0 ; i < 50 ; ++i)
 *    {
 *       CATSYPDataBlock * pDataBlock = dataBlockFactory.CreateDataBlock();
 *       if(pDataBlock)
 *       {
 *          CATUnicodeString number;
 *          number.BuildFromNum(i);
 *          CATUnicodeString currentValue = value + number;
 *          pDataBlock->SetProperty("MyLabel", CATBoxingOfCATUnicodeString::Box(currentValue));
 *          pListModel->Append(pDataBlock);
 *          CATSysReleasePtr(pDataBlock);
 *       }
 *    }
 *
 *    // Create the listview control and associate the model and a data template to it
 *    pListView->SetUniformItemSizes(1);
 *    pListView->SetDataTemplate("DataTemplateName", "DataTemplateFile.CATSYPStyle");
 *    pListView->SetSourceModel(pListModel);
 * }
 * @endcode
 */
class ExportedByVisuDialog CATVidCtlListView: public CATVidCtlAbstractItemsView
{
  CATDeclareClass;

public:
  /** 
   * Default constructor
   *
   * The Default template is applied on the list view.
   *
   * @par
   * A default constructed listview displays its items in a OneColumn mode.
   *
   * @par
   * Prefer using a dedicated static constructor to build the listview directly
   * in the mode you want.
   */
  CATVidCtlListView ();
  /** Destructor */
  virtual ~CATVidCtlListView ();

  /**
   * Construct a CATVidCtlListView with a standard style (i.e. default template)
   * that displays its items in a one column mode.
   *
   * @return a pointer on the newly created CATVidCtlListView object or NULL
   * in case of failure.
   */
  static CATVidCtlListView * CreateListView();

  /**
   * Construct a CATVidCtlListView with a standard style (i.e. default template)
   * that displays its items in a thumbnails mode.
   *
   * @return a pointer on the newly created CATVidCtlListView object or NULL
   * in case of failure.
   */
  static CATVidCtlListView * CreateThumbnailsListView();

  /**
   * Construct a CATVidCtlListView with a standard style (i.e. default template)
   * that displays its items in a multi-column mode.
   *
   * @return a pointer on the newly created CATVidCtlListView object or NULL
   * in case of failure.
   */
  static CATVidCtlListView * CreateMultiListView();

  /** Do nothing */
  void SetDataTemplateForViewMode(const CATUnicodeString & i_dataTemplate, const CATUnicodeString & i_styleSheet, ViewMode i_mode);

  /**
  * Get the index of the item of the model to display on top of the control.
  *
  * @return the index that points to the item to display on top the control
  */
  const CATVidMdlIndex & GetFirstDisplayedIdx() const;

  /**
  * Lock(iFlag = 0) or Unlock the selectionchanged event
  */
  void LockUnlockSelectionChangedEvent( const int& iFlag );

  /**
   * @copydoc CATVidCtlAbstractItemsView#ActivateDefaultDnD
   */
  virtual void ActivateDefaultDnD();

protected:
  CATVidCtlListView(CreateLetterFunc i_pCreateLetterFunc);

private:
  // Copy constructor and assignement operator are disabled
  CATVidCtlListView (CATVidCtlListView &);
  CATVidCtlListView& operator=(CATVidCtlListView&);
};

#endif
