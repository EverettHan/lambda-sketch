// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMFilterSelectCondition.h
// Define the CATIPLMFilterSelectCondition interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Apr 2004  Creation: Code generated by the CAA wizard  jsy
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMFilterSelectCondition_H
#define CATIPLMFilterSelectCondition_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATPLMTypeId.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFilterSelectCondition;
#else
extern "C" const IID IID_CATIPLMFilterSelectCondition ;
#endif

class CATPLMType;
class CATString;
class CATUnicodeString;

/**
 * Defines a Select condition. The select clause picks which objects and properties to return in the query result set.
 */
class ExportedByCATPLMServicesItf CATIPLMFilterSelectCondition: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Returns the Object Type of the select condition.
  * @param oObjectType
  *    The object Type.
  */
  virtual HRESULT GetType( CATPLMType ** oObjectType) = 0;

  /**
  * Returns the attribute value we want to get in the result. By default, the Attributes values in the result set corresponds to Query result mask defined for the queried type.
  *
  * Be careful:
  * Suppose you have built a CATIPLMFilterSelectionCondition using HRESULT CATIPLMQueryFilter::AddSelectCondition(CATPLMType* ipType) instead of HRESULT CATIPLMQueryFilter::AddSelectCondition(CATPLMType* ipType, const CATString& iAttributeId), Then current method will return an empty string
  *
  * @return
  * <dt> <code>an attribute name that can be empty if you have only requested default system attribute (plmid and cestamp)</code>     <dd> Success.
  */
  virtual CATString GetAttributeId() const = 0;

  /**
  * Returns the attribute value
  * Caution:
  * It is authorized to do CATIPLMQueryFilter::AddSelectCondition( CATPLMType * iType, CATString * iAttributeId) with iType!=NULL && iAttributeId==NULL.
  * In this case, HRESULT GetAttributeId(CATString& oAttrId) returns S_OK and an empty string: oAttrId.GetLengthInChar()==0.
  *
  * @param oAttrId
  *   The attributeId
  * @return
  * <dl>
  * <dt><code>E_INVALIDARG</code>if oAttrId.GetLengthInChar()!=0 when you call the method<dd>
  * <dt><code>S_OK</code> <dd>
  * <dt><code>E_FAIL</code>Fatal error, CATIPLMQueryFilter badly filled, contact PLMAdapter team<dd>
  * </dl>
  */
  virtual HRESULT GetAttributeId(CATString& oAttrId) const = 0;

  /** @deprecated*/
  virtual HRESULT GetAttributeId(CATString ** oAttrId) = 0;

  /**
  * Retrieves the types entered when an extension attribute is filtered.
  *
  * <br><b>Role</b>: Gets the types used.
  *
  * @param oRequestedBaseType
  *   The list of types.
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure. The creation type is not an extension.
  *
  */
  virtual HRESULT GetExtensionBaseTypes (CATLISTV(CATPLMTypeId) &oRequestedBaseType) = 0;

  /**
  * Retrieves the types entered when an extension attribute is filtered.
  *
  * <br><b>Role</b>: Gets the types used.
  *
  * @param oRequestedBaseType
  *   The list of types.
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure. The creation type is not an extension.
  *
  */
  virtual HRESULT GetExtensionBaseTypes (CATPLMTypeList &oRequestedBaseType) = 0;
};

#endif
