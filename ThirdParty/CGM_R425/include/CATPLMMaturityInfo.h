#ifndef CATPLMMaturityInfo_H
#define CATPLMMaturityInfo_H
// COPYRIGHT Dassault Systemes 2003
//===================================================================
// CATPLMMaturityInfo.h
// Header definition of CATPLMMaturityInfo
//===================================================================
//
// Usage notes:
// describes simple attribute of an object type
//
//===================================================================
//  May 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================

#include "CATBaseUnknown.h"

#include "CATPLMID.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"
#include "CATIPLMError.h"
#include "CATIPLMRecordRead.h"
#include "CATOmxSR.h"
#include "CATPLMCEStamp.h"

#include "CATPLMServicesItf.h"
class CATPLMTypeH;

/**
* @level Protected
* @usage U1
*/


/**
* Class to retrieve output information sent by methods of CATIPLMCompMaturityService .
* Use @href #GetPLMID to retrieve the PLM object on which you want to browse maturity informations or server returned errors.<br>
* This class has no meaning outside the scope of @href CATIPLMCompMaturityService.
*/
class ExportedByCATPLMServicesItf CATPLMMaturityInfo : public CATBaseUnknown
{
  CATDeclareClass;

public:
  /** 
  * Returns the PLMID of the object.
  *
  * @param oPLMID [out]
  *   The PLM identifier on which information can be retrieved.
  *
  * @return
  *   Always <code>S_OK</code>.
  */
  HRESULT GetPLMID (CATPLMID &oPLMID );

  /** 
  * Returns the Current state of the object.
  *
  * @param oState [out]
  *   The server side name of the current state.<br>
  *   When used after @href CATIPLMCompMaturityService#ApplyMaturityEvent :
  *   <ul>
  *     <li>If ApplyMaturityEvent returns S_OK.<br>
  *     It is the final state of the plm object after the event.
  *     <li>If ApplyMaturityEvent returns E_FAIL (no commit on server).<br>
  *     If @href #GetReturnedError returns a valid pointer: It is the state before applying the event.<br>
  *     If @href #GetReturnedError returns a NULL pointer: It is the state that would have been the final state after the event.<br>
  *   </ul>
  *
  * @return
  *   Always <code>S_OK</code>.
  */
  HRESULT GetState (CATUnicodeString &oState );

  /** 
  * Returns the Event list of the object depending of its current state.
  *
  * @param oEventList [out]
  *   The server side names of the events that can be applied on the plm object.<br>
  *   This information can only be retrieved by using @href CATIPLMCompMaturityService#GetMaturityInfo with
  *   iNoEventList equal to FALSE. If not, the list is empty.<br>
  *   This list can also be empty if the current state is a terminal state without any applicable event.<br>
  *
  * @return
  *   Always <code>S_OK</code>.
  */
  HRESULT GetEventList (CATListOfCATUnicodeString  &oEventList);

  /** 
  * Returns the report of the query.
  *
  * @param oReturnedError [out, CATBaseUnknown#Release]
  *   The error returned by the server side if the request on the object has failed.<br>
  *   NULL if the query was OK for this object (returns S_OK in this case).<br>
  *   Should only be checked if the operation called in @href CATIPLMCompMaturityService failed.<br>
  *
  * @return
  *   <code>S_OK</code> if there is no error or the pointer is valid.
  *   <code>E_FAIL</code> otherwise.<br>
  */
  HRESULT GetReturnedError ( CATIPLMError    **oReturnedError );

  /**
  * @param oRecordRead [out, CATBaseUnknown#Release]
  */
  HRESULT GetRecordRead( CATIPLMRecordRead *& oRecordRead );

  /**
  * @nodoc
  */
  CATPLMMaturityInfo (  const CATPLMID                  &iPLMID, 
    const CATUnicodeString          &iStatus,
    const CATListOfCATUnicodeString &iEventList,
    const CATIPLMError             *iReturnedError );

  /**
  * @nodoc
  */
  CATPLMMaturityInfo (  CATIPLMRecordRead * iRecordRead, CATBoolean iNoEventList=FALSE );

  /**
  * @nodoc
  */
  CATPLMMaturityInfo (  const CATPLMMaturityInfo &iMatInfo );
  /**
  * @nodoc
  */
  CATPLMMaturityInfo& operator=(CATPLMMaturityInfo &iMatInfo);
  /**
  * @nodoc
  */
  virtual ~CATPLMMaturityInfo ();
  /**
  * @nodoc
  */
  int operator !=(const CATPLMMaturityInfo& iVal ) const;

  HRESULT GetCEStamp( CATPLMCEStamp & oStamp ) const;
  HRESULT SetCEStamp( const CATPLMCEStamp & iCEStamp );

private:
  HRESULT BuildFromRecord( CATBoolean iNoEventList );
  CATBoolean IsIRPCOrMappingTable(const CATPLMTypeH& iValue);

private:

  CATPLMID                   _PLMID;
  CATUnicodeString           _State;
  CATListOfCATUnicodeString  _EventList;
  CATIPLMError              *_ReturnedError;
  CATPLMCEStamp              _CEStamp;
  CATOmxSR<CATIPLMRecordRead> _Letter;
};

#endif
