//===================================================================
// COPYRIGHT DS SolidWorks Corporation 2012/08/10
//===================================================================
// SWXUtJournalRecorder.cpp
// Header definition of class SWXUtJournalRecorder
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/08/10 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtJournalRecorder_H
#define SWXUtJournalRecorder_H

#include "SWXUtJournal.h"

#include "CATListOfCATUnicodeString.h"
#include "SWXIUtJournalPlayer.h"
#include "SWXIUtJournalPlaybackValidation.h"
#include "SWXIUtSerializationHelper.h"
#include "SWXUtJournalEntry.h"
#include "SWXUtSet.h"
#include "SWXUtVector.h"

class CATString;
class CATIDOMDocument_var;
class CATIDOMElement_var;
class SWXIUtSelectedObject_var;
class SWXUtCommandActionJournalEntry;
class SWXUtCustomValidationJournalEntry;
class SWXUtOperationActionJournalEntry;
class SWXUtFailedSelectionsJournalEntry;
class SWXUtOperation;
class SWXUtPacket;
class SWXUtParameterNameSet;

//-----------------------------------------------------------------------

class ExportedBySWXUtJournal SWXUtJournalRecorder
{
	public:

		SWXUtJournalRecorder();
		virtual ~SWXUtJournalRecorder();

	public:

		void ClearJournal();

		bool IsRecording() const;
		bool IsPaused() const;
		void StartRecording( const CATUnicodeString& iFilename );
		void PauseRecording();
		void ContinueRecording();
		bool RecordAnyway() const;
		void SetRecordAnyway( bool iValue );
		void StopRecording( const CATUnicodeString& iFileName );

		void RecordCommandStart( const CATString& iHeaderID, SWXUtPacket* iTransferPacket );
		void RecordCommandInitializationBegin( const CATString& iHeaderID, SWXUtPacket* iTransferPacket, SWXUtOperationContext* iContext );
		void RecordCommandInitializationEnd( const CATString& iHeaderID, bool iTryToAdjust );
		void RecordPacketChange( const CATString& iPacketName, const CATUnicodeString& iKeyName, const CATUnicodeString& iNewValue );
		void RecordSelection( const CATString& iPacketName, const CATUnicodeString& iKeyName, const SWXIUtSelectedObject_var& iNewSelection );
		void RecordPacketParamStructureChange( const CATString& iPacketName, const CATUnicodeString& iKeyName, int iIndex, bool iInsertElement );
		void RecordPreviewChanges( SWXUtPacket* iPacket, const SWXUtParameterNameSet& iChangedList, const CATString& iHeaderID, SWXUtOperationContext* iContext );
		void RecordApplyChanges( SWXUtPacket* iPacket, const SWXUtParameterNameSet& iChangedList, const CATString& iHeaderID, SWXUtOperationContext* iContext );
		void RecordOK( const CATString& iHeaderID, bool iRepeating );
		void RecordCancel( const CATString& iHeaderID );
		void RecordDataModelChange( SWXUtPacket* iPacket, const CATBaseUnknown_var& iFeature, const CATUnicodeString& iInterface, const CATUnicodeString& iMethod, double iParam );
		void RecordDataModelChange( SWXUtPacket* iPacket, const CATBaseUnknown_var& iFeature, const CATUnicodeString& iInterface, const CATUnicodeString& iMethod, bool iParam1, bool iParam2 );
		
		void ProcessOperationStart( const CATUnicodeString& iHeaderID, SWXUtOperationContext* iContext );
		void ProcessOperationEnd( const CATUnicodeString& iHeaderID, SWXUtOperationContext* iContext );
		void ProcessCommandEnd( const CATUnicodeString& iHeaderID );

		HRESULT WriteToFile( const SWXUtVector<SWXUtJournalEntry*>& iJournal, const CATUnicodeString& iFileName );

	private:

		bool IsSupportedCommand( SWXUtPacket* iTransferPacket );
		SWXUtCommandActionJournalEntry* CreateCommandActionEntry( SWXUtJournalEntry::EntryType iType, const CATString& iHeaderID );
		SWXUtOperationActionJournalEntry* CreateCommandEventEntry( SWXUtJournalEntry::EntryType iType, SWXUtPacket* iPacket, const SWXUtParameterNameSet& iChangedList ); 
		void AddCommandEndEntryToJournal( SWXUtCommandActionJournalEntry* iEntry );
		void AddPacketSelectionChangeEntryToJournal( const CATUnicodeString& iPacketName, const CATUnicodeString& iKeyName, const CATUnicodeString& iNewValue, const CATUnicodeString& iObjectType );
		void AddPacketParamStructureChangeEntryToJournal( SWXUtJournalEntry::EntryType iType, const CATUnicodeString& iPacketName, const CATUnicodeString& iKeyName, int iIndex );
		void LogSelectionRecordingFailure( const CATUnicodeString& iPacketName, const CATUnicodeString& iKeyName, const CATBaseUnknown_var& iObject );
		void FixJournalAfterSelectionRecordingFailure( const CATUnicodeString& iPacketName, const CATUnicodeString& iKeyName );
		void RecordPlaybackValidationInfo();
		void RecordMassPropertiesValidationInfo();
		void RecordDataModelChange( SWXUtPacket* iPacket, const CATBaseUnknown_var& iFeature, const CATUnicodeString& iInterface, const CATUnicodeString& iMethod, const CATUnicodeString& iParams );
		SWXUtCustomValidationJournalEntry* RecordCustomValidation( const CATUnicodeString& iHeaderID, SWXIUtJournalPlaybackValidation::ValidationEvents_e iEvent, SWXUtOperationContext* iContext, bool iSetInfo );
		void RecordDelayedCustomValidation( SWXUtCustomValidationJournalEntry*& ioEntry, const CATUnicodeString& iHeaderID, SWXIUtJournalPlaybackValidation::ValidationEvents_e iEvent, SWXUtOperationContext* iContext );

		HRESULT StripCommandInitializationEntries();

		SWXUtCustomValidationJournalEntry* CreateCustomValidationEntry( const CATUnicodeString& iHeaderID ) const;
		void SaveCustomValidationOnCommandEnd( const CATUnicodeString& iHeaderID );

	private:

		SWXUtJournalRecorder( SWXUtJournalRecorder& );
		SWXUtJournalRecorder& operator=( SWXUtJournalRecorder& );

	private:

		bool mRecording;
		bool mPaused;
		bool mRecordAnyway;
		bool mIsCommandBeingInitialized;

		SWXUtVector<SWXUtJournalEntry*> mJournal;

		SWXIUtSerializationHelper_var mSerializationHelper;
		SWXIUtJournalPlayer_var mUiHelper;

		SWXUtFailedSelectionsJournalEntry* mFailedSelectionsInfo;
		
		SWXUtSet<CATUnicodeString> mSupportedTransferPackets;
		SWXUtSet<CATUnicodeString> mOperationJournalOnlyCommands;
		SWXUtSet<CATUnicodeString> mCommandWithCSO;

		SWXUtCustomValidationJournalEntry* mOperationEndEntry;
		SWXUtCustomValidationJournalEntry* mCommandEndEntry;

		double mScreenSize;
};

//-----------------------------------------------------------------------

#endif
