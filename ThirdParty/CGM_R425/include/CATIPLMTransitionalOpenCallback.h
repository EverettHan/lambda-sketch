// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMTransitionalOpenCallback.h
// Define the CATIPLMTransitionalOpenCallback interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMTransitionalOpenCallback_H
#define CATIPLMTransitionalOpenCallback_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h"

class CATIPLMComponent;
class CATLISTP(CATIPLMComponent);

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMTransitionalOpenCallback;
#else
extern "C" const IID IID_CATIPLMTransitionalOpenCallback ;
#endif

//------------------------------------------------------------------

/**
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMTransitionalOpenCallback: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * The working context is a list of components.
  *
  * @param iOpenedComponents
  *        The list of components to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT OnAfterOpen (const CATLISTP(CATIPLMComponent) & iOpenedComponents) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};
CATDeclareHandler( CATIPLMTransitionalOpenCallback, CATBaseUnknown );
#endif
