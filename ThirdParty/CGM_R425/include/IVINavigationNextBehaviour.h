//===================================================================
// COPYRIGHT Dassault Systemes 2022/02/23
//===================================================================
// IVINavigationNextBehaviour.cpp
// Header definition of class IVINavigationNextBehaviour
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/02/23 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef IVINavigationNextBehaviour_H
#define IVINavigationNextBehaviour_H

#include "IVInterfaces.h"
#include "CATBaseUnknown.h"


enum IV_NAVIGATION_TYPE {
  IV_AIR_GRAB_NAVIGATION = 0,
  IV_ARROW_NAVIGATION,
  IV_ROTATE_NAVIGATION,
  IV_JUMP_NAVIGATION
};

extern ExportedByIVInterfaces IID IID_IVINavigationNextBehaviour;
class ExportedByIVInterfaces IVINavigationNextBehaviour : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /*
  * Activates or deactivates a type of navigation.
  * @param iType [in]
  *   The type of navigation.
  * @param iOnOff [in]
  *   True to activate, false to deactivate.
  */
  virtual void ToggleNavigation(IV_NAVIGATION_TYPE iType, bool iOnOff) = 0;

  /*
  * Activates or deactivates the scaling part of the Air Grab navigation.
  * @param iOnOff [in]
  *   True to activate, false to deactivate.
  */
  virtual void ToggleScaling(bool iOnOff) = 0;

  /*
  * Activates or deactivates the tooltips associated with this navigation.
  * @param iOnOff [in]
  *   True to activate, false to deactivate.
  */
  virtual void ToggleTooltips(bool iOnOff) = 0;

  /*
  * Sets the maximum navigation speed reachable in the Arrow Navigation.
  * @param iMaxNavSpeed [in]
  *	  The maximum navigation speed.
  */
  virtual void SetMaxNavSpeed(float iMaxNavSpeed) = 0;

  /*
  * Gets the maximum navigation speed reachable in the Arrow Navigation.
  * @return
  *	  The maximum navigation speed.
  */
  virtual float GetMaxNavSpeed() = 0;

  /*
  * Sets the rotation mode (step-wise, or continuous).
  * @param iOnOff [in]
  *   True to set a continuous rotation, false to set a step-wise rotation.
  */
  virtual void SetContinuousRotation(bool iOnOff) = 0;

  /*
  * Gets the rotation mode (step-wise, or continuous).
  * @return
  *   True in case of a continuous rotation, false in case of a step-wise rotation.
  */
  virtual bool GetContinuousRotation() = 0;

  /*
  * Sets the rotation angle used in step-wise rotation mode. Default angle = 30°.
  * @param iAngle [in]
  *	  The rotation step angle (in degrees).
  */
  virtual void SetRotationAngle(double iAngle = 30) = 0;

  /*
  * Gets the rotation angle used in step-wise rotation mode.
  * @return
  *	  The rotation step angle (in degrees).
  */
  virtual double GetRotationAngle() = 0;

  /*
  * Sets the rotation speed for the continuous rotation mode.
  * @param iRotationSpeed [in]
  *	  The rotation speed (in degrees/second).
  */
  virtual void SetRotationSpeed(double iRotationSpeed) = 0;

  /*
  * Gets the rotation speed for the continuous rotation mode.
  * @return
  *	  The rotation speed ( in degrees/second).
  */
  virtual double GetRotationSpeed() = 0;
};

//-----------------------------------------------------------------------
CATDeclareHandler(IVINavigationNextBehaviour, CATBaseUnknown);

#endif
