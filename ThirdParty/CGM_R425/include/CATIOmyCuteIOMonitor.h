// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIOmyCuteIOMonitor.h
// Define the CATIOmyCuteIOMonitor interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jul 2005  Creation: Code generated by the CAA wizard  CFO
//===================================================================

/**
 * @level Protected
 * @usage U5
 */

#ifndef CATIOmyCuteIOMonitor_H
#define CATIOmyCuteIOMonitor_H

#include "CATOMYCioAnalyzer.h"
#include "CATBaseUnknown.h"

class CATOmyCuteIOTransaction;
class CATUuid;
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYCioAnalyzer IID IID_CATIOmyCuteIOMonitor;
#else
extern "C" const IID IID_CATIOmyCuteIOMonitor ;
#endif

//------------------------------------------------------------------

/**
* Interface representing xxx.
*
* <br><b>Role</b>: Components that implement
* CATIOmyCuteIOMonitor are ...
* <p>
* Do not use the CATIOmyCuteIOMonitor interface for such and such

*
* @example
*  // example is optional
*  CATIOmyCuteIOMonitor* currentDisplay = NULL;
*  rc = window-&gt;QueryInterface(IID_CATIOmyCuteIOMonitor,
*                                     (void**) &amp;currentDisplay);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByCATOMYCioAnalyzer CATIOmyCuteIOMonitor: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

		/** 
		* Add a message when something happens in CuteIO
		* <br><b>Role</b>: This method treats datas which come from CuteIO.
		* @param iTransactionUuid [in]
		*   The identifier of the current CuteIO transaction
		* @param iTransactionType [in]
		*   The type of the transaction (Open or Save)
		* @param iLevel [in]
		*   optional (not use for the moment)
		* @return
		*   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.
		*/
		virtual HRESULT AddMessage (const CATUuid & iTransactionUuid, const CATUnicodeString & iTransactionType, const int & iLevel=0)=0;

    /** 
		* Initialyse and start the monitor
		* <br><b>Role</b>: Initialyse the monitor
		* @return
		*   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.
		*/
    virtual HRESULT InitializeTool()=0;
    
    /** 
		* Send a message to the CuteIO
		* <br><b>Role</b>: Send a message to the CuteIO
		* @param iReferenceUrl [in]
		*   The vault url which identify the SD
		* @param iDate [in]
		*   The date of the action
		* @param iAction [in]
		*   The action done in CuteIO
    * @param iUrlIn [in]
		*   The main url used by the action
    * @param iUrlOut [in]
		*   The second url used by the action (only for injection)
		* @return
		*   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.
		*/
    virtual HRESULT SendData (const CATUnicodeString & iReferenceUrl, const CATUnicodeString & iDate, const CATUnicodeString & iAction, const CATUnicodeString & iUrlIn, const CATUnicodeString & iUrlOut) = 0;
 
    /** 
		* Stop the monitor and update frames
		* <br><b>Role</b>: Stop the monitor and update frames
		* @return
		*   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.
		*/
    virtual HRESULT EndTool()=0;
};

//------------------------------------------------------------------

#endif
