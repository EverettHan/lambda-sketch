//===================================================================
// COPYRIGHT Microsoft 2012/10/10
//===================================================================
// PLMPersistTreeOrderServices.cpp
// Header definition of class PLMPersistTreeOrderServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/10/10 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMPersistTreeOrderServices_H
#define PLMPersistTreeOrderServices_H
/**
 * @level Protected
 * @usage U1
 */
#include "CATPLMModelerBaseInterfaces.h"
#include "PLMIReorderPersistent.h"

class CATBaseUnknown;
class CATUnicodeString;
class CATIPLMComponent;
class PLMBridgeToPersistTreeOrderServices;
class CATPLMTypeH;
//-----------------------------------------------------------------------

class ExportedByCATPLMModelerBaseInterfaces PLMPersistTreeOrderServices
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  PLMPersistTreeOrderServices();
  virtual ~PLMPersistTreeOrderServices();

  /**
  * Sets a new persistent order for the children of the current component.
  * This method does not propagate the modifications.
  * The new order can be retrieved through GetChildrenInPersistedOrder, even before propagation.
  *
  * @param iListOrderedComponents
  *    List of components to order. Components can only be of one CoreType.
  * @param iListModifiableComponents
  *    List of modifiable components to order.
  * @return
  * 	 E_INVALIDARG : Elements of different CoreTypes were passed in any of the list.
  * 	 E_FAIL : An internal error occured.
  * 	 S_OK : The new order was set.
  */
  HRESULT PersistChildrenOrder(CATBaseUnknown * ipAggRef, CATUnicodeString& iModelerKey, CATListPtrCATIPLMComponent& iListOrderedComponents,
    CATListPtrCATIPLMComponent& iListModifiableComponents);

  /**
  * @deprecated R418 GetChildrenInPersistedOrder
  * Retrieves the children of the current component in their persisted order
  * (database order or last order set with PersistChildrenOrder).
  *
  * @param iReorderableType
  *    Type of the children to retrieve.
  * @param oListOrderedChildren
  *    List of retrieved components of the provided type (empty if the type is not managed).
  *    The list must be empty when the method is called.
  *    Each element of the list must be released by the caller after use.
  * @return
  *    E_INVALIDARG : The list was not empty when the method was called.
  *                or The specified type is not managed. The list is returned empty.
  *    E_FAIL : An internal error occured.
  *    S_OK : The children were succesfully retrieved.
  */
  HRESULT GetChildrenInPersistedOrder(CATBaseUnknown * ipAggRef, CATUnicodeString& iModelerKey, PLMIReorderPersistent::PersistentReorderableType iReorderableType,
    CATListPtrCATIPLMComponent& oListOrderedChildren);
  /**
  * Retrieves the children of the current component in their persisted order
  * (database order or last order set with PersistChildrenOrder).
  *
  * @param iReorderableType
  *    Type of the children to retrieve.
  * @param oListOrderedChildren
  *    List of retrieved components of the provided type (empty if the type is not managed).
  *    The list must be empty when the method is called.
  *    Each element of the list must be released by the caller after use.
  * @return
  *    E_INVALIDARG : The list was not empty when the method was called.
  *                or The specified type is not managed. The list is returned empty.
  *    E_FAIL : An internal error occured.
  *    S_OK : The children were succesfully retrieved.
  */
  HRESULT GetChildrenInPersistedOrder(CATBaseUnknown * ipAggRef, CATUnicodeString& iModelerKey, const CATPLMTypeH& iReorderableType,
    CATListPtrCATIPLMComponent& oListOrderedChildren);

  /**
  * Retrieves the type of a component. Can be usefull, but no impact on order.
  * @return
  * - S_OK if the component type can be retrieved
  * - E_INVALIDARG if the component is of unknown type or is null (type is set to PRTUnmanagedType)
  * - E_FAIL if an unexpected error occurs
  */
  HRESULT GetReorderableType(CATIPLMComponent* ipComponent, PLMIReorderPersistent::PersistentReorderableType& oReorderableType);

private:
  PLMPersistTreeOrderServices(PLMPersistTreeOrderServices &);
  PLMPersistTreeOrderServices& operator=(PLMPersistTreeOrderServices&);
};

//-----------------------------------------------------------------------

#endif
