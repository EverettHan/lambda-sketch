//===================================================================
// COPYRIGHT Dassault Systeme 2012/09/20
//===================================================================
// CATV3DCtlHandle.h
// Header definition of class CATV3DCtlHandle
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/09/20 Creation: Code generated by the 3DS wizard MF6
//===================================================================

#ifndef CATV3DCtlHandle_H
#define CATV3DCtlHandle_H

#include <VisuImmersive3D.h>
#include <CATV3DCtl.h>

class CATSYPEvent;
class CATV3DMouseEventArgs;
class CATV3DManipulationEventArgs;

//-----------------------------------------------------------------------------
/**
 * This widget provides a standard modification handle, and is the base class of other handle widgets.
 * No default style is defined for this manipulator.
 *
 * @par Role
 * A handle is mainly used to dispatch manipulation event and to create a basic 3D manipulator.
 * No specific action are handled by the CATV3DCtlHandle and can only be used alone to define a basic
 * manipulator in screen plane whith behavior handled by the user.
 * <br>
 *
 * @ingroup VIDControls
 */
class ExportedByVisuImmersive3D CATV3DCtlHandle : public CATV3DCtl
{
  CATDeclareClass;
public:
  /** Constructor*/
  CATV3DCtlHandle ();
  CATV3DCtlHandle (CreateV3DLetterFunc i_pCreateLetterFunc);
  /** Destructor*/
  virtual ~CATV3DCtlHandle ();

  /**
   * Constructs a CATV3DCtlHandleTranslation with standard style.
   */
  static CATV3DCtlHandle * CreateHandle(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Get the @c Entry event.
   *
   * The @c Entry event is dispatched on the Handle when the mouse enters
   * over the Handle.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#Entry.
   *
   * @par EventProperties
   *   - Name: @c "Entry"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Entry();

  /**
   * Get the @c Leave event.
   *
   * The @c Entry event is dispatched on the Handle when the mouse leaves
   * the Handle.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#Leave.
   *
   * @par EventProperties
   *   - Name: @c "Leave"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Leave();

  /**
   * Get the @c Press event.
   *
   * The @c Press event is dispatched on the Handle when the user press
   * the left button of the mouse over a Handle. Note that pressing twice
   * the button may generate a @ref #DoubleClick event instead if the
   * second press is quick enough.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#Press.
   *
   * @par EventProperties
   *   - Name: @c "Press"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Press();

  /**
   * Get the @c BeginDrag event.
   *
   * The @c BeginDrag event is dispatched on the Handle when the left button is
   * pressed and the mouse starts to drag.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#BeginDrag.
   *
   * @par EventProperties
   *   - Name: @c "BeginDrag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * BeginDrag();

  /**
   * Get the @c Drag event.
   *
   * The @c Drag event is dispatched on the Handle when the left button is
   * pressed and the mouse is dragging.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Drag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Drag();

  /**
   * Get the @c EndDrag event.
   *
   * The @c EndDrag event is dispatched on the Handle when the left button is
   * pressed and the mouse ends the drag.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#EndDrag.
   *
   * @par EventProperties
   *   - Name: @c "EndDrag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * EndDrag();

  /**
   * Get the @c ReleaseEvt event.
   *
   * The @c ReleaseEvt event is dispatched on the Handle when the left
   * button of the mouse is released.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#Release.
   *
   * @par EventProperties
   *   - Name: @c "Release"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * ReleaseEvt();

  /**
   * Get the @c DoubleClick event.
   *
   * The @c DoubleClick event is dispatched on the Handle when the user
   * double-click with the left button of the mouse on a Handle.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#DoubleClick.
   *
   * @par EventProperties
   *   - Name: @c "DoubleClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * DoubleClick();

  /**
   * Get the @c DoubleRelease event.
   *
   * The @c DoubleRelease event is dispatched on the Handle when the user
   * release the left button of the mouse on a Handle after a
   * double-click.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#DoubleRelease.
   *
   * @par EventProperties
   *   - Name: @c "DoubleRelease"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * DoubleRelease();

  /**
   * Get the @c MoveOver event.
   *
   * The @c MoveOver event is dispatched on the Handle when the mouse
   * pointer moves over a Handle if the left mouse button is not clicked.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#MoveOver.
   *
   * @par EventProperties
   *   - Name: @c "MoveOver"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * MoveOver();

  /**
   * Get the @c RightClick event.
   *
   * The @c RightClick event is dispatched on the Handle when the right
   * mouse button is pressed over a Handle.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#RightClick.
   *
   * @par EventProperties
   *   - Name: @c "RightClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * RightClick();

  /**
   * Get the @c EndRightClick event.
   *
   * The @c EndRightClick event is dispatched on the Handle when the dialog
   * contextual menu displayed on the @ref #RightClick event is
   * closed.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#EndRightClick.
   *
   * @par EventProperties
   *   - Name: @c "EndRightClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * EndRightClick();

  /**
   * Get the @c MultiplePress event.
   *
   * The @c MultiplePress event is dispatched on the Handle when the left
   * mouse button is kept pressed on a Handle. This event is emitted every
   * 100ms by a timer.
   *
   * This event is issued from the @ref CATV3DGraphicPrimitive event @ref
   * CATV3DGraphicPrimitive#MultiplePress.
   *
   * @par EventProperties
   *   - Name: @c "MultiplePress"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * MultiplePress();

  /**
   * @return if the mouse is over the handle.
   */
  CATBoolean GetOverFlag() const;
  /**
   * Sets the mouse over flag of the handle.
   * Call it only when you need to show that this handle
   * will be manipulated even if the mouse is not over it.
   *
   * @param i_overFlag the mouse over flag of the handle.
   */
  void SetOverFlag(const CATBoolean i_overFlag);
  /**
   * @return if the handle is pressed.
   */
  CATBoolean GetPressedFlag() const;
  /**
   * Sets the pressed flag of the handle.
   * Call it only when you need to show that this handle
   * is beeing manipulated even if is has not been pressed directly.
   *
   * @param i_pressedFlag the press flag of the handle.
   */
  void SetPressedFlag(const CATBoolean i_pressedFlag);
  /**
   * @return if the handle is activated (default = is pressed).
   */
  CATBoolean GetOnFlag() const;
  /**
   * Sets the on flag of the handle.
   * Call it only when you need to show that this handle
   * is beeing activated even if is has not been pressed directly.
   *
   * @param i_onFlag the on flag of the handle.
   */
  void SetOnFlag(const CATBoolean i_onFlag);

  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleEntry(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleLeave(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandlePress(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleBeginDrag(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleDrag(CATBaseUnknown * i_pSender, CATV3DManipulationEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleEndDrag(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleRelease(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleDoubleClick(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleDoubleRelease(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleMoveOver(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleRightClick(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleEndRightClick(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */
  virtual void HandleMultiplePress(CATBaseUnknown * i_pSender, CATV3DMouseEventArgs * i_pArgs);
  /**
   * Consume CATV3DGraphicPrimitive event and dispatch CATV3DCtlHandle event
   */

  /**
   * @copydoc l_CATV3DCtl#TemplateDataUpdated
   *
   * Here are the mandatory "syp:named" objects :
   * @li GPManip [CATV3DGraphicPrimitive]
   */
  void TemplateDataUpdated();

  /**
   * Sets the auto position update behavior flag.
   * Give a default position behavior to the handle (Apply transformation to the view)
   * In any cases, this flag is FALSE if the handle isn't the highest top widget.
   * @param iAutoPositionFlag the flag to set on the handle. Default value is FALSE
   * @see #GetAutoPositionUpdateFlag
   */
  void SetAutoPositionUpdateFlag(const CATBoolean& iAutoPositionFlag);
  /**
   * @return the follow position behavior flag.
   * @see #SetAutoPositionUpdateFlag
   */
  const CATBoolean& GetAutoPositionUpdateFlag() const;

  /**
   * Set the text to be used as label for this handle.
   * Construct a default label with a standard look.
   * @param iLabelText the label text to be set. No default label.
   * If a text is set, the label will be visible.
   * @see #SetLabelVisibleFlag
   */
  void SetLabelText(const CATUnicodeString& iLabelText);
  /**
   * @return the text used as label for this handle.
   * @see #SetLabelText
   */
  const CATUnicodeString& GetLabelText() const;

  /**
   * Set the label visibility.
   * @param iLabelVisibleFlag the visibility of the label.
   * @see #SetLabelText
   */
  void SetLabelVisibleFlag(const CATBoolean& iLabelVisibleFlag);
  /**
   * @return the label visibility.
   * @see #SetLabelVisibleFlag
   */
  const CATBoolean& GetLabelVisibleFlag() const;

   /**
   * Activate the step manipulation for this handle.
   * @param iStepFlag
   *   Paremeter is set to TRUE to activate step manipulation, FALSE otherwise
   */
  void SetStepFlag(const CATBoolean& iStepFlag);
  /**
   * Retrieve the handle step activity
   * @return
   *   TRUE if the step manipulation is active
   *   <br> FALSE otherwise
   */
  const CATBoolean& GetStepFlag() const;
  /**
   * Sets a scale factor to the increment step value
   * @param iScaleFactor
   *   the scale factor to add to increment value
   */
  void SetStepScaleFactor(const double& iScaleFactor);
  /**
   * Retrieve the increment step scale factor.
   * @return
   *   the increment step scale value.
   */
  const double& GetStepScaleFactor() const;
  /**
   * Sets the stape increment for this handle.
   * @param iStepIncrement
   *   the step increment
   */
  void SetStepIncrement(const double& iStepIncrement);
  /**
   * Retrieve the step increment for this handle
   * @return
   *   the increment step value.
   */
  const double& GetStepIncrement() const;
  /**
   * Sets the Axis direction of the increment manipulation
   * @param iAxis
   * The axis direction number
   *  <br>
   *  <b>Legal values</b> It can be set to either :
   *  <dl>
   *  <dt><tt>0</tt><dd> : x axis
   *  <dt><tt>1</tt><dd> : y axis
   *  <dt><tt>2</tt><dd> : z axis
   *  </dl>
   */
  void SetStepAxis(const int& iStepAxis);
  /**
   * @return the Axis to perform increment manipulation.
   * @see #SetStepAxis
   */
  const int& GetStepAxis() const;

private:
  CATV3DCtlHandle (CATV3DCtlHandle &);
  CATV3DCtlHandle& operator=(CATV3DCtlHandle&);
};

#endif
