//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/09/28
//===================================================================
// CATVidMdlAdapter.h
// Header definition of class CATVidMdlAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/09/28 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlAdapter_H
#define CATVidMdlAdapter_H

#include <VisuDialog.h>
#include <CATIVidMdl.h>
#include <CATListOfCATUnicodeString.h>
#include <CATSYPArray.h>
#include <CATVidMdlEventEmitter.h>
#include <CATVid.h>
#include <CATUnicodeString.h>

class CATVidCtlAbstractItemsView;
class CATVidMdlEventEmitter;
class CATVidAbstractCloneProvider;

// TODO : remplacer CATVIdCtl de AssociateToView par un CATVidCtlAbstractItemsView

class ExportedByVisuDialog CATVidMdlAdapter: public CATIVidMdl
{
  CATDeclareClass;
public:
  CATVidMdlAdapter ();
  virtual ~CATVidMdlAdapter ();

  /**
   * @copydoc CATIVidMdl#HasIndex
   */
  virtual int HasIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetSibling
   */
  virtual CATVidMdlIndex GetSibling(int i_row, int i_column, const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#HasChildren
   */
  virtual int HasChildren(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#InsertRow
   */
  virtual CATBoolean InsertRow(int i_row, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#InsertColumn
   */
  virtual CATBoolean InsertColumn(int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#RemoveRow
   */
  virtual CATBoolean RemoveRow(int i_row, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#RemoveColumn
   */
  virtual CATBoolean RemoveColumn(int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#RemoveList
   */
  virtual CATBoolean RemoveList(const CATSYPDynArray<CATVidMdlIndex> & i_listOfIndexes, CATBoolean i_updateAfterInsertion = TRUE);
    /**
   * @copydoc CATIVidMdl#RemoveList
   */
  virtual CATBoolean RemoveItem(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetElement
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
    /**
   * @copydoc CATIVidMdl#GetIntrospectable
   */
  virtual CATISYPIntrospectable_var GetIntrospectable(const CATBaseUnknown_var & i_item);
  /**
   * @copydoc CATIVidMdl#SetElement
   */
  virtual CATBoolean SetElement(const CATVidMdlIndex & i_index, const CATBaseUnknown_var & i_value);
  /**
   * @copydoc CATIVidMdl#InsertItem
   */
  virtual CATBoolean InsertItem(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItem
   */
  virtual CATBoolean AppendItem(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
    /**
   * @copydoc CATIVidMdl#InsertItemClone
   */
  virtual CATBoolean InsertItemClone(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItemClone
   */
  virtual CATBoolean AppendItemClone(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendList
   */
  virtual CATBoolean AppendList(const CATSYPDynArray<CATBaseUnknown_var> & i_listOfItems, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetRoot
   */
  virtual CATVidMdlIndex GetRoot(int i_Column = 0);
  /**
   * @copydoc CATIVidMdl#Reset
   */
  virtual void Reset();
  /**
   * @copydoc CATIVidMdl#Update
   */
  virtual void Update(const CATVidMdlIndex & i_parent = CATVidMdlIndex());

  virtual void PartialUpdate(const CATVidMdlIndex & i_parent = CATVidMdlIndex(), CATSYPDynArray <CATVidMdlIndex> * ipChildIndexToUpdateList = NULL, 
                      CATListOfCATUnicodeString * iColumnIDs = NULL );
  /**
   * @copydoc CATIVidMdl#ComputeHash
   */
  virtual int ComputeHash(const CATVidMdlIndex &i_key);
  /**
   * @copydoc CATIVidMdl#IsEqual
   */
  virtual CATBoolean IsEqual(const CATBaseUnknown_var & i_obj1, const CATBaseUnknown_var & i_obj2);
  /**
   * @copydoc CATIVidMdl#AreEquals
   */
	virtual CATBoolean AreEquals(CATBaseUnknown * i_obj1, CATBaseUnknown * i_obj2);

  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();

  /**
   * @copydoc CATIVidMdl#GetRowNumber
   */
  virtual int GetRowNumber(const CATVidMdlIndex & i_index);

  /**
   * @copydoc CATIVidMdl#AssociateToView
   */
  virtual void AssociateToView(CATVidCtlAbstractItemsView * i_pView);

  /**
   * @copydoc CATIVidMdl#SeparateFromView
   */
  virtual void SeparateFromView(CATVidCtlAbstractItemsView * i_pView);

  /**
   * @copydoc CATIVidMdl#GetEventEmitter
   */
  virtual CATVidMdlEventEmitter * GetEventEmitter() const;

  /**
   * @copydoc CATIVidMdl#ExportDataFromItems
   */
  virtual CATVidDnDData * ExportDataFromItems(const CATSYPDynArray<CATVidMdlIndex> & i_indexes);

  /**
   * @copydoc CATIVidMdl#CanDropData
   */
  virtual CATBoolean CanDropData(CATVidData * i_pData, CATVidDnD::Effect i_effect, const CATVidMdlIndex & i_index, const CATVidDnD::DropLocation & i_location);
  
  /**
   * @copydoc CATIVidMdl#DropData
   */
  virtual CATBoolean DropData(CATVidData * i_pData, CATVidDnD::Effect i_effect, const CATVidMdlIndex & i_index, const CATVidDnD::DropLocation & i_location);

  /**
   * @copydoc CATIVidMdl#GetViewportDropLocation
   */
  virtual void GetViewportDropLocation(CATVidMdlIndex & o_index, CATVidDnD::DropLocation & o_location);

  /**
   * Sets a provider able of cloning an element of this model. Used for the
   * copy effect of drag-and-drop.
   *
   * @param i_pProvider a clone provider adapted to the model or @c NULL to
   * prevent cloning. Will be @c AddRefed.
   */
  void SetElementCloneProvider(CATVidAbstractCloneProvider * i_pProvider);

  /**
   * @copydoc CATIVidMdl#GetElementCloneProvider
   */
  virtual CATVidAbstractCloneProvider * GetElementCloneProvider() const;

  /**
   * @copydoc CATIVidMdl#Sort
   */
  virtual void Sort(const CATUnicodeString& i_propertyName, CATVid::SortOrder i_sortOrder = CATVid::AscendingOrder);

  /**
   * Returns the index next to the given one, on provided column.
   * If the given index has children, then this method returns its first child, otherwise
   * it returns the sibling index if any.
   */
  CATVidMdlIndex GetNextIndex(const CATVidMdlIndex& i_index, int i_column = 0);  
  /**
  * New method from R419. To manage insertion of row(s) in a model containing several columns (also works in single-column).  
  * @param i_listOfRows the list of rows of items you want add to the multi-columns model.
  * @param i_parent the index parent used to append the rows.(Must be valid for a standard tree, CATVidMdlIndex() for a standardlist.)
  * @param i_row the index where row is inserted. Default value is -1. An append row is done in this case.
	* @param i_updateAfterInsertion a boolean specifying if view need to be updated after insertion.
  * Warning the number of items MUST MATCH MODEL COLUMN NUMBER (GetColumnCount).
  * An assertion will occured if not.  
  *
  * Exemple : model is :   item0.0 item0.1 item0.2 item0.3 item0.4 item0.5
  *                        item1.0 item1.1 item1.2 item1.3 item1.4 item1.5 
  *                        item4.0 item4.1 item4.2 item4.3 item4.4 item4.5
  *
  *
  * We want add 2 rows "item2" and "item3" after item1.* row  :
  *
  * CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > ListOfRows;
  * CATSYPDynArray<CATBaseUnknown_var> RowsList2;
  * CATSYPDynArray<CATBaseUnknown_var> RowsList3;
  * 
  * for(i=0; i<5; i++)  
  *   RowsList2.Add(item2.i);
  *
  * for(i=0; i<5 ; i++)  
  *   RowsList3.Add(item3.i);
  * 
  * ListOfRows.Add(RowsList2);
  * ListOfRows.Add(RowsList3);
  *
  * CATIVidMdl * MyModel = ...;
  * CATVidMdlIndex ParentIndex = ...;
  * MyModel->InsertListOfRowsAt(ListOfRows, ParentIndex, 2);
  *
  */
  virtual CATBoolean InsertListOfRowsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfRows, const CATVidMdlIndex & i_parent, int i_row=-1, CATBoolean i_updateAfterInsertion = TRUE);
  /**
  * New method from R419. To manage insertion of column(s) in a model containing several columns (works also in single-column).
  * A root index need to exist for a standard tree to succeed with this method! (should succeed in any case with standard list.)  
  * @param i_listOfColumns the list of columns of items you want add to the multi-columns model.
  * @param i_parent the index parent used to append the columns.(Is ignored for standard tree and list.)
  * @param i_column the index where column is inserted. Default value is -1. An append column is done in this case.
	* @param i_updateAfterInsertion a boolean specifying if view need to be updated after insertion.
  * Warning the number of items MUST MATCH MODEL ROW NUMBER (GetRowCount).
  * An assertion will occured if not.
  *
  * Exemple : model is :   item0.0 item0.1 item0.2 item0.3 item0.6 item0.7
  *                        item1.0 item1.1 item1.2 item1.3 item1.6 item1.7 
  *                        item2.0 item2.1 item2.2 item2.3 item2.6 item2.7
  *
  *
  * We want insert 2 columns "item.4" and "item5" after "item*.3" column :
  *
  * CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > ListOfColumns;
  * CATSYPDynArray<CATBaseUnknown_var> ColumnsList4;
  * CATSYPDynArray<CATBaseUnknown_var> ColumnsList5;
  * 
  * for(i=0; i<3; i++)  
  *   ColumnsList4.Add(item4.i);
  *
  * for(i=0; i<3 ; i++)  
  *   ColumnsList5.Add(item5.i);
  * 
  * ListOfColumns.Add(ColumnsList4);
  * ListOfColumns.Add(ColumnsList5);
  *
  * CATIVidMdl * MyModel = ...;
  * CATVidMdlIndex ParentIndex = ...;
  * MyModel->AppendList(ListOfColumns, ParentIndex, 4);  
  *
  */ 
  virtual CATBoolean InsertListofColumnsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfColumns, const CATVidMdlIndex & i_parent, int i_column=-1, CATBoolean i_updateAfterInsertion = TRUE);

	/*
	* Method called to find an index matching a string (for example string built by user keyboard type). Comparison are not case sensitive.
	* This method allows, from a starting index (and navigating from first to last index), to find the first index owning an element whose given property value begins with a given string.
	*
	* Example : A list view represents a list model (CATVidMdlStandardList), owning 5 datablocks. Each datablock owns the "Name" property. Here are the 5 indexes :
	*
	* 0 : Name = "Albert"
	* 1 : Name = "Rodrigue"
	* 2 : Name = "Robert"
	* 3 : Name = "Alphonse"
	* 4 : Name = "Thomas"
	*
	* Starting from index number 1 ("Rodrigue"), if we want to find element next to "Rodrigue" beginning by "Ro", this API can be called the following way (Note that there is a single model column, so i_modelColumn value is 0) :
	*
	* CATVidMdlIndex FoundIndex;
	* FindMatchingItemFromIndex("Name", "Ro", CreateIndex(1, 0, CATVidMdlIndex()), 0, FoundIndex);
	*
	* In this case, the returned value is TRUE and FoundIndex is a CATVidMdlIndex built on 2 model row ("Robert").
	*
	* @param i_SearchedProperty : the property of index element whose value is compared to i_TypedString.
	* @param i_TypedString : the string whose we look if current element value begins with (No case sensitive).
	* @param i_StartingIndex : the CATVidMdlIndex from which we start the comparison.
	* @param i_modelColumn : model column on which indexes are searched.
	* @return TRUE if a matching index has been found (returned o_FoundIndex). 
	*/
	virtual CATBoolean FindMatchingItemFromIndex(CATUnicodeString i_SearchedProperty, CATUnicodeString i_TypedString, CATVidMdlIndex& i_StartingIndex, int i_modelColumn, CATVidMdlIndex& o_FoundIndex);

protected:
  /**
   * Prepares the insertion of a new row into the model.
   * This method must be called just before the InsertRow method.
   *
   * @param i_row the row number that is going to be inserted into the model.
   * @param i_parent the parent index of the item that receives the new row.
   */
  virtual void PreInsertRow(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Finalizes the insertion of a new row into the model.
   * This method must be called just after the InsertRow method.
   *
   * @param i_row the row number that has been inserted into the model.
   * @param i_parent the parent index of the item that has received the new row.
   */
  virtual void PostInsertRow(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Prepares the deletion of a given row from the model.
   * This method must be called just before the RemoveRow method.
   *
   * @param i_row the row number that is going to be deleted from the model.
   * @param i_parent the parent index of the item from which a row is deleted.
   */
  virtual void PreRemoveRow(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Finalizes the deletion of a given row from the model.
   * This method must be called just after the RemoveRow method.
   *
   * @param i_row the row number that has been deleted from the model.
   * @param i_parent the parent index of the item from which a row has been deleted.
   */
  virtual void PostRemoveRow(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Prepares the insertion of a new column into the model.
   * This method must be called just before the InsertColumn method.
   *
   * @param i_column the column number that is going to be inserted into the model.
   * @param i_parent the parent index of the item that receives the new column.
   */
  virtual void PreInsertColumn(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Finalizes the insertion of a new columns into the model.
   * This method must be called just after the InsertColumn method.
   *
   * @param i_column the column number that has been inserted into the model.
   * @param i_parent the parent index of the item that has received the new column.
   */
  virtual void PostInsertColumn(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Prepares the deletion of a given column from the model.
   * This method must be called just before the RemoveColumn method.
   *
   * @param i_column the column number that is going to be deleted from the model.
   * @param i_parent the parent index of the item from which a column is deleted.
   */
  virtual void PreRemoveColumn(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);
  /**
   * Finalizes the deletion of a given column from the model.
   * This method must be called just after the RemoveColumn method.
   *
   * @param i_column the column number that has been deleted from the model.
   * @param i_parent the parent index of the item from which a column has been deleted.
   */
  virtual void PostRemoveColumn(const CATSYPDynArray<CATVidMdlIndex> & i_indexesList, const CATVidMdlIndex & i_parent);

  //This array is used to keep temporary in memory the model items.(whereas they are dereferenced by the model).
  //If we do not force this memory keeping, CATVidMdlAdapter::Reset() call lead to "dispose" the view.
  //Particularly, it consists in remove some event handlers which can have been instanciated from a data block of a DB factory.
  //The remove of these handlers cannot be done if model item (datablock) has been removed.
  //So just during the method duration, we keep the model items in this array.
  virtual CATSYPDynArray<CATBaseUnknown_var> KeepItemsTemporaryInMemory();

private:
  // Copy contructor and assignement operator are disabled
  CATVidMdlAdapter (CATVidMdlAdapter &);
  CATVidMdlAdapter& operator=(CATVidMdlAdapter&);

  /**
   * @copydoc CATIVidMdl#_IsEqual
   */
  virtual CATBoolean _IsEqual(const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);

	/*
	* Static method to determine if a string is the repetition of the same letter.
	* This is useful to navigate with keyboard. (Keyboard typed letter repetition will navigate on items beginning with this letter).
	*/
	static CATBoolean IsFirstLetterKeyboardNav(CATUnicodeString i_TypedString);//May be to put in a services class but not sure it exists one with such specialized stuffs like that.

	/*
	* Static method to get the numbers of matching chars of a typed string inside a searched property value (needs to be from CATUnicodeString of CATString type...)
	*/
	static int GetNumberOfMatchingCharsFromProperty(CATISYPIntrospectable_var i_spIntro, CATUnicodeString i_SearchedProperty, CATUnicodeString i_TypedString);	

protected:

  CATVidMdlEventEmitter * _pEventsEmitter;

  CATVidAbstractCloneProvider * _pCloneProvider;
};

#endif
