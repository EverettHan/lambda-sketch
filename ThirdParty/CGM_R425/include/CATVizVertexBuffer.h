/* COPYRIGHT DASSAULT SYSTEMES 2003 */

// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATVizVertexBuffer.h
// Header definition of CATVizVertexBuffer
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  svq
//===================================================================
#ifndef CATVizVertexBuffer_H
#define CATVizVertexBuffer_H

#ifndef NULL
#define NULL 0
#endif

#include "SGInfra.h"
#include "CATVizAllocator.h"
#include "CATMutex.h"
#include "IUnknown.h"
#include "CATUnicodeString.h"

#include <atomic>

#define MASK_InEdition0 0x7FFFFFFF
#define MASK_InEdition1 0x80000000
#define MASK_RequestUpdateVBO0 0xBFFFFFFF
#define MASK_RequestUpdateVBO1 0x40000000
#define MASK_ShareCount 0x3FFFFFFF

/** @nodoc */
#define ALLOCATE_VERTICES      (0x1)
/** @nodoc */
#define GET_VERTICES           (0x2)
/** @nodoc */
#define ALLOCATE_NORMALS       (0x4)
/** @nodoc */
#define GET_NORMALS            (0x8)
/** @nodoc */
#define ALLOCATE_TEXTURES      (0x10)
/** @nodoc */
#define GET_TEXTURES           (0x20)
/** @nodoc */
#define INVALID_STORAGEID      0x7fffffff  //max value for a 31 bits unsigned int

/** @nodoc */
#define HAS_TEXTURES      (0x1)
/** @nodoc */
#define HAS_UV           (0x2)
/** @nodoc */
#define HAS_TANGENT_BINORMAL       (0x4)
/** @nodoc */
#define HAS_BAR_TANGENTS       (0x8)
/** @nodoc */
#define HAS_EXTRA_TEXTURES      (0x10)

class CATStreamer;
class CATBaseUnknown;
class CATMappingOperator;
class CATVizVertexBufferEditHelper;
class l_CATVizVertexBufferEditHelper;
class CATViz3DFace;
class CATVisTextureCoordinateSet;
class CATCacheOfDestroyedElements;

//-----------------------------------------------------------------------

/**
* Describe your class here.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
*/
class ExportedBySGInfra CATVizVertexBuffer
{
  friend class CATVizVertexBufferEditHelper;
  friend class l_CATVizVertexBufferEditHelper;
  friend class SGCGRStreamerForCATVizVertexBuffer;
  friend class SGCGRNodesFactoryA;
  friend class CATCacheOfDestroyedElements;
public:
  /** @nodoc */
  CATVizVertexBuffer();

  /** @nodoc */
  CATVizVertexBuffer(const CATVizVertexBuffer & iSource);

  /** @nodoc */
  CATVizVertexBuffer& operator=(const CATVizVertexBuffer & iSource );


#if defined(REMOVE_USELESS_INCLUDE) 
#pragma message ("BADREM : FDT1 2022/06/30 "  __FILE__  " CATVizVertexBuffer::~CATVizVertexBuffer is a forbidden method, please use Release method instead. ")
protected:
#endif

  /** @nodoc */
  virtual ~CATVizVertexBuffer();

public:

  /** @nodoc */
  virtual unsigned int AddRef() = 0;
  /** @nodoc */
  virtual unsigned int Release() = 0;
  /** @nodoc */
  virtual unsigned int GetRefCount() const = 0;

  /** @nodoc */
  void Stream(CATStreamer& oStr);
  /** @nodoc */
  void UnStream(CATStreamer& iStr);

  /** @nodoc */
  void PartStreamHeader(CATStreamer& oStr);
  /** @nodoc */
  void PartStream(CATStreamer& oStr, unsigned int iFrom, unsigned int iTo);
  /** @nodoc */
  virtual void PartUnStreamHeader(CATStreamer& iStr);
  /** @nodoc */
  virtual void PartUnStream(CATStreamer& iStr, unsigned int & ioCurrentNbVertices, unsigned int & ioCurrentNbNormals, unsigned int nbVerticesToUnstream, unsigned int nbNormalsToUnstream);

  /** @nodoc */
  virtual unsigned int GetNumberOfVertices() const = 0 ;
  /** @nodoc */
  virtual unsigned int GetNumberOfNormals() const = 0;
  /** @nodoc */
  virtual unsigned int GetTotalNumberOfVertices() const;
  /** @nodoc */
  virtual void SetTotalNumberOfVertices(unsigned int totalNumberOfVertices);
  /** @nodoc */
  virtual void SetComponentsInFile(unsigned int nbVertices, unsigned int nbNormals, int hasTextures, unsigned int nbTextCoords, int hasUV, int hasTB);
  /** @nodoc */
  virtual int TCsHaveBeenUpdated() const;
  /** @nodoc */
  virtual void SetTCsHaveBeenUpdated(int value);
  /** @nodoc */
  virtual unsigned int GetNumberOfTextures() const = 0;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinates() const = 0;
  /** @nodoc */
  virtual unsigned int GetNumberOfUV() const = 0;
  /** @nodoc */
  virtual unsigned int GetNumberOfTangents() const = 0;
  /** @nodoc */
  virtual unsigned int GetNumberOfBinormals() const = 0;
  /** @nodoc */
  virtual unsigned int GetNumberOfBarTangents() const;

  /** @nodoc */
  virtual float const* GetVerticesReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetNormalsReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetTexturesReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetUVReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetTangentsReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetBinormalsReadOnly() const = 0;
  /** @nodoc */
  virtual float const* GetBarTangent1ReadOnly() const;
  /** @nodoc */
  virtual float const* GetBarTangent2ReadOnly() const;

  /** @nodoc */
  virtual int HasVertices() const = 0;
  /** @nodoc */
  virtual int HasNormals() const = 0;
  /** @nodoc */
  virtual int HasTextures() const = 0;
  /** @nodoc */
  virtual int HasUV() const = 0;
  /** @nodoc */
  virtual int HasTangents() const = 0;
  /** @nodoc */
  virtual int HasBinormals() const = 0;
  /** @nodoc */
  virtual int HasBarTangents() const;
  /** @nodoc */
  virtual int HasExtraTCsets() const = 0;

// methods dedicated to progressive unstream

  /** @nodoc */
  virtual int HasTexturesInFile() const;
  /** @nodoc */
  virtual int HasTangentBinormalsInFile() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinatesInFile() const;
   /** @nodoc */
   virtual int HasUVInFile() const;

  /** @nodoc */
  virtual HRESULT ComputeTextures(const CATMappingOperator & iOp, const CATBaseUnknown * iCell = NULL, const float * iPlanarNormal = NULL);
  /** @nodoc */
  virtual HRESULT ComputeTangentBinormal(CATViz3DFace * );

  /** @nodoc */
  virtual void EmptyVBO( unsigned int& newVBOCreation ) = 0;  //special function in order to delete the data when we use VBO
  /** @nodoc */
  virtual unsigned int GetSizeInBytes(int iIncludeStructuralSize = 1);

  /** @nodoc */
  void SetStorageID(unsigned int iStorageID);
  /** @nodoc */
  unsigned int GetStorageID();
  /** @nodoc */
  inline unsigned int StorageIDisValid();
  /** @nodoc */
  unsigned int GetIsEmpty();

  /** @nodoc */
  virtual unsigned int GetNumberOfUnstreamedVertices();
  /** @nodoc */
  virtual unsigned int GetNumberOfUnstreamedNormals();

  /** @nodoc */
  void ReadNumberOfVerticesToUnstream(CATStreamer & iStreamer, unsigned int & oNbVertices, unsigned int & oNbNormals);
  /** @nodoc */
  void WriteNumberOfVerticesToUnstream(CATStreamer & oStreamer, unsigned int iNbVertices, unsigned int iNbNormals);


  // MULTI TEXTURING MANAGEMENT

  /** @nodoc */
  virtual unsigned int GetNumberOfExtraTextureCoordinateSets() const = 0;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetExtraTextureCoordinateSetConst(const unsigned int iSetIndex) const = 0;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetTextureCoordinateSetConst(const CATUnicodeString& iIdentifier) const = 0;

  /** @nodoc */
  virtual HRESULT ComputeTextures(const CATMappingOperator & iOp, const CATUnicodeString& iTCsetID, const CATBaseUnknown * iCell = NULL, const float * iPlanarNormal = NULL) { return E_NOTIMPL; }

  // Notify VBO has to be updated
  virtual void SetRequestUpdateVBO(const CATBoolean iVal)
  {
      unsigned int expectedVal = 0;
      unsigned int newVal = 0;
	  // this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
      do {
          expectedVal = _ShareStruct.load();
          newVal = (iVal == TRUE ? (expectedVal | MASK_RequestUpdateVBO1) : (expectedVal & MASK_RequestUpdateVBO0));
      } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
  }
  virtual CATBoolean GetRequestUpdateVBO()
  {
      return (_ShareStruct.load() & MASK_RequestUpdateVBO1) != 0 ? TRUE : FALSE;
  }


  inline void IncreaseShareCount();

  inline void DecreaseShareCount();

  inline unsigned int GetShareCount()const;

  inline int IsInEdition();

protected:
  /** @nodoc */
  virtual HRESULT Allocate(unsigned int nbVertices, unsigned int nbNormals, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm, int clear = 1) = 0;
  /** @nodoc */
  virtual HRESULT EnsureCapacity(unsigned int nbVertices, unsigned int nbNormals, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm);

  /** @nodoc */
  virtual float* GetVertices() const = 0;
  /** @nodoc */
  virtual float* GetNormals() const = 0;
  /** @nodoc */
  virtual float* GetTextures() const = 0;
  /** @nodoc */
  virtual float* GetUV() const = 0;
  /** @nodoc */
  virtual float* GetTangents() const = 0;
  /** @nodoc */
  virtual float* GetBinormals() const = 0;
  /** @nodoc */
  virtual float* GetBarTangent1() const;
  /** @nodoc */
  virtual float* GetBarTangent2() const;

  /** @nodoc */
  virtual HRESULT SetTextures(const float* iTextureCoordinates, const int iNbCoordinates, int iAllocMode);
  /** @nodoc */

  virtual HRESULT SetUV(const float* iUV, int iAllocMode);
  /** @nodoc */
  virtual void Empty() = 0;

  virtual l_CATVizVertexBufferEditHelper* GetEditHelper_Impl() = 0;

  inline void SetInEdition(int);

  /** @nodoc */
  virtual HRESULT AddTextureCoordinateSet(const CATVisTextureCoordinateSet* iSet) { return E_NOTIMPL; }

  //static CATMutex _sMutex;

  /** @nodoc */
  unsigned int _StorageID:31; //when storageID == -1 we can't create a vbo, when storageID == 0 we can create a vbo, when storageID>0 a vbo is still created.
  unsigned int _b_isEmpty:1; //this boolean is only useful for CATVizVertexBufferForBufferedFace to prevent a crash in the VBO creation

public:

   CATVizDeclarePagedNewOverride(CATVizVertexBuffer)

private:
  //unsigned int _InEdition : 1;
  //unsigned int _RequestUpdateVBO : 1;
  //unsigned int _ShareCount : 30;
  std::atomic<unsigned int> _ShareStruct;
};


inline unsigned int CATVizVertexBuffer::StorageIDisValid()
{
  if (_StorageID==0 || _StorageID==INVALID_STORAGEID)
    return 0;
  else
    return 1;
}

inline void CATVizVertexBuffer::IncreaseShareCount()
{
    _ShareStruct.fetch_add(1);
}

inline void CATVizVertexBuffer::DecreaseShareCount()
{
    _ShareStruct.fetch_sub(1);
}

inline unsigned int CATVizVertexBuffer::GetShareCount()const
{
    return _ShareStruct.load() & MASK_ShareCount;
}

inline int CATVizVertexBuffer::IsInEdition()
{
    return (_ShareStruct.load() & MASK_InEdition1) != 0 ? 1 : 0;
}

inline void CATVizVertexBuffer::SetInEdition(int iInEdition)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
        newVal = (iInEdition ? (expectedVal | MASK_InEdition1) : (expectedVal & MASK_InEdition0));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

#endif
