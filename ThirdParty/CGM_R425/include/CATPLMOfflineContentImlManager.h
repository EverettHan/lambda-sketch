//===================================================================
// COPYRIGHT Dassault Systemes 2015/03/27
//===================================================================
// CATPLMOfflineContentImlManager.cpp
// Header definition of class CATPLMOfflineContentImlManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/03/27 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMOfflineContentImlManager_H
#define CATPLMOfflineContentImlManager_H

#include "CATPLMIDCollections.h"
#include "CATPLMOfflineContentIdentifier.h"
#include "CATOmxMutex.h"
#include "CATOmxAutoPtr.h"
#include "CATOmxSharable.h"
#include "CATPLMCEStampMap.h"
#include "CATPLMOfflineContentBase.h"
#include "CATIAV5Level.h"

#if defined(OFFLINE_CONTENT_IML_COMPILATION)
#include "iml/Graph.h" //TODO verifier, apres migration sur la nouvelle API, que c'est toujours vrai...
#include <list>
#endif
#if defined(OFFLINE_CONTENT_SRDF_COMPILATION)
#include "CATPLMSimpleRDFGraph.h"
#include <list>
#endif
class CATPLMCEStamp;

class CATPLMID;
class CATWOmxBinaryStream;
class CATPLMOfflineContentIdentifier;

namespace RDFNamespace
{
  class Node;
  class Triple;
  class TripleCollection;
}

#if defined(OFFLINE_CONTENT_IML_COMPILATION) || defined(OFFLINE_CONTENT_SRDF_COMPILATION)
namespace OfflineContent
{
  struct Predicates
  {
    static const RDFNamespace::Node UserIdentifiedBy;
    static const RDFNamespace::Node Info;
    static const RDFNamespace::Node HasPlmId;
    static const RDFNamespace::Node HasNextPlmId;
    static const RDFNamespace::Node Contains;
    static const RDFNamespace::Node HasCEStamp;
    static const RDFNamespace::Node HasTypeId;
    static const RDFNamespace::Node AggregatedBy;
    static const RDFNamespace::Node Instanciates;
    static const RDFNamespace::Node Metadata;
    static const RDFNamespace::Node hasSystemPurposeOf;
    static const RDFNamespace::Node hasMemoryState;
    static const RDFNamespace::Node hasDataSourceStatus;

  };
  struct SystemPurposes
  {
    static const char sessionLayer[];
    static const char powerioId[];
    static const char createdOffline[];
  };

}
#endif
//-----------------------------------------------------------------------

class ExportedByCATPLMOfflineContentBase CATPLMOfflineContentImlManager : public CATOmxSharable
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATPLMOfflineContentImlManager(const CATUnicodeString &iPath);
  virtual ~CATPLMOfflineContentImlManager();

  HRESULT OfflineContentExists(const CATPLMID &iPlmid);
  HRESULT SearchOfflineContent(const CATPLMID &iPlmid, CATPLMOfflineContentIdentifier &oIdentifier);
  HRESULT Save(const CATPLMOfflineContentIdentifier &iContentId, const CATPLMID &iInfoId, const CATPLMIDOSet &iContentIds, CATWOmxBinaryStream &iMetadata);
  HRESULT CreateContentFromUserId(const CATPLMID &iPlmid, CATPLMOfflineContentIdentifier &oContentId);

  HRESULT GetInfos(const CATPLMOfflineContentIdentifier &iId, CATPLMID &oInfosId) const;
  HRESULT GetComplexPLMIDChaine(const RDFNamespace::Node & FirstBlankNode, CATPLMIDOSet & oSimples) const;
  HRESULT GetComplexPLMIDChaine(const RDFNamespace::Node & FirstBlankNode, RDFNamespace::TripleCollection & oSimplesTriple) const;
  HRESULT GetContent(const CATPLMOfflineContentIdentifier &iId, CATPLMIDs &oContent) const;
  HRESULT GetContent(const CATPLMOfflineContentIdentifier &iId, CATPLMIDOSet &oContent) const;
  HRESULT GetAllInfosAsSimples(CATPLMIDOSet &oSimples) const;
  HRESULT UpdateContent(const CATPLMOfflineContentIdentifier &iId, const CATPLMIDOSet &iContent, CATPLMIDOSet &oAdded, CATPLMIDCEStampMap &oRealDeleted);

  //Removes only if reference is alone. Useful in case of offline content removal
  HRESULT Remove(const CATPLMOfflineContentIdentifier &iId, CATPLMIDCEStampMap& oNotAnymoreReference);

  HRESULT SaveCEStamp(const CATPLMID &iPlmid, const CATPLMCEStamp &iCEStamp);
  HRESULT GetCEStamp(const CATPLMID &iPlmid, CATPLMCEStamp &oCEStamp) const;

  HRESULT SaveAggregatedByRelation(const CATPLMID &iSource, const CATPLMID &iRelated);
  HRESULT SaveInstantiatesRelation(const CATPLMID &iSource, const CATPLMID &iRelated);
  HRESULT GetAggregatedByRelation(const CATPLMID &iSource, CATPLMID &oRelated) const;
  HRESULT GetInstantiatesRelation(const CATPLMID &iSource, CATPLMID &oRelated) const;

  //HRESULT DumpAllTriples(); //Utiliser les outils de debug d'EVN directement

  HRESULT ListOfflineContents(CATPLMOfflineContentIdentifiersSet &oOfflineIdSet);

  HRESULT SetMetadata(const CATPLMOfflineContentIdentifier &iId, CATWOmxBinaryStream &iStream);
  HRESULT GetMetadata(const CATPLMOfflineContentIdentifier &iId, CATWOmxBinaryStream &oStream) const;

  HRESULT SetInSessionLayer(const CATPLMID &iId);
  HRESULT IsInSessionLayer(const CATPLMID &iId);
  HRESULT NodeIsInSessionLayer(const RDFNamespace::Node & pidNode);
  HRESULT RemoveFromSessionLayer(const CATPLMID &iId);
  HRESULT MarkUserIdAsCreatedOffline(const CATPLMID &iId);
  HRESULT IsUserIdCreatedOffline(const CATPLMID &iId);
  HRESULT RemoveNodeFromSessionLayer(const RDFNamespace::Node & pidNode);

  HRESULT SetDataSourceStatus(const CATPLMID &iId, const CATUnicodeString &iDataSourceStatus);
  HRESULT SetMemoryState(const CATPLMID &iId, const CATBinary &iMemoryState);
  HRESULT GetDataSourceStatus(const CATPLMID &iId, CATUnicodeString &oDataSourceStatus, CATPLMID &oOldPid) const; //OldPid : pour les soucis de changement de ValidForRemoteUsage. Doit disparaitre lors du passage de l'index sur physId
  HRESULT GetMemoryState(const CATPLMID &iId, CATBinary &oMemoryState) const;
  HRESULT GetWithDataSourceStatus(const CATUnicodeString &iDataSourceStatus, CATPLMIDOSet &oFound) const;

  //Removes a plmid for everybody in the base. Useful in case of deletion from the user in a save
  HRESULT Remove(const CATPLMID &iId, CATPLMCEStamp &oStamp);

  //Removes a plmid if and only if it does not contain reference any information (ie. new element).
  //It's a poor transaction manual handling.
  //Its sole purpose is to remove orphaned PLMID for error case handling.
  //Triggers a E_ABORT if the plmid is the identifier.
  //We keep elements if they are missing from the database, but were once there.
  HRESULT RemoveIfPending(const CATPLMID &iId);

  HRESULT GetPioIdentifier(CATUuid &oId) const;
  HRESULT SetPioIdentifier(const CATUuid &iId);

  HRESULT Abort();
  HRESULT DumpTripleAsStrings(CATOmxArray<CATUnicodeString> &iTripleAsStrings);
  HRESULT PlmIdTypeNeeded(const RDFNamespace::Node & pidNode, CATBoolean & result);
  HRESULT GarbageCollect();
#if defined(OFFLINE_CONTENT_IML_COMPILATION) || defined(OFFLINE_CONTENT_SRDF_COMPILATION) 
  CATBoolean IsValid() { return !!graph(); }

private:
  HRESULT OfflineContentExists(const RDFNamespace::Node &iNode);
  HRESULT PLMIDToNode(const CATPLMID &iPLMID, RDFNamespace::Node &oNode) const;
  HRESULT GetCATPLMIDFromPhys(const CATPLMID_Any & iPhys, CATPLMTypeId & iPLMTypeID, const CATPLMCEStamp & iCEStamp, CATPLMID & oPLMID) const;
  HRESULT NodeToPLMID(const RDFNamespace::Node &iNode, CATPLMID &oPLMID) const;
  HRESULT CEStampToNode(const CATPLMCEStamp &iCEStamp, RDFNamespace::Node &oNode) const;
  HRESULT NodeToCEStamp(const RDFNamespace::Node &iNode, CATPLMCEStamp &oCEStamp) const;
  HRESULT SaveNewUserIdentifierNode(const RDFNamespace::Node &iPidNode, RDFNamespace::Node &oIdNode);
  HRESULT GetPLMIDsFromRelation(const CATPLMOfflineContentIdentifier &oIdentifier, const RDFNamespace::Node &iURINode, CATPLMIDOSet &oResult) const;
  HRESULT GetComplexPLMIDsFromRelation(const CATPLMOfflineContentIdentifier & iIdentifier, const RDFNamespace::Node & iURINode, CATPLMIDOSet & oResult) const;
  HRESULT SaveInfo(const RDFNamespace::Node &iNode, const CATPLMID &iInfo);
  HRESULT SaveContent(const RDFNamespace::Node &iNode, const CATPLMIDOSet &iContent);
  HRESULT SaveMetadata(const RDFNamespace::Node &iNode, CATWOmxBinaryStream &iMetadata);
  HRESULT FindAndDestroyRelated(const RDFNamespace::Node &iBNId, CATPLMIDCEStampMap &oNotAnymoreReference);
  CATBoolean IsThereAnyReference(const RDFNamespace::Node &iRefPLMID);
  HRESULT RemoveAllContent(const RDFNamespace::Node &iBNId, std::list<RDFNamespace::Node> &ioNoMoreReference); //N'enleve que les elements qui n'ont plus de reference
  HRESULT RemoveAllInfo(const RDFNamespace::Node &iBNId, std::list<RDFNamespace::Node> &ioNoMoreReference); //N'enleve que les elements qui n'ont plus de reference

  HRESULT RemoveContent(const RDFNamespace::Node &iBNId, const CATPLMIDOSet &iElementsToRemove, std::list<RDFNamespace::Node> &ioNoMoreReference); //N'enleve que les elements qui n'ont plus de reference


  //Note : on passe par cette std::list parce qu'on n'a pas encore le CEStamp avant de passer par le remove complet des linked references
  HRESULT RemoveLinkedReferences(const std::list<RDFNamespace::Node> &iToRemove, CATPLMIDCEStampMap &oNotAnymoreReferenceToCEStamp);

  HRESULT RemoveLinkedReference(const RDFNamespace::Node &iToRemove, CATPLMIDCEStampMap &oNotAnymoreReferenceToCEStamp);
  HRESULT RemoveUniqueSearched(const RDFNamespace::Triple &iSearched);
  HRESULT RemoveSearched(const RDFNamespace::Triple &iSearched);

  //TODO temporary to fix issue with case when PLMID is created (and not yet saved on server)
  //Will become totally useless IF we use a physical ID (CATPLMID_Any) key for IML.
  //The issue is : the key is a streamed PLMID, which is not the same one saved
  HRESULT MakePLMIDValidForRemoteUsage(const CATPLMID &iPLMID, CATPLMID &oOldPid) const;

  static CATOmx::mutex & mutex() { static CATOmx::mutex sMutex; return sMutex; }
  RDFNamespace::Graph& graph() const;
  mutable RDFNamespace::Graph _rGraph;
  const CATUnicodeString _path;
  CATBoolean _bAbort;
#else
  CATBoolean IsValid() { return FALSE; }
#endif
  //Visiblement =delete n'est pas supporte avant la 420... on va utiliser la bonne vieille technique du constructeur prive
  CATPLMOfflineContentImlManager(const CATPLMOfflineContentImlManager &);
  CATPLMOfflineContentImlManager & operator=(const CATPLMOfflineContentImlManager &);
#if defined(DS_CXX11_SUPPORT_MOVE_SEMANTIC)
  CATPLMOfflineContentImlManager(CATPLMOfflineContentImlManager &&);
  CATPLMOfflineContentImlManager & operator=(CATPLMOfflineContentImlManager &&);
#endif

};


//-----------------------------------------------------------------------

#endif
