// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIOmbNonCATIADocumentApplicativeBehavior.h
// Define the CATIOmbNonCATIADocumentApplicativeBehavior interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  cfo
//===================================================================

/**
* @level Protected
* @usage U3
*/
#ifndef CATIOmbNonCATIADocumentApplicativeBehavior_H
#define CATIOmbNonCATIADocumentApplicativeBehavior_H

#include "CATOmbNonCATIADocument.h"
#include "CATBaseUnknown.h"
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbNonCATIADocument IID IID_CATIOmbNonCATIADocumentApplicativeBehavior;
#else
extern "C" const IID IID_CATIOmbNonCATIADocumentApplicativeBehavior ;
#endif

//------------------------------------------------------------------

/**
* This interface manages the lifecycle of local Non CATIA documents projections
* Use RESTRICTED to Non CATIA StreamDescriptors for applicative purpose
*/
class ExportedByCATOmbNonCATIADocument CATIOmbNonCATIADocumentApplicativeBehavior: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Saves the projected file into the given file
  * It cannot be the path of the projection.
  *  
  * @param iProjectedFilePath (in)
  *        the complete path of the projected file path.
  * @return
  *        S_OK   : everything went well.
  *        E_FAIL : problem during your save operation
  **/
  virtual HRESULT SaveProjectedFile(const CATUnicodeString & iProjectedFilePath)=0;


  /**
  * Gets the modification status of the document
  * @return
  *        TRUE: the document has been modified and not saved
  **/
  virtual CATBoolean IsDirty()=0;

  /**
  * Gets the applicative replace strategy for given projection files
  *  Allows to replace a user projection file when CATIOmbNonCATIAStreamDescriptor::SetWorkingFileForProjection has been previously called, useless otherwise.
  *
  *  This strategy is used by CATIOmbNonCATIAStreamDescriptor::MakeProjection/ImportFile/SetWorkingFileForProjection APIs
  *  see @href CATIOmbNonCATIAStreamDescriptor for detailed information.
  * @return
  *        TRUE: the current projection iOldWorkingFilePath is to be replaced by the new one iNewProjectedFilePath
  *        FALSE: Default 
  **/
  virtual CATBoolean OnReplaceWorkingFile(const CATUnicodeString & iOldWorkingFilePath, const CATUnicodeString & iNewProjectedFilePath)=0;

  /**
  * Gets the applicative remove strategy for a given projected file 
  *  Allows to delete a user projection file when CATIOmbNonCATIAStreamDescriptor::SetWorkingFileForProjection has been previously called, useless otherwise.
  *
  *  This strategy is used by CATIOmbNonCATIAStreamDescriptor::MakeProjection/ImportFile/SetWorkingFileForProjection/RemoveProjectedFile APIs
  *  see @href CATIOmbNonCATIAStreamDescriptor for detailed information.
  * @return
  *        TRUE: the current projection iProjectedFilePath is to be removed
  *        FALSE: Default 
  **/
  virtual CATBoolean OnRemoveWorkingFile(const CATUnicodeString & iProjectedFilePath)=0;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(CATIOmbNonCATIADocumentApplicativeBehavior, CATBaseUnknown);

//------------------------------------------------------------------

#endif
