// COPYRIGHT Dassault Systemes 2001
//===================================================================
//
// CATDevelopRuledSurface.h
// Header definition of CATDevelopRuledSurface
//
//===================================================================
//
// Usage notes: Operator to develop/flatten a ruled surface
//
//===================================================================
//
//  Jan  2001  Creation: Code generated by the CAA wizard  FCB
//  Sept 2002  Modification : MUP
//===================================================================
#ifndef CATDevelopRuledSurface_H
#define CATDevelopRuledSurface_H

#include "FrFOpeSur.h"

#include "CATGeoOperator.h"
#include "CATSkillValue.h"
#include "CATCrvLimits.h"
#include "CATString.h"

class CATCurve;
class CATSurface;
class CATNurbsSurface;
class CATGeoFactory;
class CATMathPoint;
class CATPlane;
class CATMathTransformation2D;

enum CATDevelopMethod {CATDevelopRotation, CATDevelopProjection};

//-----------------------------------------------------------------------
//
// Operator of flattening ruled surfaces 
//
// Ruled surfaces are considered as a linear interpolation of 2 curves
// C1(t) with t E [t10, t11] and C2(t) with t E [t20,t21] :
//
//
//   S(t,v ) = (1-v)*C1(t)+v*C2( T(t) ) 
//
//
//  with
//
//  t E [t10,t11] and v E [0,1] 
//
//  We get the parameter on the second curve C2 from the parameter on the first curve
//  C1 and from the limits of the 2 curves by the following equation :
//
//               t   - t10             t   - t10
// T(t) = ( 1 - ----------- ) * t20 + ------------ * t21
//               t11 - t10             t11 - t10
//
 
class ExportedByFrFOpeSur CATDevelopRuledSurface : public CATGeoOperator
{

  public:
    
    //
    //  +-----------------------------+
    //  | Constructor and destructor  |
    //  +-----------------------------+
    //

    CATDevelopRuledSurface(CATGeoFactory * iFactory);

    virtual ~CATDevelopRuledSurface ();

    //
    //  +-------------------------+
    //  | Flattening processes    |
    //  +-------------------------+
    //
    //  Note :
    //  -----
    //
    //  The choice of the develop process modifies the developed undevelopable ruled 
    //  surface. If the surface is developable, the 3 processes are equivlalent.
    //  
    //  iMethod = CATDevelopRotation
    //  1)Flattening by rotation
    //  ------------------------
    //  The tangents are bring into the same plane by rotation around the generator
    //
    //  This process preserves :
    //    - the lengths of the side of the surface
    //    - the angle between the tangents on the side and the generators
    //    - the lengths of the generators
    //
    //  iMethod = CATDevelopProjection
    //  2)Flattening by projection
    //  --------------------------
    //  The tangents are projected into the same plane along an isopare iVParameter
    // 
    //  This process preserves :
    //    - the geodesical curvature of the isopare
    //    - the lengths of the generators
    //    - the angle between the tangents on the isopar and the generators
    //
    //  !! NOT AVAILABLE !!
    //  3)Flattening by projection with automatic choice of the plane
    //  -----------------------------------------------------------
    //  The plane is chosen in order to minimize the variation of the lenghts of the 
    //  tangents where it is maximal in the case of flattening by rotation
    //
    //  This process preserves :
    //    - the geodesical curvature of the isopare
    //    - the lengths of the generators
    //    - the angle between the tangents on the isopar and the generators

      virtual void SetDevelopMethod(const CATDevelopMethod iMethod) = 0;
    //
    //  +-----------------------------+
    //  | Options for the develop     |
    //  +-----------------------------+
    //
    //   Set Stretch       
    //  +--------------------+
      virtual void SetStretchRatio(double iStretch) =0;

    //
    //  +------------------------------+
    //  | SetUnfoldCylinderIntoPlane    |
    //  +------------------------------+
    //
    virtual void SetUnfoldCylinderIntoPlane(CATBoolean iActivateOption) = 0;

	//
    //  +------------------------------+
    //  | SetUnfoldTabulatedCylinderIntoPlane    |
    //  +------------------------------+
    //
	virtual void SetUnfoldTabulatedCylinderIntoPlane(CATBoolean iActivateOption) = 0;

    //
    //
    //  +--------------------+
    //  | Run operator       |
    //  +--------------------+
    //
      virtual int Run() = 0;
    //
    //  +--------------------------+
    //  | Restore the result       |
    //  +--------------------------+
    //
      virtual CATSurface * GetResult() = 0;

      //nodoc 
      virtual CATLONG32 GetRuleDirection() = 0;

      //nodoc
      //static CATIsoParameter IsLinear(const CATSurface * iSurfRep, const CATSurLimits &iSubLimits, const double iResolution);

      virtual void GetInfo(CATLONG32 iMode, void * oInfo) = 0;      

    //
    //  +-------------------------------------------------------------------------------------------------------------+
    //  | Calculate Transformation matrix for unfolded surface. Ensure Run is executed before calling this method.    |
    //  +-------------------------------------------------------------------------------------------------------------+
    //
	  virtual CATBoolean GetLinearTransformation2D(CATMathTransformation2D & ioTranso) = 0;
	//
    //  +---------------------------------------------+
    //  | Get Surface Limits of a tranformed surface  |
    //  +---------------------------------------------+
    //
	  virtual CATBoolean GetResultSurfaceLimits(CATSurLimits & ioSurLimits) = 0;
};


ExportedByFrFOpeSur CATDevelopRuledSurface * CreateDevelopRuledSurface(CATGeoFactory *  iFactory, 
                                                                       CATSoftwareConfiguration * iSoftwareConfiguration,
                                                                       CATSurface * iSurface,
                                                                       const CATSurLimits &iLimits,
                                                                       CATPlane * iPlane,
                                                                       CATSkillValue iMode = BASIC);

//-----------------------------------------------------------------------

#endif
