// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIPublications.h
// Define the PLMIPublications interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mar 2009  Creation: Code generated by the CAA wizard  lvt 
//===================================================================
#ifndef PLMIPublications_H
#define PLMIPublications_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATPLMModelerPublicationItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerPublicationItf IID IID_PLMIPublications;
#else
extern "C" const IID IID_PLMIPublications ;
#endif

// --- Forward declaration
class PLMIPublication_var;
class CATUnicodeString;
class CATILinkableObject_var;
class PLMIIterator;
class CATListValCATICkeParm_var;
class CATIAdpEnvironment;
class CATIType_var;
class PLMIOmbVirtualObjectDescriptor_var;
class CATIInstance_var;
class CATBRExtraParameters;

class PLMIPublication;
template<typename T> class CATOmxSR;

//------------------------------------------------------------------

/**
 * Interface dedicated to collection of Publications management.
 *
 * <br><b>Role</b>: This interface provides means to manage the collection of Publication aggregated by <tt>this</tt> PLM Reference.
 * <br> To manage a Publication of the collection, used @href PLMIPublication interface for Publication definition.
 *
 * @href PLMIPublication, 
 */
class ExportedByCATPLMModelerPublicationItf PLMIPublications: public CATBaseUnknown
{
  CATDeclareInterface;

public:



   /**
    *   Retrieves the number of Publications aggregated under <tt>this</tt> PLM Reference.
    *   <br><b>Role</b>: This method retrieves the Publications count of the collection of <tt>this</tt> PLM Reference.
    *   <br>To retrieve the Publications themselves, use the @href #Iterator method.
    *
    *   @param oSize
    *      The count of <tt>this</tt> Publications collection.
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *      <dt><tt>S_OK</tt></dt>
    *      <dd>The number of Publications was successfully retrieved.</dd>
    *      <dt><tt>E_FAIL</tt></dt>
    *      <dd>Otherwise. In this case, <tt>oSize</tt> is set to <tt>-1</tt>. </dd>
    *      </dl>
    */
    virtual HRESULT Count (int & oSize) = 0;

   /**
    *   Retrieves a Port using its name.
    *   <br><b>Role</b>: This method performs a search through <tt>this</tt> Ports collection, and retrieves the Port using its name.
    *   @param iPublicationName 
    *      The name of the Publication to retrieve.<br>
    *      This name can be obtained by using the @href PLMIPublication#GetName method.
    *   @param ospPublication
    *      The searched Publication.
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *     <dt><tt>S_OK</tt></dt>
    *     <dd>The Publication was successfully retrieved</dd>
    *     <dt><tt>E_INVALIDARG</tt></dt>
    *     <dd>Either <tt>iPublicationName</tt> is not valuated, or <tt>ospPublication</tt> is already valuated before the call.</dd>
    *     <dt><tt>E_FAIL</tt></dt>
    *     <dd>The Publication was not found.</dd>
    *   </dl>
    */
    virtual HRESULT GetByName (const CATUnicodeString & iPublicationName, PLMIPublication_var & ospPublication) = 0;

   /**
    *   Creates an iterator to navigate on the Publications collection.
    *   <br><b>Role</b>: This method creates a @href PLMIIterator iterator which iterates on all the Publications
    *   of <tt>this</tt> collection.
    *   <br>Do not modify the collection (by removing, replacing or adding a Publication for example) 
    *    while the iterator is being in used !
    *
    *   @param opIterator [out, CATBaseUnknown#Release]
    *      The created iterator. It should not be valuated before the call.
    *      <br>Do not forget to release this pointer once it is no longer in use !
    *      <br>For example :
    *      <pre>PLMIPublications * pPublicationsCollection = ... ;
    *      PLMIIterator *pIterator = NULL;
    *      if(SUCCEEDED(pPublicationsCollection->Iterator(pIterator)))
    *      {
    *        CATBaseUnknown *pPublication = NULL;
    *        while(SUCCEEDED(pIterator->Next((CATBaseUnknown*&)pPublication)))
    *        {
    *           ...
    *           pPublication->Release(); pPublication = NULL;
    *        }
    *        pIterator->Release(); pIterator = NULL;
    *      }</pre>
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *     <dt><tt>S_OK</tt></dt>
    *     <dd>The iterator was successfully created</dd>
    *     <dt><tt>E_INVALIDARG</tt></dt>
    *     <dd>The output argument <tt>opIterator</tt> is already valuated before the call.</dd>
    *     <dt><tt>E_FAIL</tt></dt>
    *     <dd>The creation of the iterator failed</dd>
    *   </dl>
    */
    virtual HRESULT Iterator (PLMIIterator * & opIterator ) = 0;

   /**
    *   Removes a Publication from the collection.
    *   <br><b>Role</b>: This method removes a Publication from the collection of <tt>this</tt> PLM Reference.
    *   <br>The Publication object will be removed and will no longer be aggregated by <tt>this</tt>.
    *
    *   @param ipPublicationToRemove 
    *      The Publication to be removed.
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *     <dt><tt>S_OK</tt></dt>
    *     <dd>The Publication was successfully removed.</dd>
    *     <dt><tt>E_INVALIDARG </tt></dt>
    *     <dd>The input argument <tt>ipPublicationToRemove</tt> is not valuated.</dd>
    *     <dt><tt>E_FAIL</tt></dt>
    *     <dd>Either the Publication was not retrieved in current collection, or it was not successfully removed.</dd>
    *   </dl>
    */
    virtual HRESULT Remove(CATBaseUnknown* ipPublicationToRemove ) = 0;

   /**
    *   Removes a Publication from the collection, using its name.
    *   <br><b>Role</b>: This method removes a Publication using its name, from <tt>this</tt> collection.
    *   <br>The Publication object will be removed and will no longer be aggregated by <tt>this</tt>.
    *
    *   @param iPublicationName
    *      The name of the Publication to be removed.
    *       <br>It can be retrieved by using the @href PLMIPublication#GetName method.
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *     <dt><tt>S_OK</tt></dt>
    *     <dd>The Publication was successfully removed.</dd>
    *     <dt><tt>E_INVALIDARG </tt></dt>
    *     <dd>The input argument <tt>ipObject</tt> is not valuated.</dd>
    *     <dt><tt>E_FAIL</tt></dt>
    *     <dd>Either the Publication was not founded in the collection, or it was not successfully removed.</dd>
    *   </dl>
    */
    virtual HRESULT RemoveByName(const CATUnicodeString & iPublicationName ) = 0;

   /**
    *   Removes every Publications from the collection.
    *   <br><b>Role</b>: This method removes all the Publications from <tt>this</tt> collection.
    *   <br>All the Publications objects will be removed and will no longer be aggregated by <tt>this</tt>.
    *
    *   @return 
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *     <dt><tt>S_OK</tt></dt>
    *     <dd>All the Publications are successfully removed.</dd>
    *     <dt><tt>E_FAIL</tt></dt>
    *     <dd>The removal failed. In this case, the collection is left unchanged.</dd>
    *   </dl>
    */
    virtual HRESULT RemoveAll() = 0;

    /**
    *   Adds a new Publication with a valuated pointed object from a list of valuated PLM attributes.
    *   <br><b>Role</b>: This method creates a new Publication with a given name and a pointed object.<br>
    *   It then aggregates this newly created Publication under <tt>this</tt> PLM Reference.
    *   The different PLM attributes are stored in a list containing their names and values.
    *
    *   @param ipEnv
    *       The Environment in which the Publication is created.
    *       <br>It must not be <tt>NULL</tt> otherwise the method fails
    *   @param ispType
    *      Functional Type of the Publication to create.
    *      If the input is <tt>NULL</tt>, the modeler type is used.
    *   @param  iFunctionalName
    *      The name of the new publication. <br>
    *      Input Parameter.
    *   @param ispPointedObject
    *      The Publication pointed object.
    *      <br>It can be provided by caller as <tt>NULL</tt>.
    *   @param ospPublication
    *      The newly created Publication. This parameter should not be valuated before the call.
    *   @param ipExtraParameters
    *      Optional. Context parameters required by the PLMIdentificationInitialization.
    *      <br>Default context parameters accessible within the rule:
    *      <ul>
    *        <li>OperationId set to "Implicit"</li>
    *        <li>OperationDetail set to "None"</li>
    *      </ul>
    *   @return
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *      <dt><tt>S_OK</tt></dt>
    *      <dd>The new Publication was successfully added and <tt>ospPublication</tt> is valuated.</dd>
    *      <dt><tt>E_FAIL if the Publication creation will fail with the given information.</tt></dt>
    *           Use @href CATError#CATGetLastError to retrieve this error.
    *           <ul>
    *             <li><tt>ProductERR_2300</tt>:</li>
    *                The element can not be published : the name is invalid, its length must be less than 100 characters.
    *             <li><tt>ProductERR_2301</tt>:</li>
    *                The element can not be published : the name of the Publication can not be an empty string.
    *             <li><tt>ProductERR_2302</tt>:</li>
    *                The element can not be published : another Publication with the same name already exists in the assembly, it must be unique.
    *             <li><tt>ProductERR_2303</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '!' .
    *             <li><tt>ProductERR_2304</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : ':' .
    *             <li><tt>ProductERR_2305</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '<' .
    *             <li><tt>ProductERR_2306</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '>' .
    *             <li><tt>ProductERR_2307</tt>:</li>
    *                The element can not be published : the name of the Publication can not start or end with a blank character.
    *             <li><tt>ProductERR_2308</tt>:</li>
    *                The element can not be published : creation of a publication without defining an environment is not possible.
    *           </ul>
    *   </dl>
    */
    virtual HRESULT AddFromType (CATIAdpEnvironment *ipEnvironment, const CATIType_var & ispType, const CATUnicodeString &iFunctionalName, const PLMIOmbVirtualObjectDescriptor_var & ispPointedObject, PLMIPublication_var & ospPublication, const CATBRExtraParameters* ipExtraParameters = NULL) = 0;

   /**
    *   Adds a new Publication with a valuated pointed object from a list of valuated PLM attributes.
    *   <br><b>Role</b>: This method creates a new Publication with a given name and a pointed object.<br>
    *   It then aggregates this newly created Publication under <tt>this</tt> PLM Reference.
    *   The different PLM attributes are stored in a list containing their names and values.
    *
    *   @param ipEnv
    *       The Environment in which the Publication is created.
    *       <br>It must not be <tt>NULL</tt> otherwise the method fails
    *   @param ispType
    *      Functional Type of the Publication to create.
    *      If the input is <tt>NULL</tt>, the modeler type is used.
    *   @param  iFunctionalName
    *      The name of the new publication. <br>
    *      Input Parameter.
    *   @param ispPointedObject
    *      The Publication pointed object.
    *      <br>It can be provided by caller as <tt>NULL</tt>.
    *   @param ospPublication
    *      The newly created Publication. This parameter should not be valuated before the call.
    *   @param ipExtraParameters
    *      Optional. Context parameters required by the PLMIdentificationInitialization.
    *      <br>Default context parameters accessible within the rule:
    *      <ul>
    *        <li>OperationId set to "Implicit"</li>
    *        <li>OperationDetail set to "None"</li>
    *      </ul>
    *   @return
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *      <dt><tt>S_OK</tt></dt>
    *      <dd>The new Publication was successfully added and <tt>ospPublication</tt> is valuated.</dd>
    *      <dt><tt>E_FAIL if the Publication creation will fail with the given information.</tt></dt>
    *           Use @href CATError#CATGetLastError to retrieve this error.
    *           <ul>
    *             <li><tt>ProductERR_2300</tt>:</li>
    *                The element can not be published : the name is invalid, its length must be less than 100 characters.
    *             <li><tt>ProductERR_2301</tt>:</li>
    *                The element can not be published : the name of the Publication can not be an empty string.
    *             <li><tt>ProductERR_2302</tt>:</li>
    *                The element can not be published : another Publication with the same name already exists in the assembly, it must be unique.
    *             <li><tt>ProductERR_2303</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '!' .
    *             <li><tt>ProductERR_2304</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : ':' .
    *             <li><tt>ProductERR_2305</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '<' .
    *             <li><tt>ProductERR_2306</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '>' .
    *             <li><tt>ProductERR_2307</tt>:</li>
    *                The element can not be published : the name of the Publication can not start or end with a blank character.
    *             <li><tt>ProductERR_2308</tt>:</li>
    *                The element can not be published : creation of a publication without defining an environment is not possible.
    *           </ul>
    *   </dl>
    */
    virtual HRESULT AddFromType (CATIAdpEnvironment *ipEnvironment, const CATIType_var & ispType, const CATUnicodeString &iFunctionalName, const CATILinkableObject_var & ispPointedObject, PLMIPublication_var & ospPublication, const CATBRExtraParameters* ipExtraParameters = NULL) = 0;

    /**
    *   Adds a new Publication with a valuated pointed object from a list of valuated PLM attributes.
    *   <br><b>Role</b>: This method creates a new Publication with a given name and a pointed object.<br>
    *   It then aggregates this newly created Publication under <tt>this</tt> PLM Reference.
    *   The different PLM attributes are stored in a list containing their names and values.
    *
    *   @param ipEnv
    *       The Environment in which the Publication is created.
    *       <br>It must not be <tt>NULL</tt> otherwise the method fails
    *   @param ispProxy
    *       Proxy of the Publication that will be created.
    *       <br>PLM Attributes initialized on the proxy are copied on the created Publication.
    *   @param  iFunctionalName
    *      The name of the new publication. <br>
    *      Input Parameter.
    *   @param ispPointedObject
    *      The Publication pointed object.
    *      <br>It can be provided by caller as <tt>NULL</tt>.
    *   @param ospPublication
    *      The newly created Publication. This parameter should not be valuated before the call.
    *   @return
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *      <dt><tt>S_OK</tt></dt>
    *      <dd>The new Publication was successfully added and <tt>ospPublication</tt> is valuated.</dd>
    *      <dt><tt>E_FAIL if the Publication creation will fail with the given information.</tt></dt>
    *           Use @href CATError#CATGetLastError to retrieve this error.
    *           <ul>
    *             <li><tt>ProductERR_2300</tt>:</li>
    *                The element can not be published : the name is invalid, its length must be less than 100 characters.
    *             <li><tt>ProductERR_2301</tt>:</li>
    *                The element can not be published : the name of the Publication can not be an empty string.
    *             <li><tt>ProductERR_2302</tt>:</li>
    *                The element can not be published : another Publication with the same name already exists in the assembly, it must be unique.
    *             <li><tt>ProductERR_2303</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '!' .
    *             <li><tt>ProductERR_2304</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : ':' .
    *             <li><tt>ProductERR_2305</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '<' .
    *             <li><tt>ProductERR_2306</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '>' .
    *             <li><tt>ProductERR_2307</tt>:</li>
    *                The element can not be published : the name of the Publication can not start or end with a blank character.
    *             <li><tt>ProductERR_2308</tt>:</li>
    *                The element can not be published : creation of a publication without defining an environment is not possible.
    *           </ul>
    *   </dl>
    */
    virtual HRESULT AddFromProxy (CATIAdpEnvironment *ipEnvironment, const CATIInstance_var & ispProxy, const CATUnicodeString &iFunctionalName, const PLMIOmbVirtualObjectDescriptor_var & ispPointedObject, PLMIPublication_var & ospPublication) = 0;

    /**
    *   Adds a new Publication with a valuated pointed object from a list of valuated PLM attributes.
    *   <br><b>Role</b>: This method creates a new Publication with a given name and a pointed object.<br>
    *   It then aggregates this newly created Publication under <tt>this</tt> PLM Reference.
    *   The different PLM attributes are stored in a list containing their names and values.
    *
    *   @param ipEnv
    *       The Environment in which the Publication is created.
    *       <br>It must not be <tt>NULL</tt> otherwise the method fails
    *   @param ispProxy
    *       Proxy of the Publication that will be created.
    *       <br>PLM Attributes initialized on the proxy are copied on the created Publication.
    *   @param  iFunctionalName
    *      The name of the new publication. <br>
    *      Input Parameter.
    *   @param ispPointedObject
    *      The Publication pointed object.
    *      <br>It can be provided by caller as <tt>NULL</tt>.
    *   @param ospPublication
    *      The newly created Publication. This parameter should not be valuated before the call.
    *   @return
    *      An HRESULT value. 
    *      <br><b>Legal values</b>:
    *      <dl>
    *      <dt><tt>S_OK</tt></dt>
    *      <dd>The new Publication was successfully added and <tt>ospPublication</tt> is valuated.</dd>
    *      <dt><tt>E_FAIL if the Publication creation will fail with the given information.</tt></dt>
    *           Use @href CATError#CATGetLastError to retrieve this error.
    *           <ul>
    *             <li><tt>ProductERR_2300</tt>:</li>
    *                The element can not be published : the name is invalid, its length must be less than 100 characters.
    *             <li><tt>ProductERR_2301</tt>:</li>
    *                The element can not be published : the name of the Publication can not be an empty string.
    *             <li><tt>ProductERR_2302</tt>:</li>
    *                The element can not be published : another Publication with the same name already exists in the assembly, it must be unique.
    *             <li><tt>ProductERR_2303</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '!' .
    *             <li><tt>ProductERR_2304</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : ':' .
    *             <li><tt>ProductERR_2305</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '<' .
    *             <li><tt>ProductERR_2306</tt>:</li>
    *                The element can not be published : check the name of the Publication, it contains an invalid character : '>' .
    *             <li><tt>ProductERR_2307</tt>:</li>
    *                The element can not be published : the name of the Publication can not start or end with a blank character.
    *             <li><tt>ProductERR_2308</tt>:</li>
    *                The element can not be published : creation of a publication without defining an environment is not possible.
    *           </ul>
    *   </dl>
    */
    virtual HRESULT AddFromProxy (CATIAdpEnvironment *ipEnvironment, const CATIInstance_var & ispProxy, const CATUnicodeString &iFunctionalName, const CATILinkableObject_var & ispPointedObject, PLMIPublication_var & ospPublication) = 0;

  /**
  * Duplicates an existing Port aggregated by this reference.
  * @param spPublicationToDuplicate
  *   Original Port to duplicate.
  * @param iFunctionalNameofNewPort
  *   Functional Name of the new port
  * - has to be unique under the Ref or RepRef and different compared to the duplicated port functional name.
  * @param ospNewPublication
  *   The created Port.
  * @return
  *   HRESULT
  */
  virtual HRESULT DuplicatePublication (PLMIPublication_var & spPublicationToDuplicate,CATUnicodeString & iFunctionalNameofNewPublication, CATBoolean iRemovePortToDuplicate, PLMIPublication_var & ospNewPublication) = 0;

#ifdef CATIAR424
  /**
  * Replaces an existing Publication by a new identical Publication with a new functional name.
  * @param iOldPub
  *   Original Publication to replace and rename. Must be owned by this Ref or RepRef.
  * @param iNewName
  *   Functional name of the new Publication
  *   has to be unique under the Ref or RepRef and different from iOldPub's name
  * @param iPerformAutomaticRerouteOnLoadedLinks
  *    Flag indicating whether loaded links pointing iOldPub should be automatically rerouted.
  *    Only links that are loaded in session can be rerouted, links that are not loaded will be broken.
  * @param ospNewRenamedPub
  *   The new, renamed Publication.
  * @return
  *   HRESULT
  */
  virtual HRESULT ReplaceAndRenamePublication(PLMIPublication & iOldPub, CATUnicodeString const & iNewName, bool iPerformAutomaticRerouteOnLoadedLinks, CATOmxSR<PLMIPublication> & ospNewRenamedPub) = 0;
#endif

};

CATDeclareHandler(PLMIPublications, CATBaseUnknown);

//------------------------------------------------------------------

#endif
