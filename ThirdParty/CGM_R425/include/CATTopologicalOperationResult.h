#ifndef CATTopologicalOperationResult_h
#define CATTopologicalOperationResult_h

#include "IUnknown.h"
#include "ExportedByCATCXTopology.h"
#include "CATBoolean.h"

class ListPOfCATBody;
class CATBody;
class CATCGMJournalList;
class CATListPtrCATCGMJournal;
class CATUnicodeString;
class CATError;
class CATSoftwareConfiguration;

/*************************************************************************************
class CATTopologicalOperationResult
-------------------------------------------------------------------------------------

This class represents the result of a topological operation.

Contained elements:
- the input bodies
- the result bodies
- the result journals

Provided services:
- Filling, using SetData functions
- Save to a .tor file
- Load from a .tor file
- Comparison with another CATTopologicalOperationResult (body mapping + journal mapping)

Example with save:
  CATTopologicalOperationResult * NewStructure1 = CATTopologicalOperationResult::Create();
  NewStructure1->SetData(InputBodies1, Result1, Journal1);
  NewStructure1->SaveToFile("E:\tmp\SaveOperationResults\Result_123.tor");
  delete NewStructure1;
  NewStructure1 = NULL;

Example with load and compare:
  CATTopologicalOperationResult * NewStructure2 = CATTopologicalOperationResult::Create();
  NewStructure2->SetData(InputBodies2, Result2, Journal2);
  CATTopologicalOperationResult * LoadedStructure = CATTopologicalOperationResult::Create();
  LoadedStructure->LoadFromFile("E:\tmp\SaveOperationResults\Result_123.tor");
  CATBoolean StructuresAreIdentical = FALSE;
  LoadedStructure->Mapping(NewStructure2, StructuresAreIdentical);
  delete NewStructure2;
  NewStructure2 = NULL;
  delete LoadedStructure;
  LoadedStructure = NULL;

-------------------------------------------------------------------------------------
2014 week 09 LD2 Creation
*************************************************************************************/

#define _CATTopologicalOperationResult_EXT_ ".tor"

class ExportedByCATCXTopology CATTopologicalOperationResult
{
public:

  /**
  * Function to create an empty CATTopologicalOperationResult
  */
  static CATTopologicalOperationResult * Create(CATSoftwareConfiguration * iConfig = NULL);

  /**
  * Destructor
  */
  virtual ~CATTopologicalOperationResult();

  /**
  * Function to fill this CATTopologicalOperationResult.
  * @param iInputBodies
  *    The list of input bodies of the operation.
  * @param iResult
  *    The result body.
  * @param iJournal
  *    The operation journal: it describes how iResult is built from iInputBodies.
  * @return
  *    return S_OK, if data is correctly set
  *    return E_FAIL in other case.
  */
  virtual HRESULT SetData(const ListPOfCATBody & iInputBodies, CATBody * iResult, CATCGMJournalList * iJournal) = 0;

  /**
  * Function to fill this CATTopologicalOperationResult.
  * @param iInputBodies
  *    The list of input bodies of the operation.
  * @param iResult
  *    The list of result bodies.
  * @param iJournal
  *    The list of operation journals: the n-th journal describes how the n-th result is built from iInputBodies.
  *    The 2 lists must have the same size.
  * @return
  *    return S_OK, if data is correctly set
  *    return E_FAIL in other case.
  */
  virtual HRESULT SetData(const ListPOfCATBody & iInputBodies, const ListPOfCATBody & iResults, const CATListPtrCATCGMJournal & iJournals) = 0;

  /**
  * Function to save this structure to a file.
  * @param iTorFilePath
  *    The path of the saved file. The name must end with ".tor".
  * @return
  *    return S_OK, if file is saved correctly
  *    return E_FAIL in other case.
  */
  virtual HRESULT SaveToFile(const CATUnicodeString & iTorFilePath) const = 0;

  /**
  * Function to load a structure from a file.
  * @param iTorFilePath
  *    The path of the file to be loaded. The name must end with ".tor".
  * @return
  *    return S_OK, if file is loaded correctly
  *    return E_FAIL in other case.
  */
  virtual HRESULT LoadFromFile(const CATUnicodeString & iTorFilePath) = 0;

  /**
  * Function to compare two CATTopologicalOperationResult.
  * BodyMapping and JournalMapping will be performed.
  * @param iOther
  * The structure to be compared with this.
  * @param oResult
  *    TRUE if the 2 structures map to each other
  *    FALSE if the 2 structures don't map to each other
  * @param opError
  *    Error eventually generated by Mapping function.
  * @return
  *    return S_OK, if mapping was executed without any problem
  *    return E_FAIL in other case.
  */
  virtual HRESULT Mapping(const CATTopologicalOperationResult & iOther, CATBoolean & oResult, CATError ** opError = NULL) const = 0;

protected:
  CATTopologicalOperationResult();
};

#endif
