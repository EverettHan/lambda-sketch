// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATIOmbTechnologicalSet.h
// Define the CATIOmbTechnologicalSet interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jul 2006  Creation: Code generated by the CAA wizard  ycm
//===================================================================

/**
* @level Protected 
* @usage U3
*/


#ifndef CATIOmbTechnologicalSet_H
#define CATIOmbTechnologicalSet_H

#include "CATOmbTechnologicalRep.h"
#include "CATBaseUnknown.h"

class CATUnicodeString;
class CATIOmbTechnologicalStreamDescriptor;
class CATIComponent;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbTechnologicalRep IID IID_CATIOmbTechnologicalSet;
#else
extern "C" const IID IID_CATIOmbTechnologicalSet ;
#endif

//------------------------------------------------------------------

/**   
* Technological set data access. 
* <b>Role</b>:
* <li>The set is a subdivision of the Technological stream desc private area.<br> 
* <li>The set is characterized by attributes that can be accessed using this interface. 
* <li>The type and role attributes are internal text labels given to the set by the applicative code creating it.
* <li>Those attributes can lated be used to retrieve a given set among all sets within a Technological Stream Desc.</li>
* <li>The set is a handler to an associated session object that holds all the applicative data created using this set.</li>
* <br>
*
*/

class ExportedByCATOmbTechnologicalRep CATIOmbTechnologicalSet: public CATBaseUnknown
{
	CATDeclareInterface;

public:
	/**
	* Sets the Technological set role attribute.
	* <br><b>Role:</b>This method changes the set "role" attribute (see the class description for further detail)<br>
	* It can afterwards be retrieved using @href GetRole .<br>
	* <br><i>NOTE: The Technological Stream Desc data will be loaded if not already in memory.</i>
	*
	* @param iRole
	*     The role attribute value to be used.
	*
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The role was succesfully set.</dd>
	*     <dt>E_FAIL</dt>
	*   </dl>
	**/
	virtual HRESULT SetRole(const CATUnicodeString &iRole) =0;

	/**
	* Retrieves the cluster set role attribute.
	* <br><b>Role:</b>This method retrieves the cluster set "role" attribute. (see the class description for further detail)<br>
	* The set role is specified when the set is created. It can be changed using @href SetRole .<br>
	* <br><i>NOTE: The cluster data will be loaded if not already in memory.</i>
	*
	* @see CATIOmbTechnologicalSet#SetRole
	*
	* @param oRole
	*     The role attribute value.
	*
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The role was successfully retrieved.</dd>
	*     <dt>E_FAIL</dt>
	**/
	virtual HRESULT GetRole( CATUnicodeString &oRole) const =0;

	/**
	* Retrieves the cluster set type.
	* <br><b>Role:</b>This method retrieves the set "type" attribute.<br> 
	* This attribute is read-only and is populated when the cluster set is created.<br>
	* <br><i>NOTE: The cluster data will be loaded if not already in memory.</i>
	*
	* @param oRole
	*     The role attribute value.
	*
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The role was succesfully retrieved.</dd>
	*     <dt>E_FAIL</dt>
	*/
	virtual HRESULT GetType( CATUnicodeString &oType ) const =0;

	/**
	* Retrieves the Technological Stream Descriptor.
	* <br><b>Role:</b>This method retrieves the Technological Stream Descriptor.<br> 
	* 
	* @param opStreamDesc
	*			the Technological Stream Descriptor which contains the Technological set.
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The Technological Stream Descriptor was succesfully retrieved.</dd>
	*   </dl>
	*/
	virtual HRESULT GetTechnologicalStreamDescriptor (CATIOmbTechnologicalStreamDescriptor * &opStreamDesc) const = 0;

	/**
	* @deprecated V5R201 Use the IID-based version below.
	* Retrieve the owner of the CATIOmbTechnologicalSet.
	* <br><b>Role:</b>This method retrieves the owner of the CATIOmbTechnologicalSet.<br> 
	*
	* @param opComponent
	*			The component which contains the Technological set.
	*
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The component was succesfully retrieved.</dd>
	*   </dl>
	*/
	virtual HRESULT GetComponentOwner(CATIComponent * &opComponent) const = 0;

   /**
	* Retrieve the owner of the CATIOmbTechnologicalSet.
	* <br><b>Role:</b>This method retrieves the owner of the CATIOmbTechnologicalSet.<br> 
	*
	* @param iIID
	*			The IID of the interface to get on the component owner.
	* @param opComponent
	*			The retrieved the component owner.
	*
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The component was succesfully retrieved.</dd>
	*     <dt>E_FAIL</dt>
	*     <dd>The component was not retrieved.</dd>
	*     <dt>E_NOINTERFACE</dt>
	*     <dd>The component was retrieved but does not adhere to the requested interface.</dd>
	*   </dl>
	*/
	virtual HRESULT GetComponentOwner(const IID & iIID,	void** opComponent) const = 0;



	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
