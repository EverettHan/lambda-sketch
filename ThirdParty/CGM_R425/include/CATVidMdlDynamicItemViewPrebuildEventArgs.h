//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/03/16
//===================================================================
// CATVidMdlDynamicItemViewPrebuildEventArgs.h
// Header definition of class CATVidMdlDynamicItemViewPrebuildEventArgs
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/03/16 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlDynamicItemViewPrebuildEventArgs_H
#define CATVidMdlDynamicItemViewPrebuildEventArgs_H

#include <VisuDialog.h>
#include <CATBaseUnknown.h>
#include <CATSYPEventArgs.h>
#include <CATUnicodeString.h>
#include <CATBaseUnknown_var.h>
#include <CATVidMdlIndex.h>
class CATSYPEvent;
class CATSYPPropertyDescriptorEx;

/**
 * Argument class dispatched by an items/view class to indicate that it
 * has is going to buid automatically a view for a displayed item.
 * This event arg has to be consumed to be taken into acount by the view item generator.
 */
class ExportedByVisuDialog CATVidMdlDynamicItemViewPrebuildEventArgs : public CATSYPEventArgs
{
  CATDeclareClass;
public:
  /** Constructor */
  CATVidMdlDynamicItemViewPrebuildEventArgs (
    CATSYPEvent * i_pEvent, 
    const CATVidMdlIndex & i_index, 
    const CATString& i_columnId,
    const CATBaseUnknown_var & i_spItem
  );
  /** @return the identifier of the column of the cell that will be build.*/
  INLINE const CATString& GetColumnId()const{return _columnId;}
  /** @return the model index of the row of the cell being constructed.*/
  INLINE const CATVidMdlIndex& GetModelIndex()const {return _index;}
  /** @return the model item of the row of the cell being constructed.*/
  INLINE const CATBaseUnknown_var& GetModelItem(){return _spItem;}
  /**
   * Sets every data usefull to the generator to build an appropriate item view.
   * @param i_propertType the type of the property that has to be displayed through  a tweaker.
   * @param i_readOnlyFlag indicates if this special property must be considered as read-only.
   * @param i_tweakType an optional tweak type, that will allow to search a special tweaker 
   * more dedicated to a property. For example, "bool", in case of "int" propert type.
   * @param i_tweakClass an optional string to force the usage of a given tweaker class, 
   instead of the default that should be found automatically fom the propert type.
   * @param i_tweakStyleSheet the stylesheet where to find the appropriate template of the tweaker.
   * @param i_pPropertyDescriptorEx the extention of descriptor, allowing to specify min/max values, or a list of available values.
   */
  void Set(const CATUnicodeString& i_propertType, int i_readOnlyFlag, const CATUnicodeString& i_tweakType, const CATUnicodeString& i_tweakClass, const CATUnicodeString& i_tweakStyleSheet, CATSYPPropertyDescriptorEx * i_pPropertyDescriptorEx);

  /** @return a flag that indicates if this special property must be considered as read-only.*/
  INLINE int GetReadOnlyFlag()const{return _readOnlyFlag;}
  /** @return the type of the property that has to be displayed through  a tweaker. */
  INLINE const CATUnicodeString& GetPropertyType()const{return _type;}
  /** @return an optional tweak type, that will allow to search a special tweaker more dedicated to a property. For example, "bool", in case of "int" propert type.*/
  INLINE const CATUnicodeString& GetTweakType()const{return _tweakType;}
  /** @return an optional string to force the usage of a given tweaker class, 
   instead of the default that should be found automatically fom the propert type.*/
  INLINE const CATUnicodeString& GetTweakClass()const{return _tweakClass;}

  /** @return the stylesheet where to find the appropriate template of the tweaker.*/
  INLINE const CATUnicodeString& GetTweakStyleSheet()const{return _tweakStyleSheet;}
  /** @return the extention of descriptor, allowing to specify min/max values, or a list of available values.*/
  INLINE CATSYPPropertyDescriptorEx* GetPropertyDescriptorEx() const{return _pPropertyDescriptorEx;}
  INLINE void SetTemplateName(const CATUnicodeString& i_templateName) { _templateName = i_templateName; }
  /** @return an optional string to force the usage of a given tweaker template name, 
   instead of the default that should be found automatically from the usage context.*/
  INLINE const CATUnicodeString& GetTemplateName()const{return _templateName;}

  INLINE void SetTweakSemantics(const CATBaseUnknown_var& i_spTweakSemantics) { _spTweakSemantics = i_spTweakSemantics; }
  INLINE const CATBaseUnknown_var& GetTweakSemantics() const { return _spTweakSemantics; }

  protected:
  /** Destructor */
  virtual ~CATVidMdlDynamicItemViewPrebuildEventArgs ();
private:
  // Copy constructor and assignement operator are disabled
  CATVidMdlDynamicItemViewPrebuildEventArgs (CATVidMdlDynamicItemViewPrebuildEventArgs &);
  CATVidMdlDynamicItemViewPrebuildEventArgs& operator=(CATVidMdlDynamicItemViewPrebuildEventArgs&);
private:
  CATString _columnId;
  CATBaseUnknown_var _spItem;
  int _readOnlyFlag;
  CATUnicodeString _type;
  CATUnicodeString _tweakType;
  CATUnicodeString _tweakClass;
  CATUnicodeString _tweakStyleSheet;
  CATUnicodeString _templateName;
  
  CATBaseUnknown_var _spTweakSemantics;
  CATSYPPropertyDescriptorEx* _pPropertyDescriptorEx;
  CATVidMdlIndex _index;
};

#endif
