// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATICkeLinkableAtom.h
// Define the CATICkeLinkableAtom interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jun 2005  Creation: Code generated by the CAA wizard  sgq
//===================================================================
#ifndef CATICkeLinkableAtom_H
#define CATICkeLinkableAtom_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATICkeLinkableAtom;
#else
extern "C" const IID IID_CATICkeLinkableAtom ;
#endif

class CATUnicodeString;
class CATILinkableObject_var;

//------------------------------------------------------------------

/**
*
*/
class ExportedByKnowledgeItf CATICkeLinkableAtom: public CATBaseUnknown
{
	CATDeclareInterface;

public:

	virtual HRESULT getComponent (IUnknown* & oStartingObject) const = 0;

	virtual HRESULT getComponentObject (CATBaseUnknown_var& oStartingObject) const = 0;

	virtual HRESULT ComputeTechnoPath (const CATBaseUnknown_var& iFatherOfStartingObject,
		const CATBaseUnknown_var& iStartingObject,
		CATUnicodeString& oTechnoPathToComponent,
		CATUnicodeString& oTechnoPathToComponentObject,
		CATUnicodeString& oTechnoPathToPointed) const = 0;

	virtual CATILinkableObject_var getLinkableObject(const CATBaseUnknown_var& iFather) = 0;

	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler(CATICkeLinkableAtom, CATBaseUnknown);

#endif
