//===================================================================
// COPYRIGHT Dassault Systemes 2018/06/13
//===================================================================
// CATPLMNLVGraphNode.cpp
// Header definition of class CATPLMNLVGraphNode
//===================================================================
//
// Usage notes:
//    -> Get[Ancestor/Descendant]Edge   -> returns the edge, with the ancestor/descendant node and the semantic
//    -> Get[Ancestor/Descendant]Node   -> returns the node (equivalent to Get[Ancestor/Descendant]Edge().Get[Ancestor/Descendant]()
//
//===================================================================
//  2018/06/13 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMNLVGraphNode_H
#define CATPLMNLVGraphNode_H

#include "CATPLMServicesNLV.h"
#include "CATOmxSharable.h"
#include "CATPLMNLVGraphEdge.h"
#include "CATOmxArray.h"
#include "CATOmxJsonObject.h"
#include "CATUuid.h"
#include "CATOmxSR.h"
#include "CATOmxOMap.h"
#include "CATPLMID.h"

class ExportedByCATPLMServicesNLV CATPLMNLVGraphNode: public CATOmxSharable
{
public:
  CATPLMNLVGraphNode(const CATUuid& iPhysicalId);
  virtual ~CATPLMNLVGraphNode();

  /*
  * Returns the JsonObject of the node.
  * The JsonObject is the raw data receive from the server.
  * It contains some attributes which are not exposed in this structure.
  */
  CATOmxJsonObject GetJsonObject() const;

  /*
  * Returns the physical id of the node.
  */
  CATUuid GetPhysicalId() const;

  /*
  * Returns the node's PLMID if the node's json has enough data to build it.
  * See: CATPLMNLVGetSemanticVersionGraphOptions::withAttributes
  *
  * @return
  *   <code>S_OK</code> PLMID built
  *   <code>E_FAIL</code> cannot built the PLMID. Missing or wrong data.
  */
  HRESULT GetPLMID(CATPLMID& oPLMID) const;

  /*
  * Returns the node's majororder if the node's json has enough data to build it.
  * See: CATPLMNLVGetSemanticVersionGraphOptions::withAttributes
  *
  * @return
  *   <code>S_OK</code> majororder returned
  *   <code>E_FAIL</code> cannot return majororder. Missing or wrong data.
  */
  HRESULT GetMajorOrder(CATLONG64& oMajorOrder) const;

  /*
  * Returns the node's minororder if the node's json has enough data to build it.
  * See: CATPLMNLVGetSemanticVersionGraphOptions::withAttributes
  *
  * @return
  *   <code>S_OK</code> minororder returned
  *   <code>E_FAIL</code> cannot return minororder. Missing or wrong data.
  */
  HRESULT GetMinorOrder(CATLONG64& oMinorOrder) const;

  //===================================================================
  // Ancestors
  //===================================================================
  /*
  * Returns the number of ancestors.
  */
  int GetAncestorsCount() const;

  /*
  * Returns the ancestor edge at given index.
  * iIndex: [1;GetAncestorsCount()]
  * Returned edge is not addrefed.
  */
  CATPLMNLVGraphEdge* GetAncestorEdge(int iIndex) const;

  /*
  * Returns the ancestor at given index.
  * iIndex: [1;GetAncestorsCount()]
  * Returned node is not addrefed.
  * Equivalent to GetAncestorEdge(iIndex).GetAncestor()
  */
  CATPLMNLVGraphNode* GetAncestorNode(int iIndex) const;

  //===================================================================
  // Descendants
  //===================================================================
  /*
  * Returns the number of descendants.
  */
  int GetDescendantsCount() const;

  /*
  * Returns the numbers of descendants for the given semantic.
  * For example GetDescendantsFilteredBySemanticCount(CATPLMNLVSemantic::Evolution)
  * return the number of Evolution for the given node.
  */
  int GetDescendantsFilteredBySemanticCount(CATPLMNLVSemantic::Intent iSemantic);

  /*
  * Returns the descendant at given index.
  * iIndex: [1;GetDescendantsCount()]
  * Returned edge is not addrefed.
  */
  CATPLMNLVGraphEdge* GetDescendantEdge(int iIndex) const;

  /*
  * Returns the descendant at given index.
  * iIndex: [1;GetDescendantsCount()]
  * Returned node is not addrefed.
  * Equivalent to GetDescendantEdge(iIndex).GetDescendant()
  */
  CATPLMNLVGraphNode* GetDescendantNode(int iIndex) const;

  /*
  * Returns the descendant, filtered by the given semantic, at given index.
  * iIndex: [1;GetDescendantsFilteredBySemanticCount(CATPLMNLVSemantic::Intent)]
  * Returned edge is not addrefed.
  */
  CATPLMNLVGraphEdge* GetDescendantFilteredBySemanticEdge(CATPLMNLVSemantic::Intent iSemantic, int iIndex);

  /*
  * Returns the descendant, filtered by the given semantic, at given index.
  * iIndex: [1;GetDescendantsFilteredBySemanticCount(CATPLMNLVSemantic::Intent)]
  * Returned node is not addrefed.
  * Equivalent to GetDescendantFilteredBySemanticEdge(iSemantic, iIndex).GetDescendant()
  */
  CATPLMNLVGraphNode* GetDescendantFilteredBySemanticNode(CATPLMNLVSemantic::Intent iSemantic, int iIndex);

  //===================================================================
  // Minors
  //===================================================================
  /*
  * Returns the minor ancestor edge.
  * NULL if the node doesn't have minor ancestor.
  * Returned edge is not addrefed.
  */
  CATPLMNLVGraphEdge* GetMinorAncestorEdge() const;

  /*
  * Returns the minor ancestor node.
  * NULL if the node doesn't have minor ancestor.
  * Returned node is not addrefed.
  */
  CATPLMNLVGraphNode* GetMinorAncestorNode() const;

  /*
  * Returns the minor descendant edge.
  * NULL if the node doesn't have minor descendant.
  * Returned edge is not addrefed.
  */
  CATPLMNLVGraphEdge* GetMinorDescendantEdge() const;

  /*
  * Returns the minor descendant node.
  * NULL if the node doesn't have minor descendant.
  * Returned node is not addrefed.
  */
  CATPLMNLVGraphNode* GetMinorDescendantNode() const;

private:
  CATPLMNLVGraphNode(CATPLMNLVGraphNode &);
  CATPLMNLVGraphNode& operator=(CATPLMNLVGraphNode&);

  static HRESULT _BuildFromJsonObject(const CATOmxJsonObject& iJson, CATPLMNLVGraphNode*& oNode);

  void _AppendAncestorEdge(CATPLMNLVGraphEdge* ipEdge);
  void _AppendDescendantEdge(CATPLMNLVGraphEdge* ipEdge);
  void _SetMinorAncestorEdge(CATPLMNLVGraphEdge* ipEdge);
  void _SetMinorDescendantEdge(CATPLMNLVGraphEdge* ipEdge);

  CATOmxJsonObject _Json; // contains the raw data/attributes from server for this node
  CATUuid _PhysicalId;
  CATOmxArray<CATPLMNLVGraphEdge*> _AncestorEdges;
  CATOmxArray<CATPLMNLVGraphEdge*> _DescendantEdges;
  CATOmxOMap<int, CATOmxArray<CATPLMNLVGraphEdge*> > _DesendantBySemanticEdges; // int for CATPLMNLVSemantic::Intent
  CATOmxSR<CATPLMNLVGraphEdge> _spMinorAncestorEdge;
  CATOmxSR<CATPLMNLVGraphEdge> _spMinorDescendantEdge;

  friend class CATPLMNLVGraphBuilder;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATPLMNLVGraphNode*>::manager();

#endif
