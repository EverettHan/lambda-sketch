//===================================================================
// COPYRIGHT Microsoft 2012/03/01
//===================================================================
// CATIAsyncRequestsPlatformStrategy.h
// Header definition of class CATIAsyncRequestsPlatformStrategy
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/03/01 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATIAsyncRequestsPlatformStrategy_H
#define CATIAsyncRequestsPlatformStrategy_H

#include "CATSysErrorDef.h"
#include "CATAsyncTasksUtils.h"
#include "CATIAsyncTaskCompletionCallBackBase.h"

class CATAsyncRequest;

//-----------------------------------------------------------------------

class CATIAsyncRequestsPlatformStrategy
{
public:

  /**
  * Constructor
  */
  CATIAsyncRequestsPlatformStrategy () {}
  
  /**
  * Destructor
  */
  virtual ~CATIAsyncRequestsPlatformStrategy () {}

  /**
  * ...
  *
  * @return
  * <code>S_OK</code>: ...
  * <code>E*</code>: ...
  */
  virtual HRESULT IsPlatformWorking() = 0;

  /**
  * ...
  *
  * @param
  * <br/> [in] iAsyncRequest: ...
  * @return
  * <code>S_OK</code>: ...
  * <code>S_FALSE</code>: ...
  * <code>E*</code>: ...
  */
  virtual HRESULT IsHandled(const CATAsyncRequest & iAsyncRequest) = 0;

  /**
  * ...
  *
  * @param
  * <br/> [in] iAsyncRequest: ...
  * @return
  * <code>S_OK</code>: ...
  * <code>E*</code>: ...
  */
  virtual HRESULT ExecuteRequest(CATAsyncRequest & iAsyncRequest, CATIAsyncTaskCompletionCallBackBase * iAsyncTaskCompletionCallBack) = 0;

  /**
  * ...
  *
  * @param
  * <br/> [in] iAsyncRequest: ...
  * @return
  * <code>S_OK</code>: ...
  * <code>E*</code>: ...
  */
  virtual HRESULT StopRequest(CATAsyncRequest & iAsyncRequest) = 0;

  /**
  * Indicates which technologies are used by the platform to process asynchronous requests
  * Zero, one or more tech can be used
  * If no tech is indicates, the request is considered running synchronously
  * The technology supported are (@see CATAsyncTasksUtils):
  *    - <code>CATAsyncRequest_BackBone</code>     : for multiprocess communication
  *    - <code>CATAsyncRequest_CommandAsync</code> : for multithreaded communication
  * For no tech used, platform must return <code>CATAsyncRequest_NoTech</code>
  *
  * @return [CATAsyncRequest_CommTechno]: the technologies used
  */
  virtual CATAsyncRequest_CommTech GetAsyncCommunicationTech() = 0;

  /**
  * ...
  *
  * @return [int]
  */
  virtual CATBoolean IsExecutionUnitAvailable() = 0;

  /**
  * ...
  *
  * @return [int]
  */
  virtual CATBoolean IsAllExecutionUnitsAvailable() = 0;

  /**
  * ...
  *
  * @return [int]
  */
  virtual const char* GetPlatformName() = 0;
  
private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATIAsyncRequestsPlatformStrategy (CATIAsyncRequestsPlatformStrategy &);
  CATIAsyncRequestsPlatformStrategy& operator=(CATIAsyncRequestsPlatformStrategy&);

};

//-----------------------------------------------------------------------

#endif

