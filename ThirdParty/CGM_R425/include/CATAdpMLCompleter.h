//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/03/30
//===================================================================
// CATAdpMLCompleter.cpp
// Header definition of class CATAdpMLCompleter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/03/30 Creation: Code generated by the 3DS wizard
//===================================================================

/**
* @level Protected
* @usage U1  
*/

#ifndef CATAdpMLCompleter_H
#define CATAdpMLCompleter_H

#include "CATPLMCompletionAccess.h"
#include "CATAdpMLOperation.h"
#include "CATCollec.h"
#include "IUnknown.h"
class CATAdpMLCompleterImpl;
class CATLISTV(CATPLMID);
class CATIAdpErrorMonitor;
class CATPLMID;
class CATPLMIDSet;
//-----------------------------------------------------------------------
/*
* This class returns PLMIDs to pass to lifecycle operation commands.
* Completion is done using ML file which follow this standard naming :
*   <Class Name>_<operation name>.ml
* in a directory which supports ml files
* To use it, instanciate with an error monitor, add elements and call the runner method.
* Running the operation should be done after adding every needed elements into input methods.
*
* Usage :
*  CATUuid  errorMonitorId;  
*  CATIAdpErrorMonitor*  pErrorMonitor  =  0;  
*  CATAdpErrorMonitorFactory::CreateErrorMonitor(errorMonitorId,  pErrorMonitor);  
*  CATAdpMLCompleter (pErrorMonitor) MLcompleter;
*  MLCompleter.AddElements(ListOfPLMID);
*  hr = MLCompleter.CompleteForOperation("MyTypename_TransferOwnership.ml", MyListForTransferOwnership);
*  if (FAILED(hr))
*    ... (checking pErrorMonitor)
*  else if(S_FALSE == hr)
*    ... (checking pErrorMonitor)
*
* You can then chain other CompleteForOperation calls
*  CATSysReleasePtr(pErrorMonitor);
*/

class ExportedByCATPLMCompletionAccess CATAdpMLCompleter
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATAdpMLCompleter (CATIAdpErrorMonitor *iopErrorMonitor = 0);
  virtual ~CATAdpMLCompleter ();


  /**
  *
  * <br><b>Role</b>: Add element to complete using ML
  * @param &iId
  *    CATPLMID of element to use completion with.
  *    PLMID may be subsequently filtered depending on operation depending on server capabilities.
  * @return
  * <dl>
  * <dt><code>S_OK</code><dd>  Operation succeeded 
  * <dt><code>E_FAIL</code> <dd> Operation failed
  * </dl>
  */
  HRESULT AddElement(const CATPLMID &iId);

  /**
  *
  * <br><b>Role</b>: Add elements to complete using ML
  * @param &iSetOfIds
  *    Set of CATPLMID of elements to perform completion operation with
  *    PLMIDs may be subsequently filtered depending on operation depending on server capabilities.
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> Operation succeeded 
  * <dt><code>E_FAIL</code> <dd> Operation failed.
  * </dl>
  */
  HRESULT AddElements(const CATPLMIDSet &iSetOfIds);

  /**
  *
  * <br><b>Role</b>: Add elements to complete using ML
  * @param &iSetOfIds
  *    Set of CATPLMID of elements to perform completion operation with
  *    PLMIDs may be subsequently filtered depending on operation depending on server capabilities.
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> Operation succeeded 
  * <dt><code>E_FAIL</code> <dd> Operation failed.
  * </dl>
  */
  HRESULT AddElements(const CATLISTV(CATPLMID) &iListOfIds);

  /**
  *
  * <br><b>Role</b>: Run the ML for operation completion. Performs the query synchronously
  * @param &iOperation
  *   Type of operation to have completion for. @see CATAdpMLOperation
  * @param &oOutputIds
  *   Result of completion, these are the elements returned to use for the subsequent operation
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> Operation succeeded
  * <dt><code>S_FALSE</code> <dd> Operation succeeded, but error or warning were encountered. See the error monitor
  * <dt><code>E_FAIL</code> <dd> Operation failed. Error(s) was (were) encountered. See the error monitor 
  * </dl>
  */
  HRESULT CompleteForOperation(const CATAdpMLOperation::MLOperation &iOperation, CATLISTV(CATPLMID) &oOutputIdsForOperation);

  private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATAdpMLCompleter (CATAdpMLCompleter &);
  CATAdpMLCompleter& operator=(CATAdpMLCompleter&);

  CATAdpMLCompleterImpl *_pImpl;
};

//-----------------------------------------------------------------------

#endif
