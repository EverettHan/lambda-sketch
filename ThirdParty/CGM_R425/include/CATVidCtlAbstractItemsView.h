//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/06/24
//===================================================================
// CATVidCtlAbstractItemsView.h
// Header definition of class CATVidCtlAbstractItemsView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/24 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidCtlAbstractItemsView_H
#define CATVidCtlAbstractItemsView_H

#include <VisuDialog.h>
#include <CATVidCtlAbstractScrollableArea.h>
#include <CATIVidMdl.h>
#include <CATVid.h>
#include <CATVidColor.h>
#include <CATVidDnD.h>
#include <CATIVidModelViewCellEditionProvider.h>
#include "string"
#include "vector"


class CATSYPEvent;
class CATIVidMdlSelectionModel_var;
class CATBaseUnknown_var;
class CATVidMdlSelectionChangedEventArgs;
class CATVidColor;
class CATIVidMdlContextMenuProvider_var;
class CATVidGP;
class CATVidCtlBaseViewItem;
class CATVidDroppedEventArgs;
class CATVidDraggedEventArgs;
class CATVidDnDDataEventArgs;
class CATVidDnDEventArgs;
class CATSYPValidator;
class CATVidMdlItemViewPool;
class CATIVidMdlDataTemplateProvider_var;

/** @ingroup groupVidModelView
 * @defgroup groupVidModelViewView View Components
 *
 * The <b>View components</b> sub-module groups the classes used to display
 * the content of a model. This component must be associated to a model and
 * will display its content in a smart way by virtualizing the construction
 * of the view of each data item. So, only views for visible items from the
 * model that are visible are built.
 *
 * @par ListView components
 * The CID ListView control can display the content of a list based model.
 * Several view modes are provided: currently, a standard one-column view and
 * a thumbnails view.
 *
 * @par
 * The following code snippet shows how to associate a CATVidCtlListView to a
 * CATVidMdlStandardList to display its content:
 * @code
 * // Create the list view
 * CATVidCtlListView * pListView = CATVidCtlListView::CreateListView();
 *
 * // Build the model
 * CATVidMdlStandardList * pModelList = new CATVidMdlStandardList;
 *
 * if (pModelList && pListView)
 * {
 *    // Insert some elements inside the model
 *    DataItem * pItem = new DataItem("Object number 1");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *    pItem = new DataItem("Object number 2");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *    pItem = new DataItem("Object number 3");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *    pItem = new DataItem("Object number 4");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *    pItem = new DataItem("Object number 5");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *    pItem = new DataItem("Object number 6");
 *    pModelList->Append(pItem);
 *    CATSysReleasePtr(pItem);
 *
 *    // Associate the model to the list view
 *    pListView->SetUniformItemSizes(1);
 *    pListView->SetSourceModel(pModelList);
 *    pModelList->Release();
 *
 *    // Associate a data template to use when building the view of a data item
 *    pListView->SetDataTemplate("DataTemplateName", "DataTemplateFile.CATSYPStyle");
 * }
 * @endcode
 * The the pListView control is set and can be inserted inside a panel to
 * display it on screen for example.
 *
 * @section CATVidCtlAbstractItemsView_secVisualFeedback Managing visual feedback of the selection
 * As those controls handle the selection of displayed elements, you can
 * specify the way selected items will be visualize. This is the role of
 * the SelectionFeedback property.
 *
 * This property of type CATVid::SelectionFeedback accepts the following values:
 *   - CATVid::NoFeedback : no visual feedback will show the selected
 * items. However, the selection is not deactivated and so the selection
 * model will continue to be filled.
 *   - CATVid::BackgroundFeedback : this is the most simple visual feedback
 * for the selected item. The background color of a selected item will be
 * modified to highlight the item. This feedback mode is the default one.
 *   - CATVid::OverlayFeedback : this is the most customizable visual feedback
 * mode. Using this mode, a selected item will be overlay by a widget to show
 * that it is selected. This widget can be define using the data template
 * mechanism.
 *
 * @par NoFeedback mode
 * As said above, this mode deactivate the feedback for selected items but the
 * selection keeps working. So, the selection model keeps storing the items
 * that are selected by the user or code. Each time the selection is modified,
 * the event SelectionChanged is dispatched by the CATVidCtlAbstractItemsView.
 *
 * @par BackgroundFeedback mode
 * This is the default mode of a CATVidCtlAbstractItemsView object. Each
 * selected item has its color background modified to highlight it. The
 * color applied to the background of a selected item can be set using
 * the member function CATVidCtlAbstractItemsView::SetSelectionColor
 * giving it the new CATVidColor to apply to the background of selected
 * items.
 * This mode doesn't support the SelectionBorderColor property.
 * If this mode is set, the member function SetSelectionDataTemplateName
 * and SetSelectionStyleSheet doesn't have any effects.
 * When an item is selected, a flag called SelectedItem is set to the value 1.
 * Otherwise, when an item is deselected, the SelectedItem flag is set to the
 * value 0. You can use this flag in triggers of the data template that
 * defines the view of your items to tune the view of your item depending on
 * whether it is selected or not (this is particularly useful to set the
 * color of the text depending on the color of the background of the item).
 * @image html backgroundFeedbackImage.png "A listview using the background feedback mode"
 *
 * @par OverlayFeedback mode
 * This mode highlights each selected items by overlaying on it a widget.
 * By default, this widget is a simple GP. Its background color can be
 * customized using the member function
 * CATVidCtlAbstractItemsView::SetSelectionColor giving it the new CATVidColor
 * to apply. As this widget is positioned above the selected item, its color
 * should contain some transparency (otherwise, the selected item will no longer
 * be visible). Its border color can be customized using the member function
 * CATVidCtlAbstractItemsView::SetSelectionBorderColor giving the new color
 * to apply to its borders. If this style doesn't suit your needs, you can set
 * on the CATVidCtlAbstractItemsView a data template that will be used to
 * generate the widget to mark selected items. To do this, you need to provide
 * a data template name and a stylesheet that contains the data template using
 * the two following member functions:
 * CATVidCtlAbstractItemsView::SetSelectionDataTemplateName and
 * CATVidCtlAbstractItemsView::SetSelectionStyleSheet. If you use this option,
 * the property SelectionColor and SelectionBorderColor will no longer be taken
 * into account.
 * @image html overlayFeedbackImage.png "A listview using the overlay feedback mode"
 *
 * @section CATVidCtlAbstractItemsView_secSelectionMisc About selection
 * By default the type of selection is managed by the SelectionMode property. So,
 * basically, either the selection is activated for every items displayed by a
 * model/view control or the selection is disabled for every items. However,
 * if you want to let the user only selects some elements displayed by the
 * control, and make some others unselectable, you have to define on your
 * introspectable data item a property called SelectableFlag of type int.
 * If this property is set to 1, so the item can be selected (if the
 * corresponding SelectionMode is set). Otherwise, settings this property to
 * 0 will prevent the user to select this data item (whatever the SelectionMode
 * value). Finally, if your data item doesn't expose such a property, the item
 * will be selectable as soon as the SelectionMode allows it.
 *
 * @section CATVidCtlAbstractItemsView_secTooltip Displaying tooltip information
 * A CATVidCtlAbstractItemsView and its inherited classes are able to display
 * information inside a tooltip as any other controls. However, the information
 * displayed inside the tooltip can depend on which item is currently under the
 * mouse pointer or not. By default, no tooltip is associated to an items view
 * control.
 *
 * @par Displaying a uniform tooltip for the whole items view control
 * As any others controls, you can enrich the CATVidCtlAbstractItemsView and
 * its inherited classes with a tooltip using the capabilities provided by
 * CATVidCtl. So, you can either use the default data and
 * data template to easily display a tooltip or set a tooltip provider and
 * a data template to use for a custom tooltip. This tooltip is then
 * associated to the items view control, so it will be displayed when the
 * mouse cursor will be over the items or the scrollbars.
 *
 * @par Displaying a tooltip whose content depends on the item currently under the mouse cursor
 * To display a tooltip whose content is different depending on the item
 * currently under the mouse cursor, you need to set a particular tooltip
 * provider to the items view control (using the member function
 * CATVidCtl#SetTooltipProvider). This tooltip provider as any other
 * needs to implement the CATISYPIntrospectableProvider interface but it must
 * also implement the CATISYPIntrospectableSetter interface. As soon as your
 * tooltip provider implements those two interfaces, the data displayed by the
 * tooltip can depends on the item currently under the mouse cursor.
 *
 * The CATISYPIntrospectableSetter interface allows you to fill the tooltip
 * provider with the data you want to display inside your tooltip. This is
 * the responsability of the CATISYPIntrospectableSetter#SetData member
 * function. This member function is called each time the mouse cursor enters
 * an item displayed by the items view control and so, the data stored inside
 * the tooltip provider is set to the one of the item right under the mouse
 * cursor.
 *
 * @par Removing a previously set tooltip on an items view control
 * To remove a tooltip using default data and style and set on the whole items
 * view control, you need to call CATVidCtl#ResetTooltip.
 *
 * To remove a tooltip when you have set a custom tooltip provider and style
 * you need to call the CATVidCtlAbstractItemsView#SetTooltipProvider giving
 * the value NULL_var as parameters.
 *
 * @par Remark
 * When you set a tooltip by calling #SetTooltipProvider, the tooltip information
 * stored before are reseted.
 * So it's strongly recommend to first set the tooltip provider you want to use,
 * then set the tooltip style information and finally, the other properties
 * relative to tooltip management (like the Type for instance).
 * Also, be careful on the fact that represented model (assigned by SetSourceModel method call)
 * need to be bone AFTER SetTooltipProvider call!!!!
 *
 * @par Sample
 * A CATVidCtlListView displaying a single text label is used for this sample.
 * This list view displays a model that contains introspectable objects with
 * the property called Text.
 * This sample shows how to display inside a tooltip the value of the Text
 * property for each elements displayed by the list view.
 *
 * First you need to create a tooltip provider by implementing the following
 * two interfaces: CATISYPIntrospectableProvider and CATISYPIntrospectableSetter.
 *
 * @code
 *
 * #include <CATBaseUnknown.h>
 * #include <CATISYPIntrospectable.h>
 * #include <CATSYPDataBlockFactory.h>
 *
 * class CATVidTstListTooltipProvider : public CATBaseUnknown
 * {
 *   CATDeclareClass;
 * 
 *   public:
 *     CATVidTstListTooltipProvider();
 *     virtual ~CATVidTstListTooltipProvider();
 *  
 *     //Returns the introspectable object that contains data to provide
 *     //to the tooltip infrastructure.
 *     //
 *     //@return the tooltip data to display for the item under the mouse.
 *     virtual CATISYPIntrospectable_var GetIntrospectable();
 *
 *     //Set the tooltip data for the item located under the mouse pointer.
 *     //
 *     //@param i_spData: the introspectable item that corresponds to the item
 *     //located under the mouse pointer.
 *     virtual void SetData(const CATISYPIntrospectable_var & i_spData);
 *
 *   private:
 *     CATVidTstListTooltipProvider(const CATVidTstListTooltipProvider &);
 *     CATVidTstListTooltipProvider & operator= (const CATVidTstListTooltipProvider &);
 *  
 *     // The data object whose content is displayed by the view object located
 *     // under the mouse pointer.
 *     CATISYPIntrospectable_var _spIntrospectable;
 *
 *     // The factory that will create datablocks containing the data to display
 *     // by the tooltip
 *     CATSYPDataBlockFactory _factory;
 * };
 * @endcode
 *
 * @code
 * #include <CATVidTstListTooltipProvider.h>
 * #include <CATSYPDataBlock.h>
 * #include <CATBasicBoxing.h>
 *
 * CATImplementClass(CATVidTstListTooltipProvider,
 *                   Implementation,
 *                   CATBaseUnknown,
 *                   CATNUll);
 *
 * #include "TIE_CATISYPIntrospectableProvider.h"
 * TIE_CATISYPIntrospectableProvider(CATVidTstListTooltipProvider);
 *
 * #include "TIE_CATISYPIntrospectableSetter.h"
 * TIE_CATISYPIntrospectableSetter(CATVidTstListTooltipProvider);
 *
 * CATVidTstListTooltipProvider::CATVidTstListTooltipProvider()
 *   : CATBaseUnknown()
 *   , _spIntrospectable(NULL_var)
 * {
 *   _factory.AddProperty("Title", "CATUnicodeString",  CATSYPDataBlockFactory::ReadWrite, "", CATBoxingOfCATUnicodeString::Box("Default"));
 *   _factory.AddProperty("ShortHelp", "CATUnicodeString",  CATSYPDataBlockFactory::ReadWrite, "", CATBoxingOfCATUnicodeString::Box("Default"));
 * }
 *
 * CATVidTstListTooltipProvider::~CATVidTstListTooltipProvider()
 * {
 *   _spIntrospectable = NULL_var;
 * }
 *
 * CATISYPIntrospectable_var CATVidTstListTooltipProvider::GetIntrospectable()
 * {
 *   // Create the datablock that will contain the data to display inside the
 *   // tooltip
 *   CATSYPDataBlock * pDataBlock = factory.CreateDataBlock();
 *   CHECK_POINTER_RETV(pDataBlock, NULL_var);
 *
 *   // Fill in the its properties with the value of the corresponding properties
 *   // of the item currently under the mouse pointer (i.e. _spIntrospectable)
 *   if (NULL_var != _spIntrospectable)
 *   {
 *     pDataBlock->SetProperty("Title", _spIntrospectable->GetProperty("Title"));
 *     pDataBlock->SetProperty("ShortHelp", _spIntrospectable->GetProperty("ShortHelp"));
 *   }
 *
 *   // Return the generated datablock
 *   CATISYPIntrospectable_var spDataBlock(pDataBlock);
 *   CATSysReleasePtr(pDataBlock);
 *   return spDataBlock;
 * }
 *
 * void CATVidTstListTooltipProvider::SetData(const CATISYPIntrospectable_var & i_spData)
 * {
 *   // Store the item currently under the mouse pointer for later use in
 *   // GetIntrospectable member function
 *   _spIntrospectable = i_spData;
 * }
 * @endcode
 *
 * The GetIntrospectable member function must return an introspectable object
 * that contains properties that will be displayed inside the tooltip. In this
 * sample it's a CATSYPDataBlock but you can use any introspectable object
 * generated by a sypintro file.
 *
 * The SetData member function takes as parameter an introspectable object.
 * Basically, this object is the introspectable object that is currently under
 * the mouse pointer. You can extract from it interesting properties you want
 * to display inside the tooltip. The CATVidCtlAbstractItemsView will call
 * this function each time the mouse cursor will be on a new item displayed
 * by it. In this sample, the introspectable object returned by this provider
 * has two properties called Title and ShortHelp. Those properties are defined
 * because the list view used the default tooltip data template that needs
 * a Title and a ShortHelp properties. However, if you use your own
 * data template for tooltip, the returned introspectable object needs to
 * define properties referenced in your data template.
 *
 * Then, on a CATVidCtlListView object, you need to set your tooltip provider:
 *
 * @code
 * // Create a listview
 * // ...
 *
 * CATVidTstListTooltipProvider * pTooltipProvider = new CATVidTstListTooltipProvider;
 * pListView->SetTooltipProvider(pTooltipProvider);
 * pTooltipProvider->Release();
 * @endcode  
 *
 * Finally, you have to assign represented model to your list.
 *
 * @code
 * //only here assign your model!!!!!!!
 * CATIVidMdl * pMyModel = ...;//retrieve or create your model.
 * pListView->SetSourceModel(pMyModel);
 *
 * @endcode
 *
 * In this sample, we do not set a data template to use for the tooltip. So we use
 * the default one. However, you can set your own as for any other CID control.
 *
 *
 * @section CATVidCtlAbstractItemsView_secContextMenu Associating a contextual menu
 *
 * @par Contextual menu for the whole items view control
 * By default, an items view control does not display a contextual menu on
 * right click. However, as others controls, you can associate to it a
 * contextual menu using the member function @ref CATVidCtl#BuildDefaultContextMenu
 * or @ref CATVidCtl#SetContextMenu (see @ref CATVidCtl for more information).
 * This contextual menu is added to the items view control itself, meaning that
 * it will be displayed on right click even if the mouse cursor is over its
 * scrollbars. Plus, the content of the contextual menu is uniform regardless
 * the item currently under the mouse cursor. As the contextual menu is associated
 * to the abstract items view itself, no items are selected when a right click
 * occurred on one of them.
 *
 * @par
 * The following sample demonstrates how to associate a contextual menu
 * to the whole listview:
 * @code
 * CATVidMdlContextMenu * pCtxMenu = pListView->GetContextMenu();
 * CHECK_POINTER_RET_MSG(pCtxMenu, "Can't retrieve the listview contextual menu");
 *
 * // populate the created contextual menu with some actions...
 * CATVidAction * pAction = new CATVidAction;
 * CHECK_POINTER_RET_MSG(pAction, "Can't create an action object");
 * pAction->SetText("Cut");
 * pCtxMenu->AppendAction(pAction);
 * CATSysReleasePtr(pAction);
 *
 * pAction = new CATVidAction;
 * CHECK_POINTER_RET_MSG(pAction, "Can't create an action object");
 * pAction->SetText("Copy");
 * pCtxMenu->AppendAction(pAction);
 * CATSysReleasePtr(pAction);
 *
 * pAction = new CATVidAction;
 * CHECK_POINTER_RET_MSG(pAction, "Can't create an action object");
 * pAction->SetText("Paste");
 * pCtxMenu->AppendAction(pAction);
 * CATSysReleasePtr(pAction);
 * @endcode
 *
 * @par Removing a contextual menu previously set on an items view control
 * To remove a previously set contextual menu on an items view control, you
 * need to call CATVidCtl#SetContextMenu with NULL as argument. Doing that,
 * the contextual menu will be removed from the items view control.
 *
 * @par Contextual menu only for items displayed by an items view control
 * A feature dedicated to items view control allows you to set a contextual menu
 * that can be dynamic (meaning that, its content will depend on the item
 * currently under the mouse cursor or the content of the selection) and that
 * will only be displayed when a right click is performed on an item (so a right
 * click on the scrollbars will not display a contextual menu). This mechanism 
 * uses the contextual menu provider feature.
 * Basically, you set a contextual menu provider on an items view control as
 * soon as you want to display a contextual menu only on visible items. This object
 * is responsible to populate the contextual menu for the right clicked item as
 * soon as a right click occured on this item.
 * To do so, this object needs to implement the CATIVidMdlContextMenuProvider
 * interface (see @ref CATIVidMdlContextMenuProvider for a sample).
 * In this mode, when a right click occurred to display the contextual menu
 * associated to one item, this item is selected (and the previously selected
 * one are unselected).
 *
 * @par Removing a contextual menu previously set on the items of an items view control
 * To remove a previsouly set contextual menu on the items of an items view
 * control, you need to call #SetContextMenuProvider with NULL_var as argument.
 * Doing that, the contextual menu provider will be removed from the items view
 * control and no contextual menu will be displayed anymore on its items.
 *
 * @par Remark
 * You can set a contextual menu on the items view control itself and then set
 * a contextual menu to be displayed for each items of the items view control.
 * Doing so, the contextual menu set on the items view control itself will be
 * displayed when a right click occured on the scrollbars of the items view
 * control, and the contextual menu set on the items will be displayed when
 * a right click will occured on the items themselves.
 *
 *
 * @section CATVidCtlAbstractItemsView_secRecord CATCommand name of displayed items
 *
 * @par Default generated CATCommand name for each control child item
 * By default, inherited classes of CATVidCtlAbstractItemsView like
 * CATVidCtlListView or CATVidCtlTreeView give an automatic generated name to
 * each control item they displayed.
 *
 * @par Setting your own CATCommand name for a control child item
 * You can give your own CATCommand name to a control child item. This enforces
 * the stability of Record if a new item is inserted inside the model or if an
 * item is deleted from the model. To do that, you need to create an
 * introspectable property called RecordName of type CATString on your class
 * you use to populate the model. Then you need to give to each data item a unique
 * name by setting this property. When the CATVidCtlAbstractItemsView generates
 * a displayed child item, it gives to it as CATCommand name the value of the
 * RecordName property gotten from the associated data item.
 *
 * @par Automatic generation of displayed child item at replay time
 * In the case of some child items are displayed at record time but not at
 * replay time, the Record engine is able to create automatically the child
 * items that were visible at record time using the CATCommand name information.
 * This may happen for instance due to a change of the size of the list
 * or if the content of the model differs between record and replay
 * time (the order of appearance of the items, the presence or not of some
 * items).
 */

/** @ingroup groupVidModelViewView
 * Base class to define controls that are able to display a large amount of
 * data in a clever way.
 *
 * The view of each data item displayed is built only when it is required.
 * This kind of virtualization ensures good performance as soon as a large
 * number of data item must be displayed.
 *
 * The displayed data must be stored into a CID model. Thus,
 * CATVidCtlAbstractItemsView is the base class of the view part of the CID
 * model / view infrastructure.
 *
 * This class is not intented to be used as-is. Its only purpose is to gather
 * some common functionnalities between all the item / view classes.
 *
 */
class ExportedByVisuDialog CATVidCtlAbstractItemsView : public CATVidCtlAbstractScrollableArea
{

  CATDeclareClass;

public:
  enum EditionMode{NoEdition=0, EditInPlace, EditOnClick, EditOnDoubleClick};
  /**
   * The different modes that a view can use to display its items.
   */
  enum ViewMode
  {
    /** The items of the list are displayed in a column */
    OneColumn = 0,
    /** The items of the list are displayed in a tile or thumbnails view */
    Thumbnails,
    /** The items of the list are displayed using several columns */
    Multi
  };
  /**
   * This member function is called as soon as the style processor has
   * created the view of the control.
   */
  virtual void TemplateDataUpdated();

  /** @copydoc CATVidCtlAbstractScrollableArea#ScrollContentBy */
  virtual void ScrollContentBy(int i_iDeltaX, int i_iDeltaY);

  /**
   * Get the way items will be displayed, either from top to bottom, or from
   * left to right.
   *
   * @return The direction in which items are layed out.
   *
   * @see CATVidCtlAbstractItems#SetItemsFlow
   */
  CATVid::ItemsFlow GetItemsFlow() const;
  /**
   * Set the way items will be displayed, either from top to bottom, or from
   * left to right.
   *
   * @par
   * This flag is only taken into account for the OneColumn mode and the
   * Thumbnails mode.
   *
   * @param i_itemsFlow The direction in which items will be layed out.
   */
  void SetItemsFlow(CATVid::ItemsFlow i_itemsFlow);
    /**
   * Set the view mode of the component to modify the way how
   * it renders its child items.
   *
   * @par
   * Changing the view mode on the fly for a listview will trigger a
   * complete re-initialization of the listview.
   *
   * @param i_viewMode: the view mode to set
   */
  void SetViewMode(ViewMode i_viewMode);

  /**
   * Get the view mode of the component
   *
   * @return the current view mode of the listview.
   */
  ViewMode GetViewMode() const;
  /**
   * Get the current mode used for the selection behavior.
   *
   * @return the current selection mode.
   */
  CATVid::SelectionMode GetSelectionMode() const;

  /**
   * Set the current mode used for the selection behavior.
   *
   * @param i_mode the new selection mode to use.
   */
  void SetSelectionMode(CATVid::SelectionMode i_mode);

  /**
   * Set whether or not the displayed child items have the same size or not.
   * This information allows for great performance improvments.
   *
   * @param i_uniformItemSizes 1 if items have same size, 0 otherwise.
   */
  void SetUniformItemSizes(int i_uniformItemSizes);

  /**
   * Indicates whether displayed items will be treated as if they have
   * same size.
   *
   * @return 1 if displayed items are considered to have same size, 0 otherwise.
   */
  int GetUniformItemSizes() const;

  /**
   * Get the current selection feedback used by the control.
   *
   * @return the current selection feedback.
   */
  CATVid::SelectionFeedback GetSelectionFeedback() const;

  /**
   * Set the selection feedback used by the control.
   *
   * @param i_selectionFeedback the new selection feedback to use.
   */
  void SetSelectionFeedback(const CATVid::SelectionFeedback i_selectionFeedback);

  /**
   * Get the current selection color used by the  default selection feedback.
   *
   * @return the current selection color.
   */
  CATVidColor GetSelectionColor() const;

  /**
   * Set the color used by the default visual feedback of the selection.
   *
   * @param i_selectionColor the new color for the selection feedback to use.
   */
  void SetSelectionColor(const CATVidColor & i_selectionColor);

  /**
   * Get the current selection border color used by the default selection
   * feedback.
   *
   * @return the current selection border color.
   */
  CATVidColor GetSelectionBorderColor() const;

  /**
   * Set the border color used by the default visual feedback of the selection.
   *
   * @param i_selectionBorderColor the new border color for the selection
   * feedback to use.
   */
  void SetSelectionBorderColor(const CATVidColor & i_selectionBorderColor);

  /**
   * Get the current selection data template name. This property is only used
   * when the SelectionFeedback is set to CATVid::OverlayFeedback.
   *
   * @return the current selection data template name.
   */
  CATUnicodeString GetSelectionDataTemplateName() const;

  /**
   * Set the selection data template name. This property is only used
   * when the SelectionFeedback is set to CATVid::OverlayFeedback.
   *
   * @param i_selectionDataTemplateName the new data template name to use.
   */
  void SetSelectionDataTemplateName(const CATUnicodeString & i_selectionDataTemplateName);

  /**
   * Get the current selection data template stylesheet name. This property
   * is only used when the SelectionFeedback is set to CATVid::OverlayFeedback.
   *
   * @return the current selection data template stylesheet.
   */
  CATUnicodeString GetSelectionStyleSheet() const;

  /**
   * Set the selection data template stylesheet name. This property is only
   * used when the SelectionFeedback is set to CATVid::OverlayFeedback.
   *
   * @param i_selectionStyleSheet the new stylesheet name to use.
   */
  void SetSelectionStyleSheet(const CATUnicodeString & i_selectionStyleSheet);

  /**
   * Get the current item border color used by the default selection
   * feedback.
   *
   * @return the current item border color.
   */
  CATVidColor GetCurrentItemBorderColor() const;

  /**
   * Set the border color used by the default visual feedback of the current
   * item.
   *
   * @param i_borderColor the new border color for the current item
   * feedback to use.
   */
  void SetCurrentItemBorderColor(const CATVidColor & i_borderColor);

  /**
   * Get the pre-highlight border color used by the default selection
   * feedback.
   *
   * @return the pre-highlight border color.
   */
  CATVidColor GetPreHighlightBorderColor() const;

  /**
   * Set the border color used by the default visual feedback of the
   * pre-highlight item.
   *
   * @param i_borderColor the new border color for the pre-highlight item
   * feedback to use.
   */
  void SetPreHighlightBorderColor(const CATVidColor & i_borderColor);

  /**
   * Get the pre-highlight color used by the default selection
   * feedback.
   *
   * @return the pre-highlight color.
   */
  CATVidColor GetPreHighlightColor() const;

  /**
   * Set the color used by the default visual feedback of the
   * pre-highlight item.
   *
   * @param i_color the new color for the pre-highlight item
   * feedback to use.
   */
  void SetPreHighlightColor(const CATVidColor & i_color);

  /**
   * Get the selection model used by this control.
   *
   * @return the selection model used by this control or NULL_var if no selection
   * model has already been set.
   */
  CATIVidMdlSelectionModel_var GetSelectionModel() const;

  /**
   * Set the selection model used by this control. If a selection model was previously
   * set, it is first removed. Thus all the previously selected elements are no longer
   * selected.
   *
   * @param i_spSelectionModel the new selection model for this control.
   */
  void SetSelectionModel(const CATIVidMdlSelectionModel_var & i_spSelectionModel);

  /**
   * Set the model used to display elements through the itemsView control.
   *
   * @param i_spSourceModel the model to display.
   */
  void SetSourceModel(const CATIVidMdl_var & i_spSourceModel);

  /**
   * Set the data template to use to build the view of each item displayed by
   * this control.
   *
   * @param i_dataTemplate the data template name to use to build the view of
   * each item displayed by this control. Can't be an empty unicode string.
   *
   * @param i_styleSheet the sypstyle file in which the data template is defined.
   * Can't be an empty unicode string.
   */
  void SetDataTemplate(const CATUnicodeString & i_dataTemplate, const CATUnicodeString & i_styleSheet);

  /**
   * Set the name of the data template to use to compute the view of
   * displayed items.
   *
   * @note
   * Calling only this member function without calling SetDataTemplateStyleSheet
   * is not enough for this control to be able to build the view of data items.
   * So, when you call SetDataTemplateName, you need also to call
   * SetDataTemplateStyleSheet.
   *
   * @note
   * This member function is useful only when you do not provide your own
   * data template provider (i.e. it's the default one that is used). As soon
   * as you provide your own data template provider, this member function does
   * nothing.
   *
   * @param i_dataTemplateName name of the data template to use.
   */
  void SetDataTemplateName(const CATUnicodeString & i_dataTemplateName);

  /**
   * Get the name of the data template to use to compute the view of
   * displayed items.
   *
   * @note
   * This member function is useful only when you do not provide your own
   * data template provider (i.e. it's the default one that is used). As soon
   * as you provide your own data template provider, this member function
   * returns an empty string.
   *
   * @return the name of the data template to use to compute the view of
   * displayed items or an empty string if a data template provider has
   * been set.
   */
  const CATUnicodeString & GetDataTemplateName() const;

  /**
   * Set the stylesheet that contains the data template to use to compute the
   * view of displayed items.
   *
   * @note
   * Calling only this member function without calling SetDataTemplateName
   * is not enough for this control to be able to build the view of data items.
   * So, when you call SetDataTemplateStyleSheet, you need also to call
   * SetDataTemplateStyleName.
   *
   * @note
   * This member function is useful only when you do not provide your own
   * data template provider (i.e. it's the default one that is used). As soon
   * as you provide your own data template provider, this member function does
   * nothing.
   *
   * @param i_dataTemplateStyleSheet name of the stylesheet that contains the
   * data template to use to build the view of displayed items.
   */
  void SetDataTemplateStyleSheet(const CATUnicodeString & i_dataTemplateStyleSheet);

  /**
   * Get the stylesheet in which the data template to use to compute the view of
   * displayed items is defined.
   *
   * @note
   * This member function is useful only when you do not provide your own
   * data template provider (i.e. it's the default one that is used). As soon
   * as you provide your own data template provider, this member function
   * returns an empty string.
   *
   * @return the stylesheet in which the data template to use to compute the view of
   * displayed items is defined or an empty string if a data template provider has
   * been set.
   */
  const CATUnicodeString & GetDataTemplateStyleSheet() const;

  /**
   * Set a new data template provider to the control.
   *
   * @param i_dataTemplateProvider the new data templates provider to associate
   * to this control. Can't be a NULL_var handler.
   */
  void SetDataTemplateProvider(const CATIVidMdlDataTemplateProvider_var & i_spDataTemplateProvider);
  CATIVidMdlDataTemplateProvider_var GetDataTemplateProvider()const;

  /**
   * Retrieves the model used to display elements through the itemsView control.
   *
   * @return the mmodel used to display elements.
   */
  CATIVidMdl_var GetSourceModel() const;

  /**
   * Connect the scrollbar notifications in order to let this control handles
   * them.
   * This method is only dedicated to be used internally.
   */
  void AddScrollbarNotification();

  /**
   * The callback method calls when the slider of the scrollable area emits a
   * notification.
   * This method is only dedicated to be used internally.
   *
   * @param i_pCommand the CATCommand object that has sent the notification
   *
   * @param i_pNotification the notification sent
   *
   * @param i_commandData data that has been sent with the notification
   */
  void OnScrollbarSlide(CATCommand * i_pCommand, CATNotification * i_pNotification, CATCommandClientData i_commandData);

  /**
   * Set the scrolling policy for the displayed items.
   *
   * @param i_itemScrollingPolicy the scrolling policy to use.
   */
  void SetItemsScrollMode(CATVid::ItemsScrollMode i_itemsScrollMode);

  /**
   * Get the scrolling policy for the displayed items.
   *
   * @return the scrolling policy currently used.
   */
  CATVid::ItemsScrollMode GetItemsScrollMode() const;

  CATVid::TooltipType GetTooltipTypeForChildren() const;
  /**
   * Set whether or not the root of the tree has to be displayed or not.
   *
   * @param i_rootDecorationFlag TRUE if the root has to be displayed, FALSE otherwise.
   */
  void SetRootDecorationFlag(CATBoolean i_rootDecorationFlag);
  /**
   * Indicates whether or not the root of the tree is displayed or not.
   *
   * @return TRUE if the root is displayed, FALSE otherwise.
   */
  CATBoolean GetRootDecorationFlag() const;
  /**
   * Set the new preselected item using the given index.
   *
   * Only one item can be preselected at a time. So, when you preselect an
   * item using this function, the previous preselected item if any will be
   * un-preselected.
   *
   * @note To clear the pre-selection of an item, you can give an invalid
   * index to this function.
   *
   * @note Preselecting an item works only for visible item (i.e. currently
   * displayed in the viewport).
   *
   * @note While the mouse pointer is above an item, this item is preselected.
   * If a code preselection occurs, the item located under the mouse pointer is
   * unpreselected and the new one is preselected by code if possible. Then,
   * the preselection will change as soon as the mouse pointer leaves the
   * current item and enter a new one.
   *
   * @param i_preSelectedIndex the index corresponding to the item to
   * preselect.
   */
  void SetPreSelectedIndex(const CATVidMdlIndex & i_preSelectedIndex);

  /**
   * Get the current preselected index if any.
   *
   * @return the current preselected index if any, otherwise return an invalid
   * index.
   */
  const CATVidMdlIndex & GetPreSelectedIndex() const;

  /**
  * Modify the flag that determines whether consumed press event must be
  * taken into account for selection.
  *
  * @param: i_flag: the new value of the flag (should be 0 or 1)
  */
  void SetHandleConsumedPressEventFlag(int i_flag);

  /**
  * Get the value of the flag that determines whether consumed press event
  * must be taken into account for selection.
  */
  int GetHandleConsumedPressEventFlag() const;

  /**
  * when this flag is set to TRUE, it forces the CATVidCtlcolumn widgets virtualization.
  * This flag only makes sense with multi-columns lists or trees. (ViewMode = Multi)
  * If you set it to true, only visible columns (columns displayed in the viewport) at any time are drawn.
  * Use small set of columns is stored in a column pool. When scrolling horizontally, this set of column is reused with current column attribute (defined on CATVidGridViewColumn class)
  * Then, it allows having some good performance when list have a big number of columns.
  */
  void SetVirtualizedColumnsFlag(CATBoolean i_virtualizedColumnsFlag);

  /**
  * Get the virtualization column flag. This flag is always 0 if list/tree is not multi-columns.
  */
  CATBoolean GetVirtualizedColumnsFlag() const;

  /**
  * Set a flag to specify if contextual menu on a item select this item. Default value is TRUE.
  */
  void SetSelectItemAtCtxMenu(CATBoolean i_selectItemAtCtxMenu);

  /**
  * Get the flag to specify if contextual menu on a item select this item.
  */
  CATBoolean GetSelectItemAtCtxMenu() const;

  /**
  * Set a flag to specify if keyboard actions are managed by the list or tree.
  */
  void SetManageKeyboardActionFlag(CATBoolean i_manageKeyboardActionFlag);

  /**
  * Get the flag to specify if keyboard actions are managed by the list or tree.
  */
  CATBoolean GetManageKeyboardActionFlag() const;

	void SetFocus(CATBoolean iDisplayVirtualKeyboard=FALSE, CATBoolean i_tabKeyActivation = TRUE);
  
	void ResetFocus();

  void SetShowColumnHeaderBorderFlag(CATBoolean i_showColumnHeaderBorderFlag);
  CATBoolean GetShowColumnHeaderBorderFlag() const;

  /**
   * Get the @c SelectionChanged event.
   *
   * The @c SelectionChanged event is emitted by an items/views control when
   * the content of the selection is modified. (for example, when the end
   * user clicks on an item displayed by the control, it is selected and then
   * the event SelectionChanged is emitted.)
   *
   * @par EventProperties
   *    - Name: @c "SelectionChanged"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlSelectionChangedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * SelectionChanged();

  /**
   * Get the @c PreSelectionChanged event.
   *
   * The @c PreSelectionChanged event is emitted by an items/views control when
   * the pre-selected item (i.e. the item under the mouse pointer) changes.
   *
   * For a given items/views control, it can only be one pre-selected item at a
   * time.
   *
   * When the mouse pointer enters an item, the PreSelectionChanged event is
   * emitted with the item as parameter.
   * When the mouse pointer leaves an item, the PreSelectionChanged event is
   * emitted with no item as parameter.
   *
   * @par EventProperties
   *    - Name: @c "PreSelectionChanged"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlPreSelectionChangedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * PreSelectionChanged();

	/**
   * Get the @c DoubleClick event.
   *
   * The @c DoubleClick event is emitted by an items/views control when
   * the user double click with mouse on an item of the view.
   *
   *
   * @par EventProperties
   *    - Name: @c "DoubleClick"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlDoubleClickEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * DoubleClick();

  /**
   * Get the @c DynamicItemViewPrebuild event.
   *
   * The @c DynamicItemViewPrebuild event is emitted by an items/views control when
   * the view of an item of the items/views control has to be constructed.
   * You can listen to this event to perform some actions on the built view.
   *
   * @par EventProperties
   *    - Name: @c "DynamicItemViewPrebuild"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlDynamicItemViewPrebuildEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * DynamicItemViewPrebuild();
  /**
   * Get the @c ItemViewBuilt event.
   *
   * The @c ItemViewBuilt event is emitted by an items/views control when
   * the view of an item of the items/views control has been built.
   * You can listen to this event to perform some actions on the built view.
   *
   * @par EventProperties
   *    - Name: @c "ItemViewBuilt"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlItemViewBuiltEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * ItemViewBuilt();

  /**
   * Get the @c DeletePressed event.
   *
   * The @c DeletePressed event is emitted by an items/views control when
   * the delete key is pressed.
   *
   * @par EventProperties
   *    - Name: @c "DeletePressed"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * DeletePressed();

  /**
   * Get the @c EditPressed event.
   *
   * The @c EditPressed event is emitted by an items/views control when
   * the F2 key is pressed.
   *
   * @par EventProperties
   *    - Name: @c "EditPressed"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * EditPressed();

  /**
   * Get the @c EnterPressed event.
   *
   * The @c EnterPressed event is emitted by an items/views control when
   * the Enter key is pressed.
   *
   * @par EventProperties
   *    - Name: @c "EnterPressed"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * EnterPressed();

  /**
   * Called each time a char is typed on keyboard (string is built if time between 2 types is less than 800ms).
   * Consumes the argument if you want matching index set on CATVidModelViewKeyboardTypeArgs (by SetMatchingIndex) to be treated.
   *
   *
   * @par EventProperties
   *    - Name: @c "KeyboardType"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidModelViewKeyboardTypeArgs
   */
	static CATSYPEvent * KeyboardType();

  /**
   * Get the @c ItemsDragged event.
   *
   * The @c ItemsDragged event is emitted when one or several items are 
   * dragged (@ref CATVidCtl#Dragged received).
   *
   * @par EventProperties
   *    - Name: @c "ItemsDragged"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidItemsDraggedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   *
   * @see CATVidCtl#Dragged
   */
  static CATSYPEvent * ItemsDragged();

  /**
   * Get the @c ItemsDropped event.
   *
   * The @c ItemsDropped event is emitted after one or several items are 
   * dropped (@ref CATVidCtl#Dropped received).
   *
   * @par EventProperties
   *    - Name: @c "ItemsDropped"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlDnDDataEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   *
   * @see CATVidCtl#Dropped
   */
  static CATSYPEvent * ItemsDropped();

  /**
   * Get the @c CanImportItems event.
   *
   * The @c CanImportItems event is emitted when one or several dragged items 
   * are hovered on the view (@ref CATVidCtl#CanImportData received), after 
   * the model processes the items. If you consume this event, the feedback
   * used for @ref CATVidCtl#CanImportData will be the feedback of the
   * argument dispatching the @ref #CanImportItems instead of the feeback
   * of the model. Use consumption to implement external drag-and-drop
   * that is not compatible with default drag-and-drop behaviour.
   *
   * @par EventProperties
   *    - Name: @c "CanImportItems"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlDnDDataEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   *
   * @see CATVidCtl#CanImportData
   */
  static CATSYPEvent * CanImportItems();

  /**
   * Get the @c ImportItems event.
   *
   * The @c ImportItems event is emitted once when one or several items are 
   * dropped (@ref CATVidCtl#ImportData received). If you consume this event, 
   * the model will not take care of dropping the data. Use consumption to 
   * implement the drop of an external object inside the view, that is not 
   * compatible with default drag-and-drop behaviour.
   *
   * @par EventProperties
   *    - Name: @c "ImportItems"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidImportItemsEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   *
   * @see CATVidCtl#ImportData
   */
  static CATSYPEvent * ImportItems();

  /**
   * Get the @c Cut event.
   *
   * The @c Cut event is emitted by an items/views control when
   * the Ctrl + X keys are pressed.
   *
   * @par EventProperties
   *    - Name: @c "Cut"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * Cut();

  /**
   * Get the @c Copy event.
   *
   * The @c Copy event is emitted by an items/views control when
   * the Ctrl + C keys are pressed.
   *
   * @par EventProperties
   *    - Name: @c "Copy"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * Copy();

  /**
   * Get the @c Paste event.
   *
   * The @c Paste event is emitted by an items/views control when
   * the Ctrl + V keys are pressed.
   *
   * @par EventProperties
   *    - Name: @c "Paste"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * Paste();

  /**
   * Get the @c SelectAll event.
   *
   * The @c SelectAll event is emitted by an items/views control when
   * the Ctrl + A keys are pressed.
   *
   * @par EventProperties
   *    - Name: @c "SelectAll"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * SelectAll();
    /**
   * Get the @c ExpansionChanged event.
   *
   * The @c ExpansionChanged event is emitted by an items/views control when
   * an item is expanded or collapsed. (for example, when the
   * user double clicks on a collapsed item displayed by the control, it is expanded and then
   * the event ExpansionChanged is emitted.)
   *
   * @par EventProperties
   *    - Name: @c "ExpansionChanged"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlExpansionChangedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * ExpansionChanged();

  /**
   * Get the @c AllExpanded event.
   *
   * The @c AllExpanded event is emitted by an items/views control when
   * the model is expand all.
   *
   * @par ExpandAll
   *    - Name: @c "AllExpanded"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * AllExpanded();

  /**
   * Get the @c AllCollapsed event.
   *
   * The @c AllCollapsed event is emitted by an items/views control when
   * the model is collapse all.
   *
   * @par EventProperties
   *    - Name: @c "AllCollapsed"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * AllCollapsed();

  /**
   * Get the @c CheckStateChanged event.
   *
   * The @c CheckStateChanged event is emitted by an items/views control when
   * an item is checked or unchecked. (for example, when the
   * user clicks the checkbox (if any) of an unchecked item displayed by the control, it is checked and then
   * the event CheckStateChanged is emitted.)
   *
   * @par EventProperties
   *    - Name: @c "CheckStateChanged"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlCheckStateChangedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * CheckStateChanged();

  /**
   * Get the @c HeaderClicked event.
   *
   * The @c HeaderClicked event is emitted by the abstractitemview when the user clicks
   * on a column header. This only makes sense for multi-column views.
   *
   * @par EventProperties
   *    - Name: @c "HeaderClicked"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlHeaderClickedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * HeaderClicked();

  /**
   * Get the @c HeaderRightClicked event.
   *
   * The @c HeaderRightClicked event is emitted by the abstractitemview when the user right clicks
   * on a column header. This only makes sense for multi-column views.
   *
   * @par EventProperties
   *    - Name: @c "HeaderRightClicked"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlHeaderRightClickedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * HeaderRightClicked();

  /**
   * Get the @c ColumnAdded event.
   *
   * The @c ColumnAdded event is emitted by the abstractitemview when one or several columns are added to
   * its columns collection. This only makes sense for multi-column views.
   *
   * @par EventProperties
   *    - Name: @c "ColumnAdded"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlColumnAdded
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * ColumnsAdded();

  /**
   * Get the @c ColumnRemoved event.
   *
   * The @c ColumnRemoved event is emitted by the abstractitemview when one or several columns are removed from
   * its columns collection. This only makes sense for multi-column views.
   *
   * @par EventProperties
   *    - Name: @c "ColumnRemoved"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlColumnRemoved
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * ColumnsRemoved();

  /**
   * Get the @c EndColumnResized event.
   *
   * The @c EndColumnResized event is emitted by the abstractitemview when a column of the 
   * columns collection has just been resized. This only makes sense for multi-column views.
   *
   * @par EventProperties
   *    - Name: @c "EndColumnResized"
   *    - Type of propagation: @c NoPropagation
   *    - Type of argument: @ref CATVidMdlEndColumnResizedEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on the returned
   * pointer.
   */
  static CATSYPEvent * EndColumnResized();

  void HandleSelectionFeedback(CATBaseUnknown * i_pSender, CATVidMdlSelectionChangedEventArgs * i_pArgs);

  /**
   * Retrieve the introspectable data item associated to the view that contains
   * the given i_pWidgetElement widget.
   *
   * @param i_pWidgetElement the widget element for which you want to get the
   * introspectable data item associated.
   *
   * @return the introspectable data item associated if found, otherwise
   * NULL_var.
   */
  CATISYPIntrospectable_var RetrieveDataItemFromViewElement(CATVidWidget * i_pWidgetElement);


  /**
  * Retrieve the introspectable header data associated to the column header view that contains
  * the given i_pHeaderWidgetElement widget.
  *
  * @param i_pHeaderWidgetElement the header widget element for which you want to get the
  * introspectable header data associated.
  *
  * @param o_columnId the ID of the column in which i_pHeaderWidgetElement is.
  *
  * @param o_columnHeaderIndex the index of colum header.
  *
  * @return the introspectable header data associated if found, otherwise
  * NULL_var.
  */
  CATISYPIntrospectable_var RetrieveHeaderDataFromViewElement(CATVidWidget * i_pHeaderWidgetElement, CATUnicodeString & o_columnId, int & o_columnHeaderIndex);

  /*
  * Deprecated...better use RetrieveIndexFromViewElement(CATVidWidget * i_pWidgetElement, CATUnicodeString & o_columnId)
  */
  CATVidMdlIndex RetrieveIndexFromViewElement(CATVidWidget * i_pWidgetElement);

  /**
   * Retrieve the model index associated to the view that contains
   * the given i_pWidgetElement widget.
   *
   * @param i_pWidgetElement the widget element for which you want to get the
   * introspectable data item associated.
   *
   * @param o_columnId the ID of the column in which i_pWidgetElement is.
   *
   * @return the model index associated if found, otherwise an invalid index.
   */
  CATVidMdlIndex RetrieveIndexFromViewElement(CATVidWidget * i_pWidgetElement, CATUnicodeString & o_columnId);

  /**
   * Creates a @ref CATPixelImage from any built view element. If the 
   * model/view widget is virtualized and considered element is not currently 
   * visible in the scrollable, then the view of the element has not been built 
   * and @c NULL will be returned.
   *
   * @param i_index the index referencing the element to consider
   * 
   * @return an AddRefed @ref CATPixelImage of the element if the view of the 
   * element has been built, @c NULL else.
   */
  CATPixelImage * CreatePixelImageFromViewElement(const CATVidMdlIndex & i_index);

  /**
   * Creates a @ref CATPixelImage from a given index for whole row. If the 
   * model/view widget is virtualized and considered element is not currently 
   * visible in the scrollable, then the view of the element has not been built 
   * and @c NULL will be returned.
   *
   * @param i_index the index referencing the row to consider.
   * 
   * @return an AddRefed @ref CATPixelImage of the element if the row of the 
   * index has been built, @c NULL else.
   */
  CATPixelImage * CreatePixelImageFromWholeDisplayedRow(const CATVidMdlIndex & i_index);

  /**
   * Displays the item referenced by the given index.
   *
   * @param i_position the position (line) of the displayed area where to display the item (start at 0).
   * @param i_index the index that references the item to display.
   *
   * @return 1 if the item has been properly displayed, otherwise 0.
   */
   int DisplayItemAt(const int i_position, const CATVidMdlIndex & i_index);

  /**
   * Displays the item referenced by the given index to the nearest displayed position.
   *
   * @param i_index the index that references the item to display.
   *
   * @return 1 if the item has been properly displayed, otherwise 0.
   */
  int DisplayItem(const CATVidMdlIndex & i_index);

  /**
   * Center the item referenced by the given index.
   *
   * @param i_index the index that references the item to center.
   *
   * @return 1 if the item has been properly centered, otherwise 0.
   */
  int CenterItem(const CATVidMdlIndex & i_index);

  /**
   * Change the color of the background of the control.
   *
   * If you want that the color of your control and its content
   * be consistent with the color of the viewer, you can give the value
   * CATVidColor(0, 0, 0, 0). The background of the control will then 
   * be transparent.
   *
   * @note if you set a background color using this member function, this
   * color will be displayed on top of the BackgroundWidget of the Scrollable
   * widget. So, a non transparent color will hide any BackgroundWidget set on
   * the Scrollable Widget and a transparent color will let it visible if it is
   * set.
   *
   * i_color: the new color to apply to the background.
   */
  void SetBackgroundColor(const CATVidColor & i_color);
  /**
   * Get the current background color of the control.
   *
   * @returns the current background color of the control.
   */
  CATVidColor GetBackgroundColor() const;

  /**
   * Returns the index that references the given item.
   *
   * @param i_item the item to retrieve the index from.
   * @param i_bDynamicMode the search mode used to retrieve the index.
   *        0 = static mode : search the model and returns a consistent index.
   *        1 = dynamic mode : create a non-consistent index from scratch containing the given i_item.
   *
   * @note i_bDynamicMode is set to FALSE by default to ensure to work with consistent index.
   *        Though it is adviced to set it to TRUE when working with a dynamic model for performance issue
   *        since a non-consistent index can be used to do selection by code, and expansion by code.  
   *
   * @return the index that references the given item.
   */
  CATVidMdlIndex GetIndexFromItem(const CATBaseUnknown_var & i_item, CATBoolean i_bDynamicMode = FALSE);

	/**
   * Ask if an index has its view displayed on screen or not.   
   *
   * @return TRUE if the index is displayed on screen. FALSE otherwise.   
   */
  CATBoolean IsIndexDisplayedOnScreen(const CATVidMdlIndex & i_index, const CATUnicodeString& i_columnId);

  /**
   * Set a contextual menu provider on this control.
   *
   * A contextual menu provider lets you associate a contextual menu to the
   * items displayed by an items view control. It is responsible to fill in the
   * dedicated contextual menu when a right click is performed on an item.
   *
   * To create a contextual menu provider, you need to implement the
   * CATIVidMdlContextMenuProvider interface
   * (see @ref CATIVidMdlContextMenuProvider for a sample).
   *
   * By default, an items view control does not have a contextual menu provider
   * set.
   *
   * @param i_spContextMenuProvider the contextual menu provider to set.
   */
  void SetContextMenuProvider(const CATIVidMdlContextMenuProvider_var & i_spContextMenuProvider);

  /**
   * Get the contextual menu provider associated to this control if any.
   *
   * @return the contextual menu provider associated to this control if any
   * or NULL_var otherwise.
   */
  CATIVidMdlContextMenuProvider_var GetContextMenuProvider() const;

  /**
   * Set flag that registers the selection of items to Release event instead of Press event.
   *
   * @param i_flag 1 if selection has to be done on release, otherwise 0 (selection on press).
   */
  void SetSelectOnReleaseFlag(CATBoolean i_selectOnReleaseFlag);

  /**
   * Get flag that registers the selection of items to Release event instead of Press event.
   *
   * @return 1 if selection has to be done on release, otherwise 0 (selection on press).
   */
  CATBoolean GetSelectOnReleaseFlag() const;

  /**
   * Sets the number of visible items in the view.
   */
  void SetNbVisibleItems(int i_nbVisibleItems);

  /**
   * Returns the number of visible items in the view.
   */
  int GetNbVisibleItems() const;

  /**
   * Activate the default drag-and-drop behaviour for a given view. 
   * Drag-and-drop is not activated by default, except on 
   * @ref CATVidCtlBasicList. 
   *
   * @par 
   * Sets the default drag mode and drop mode (@ref CATVidDnD#Mode), the
   * default possible drag-and-drop effect (@ref CATVidDnD#DnDEffects) 
   * and available drop locations on an item for this view 
   * (@ref CATVidDnD#DropLocations).
   *
   * @par
   * Position event handlers for:
   * @li @ref CATVidCtl#Dragged
   * @li @ref CATVidCtl#Dropped
   * @li @ref CATVidCtl#CanImportData
   * @li @ref CATVidCtl#ImportData
   * @li @ref CATVidGP#PreDrop
   *
   * Once the default drag-and-drop is activated, the following functions can 
   * be overriden to fine-tune its behaviour:
   *
   * @li @ref #OnItemsDragged
   * @li @ref #OnItemsDropped
   * @li @ref #OnCanImportData
   * @li @ref #OnImportData
   * @li @ref #OnItemPreDrop
   *
   * See also the documentation of @ref CATIVidMdl, section Drag-and-drop.
   */
  virtual void ActivateDefaultDnD();

  /**
   * Deactivate the default drag-and-drop behaviour for a given view. Removes
   * all drag-and-drop event handlers.
   *
   * @see #ActivateDefaultDnD
   */
  virtual void DeactivateDefaultDnD();

  /**
   * @return vertical if the view items are arranged vertically
   * (eg. classic view of list), horizontal else (eg. thumbnail view of list).
   *
   * @see #GetDropLocations
   */
  CATVid::Orientation GetDropOrientation() const;
  /**
   * By default, drop locations on view items corresponds to:
   * @li @ref CATVidDnD#DropBefore upper sector of the item for a vertical 
   * view, left sector for an horizontal one.
   * @li @ref CATVidDnD#DropAfter lower sector of the item for a vertical view,
   * right sector for an horizontal one.
   * @li @ref CATVidDnD#DropOn center of the item.
   * @li @ref CATVidDnD#DropViewport determined by the model 
   * (@ref CATIVidMdl#GetViewportDropLocation).
   * 
   * The exact zones are are resized depending on which locations are allowed 
   * and the size of a given item in the view.
   * 
   * @return the drop locations allowed over a view item.
   *
   * @see CATVidDnD#DropLocations
   */
  CATVidDnD::DropLocations GetDropLocations() const;
  
  /**
   * @param the drop locations to allow over an item of the view.
   * 
   * @see #GetDropLocation
   */
  void SetDropLocations(const CATVidDnD::DropLocations & i_dropLocations);

  /**
  * Computes the drop location corresponding to the current position of the
  * mouse cursor depending on which drop locations are allowed.
  * 
  * @param i_index points towards the item currently under the mouse cursor.
  * @param i_locations authorized locations.
  * @param o_index index where the drop must happen. Often equal to 
  * @c i_index.
  * @param o_location location where the drop must happen.
  *
  * @see #GetDropLocation
  */
  void ComputeDropLocation(const CATVidMdlIndex & i_index, const CATVidDnD::DropLocations & i_locations, CATVidMdlIndex & o_index, CATVidDnD::DropLocation & o_location);

  /**
  * Callback function for @ref CATVidGP#PreDrop. Do not consume the 
  * arguments.
  *
  * @param i_pSender sender of the event.
  * @param i_pArgs arguments of the event.
  *
  * @see #ActivateDefaultDnD
  * @see CATVidGP#PreDrop
  */
  void OnPreDrop(CATBaseUnknown * i_pSender, CATVidDnDEventArgs * i_pArgs);
  /**
  * Callback function for @ref CATVidGP#EndPreDrop. Do not consume the 
  * arguments. Find which item is currently hovered and delegates the work
  * to @ref #OnItemEndPreDrop.
  *
  * @param i_pSender sender of the event.
  * @param i_pArgs arguments of the event.
  *
  * @see #ActivateDefaultDnD
  * @see CATVidGP#EndPreDrop
  * @see #OnItemEndPreDrop
  */
  void OnEndPreDrop(CATBaseUnknown * i_pSender, CATVidDnDEventArgs * i_pArgs);

  CATISYPCollection_var GetGridView();

  /**
   * Get the validator object in charge of the validation process in edition
   * mode.
   *
   * @return the validator object in charge of the validation process in
   * edition mode or NULL if there is no validator associated.
   */
  CATSYPValidator * GetValidator() const;
  /**
   * Set the validator object in charge of the validation process in
   * edition mode.
   *
   * @param the validator object in charge of the validation process in
   * edition mode.
   */
  void SetValidator(CATSYPValidator * i_pValidator);
	
 /*
	* Specify if last column is stretched when an horizontal resize occurs.(Last column is attached to list container in this case.)	
	* @param i_flag an integer specifying if last column is attached to its container (TRUE) or not (FALSE).
	* Warning, this flag is not taken in account if StretchColumnIndexAtResizeFlag is set to a value greater or equal to 0.
	* Default value of StrechLastColumnFlag is TRUE.
	*/
  void SetStrechLastColumnFlag(int i_flag);
  int GetStrechLastColumnFlag() const;

 /*
	* Specify which column is stretched when an horizontal resize of the list occurs.
	* Warning, setting this option, StrechLastColumnFlag is no more taken in account.
	* In addition, if a column is stretchable, all columns located at the right of this column will not be interactively resizable!
	* @param i_columnIndex the index of column which is stretched when horiaontally resizing the multi-column list/tree view.
	* To unset the stretch column index, you have to set -1 as value (default value).
	*/
	void SetStretchColumnIndexAtResizeFlag(int i_columnIndex);

 /*
	* Get the value of StretchColumnIndexAtResizeFlag.
	*/
  int GetStretchColumnIndexAtResizeFlag() const;

  /**
  * Make disable the column headers of columns which are not sortable.(do anything only in multi-columns mode.)
  */
  void SetDisableUnsortableHeadersFlag(CATBoolean i_disableUnsortableHeaderFlag);

  /**
  * Return the DisableUnsortableHeadersFlag flag value.
  */
  CATBoolean GetDisableUnsortableHeadersFlag() const;

  /**
  * Set the Visible state value of list column headers.
  * This only has an effect in multi-column mode.
  */
  void SetColumnHeadersVisibleFlag(CATBoolean i_VisibleFlag);
  
  /**
  * Get the Visible state value of list column headers.  
  */
  CATBoolean GetColumnHeadersVisibleFlag() const;


  void CreateColumnsFromMetaClass(const CATSYPMetaClass* i_pMetaClass);

  /**
   * CATISYPCollectionPresenterDelegation::GetDelegationObject implementation.
	 * Gets delegation object   
   * @return the object from which collection/presenter will be searched. (Instead of being searched from "this" object when this interface is not implemented).
	 */
  virtual CATISYPIntrospectable_var GetDelegationObject();

  /**
  * Set the Flag to restart keyboard navigation from first element (or last element) when continuing pressing down (or up) key
  * and being on last element (or first).
  * In Thumbnail list mode, this has an effect only for left or right key when arriving on first/last element.
  */
  void SetKeyBoardNavigationCyclicityFlag(CATBoolean i_KeyBoardNavigationCyclicityFlag);

  /**
  * Get the Flag to restart keyboard navigation when arrived on first/last element.
  */
  CATBoolean GetKeyBoardNavigationCyclicityFlag() const;

  /**
  * Set the Flag to Activate thumbnail navigation by keyboard. It only has an effect with Thumbnail ViewMode of the list.
  * Should be automatic, but App panel is broken if we activate it by default...    
  */
  void SetAllowThumbnailViewKeyboardNavigationFlag(CATBoolean i_ThumbnailKBNavFlag);

  /**
  * Get the Flag to Activate thumbnail navigation by keyboard
  */
  CATBoolean GetAllowThumbnailViewKeyboardNavigationFlag() const;

  /**
  * Set the Flag to have a unique cell (those on which user click or specified in CATVidMdlSelectionChangedEventArgs ColumnID data) selected instead of whole row.
  * It is set to FALSE by default (entire row is selected when a cell is clicked.)
  */
  void SetOneCellSelectedByRowFlag(CATBoolean i_OneCellSelectedByRowFlag);

  /**
  * Get the OneCellSelectedByRowFlag. (See explanation above.)
  */
  CATBoolean GetOneCellSelectedByRowFlag() const;

  /**
  * Set the DynamicCellsSizeFlag. (See explanation above.)
  * This flag can be used only when BOTH FOLLOWING CONDITIONS ARE FILLED :
  * 1) the represented view uses the non uniform mode (this->GetUniformItemSizes == 0)
  * 2) the represented view uses is in single column mode (this->GetViewMode() == CATVidCtlAbstractItemsView::OneColumn)
  *
  * AN ASSERTION WILL OCCURS IF BOTH ABOVE CONDITIONS ARE NOT FILLED.
  * NOTE THAT NO SUPPORT WILL BE PROVIDED IF SetDynamicCellsSizeFlag(TRUE) IS CALLED ON A uniform mode OR a MULTI-COLUMNS view.
  *
  * The main goal of this flag is to support in lists and trees the cells which can change their size dynamically.
  * For instance, it allows displaying a list of cells containing CATVidlayFlow widgets.
  * When panel containing the list is resized (and then CATVidLayFlow height and width changes), list cells dimensions are updated. 
  *
  * It is set to FALSE by default (Item size are constants once view has been represented once...Need to reset/reassign the model to update the sizes in this case.)
  */
  void SetDynamicCellsSizeFlag(CATBoolean i_DynamicCellsSizeFlag);

  /**
  * Get the DynamicCellsSizeFlag. (See explanation above.)
  */
  CATBoolean GetDynamicCellsSizeFlag() const;

  /**
   * Sets the spacing between items (rows in case of a list/tree). Default is 0.
   */
  void SetItemSpacing(int i_itemSpacing);
  /**
   * @return the spacing between items (rows in case of a list/tree).
   */ 
  int GetItemSpacing() const;

  /*
  * Set the value in pixels of unit horizontal scroll when using the CATVid::PixelPerPixel of ItemsScrollMode.
  */
  void SetHUnitScrollPixelsValue(int i_hunitScrollPixelsValue);

  /**
  * Get the the value in pixels of unit horizontal scroll when using the CATVid::PixelPerPixel of ItemsScrollMode.
  */
  int GetHUnitScrollPixelsValue()const;

  /*
  * Set the value in pixels of unit vertical scroll when using the CATVid::PixelPerPixel of ItemsScrollMode.
  */
  void SetVUnitScrollPixelsValue(int i_vunitScrollPixelsValue);

  /**
  * Get the the value in pixels of unit vertical scroll when using the CATVid::PixelPerPixel of ItemsScrollMode.
  */
  int GetVUnitScrollPixelsValue()const;

  /**
  * Set the flag allowing launching the list/tree view init event with an empty model (only usefull with multi-columns models). This allows displaying 
  * The column headers of empties model after assiging model to view.
  * Be careful to set custom columns headers model/view binding before setting the SourceModel when setting this option to 1.
  */
  void SetInitWithEmptyModel(int i_InitWithEmptyModel);
  /**
  * Get the flag allowing launching the list/tree view init event with an empty model.
  */
  int GetInitWithEmptyModel()const;

	/*
	* Use this method to lock view update. (For example during big model modifications like node adding or filtering.)
	*/
	void IncrementUpdateLockCount();

	/*
	* Use this method to unlock view update after IncrementUpdateLockCount call. A view update should be called after this method.
	*/
	void DecrementUpdateLockCount();

	/*
	* Display resizers between columns to allow resize columns by dragging. Only available for multi columns lists.
	*/
	void SetColumnsResizersFlag(CATBoolean i_columnResizerFlag);

	/*
	* Get the column resizers display status.
	*/
	CATBoolean GetColumnsResizersFlag();	

	/*
	* Get the column id of columns on which index will be researched when typing a string in keyboard (when view is focused).
	*/
	CATString GetSearchedColumnIdForKeyboardType();

	/*
	* Set the column id of columns on which indexes will be researched when typing a string in keyboard (when view is focused).
	* This only makes sense in multi-columns view.
	*/
	void SetSearchedColumnIdForKeyboardType(CATString i_searchedColumnIdForKeyboardType);

	/*
	* Set the Flag to force (TRUE) or not (FALSE) the dispatch of SelectionChanged event when selecting an item already selected.
	* Default value : FALSE.
	*/
	void SetDispatchSelectionChangedForAlreadySelected(CATBoolean i_Flag);

	/*
	* Get the flag to force the dispatch of SelectionChanged event when selecting an item already selected.
	*/
	CATBoolean GetDispatchSelectionChangedForAlreadySelected();

	/*
	* Set the Flag to display (TRUE) or not (FALSE) the editable cell feedback (triangle on top left).
	* Default value : FALSE.
	*/
	void SetDisplayEditableCellsFeedbackFlag(CATBoolean i_flag);

	/*
	* Get the flag to display (TRUE) or not (FALSE) the editable cell feedback (triangle on top left).
	*/
	CATBoolean GetDisplayEditableCellsFeedbackFlag();

	/*
	* Provide the cell edition provider implementation.
	*/
	void SetCellEditionProvider(CATIVidModelViewCellEditionProvider_var & i_spCellEditionProvider);

	/*
	* Get the cell edition provider implementation.
	*/
	CATIVidModelViewCellEditionProvider_var GetCellEditionProvider();

	/**
	* Returns the height of a row. This information is only relevant
	* when all the displayed items have the same size (UniformItemSizes = 1). It includes inter row spacing. If UniformItemSizes = 0, the returned value is 0.
	*/
  float GetHeightOfOneRow() const;

  //Public method to refresh the view after model modifications (for example with IncrementUpdateLockCount called)
  void UpdateView();

protected:
  virtual void Update();
  virtual void UpdateComputedMinimumDimension();
  /**
   * Default constructor
   */
  CATVidCtlAbstractItemsView();
  CATVidCtlAbstractItemsView (CreateLetterFunc i_pCreateLetterFunc);
  /**
   * Destructor
   */
  virtual ~CATVidCtlAbstractItemsView ();

  virtual int EnsureMinViewportOf(CATMathPoint2Df & o_sizeToFit);
     
  /**
   * Create all event handlers necessary for drag-and-drop.
   *
   * @see #ActivateDefaultDnD
   */
  void AddDnDEventHandlers();
  
  /**
   * Remove all event handlers created for drag-and-drop.
   *
   * @see DeactivateDefaultDnD
   */
  void RemoveDnDEventHandlers();

  /**
   * Called once at the reception of @ref CATVidCtl#Dragged if default 
   * drag-and-drop is activated. Consumes the argument if the drag succeeds.
   *
   * @param i_indexes indexes of the items dragged
   * @param i_pArgs arguments of the @ref CATVidCtl#Dragged event received
   * 
   * @see #ActivateDefaultDnD
   * @see CATVidCtl#Dragged
   */
  virtual void OnItemsDragged(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVidDraggedEventArgs * i_pArgs);

	/**
	* Called once at the reception of @ref CATVidGP#PreDrop (hovering potentiel target with dragging some objects) if default 
	* drag-and-drop is activated. 
	* You can overload this method to customize default drop feedback image.
	* example of code :
	* CATVidData * pData = i_pArgs->GetSourceData();	
	*	CATVidDnDData * pDnDData = CAT_DYNAMIC_CAST(CATVidDnDData, pData);
	* 
	*	if(pDnDData)
	*	{							  
	*			CATString MyFilePath = "...";	
	*			CATPixelImage * pNewCursorImg = CATPixelImage::CreateFromFile(MyFilePath);
	*			CHECK_POINTER_RET(pNewCursorImg);	
  *
	*			pDnDData->SetCursorImage(pNewCursorImg);
	*		}
	*	}
	*
	* @param canDrop the flagged indicating if drop is allowed on current target.
	* @param i_TargetIndex The index target of PreDrop action.
	* @param i_pArgs arguments of the @ref CATVidCtlAbstractItemsView#OnPreDrop event received
	* 
	* @see #ActivateDefaultDnD
	* @see CATVidCtl#Dragged
	*/
	virtual void OnItemPreDrop(CATBoolean canDrop, CATVidMdlIndex & i_TargetIndex, CATVidDnDEventArgs * i_pArgs);

	/**
	* Called once at the reception of @ref CATVidGP#EndPreDrop (leaving potentiel target with dragging some objects) if default 
	* drag-and-drop is activated. 
	* You can overload this method in the same time than OnItemPreDrop to customize default drop feedback image.
  *
	* @param canDrop the flagged indicating if drop is allowed on current target.
	* @param i_TargetIndex The index target of PreDrop action.
	* @param i_pArgs arguments of the @ref CATVidCtlAbstractItemsView#OnEndPreDrop event received
	* 
	* @see #ActivateDefaultDnD
	* @see CATVidCtl#Dragged
	*/
	virtual void OnItemEndPreDrop(CATVidMdlIndex & i_TargetIndex, CATVidDnDEventArgs * i_pArgs);

  /**
   * Called once at the reception of @ref CATVidCtl#Dropped if default 
   * drag-and-drop is activated. Consumes the argument.
   *
   * @param i_indexes indexes of the items dropped
   * @param i_pArgs arguments of the @ref CATVidCtl#Dropped event received
   * 
   * @see #ActivateDefaultDnD
   * @see CATVidCtl#Dropped
   */
  virtual void OnItemsDropped(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVidDroppedEventArgs * i_pArgs);

  /**
   * Called while hovering view items with dragged items.
   *
   * @return TRUE (default value) if predrop feedback need to be displayed, FALSE otherwise.
   */
  virtual CATBoolean DisplayPreDropFeedback();

  /**
   * Callback function for @ref CATVidCtl#CanImportData. Consumes 
   * the argument. Can import a data composed of a property named @c "Icon" of 
   * type @c CATPixelImage and / or a property named @c "Text" of type 
   * @c CATUnicodeString from internal drag.
   *
   * @param i_pSender sender of the event.
   * @param i_pArgs arguments of the event.
   *
   * @see #ActivateDefaultDnD
   * @see CATVidCtl#CanImportData
   */
  void OnCanImportData(CATBaseUnknown * i_pSender, CATVidDnDDataEventArgs * i_pArgs);

  /**
   * Callback function for @ref CATVidCtl#ImportData. Consumes the
   * argument. Use data of type icon and / or text from internal 
   * drag to add an item of the tree at the current pointer position.
   *
   * @param i_pSender sender of the event.
   * @param i_pArgs arguments of the event.
   *
   * @see #ActivateDefaultDnD
   * @see CATVidCtl#OnImportData
   */
  void OnImportData(CATBaseUnknown * i_pSender, CATVidDnDDataEventArgs * i_pArgs);

  /**
   * @param i_dim the minimum dimension of the drag-and-drop insertion 
   * indicator.
   */
  void SetDnDIndicatorMinimumDimension(const CATMathPoint2Df & i_dim);

  /**
   * Minimum dimension used to layout the drag-and-drop insert indicator in the
   * default item view.
   *
   * @return the minimum dimension of the drag-and-drop insertion indicator.
   */
  CATMathPoint2Df GetDnDIndicatorMinimumDimension() const;

private:

  float ComputeScrollStep() const;
    void HandleHValueChanged(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);
    void HandleVValueChanged(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);
    // Copy constructor and assignement operator are disabled
    CATVidCtlAbstractItemsView(CATVidCtlAbstractItemsView &);
    CATVidCtlAbstractItemsView &operator=(CATVidCtlAbstractItemsView &);

    /**
   * Callback function for @ref CATVidCtl#Dragged. Consumes the 
   * arguments. Find which items have been dragged and delegates the work to
   * @ref #OnItemsDragged.
   *
   * @param i_pSender sender of the event.
   * @param i_pArgs arguments of the event.
   *
   * @see CATVidCtl#Dragged
   * @see #ActivateDefaultDnD
   * @see #OnItemsDragged
   */
    void OnDragged(CATBaseUnknown *i_pSender, CATVidDraggedEventArgs *i_pArgs);

    /**
   * Callback function for @ref CATVidCtl#Dropped. Consumes the 
   * arguments. Find which items have been dropped and delegates the work to
   * @ref #OnItemsDropped.
   *
   * @param i_pSender sender of the event.
   * @param i_pArgs arguments of the event.
   *
   * @see #ActivateDefaultDnD
   * @see CATVidCtl#Dropped
   * @see #OnItemsDropped
   */
    void OnDropped(CATBaseUnknown *i_pSender, CATVidDroppedEventArgs *i_pArgs);

    /** 
   * Handler for @ref CATVidGP#MouseWheelm event
   * called when a mouse wheel is done over a widet, consumes the event.
   *
   * This handler must only be registered on a CATVidLayScrollable.
   */ 
  void HandleMouseWheel(CATBaseUnknown *i_pSender, CATVidMouseWheelEventArgs *i_pArgs);
private:

  /** The model displayed through the items view component */
  CATIVidMdl_var _spModel;

  /** Flag that prevents adding notification more than one time */
  int _notificationAdded;

  /**
   * Flag that prevents updating the displayed items more than one time
   * for a scroll operation
   */
  int _updateScrollbar;

  /** Event handler for @ref CATVidCtl#Dragged. */
  CATSYPEventHandler * _pOnDraggedHandler;
  /** Event handler for @ref CATVidCtl#Dropped. */
  CATSYPEventHandler * _pOnDroppedHandler;
  /** Event handler for @ref CATVidCtl#ImportData. */
  CATSYPEventHandler * _pOnImportDataHandler;
  /** Event handler for @ref CATVidCtl#CanImportData. */
  CATSYPEventHandler * _pOnCanImportDataHandler;
  /** Event handler for @ref CATVidGP#PreDrop. */
  CATSYPEventHandler * _pOnPreDropAndBeginPreDropHandler;
  /** Event handler for @ref CATVidGP#PreDrop. */
  CATSYPEventHandler * _pOnEndPreDropHandler;

  /**
   * Flag that indicates whether the scrolling must be performed item per item
   * or in a fluid way.
   * 0 indicates a scrolling in a fluid way.
   * 1 indicates a scrolling item per item.
   */
  CATVid::ItemsScrollMode _itemsScrollMode;

  /**
   * The current selection mode
   */
  CATVid::SelectionMode _selectionMode;
  
  /** 
   * Places where a drop can happen (on other item or inserted between items). 
   */
  CATVidDnD::DropLocations _dropLocations;

  /** @see #GetDnDIndicatorMinimumDimension */
  CATMathPoint2Df _dropIndicatorMinDim;

  int _needUpdate;

  /**
   * ViewMode indicates how the tree view renders its child items.
   * It could be OneColumn, or Multi.
   */
  ViewMode _viewMode;

    /**
   * Flag that indicates whether the root has to be displayed or not.
   */
  unsigned int _rootDecorationFlag;

  int _itemSpacing;

	CATIVidModelViewCellEditionProvider_var _spCellEditionProvider;

  friend class l_CATVidCtlViewRepresentation;
  friend class CATVidCtlThumbnailsView;
};
CATSYP_DECLARE_ENUMFACTORY (ExportedByVisuDialog, CATVidCtlAbstractItemsView__ViewMode);
CATSYP_DECLARE_ENUMFACTORY (ExportedByVisuDialog, CATVidCtlAbstractItemsView__EditionMode);

//enum EditionMode{NoEdition=0, EditInPlace, EditOnClick, EditOnDoubleClick};

#endif
