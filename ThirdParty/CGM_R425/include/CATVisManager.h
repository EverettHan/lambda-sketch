#ifndef CATVisuManager_h
#define CATVisuManager_h

// COPYRIGHT DASSAULT SYSTEMES 1999

/**
 * @CAA2Level L1
 * @CAA2Usage U1
 */

#include "SceneGraphManager.h"
#include "CATBaseUnknown.h"
#include "CATShowMode.h"
#include "CATPickPath.h"
#include "CATGenerativeAttribute.h"
#include "DefineCst.h"
#include "CATSetOfObject.h"
#include "CATViewpoint.h"
//#include "CATVisCrossHighlight.h"


class l_CATVisManager;
class CATModelIdentificator;
class CATEventSubscriber;
class CATGlobalXSO;
class CATLayerFilter;
class CATSO;
class CATXSO;
class CATViewer;
class CATPathElement;
class CATNotification;
class CATCommand;
class CATModelNotification;
class CATSelector;
class CATVisFilter;

/**
 *  Class enabling the MVC.
 *  <br><b>Role</b>:
 *  This object is the masterpiece of the MVC architecture and ensures
 *  that communication between the model and the vues are made possible.
 *
 */
class ExportedBySceneGraphManager CATVisManager : public CATBaseUnknown
{
  /** @nodoc */
    CATDeclareClass;


public:

  /**
  * @nodoc 
  * Constructs the class.
  */
  CATVisManager ();

  
  ~CATVisManager ();
    

  /**
   *  Creates a new cell of visualization. 
   *  <br><b>Role</b>:That means one wants to visualize a root object inside a given viewpoint using a given list 
   * of visualization interfaces. 
   * Internally calls BuildRep method to create the representation. Use DetachFrom method to destroy the representation.
   *
   *  @param iTreeRoot
   *  Path of objects which represents the part of a tree one wants to visualiaze. The last object of the path is the root object to visualize.
   *  The input path is not necessarily made up of one object (the root object to visualize): it may have been generated by an  operation
   * of  extraction from a tree. And these informations can be useful for the visualization of the root object.
   * @param i_pViewObject
   *    Viewpoint where the model must be visualized.
   * @param iVisuList
   *   List of visualization interfaces one wants to use to visualize obejcts. The list must be sorted by higher priority. The first interface
   * has the highest priority.
   * @param iSelectorFather
   *    The @href CATCommand which is the father of the @href CATSelector created when a new cell is created.
   * Default value is NULL.
   * @param iFurtive
   *   Says the graphical representations of the cell are to be drawn in furtive mode.
   * <br><b> Legal values</b>:
   * <li><tt>0</tt> for normal mode (it's the default value)</li>
   * <li><tt>1</tt> for furtive mode</li>.
   * @param iLocalMatrix
   * Says one wants to take into account the positionning matrices hold in the objects enclosed in the input path of objects iTreeRoot.
   * <br><b> Legal values</b>:
   * <li><tt>0</tt> positionning matrices are not taken into account (it's the default value)</li>
   * <li><tt>1</tt> otherwise</li>.
   * @param iLocalGraphicAttributs
   * Says one wants to inherit the graphical properties (e.g. color) hold by objects enclosed in the input path of objects iTreeRoot.
   *<br><b> Legal values</b>:
   * <li><tt>0</tt> there is no inheritance of the graphical properties (it's the default value)</li>
   * <li><tt>1</tt> otherwise</li>.
   * @param iCrossHighlight
   * To be used internally with embedded cells.
   * @param iEmbedded
   * To describe an embedded cell. To be used internally.
   * @return
   *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
   */
  HRESULT AttachTo ( CATPathElement* iTreeRoot,
                                   CATBaseUnknown* i_pViewObject,
                                   list<IID>&	iVisuList,
                                   CATCommand* iSelectorFather = NULL,
                                   int iFurtive=0,
                                   int iLocalMatrix=0,
                                   int iLocalGraphicAttributs=0,
                                   int iCrossHighlight = 0,
                                   int iEmbedded = 0);


   /**
   *   Creates a new cell of visualization. 
   * <br><b>Role</b>:That means one wants to visualize a given graphical representation inside a given viewpoint.
   * Internally calls BuildRep method to create the representation. Use DetachFrom method to destroy the representation.
   * @param iRep
   *    Graphical Representation one wants to visualize.
    * @param i_pViewObject
   *   Viewpoint where the model must be visualized.
   * @param iSelectorFather
   *    The @href CATCommand which is the father of the @href CATSelector created when a new cell is created.
   * Default value is NULL.
   * @param iFurtive
   *   Says the graphical representations of the cell are to be drawn in furtive mode.
   * <br><b> Legal values</b>:
   * <li><tt>0</tt> for normal mode (it's the default value)</li>
   * <li><tt>1</tt> for furtive mode</li>.
   * @param iLocalMatrix
   * Says one wants to take into account the positionning matrices hold in the objects enclosed in the input path of objects iTreeRoot.
   * <br><b> Legal values</b>:
   * <li><tt>0</tt> positionning matrices are not taken into account (it's the default value)</li>
   * <li><tt>1</tt> otherwise</li>.
   * @param iLocalGraphicAttributs
   * Says one wants to inherit the graphical properties (e.g. color) hold by objects enclosed in the input path of objects iTreeRoot.
   *<br><b> Legal values</b>:
   * <li><tt>0</tt> there is no inheritance of the graphical properties (it's the default value)</li>
   * <li><tt>1</tt> otherwise</li>.
   * @return
   *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT AttachTo ( CATRep* iRep,
                    CATBaseUnknown* i_pViewObject,
                    CATCommand* iSelectorFather = NULL,
                    int iFurtive = 0,
                    int iLocalMatrix = 0,
                    int iLocalGraphicAttributs = 0 );

  /**
  * Detaches all tuples  ( path / viewpoint / list of  visualization interfaces ) corresponding to a given viewpoint.
  *
  * @param i_pViewObject
  *   Viewpoint you want to remove.
  * @param iDrawToDo
  *   Takes two values : 
  *   1 : Default value,the viewer is refreshed at the end of method DetachFrom
  *   0 : the viewer is not refreshed at the end of method DetachFrom.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DetachFrom (	CATBaseUnknown* i_pViewObject , int iDrawToDo=1 );
                    
                    
  /**
  * Detaches all tuples  ( path / viewpoint / list of  visualization interfaces ) corresponding to a given path and a given viewpoint.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iDrawToDo
  *   Takes two values : 
  *   1 : Default value,the viewer is refreshed at the end of method DetachFrom
  *   0 : the viewer is not refreshed at the end of method DetachFrom.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DetachFrom (	CATPathElement* iTreeRoot,
				              CATBaseUnknown* i_pViewObject = NULL , int iDrawToDo=1  );


  /**
  * Detaches a tuple ( path / viewpoint / list of  visualization interfaces ).
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *   List of 
  * @param iDrawToDo
  *   Takes two values : 
  *   1 : Default value,the viewer is refreshed at the end of method DetachFrom
  *   0 : the viewer is not refreshed at the end of method DetachFrom.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DetachFrom (	CATPathElement* 	iTreeRoot,
				              CATBaseUnknown* i_pViewObject,
                      list<IID>&	iVisuList , int iDrawToDo=1 );



  /**
   * Disconnects all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given viewpoint.
   *
   * @param i_pViewObject
   * Viewpoint one wants to disconnect.
   * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> if no cells have been found</li>.
   */
  HRESULT DisconnectFrom ( CATBaseUnknown* i_pViewObject );
    
  /**
  * Disconnects all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given path
  * and a given viewpoint.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *   If null, all cells corresponding to tuples (path / viewpoint/ list of
  * visualization interfaces) having iTreeRoot as path of objects are considered.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT DisconnectFrom ( CATPathElement* iTreeRoot,
				                 CATBaseUnknown* i_pViewObject = NULL );

/**
  * Disconnects all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given path
  * and a given viewpoint.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *  list of  visualization interfaces.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT DisconnectFrom ( CATPathElement* iTreeRoot,
                           CATBaseUnknown* i_pViewObject,
                           list<IID>& iVisuList );



  /**
   * Reconnects to all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given viewpoint.
   *
   * @param i_pViewObject
   * Viewpoint one wants to reconnect.
   * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> if no cells have been found</li>.
   */
  HRESULT ReconnectTo ( CATBaseUnknown* i_pViewObject );

  
  /**
  * Reconnects to all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given path
  * and a given viewpoint.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *   If null, all cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having iTreeRoot as path of objects are considered.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT ReconnectTo ( CATPathElement* iTreeRoot,
                        CATBaseUnknown* i_pViewObject = NULL );

  /**
  * Reconnects all the cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having a given path
  * and a given viewpoint.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *  list of  visualization interfaces.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT ReconnectTo ( CATPathElement* iTreeRoot,
                        CATBaseUnknown* i_pViewObject,
                        list<IID>& iVisuList );



  /**
  * Returns whether or not a cell is connected .
  * <br><b> Legal values</b>:
   * <li><tt>1</tt> if the corresponding cells are connected</li>
   * <li><tt>0</tt>if at least one corresponding cell is not connected</li>.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  */
  int IsConnectedTo ( CATPathElement* iTreeRoot,
				              CATBaseUnknown* i_pViewObject );

   /**
  * Disconnects the visualization of a tree of reps without destroying it.
  *
  * Event sending is also disconnected.
  *
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT DisconnectVisuFrom (CATBaseUnknown* i_pViewObject);

  /**
  * Disconnects the visualization of a tree of reps without destroying it.
  *
  * Event sending is also disconnected.
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *   If null, all cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having iTreeRoot as path of objects are considered.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT DisconnectVisuFrom ( CATPathElement* iTreeRoot,
                        CATBaseUnknown* i_pViewObject = NULL );



  /**
  * Disconnects the visualization of a tree of reps without destroying it.
  *
  * Event sending is also disconnected.
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *  list of  visualization interfaces.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT DisconnectVisuFrom ( CATPathElement* iTreeRoot,
                           CATBaseUnknown* i_pViewObject,
                           list<IID>& iVisuList );

 /**
  * Reconnects the visualization of a tree without rebuilding it. This method is used together with the
  * @href #DisconnectVisuFrom method.
  * Event sending is reconnected.
  *
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT ReconnectVisuTo (CATBaseUnknown* i_pViewObject);

 /**
  * Reconnects the visualization of a tree without rebuilding it. This method is used together with the
  * @href #DisconnectVisuFrom method.
  * Event sending is reconnected.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  *   If null, all cells corresponding to tuples (path / viewpoint/ list of visualization interfaces) having iTreeRoot as path of objects are considered.
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT ReconnectVisuTo ( CATPathElement* iTreeRoot,
                        CATBaseUnknown* i_pViewObject = NULL );
 /**
  * Reconnects the visualization of a tree without rebuilding it. This method is used together with the
  * @href #DisconnectVisuFrom method.
  * Event sending is reconnected.
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *  list of  visualization interfaces.
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt>  if no cells have been found</li>.
  */
  HRESULT ReconnectVisuTo ( CATPathElement* iTreeRoot,
                        CATBaseUnknown* i_pViewObject,
                        list<IID>& iVisuList );


 /**
  * Sets Selector on the tuple ( path / viewpoint / list of  visualization interfaces ).
  *
  * @param iSelector
  *   Selector you want to set.CATSelector cannot be managed through AddRef / Release, so caller should not destroy if 
  *   method succeeds.
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *   List of 
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SetSelector (	CATSelector *iSelector, CATPathElement* 	iTreeRoot, CATBaseUnknown* i_pViewObject,
						      list<IID>&	iVisuList );



  /**
  * Requests the processing of all the events hold by the VisuManager that have not been processed yet.
  * Note that if the root representation is AddRef'ed explicitly, then CATVisManager will not modify/update/delete the underlying structure.
  *
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT Commit ();

 /**
  * Requests the processing of the input event.
  * Note that if the root representation is AddRef'ed explicitly, then CATVisManager will not modify/update/delete the underlying structure.
  * <br><b>Role</b>: 
  * @param iNotif
  *  Event to process
  * @param i_pViewObject
  *   Viewpoint into which one wants to process the input event. More precisely, the input is processed in all the cells having i_pViewObject as their viewpoint. If no viewpoint is given in input, the event is processed in all the cells.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
   */
  HRESULT Commit (CATModelNotification* iNotif, CATBaseUnknown* i_pViewObject = NULL);  



  /**
  * @nodoc
  * WARNING : CATShowMode is not exposed.
  * Gives the mode show or no show of a given viewpoint.
  *
  * @param i_pViewObject
  *   Viewpoint where this part of the model is visualized.
  * @return
  *   The show mode.
  */
  CATShowMode GiveShowMode ( CATBaseUnknown* i_pViewObject );



  /**
  * @nodoc
  * WARNING : CATShowMode is not exposed.
  * Sets a given viewpoint in show or no show mode.
  *
  * @param i_pViewObject
  *   Viewpoint where this part of the model is visualized.
  * @param iShowMode
  *   Mode of visualization : Show or No Show
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SetShowMode ( CATBaseUnknown* i_pViewObject,
                       CATShowMode&	iShowMode );



  /**
  * @nodoc
  * Returns the layer filter of a given viewpoint.
  *
  * @param i_pViewObject
  *   Viewpoint in which you want to know the layer filter.
  * @return
  *   The layer filter of this viewpoint.
  */
  CATLayerFilter* GiveLayerFilter ( CATBaseUnknown* i_pViewObject );



  /**
  * @nodoc
  * Sets a layer filter on a viewpoint.
  *
  * @param i_pViewObject
  *   Viewpoint on which you want to apply a layer filter.
  * @param iFilter
  *   Layer filter to apply
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SetLayerFilter ( CATBaseUnknown* i_pViewObject,
				                  CATLayerFilter*	iFilter );




  /**
  * Gives the model path equivalent to the rep path.
  *
  * @param iRepPath
  *   the model path.
  * @param oPathElement
  *   the rep path.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DecodeGraphic ( const CATPickPath &iRepPath,
                         CATPathElement &oPathElement );
  // A enlever de public
  /** @nodoc */
  HRESULT DecodeNextGraphicElement(const CATPickPath &iPickPath,CATPathElement &oPathElt);


  /**
  * Gives the model path equivalent to the pick path.
  *
  * @param iRepPath
  *   the rep path.
  * @param oPathElement
  *   the model path.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT GeneratePathElementFromPickPath (const CATPickPath &iPickPath,CATPathElement &oPathElt,int SizeForOptim = 0);


  /**
  * Gives the rep path equivalent to the model path.
  *
  * @param iPathElement
  *   the model path.
  * @param oRepPath
  *   the rep path
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT GenerateRepPathFromPathElement (CATPathElement &iPathElt,
                                          CATBaseUnknown*  i_pViewObject,
                                          CATRepPath& oRepPath,
                                          CATInteractiveContext iContext = CATNoneContext, 
                                          CATGenerativeAttribute iAttribute = pathManipulatorOperation,
                                          int regenerate=0);


  /**
  * Gives the rep path equivalent to the model path.
  *
  * @param iRep
  *   rep you work on
  * @param iPathElement
  *   the rep path.
  * @param oRepPath
  *   the model path.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT BuildRepPath ( CATRep &iRep,
                        const CATPathElement &iPathElement,
		                    CATRepPath &oRepPath );

  /**
  * Gives the rep path equivalent to the model path when highlight is concerned.
  * 
  * @param iRep
  *   rep you work on
  * @param iPathElement
  *   the rep path.
  * @param oRepPath
  *   the model path.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT BuildHighlightLook ( CATRep &iRep,
                              const CATPathElement	&iPathElement,
		                          CATRepPath &oRepPath );
  

  /**
  * Finds the next representation from a model path
  * ( this is used for BuildHighlightLook an BuildRepPath ).
  *  
  * @param iPathElement.
  *   the path element
  * @param oValid
  *   returned HRESULT (1=OK, 0=KO)
  * @return
  *   the next rep we want to add the the reppath 
  */
  CATRep * FindNextRep ( const CATPathElement &iPathElement, int &oValid );



  /**
  * Tells to VisuManager that we want to connect a Hso to a peculiar 
  * viewpoint.
  *
  * @param iXso
  *   The Hso to connect.
  * @param i_pViewObject
  *   The viewpoint in which the model must be connected for highlight.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT AttachHSOTo ( CATXSO *iXso	,CATBaseUnknown* i_pViewObject);

  /**
  * Tells to VisuManager that we want to connect a Pso to a peculiar 
  * viewpoint.
  *
  * @param iXso
  *   The Pso to connect.
  * @param i_pViewObject
  *   The viewpoint in which the model must be connected for highlight.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT AttachPSOTo ( CATXSO *iXso	,CATBaseUnknown* i_pViewObject);

  /**
  * Tells to VisuManager that we want to detach the Hso from a peculiar 
  * viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint from which we want to remove HSO .
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DetachHSOFrom ( CATBaseUnknown* i_pViewObject);
  
  /**
  * Tells to VisuManager that we want to detach the Pso from a peculiar 
  * viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint from which we want to remove PSO .
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DetachPSOFrom ( CATBaseUnknown* i_pViewObject);
 

  /**
  * Enables a model entry to be highligthed in a given viewpoint.
  * If no viewpoint is given all viewpoints are taken.
  *
  * @param iId
  *   The model Id to connect.
  * @param i_pViewObject
  *   The viewpoint in which the model must be connected for highlight.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT ReconnectHSOTo (	const CATModelIdentificator	iId,
				                CATBaseUnknown* i_pViewObject = NULL );


  /**
  * Enables the highligth in a given viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint which is enable to highlight.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT ReconnectHSOTo (	CATBaseUnknown* i_pViewObject );



  /**
  * Disables the highligth for a model.
  *
  * @param iId
  *   The model Id to connect.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DisconnectHSOFrom (	const CATModelIdentificator	iId );


  /**
  * Disables the highligth of a viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint which is disable to highlight.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DisconnectHSOFrom (	CATBaseUnknown* i_pViewObject );


  /**
  * Empties manually the HSO.
  *
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT EmptyHSO ();



  /**
  * Enables a model entry to be pre-highligthed in a given viewpoint.
  * If no viewpoint is given all viewpoints are taken.
  *
  * @param iId
  *   The model Id to connect.
  * @param i_pViewObject
  *   The viewpoint in which the model must be connected for pre-highlight.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT ReconnectPSOTo (	const CATModelIdentificator	iId,
				                CATBaseUnknown* i_pViewObject = NULL );


  /**
  * Enablea the pre-highligth in a given viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint which is enable to pre-highlight.
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT ReconnectPSOTo (	CATBaseUnknown* i_pViewObject );


  /**
  * Disablea the pre-highligth for a model.
  *
  * @param iId
  *   The model Id to connect.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DisconnectPSOFrom (	const CATModelIdentificator	iId );


  /**
  * Disablea the pre-highligth of a viewpoint.
  *
  * @param i_pViewObject
  *   The viewpoint which is disable to pre-highlight.
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DisconnectPSOFrom (	CATBaseUnknown* i_pViewObject );


  /**
  * Empties manually the PSO.
  *
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT EmptyPSO ();

 

  /**
  * Forces the given viewpoint to be redrawn.
  *
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT Draw ( CATBaseUnknown* i_pViewObject );


  /**
  * Sets in furtive mode or not a given model entry for a viewpoint.
  * If no viewpoint is given all viewpoints are taken.
  *
  * @return
  *   A HRESULT given the result of the function.
  */
  HRESULT SetFurtiveMode	(	const CATModelIdentificator	iId,
                          CATBaseUnknown* i_pViewObject = NULL,
				                  int iFurtive = 0 );


  /**
  * Forces a model to work only with its local matrix and to
  * not taking into account its fathers' matrix.
  *
 * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SetLocalMatrix	(	const CATModelIdentificator	iId,
                          CATBaseUnknown* i_pViewObject = NULL,
				                  int iLocalMatrix = 0 );


  /**
  * Forces a model to work only with its locals graphic attributs
  * not taking into account its fathers'.
  *
  * @return
  *  an HRESULT value.
   * <br><b> Legal values</b>:
   * <li><tt>S_OK</tt> if the operation succeeds </li>
   * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SetLocalGraphicAttributs
                        (	const CATModelIdentificator	iId,
                          CATBaseUnknown* i_pViewObject = NULL,
				                  int iLocalGraphicAttributs = 0 );



  /**
  * (Pre)Highlights  pathes of objects hold in the input notification.
  *
  * @param notif
  *   notification holding the pathes of elem to highlight
  *
  * @param context
  *   defines the type of interaction (CATPreselContext/CATSelContext)
  */
  void SomethingHappensInSO(CATNotification *notif, CATInteractiveContext context);

  /**
  * Creates the graphical representation of one object.
  * <br><b>Role</b>:
  * Create the graphical representation of the object referred by the input identifier. To achieve this goal the current
  * cell has to be set properly. That means that you need to be within a visualization transaction, that is this method should be called
  * either from a @href CATIVisu#BuildRep method of one visualization extension, or from the @href CATIVisu#ModifyRep method of 
  * one visualization extension. Otherwise this method will return NULL.
  *
  * @param iId
  *   Identifier of the model you want to get the graphical representation.
  *
  * @return
  *   The graphical representation of the model.
  */
  CATRep* BuildRep ( const CATModelIdentificator & iId );



  /**
  * Removes the link between the extension of visualization of
  * a model and this model.
  *
  * @param id
  *   ID of the model you want the representation.
  *
  * @return
  *   The result of the call.
  */
  HRESULT UnreferenceRep ( CATModelIdentificator & id ); 


  /**
  * Duplicates an existing attachment.
  * <b>Role</b>: 
  *  Create new attachments to the visu manager from an existing viewpoint
  *  to a new viewpoint.
  *
  * @param i_pViewObjectSource
  *   The viewpoint from which you want to dupplicate attachments
  *
  * @param i_pViewObjectTarget
  *   The new viewpoint you want to attach to the visu manager like
  *   the viewpoint source.
  *
  * @return
  *   The result of the call.
  */
  HRESULT DuplicateViewpoint (CATBaseUnknown*  i_pViewObjectSource,
                              CATBaseUnknown*  i_pViewObjectTarget);

 /**
  * @nodoc 
  * Informs the VisManager that the input viewpoint is going to switch into the noshow space.
  * <b>Role</b>: 
  *  Builds the graphical representations of noshow objects in order to be visualized.
  *  
  * @param iVpt
  *   viewpoint which is about to switch to the noshow space.
  */
  HRESULT SwapToNoshowSpace(CATBaseUnknown *iVpt);


  /**
  * Gets The VisuManager.
  *
  * @return
  *   The VisuManager
  */
  static CATVisManager *GetVisManager (void);


  /**
  * @nodoc
  * This method is used in a particular context, you should not 
  * use it ot get the current viewer.
  * You should use method @href CATFrmWindow#GetViewer.
  * 
  * @return
  *   The active viewer 
  */
  CATViewer *GetCurrentViewer (void);


  /**
  * @nodoc
  *
  * Requests the processing of the input event.
  * <br><b>Role</b>: 
  * @param iNotif
  *  Event to process
  * @param i_pViewObject
  *   Viewpoint into which one wants to process the input event. More precisely, the input is processed in all the cells having i_pViewObject as their viewpoint. If no viewpoint is given in input, the event is processed in all the cells.
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT SearchAndCommit (CATModelNotification &iNotif, CATSetOfObject &iSet, CATBaseUnknown* i_pViewObject = NULL);  

  /**
  * @nodoc
  *
  * @param iTreeRoot
  *   Path of objects.
  * @param i_pViewObject
  *   Viewpoint in which objects are visualized.
  * @param iVisuList
  *   List of 
  * @return
  *  an HRESULT value.
  * <br><b> Legal values</b>:
  * <li><tt>S_OK</tt> if the operation succeeds </li>
  * <li><tt>E_FAIL</tt> otherwise</li>.
  */
  HRESULT DestroyRep ( CATRep& iRep, 
                       CATPathElement* iTreeRoot,
                       CATBaseUnknown*    i_pViewObject,
                       list<IID>&      iVisuList );

  /** @nodoc */
  void SetPSOFaceZ(const int );

  /** @nodoc */
  HRESULT AddFilter(CATVisFilter* ipFilter, CATPathElement* ipTreeRoot, CATBaseUnknown*  ipViewpoint);

  /** @nodoc */
  HRESULT RemoveFilter(CATVisFilter* ipFilter, CATPathElement* ipTreeRoot, CATBaseUnknown*  ipViewpoint);

protected:

  /** @nodoc 
   * Static variable which points to the only one Visu Manager
   */
  static CATVisManager *_visuManager;


private :

  /** @nodoc */
  l_CATVisManager* _letter;

};


#endif






