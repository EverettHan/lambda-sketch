// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATICkeObject.h
// Define the CATICkeObject interface
//
//===================================================================
//
// Usage notes:
//   Objects that can be manipulated in Knowledge language implement this interface
//
//===================================================================
//
//  Oct 2007  Creation: Code generated by the CAA wizard  frh
//===================================================================
#ifndef CATICkeObject_H
#define CATICkeObject_H

#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

/** 
 * @CAA2Level L1
 * @CAA2Usage U4 CATKweObjectAdapter
 */

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATICkeObject;
#else
extern "C" const IID IID_CATICkeObject ;
#endif

class CATUnicodeString;

//------------------------------------------------------------------

/**
* Interface representing an object that can be manipulated in the Knowledge language.
*
* <br><b>Role</b>: The objective of this interface is to be used to pass Knowledge objects as arguments of methods.<br>
* <p>
* Components that implement CATICkeObject are PLM objects, but also objects in representations (features).<br>
* <p>
* To read and write attributes of a PLM object, please refer to the following services:<br>
* <p>
* @href CATCkeObjectAttrReadServices,  @href CATCkeObjectAttrWriteServices
* <p><b>BOA information</b>: this interface CANNOT be implemented
* using the BOA (Basic Object Adapter).
* To know more about the BOA, refer to the CAA Encyclopedia home page.
* Click Middleware at the bottom left, then click the Object Modeler tab page.
* Several articles deal with the BOA.</p>
*/
class ExportedByCATLifSpecs CATICkeObject: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

	/**
	* Returns the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
	* Usually the logical name corresponds to CATIAlias::GetAlias method.<br>
	* For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
	* @param oLogicalName
	* Logical name in output
    * @return
	*  <ol>
	* 	 <li> E_ACCESSDENIED if the logical name cannot be read.
	* 	 <li> E_FAIL if the logical name cannot be read.
	* 	 <li> S_OK	if the logical name has been read successfully.
	*  </ol>
	*/
	virtual HRESULT  GetLogicalName    (CATUnicodeString &oLogicalName) const =0;

	/**
	* Sets the Logical name of the object. The logical name is a name that the end-user can give (modify) and that has no constraint of unicity.<br>
	* Usually the logical name corresponds to CATIAlias::SetAlias method.<br>
	* For objects in representation, it is usually sufficient. For PLM objects CATIAlias has been used to provide a computed name. That's why it cannot be used for logical name implementation.<br>
	* @param iLogicalName
	* Logical name in input
	* @return
	*  <ol>
	* 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
	* 	 <li> E_FAIL if the logical name cannot be set.
	* 	 <li> S_OK	if the logical name has been set successfully.
	*  </ol>
	*/
	virtual HRESULT  SetLogicalName    (const CATUnicodeString &iLogicalName)  =0;

	/**
	* Indicates if this object provides access to its simple attributes through generic methods CATCkeObjectAttrReadServices and CATCkeObjectAttrWriteServices.<br>
    * @return TRUE if this object provides access to its simple attributes through generic methods. 
	*/
	virtual CATBoolean IsPublic () const = 0;

};

//------------------------------------------------------------------

CATDeclareHandler(CATICkeObject, CATBaseUnknown);

#endif
