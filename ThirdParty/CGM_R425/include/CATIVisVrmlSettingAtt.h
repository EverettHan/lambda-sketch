// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIVisVrmlSettingAtt.h
// Define the CATIVisVrmlSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: this interface may be used to read or modify in the CATIA\Tools\Option\General\Compatibility.... 
//                  the settings values of the VRML sheet.
//
//===================================================================
//
//  Aug 2004  Creation: Code generated by the CAA wizard  pam
//===================================================================
#ifndef CATIVisVrmlSettingAtt_H
#define CATIVisVrmlSettingAtt_H

#include "SceneGraphManager.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedBySceneGraphManager IID IID_CATIVisVrmlSettingAtt;
#else
extern "C" const IID IID_CATIVisVrmlSettingAtt ;
#endif

class CATSettingInfo;
class CATUnicodeString;

//------------------------------------------------------------------

/**  
 * The interface to access a CATIVisVrmlSettingAtt.
 * This interface may be used to read or modify in the CATIA\Tools\Option\General\Compatibility.... the settings values
 * of the VRML sheet.
 */

class ExportedBySceneGraphManager CATIVisVrmlSettingAtt: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Returns the ImportUnit parameter (unit of imported Vrml files).
	 * @param oImportUnit
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Millimeter.
	 * 	<br><tt>1 :</tt>   Centimeter.
	 * 	<br><tt>2 :</tt>   Meter.
	 *	<br><tt>3 :</tt>   Inch.
	 *	<br><tt>4 :</tt>   Foot.
     */
     virtual HRESULT GetImportUnit(int&  ioImportUnit ) = 0;

    /**
     * Sets the ImportUnit parameter (unit of imported Vrml files).
	 * @param iImportUnit
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Millimeter.
	 * 	<br><tt>1 :</tt>   Centimeter.
	 * 	<br><tt>2 :</tt>   Meter.
	 *	<br><tt>3 :</tt>   Inch.
	 *	<br><tt>4 :</tt>   Foot.
     */
     virtual HRESULT SetImportUnit( const int    iImportUnit ) = 0;

    /** 
     * Retrieves information about the ImportUnit setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetImportUnitInfo( CATSettingInfo*    oInfo ) = 0;
     
    /** 
     * Locks or unlocks the ImportUnit setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetImportUnitLock( unsigned char      iLocked ) = 0;
     
    
    /**
     * Returns the ImportCreaseAngle parameter.
	 * The crease angle affects how DEFAULT normals are generated. If the angle between the geometric normals of two
	 * adjacent faces is less than the crease angle, normals will be calculated so that the faces are smooth-shaded 
	 * across the edge. Otherwise, normals will be calculated so that a lighting discontinuity across the edge is
	 * produce.
	 * @param oImportCreaseAngle
	 *	Value of ImportCreaseAngle parameter.
	 *	<b>Legal values</b>:
	 *	<br> [0,inf]
     */
     virtual HRESULT GetImportCreaseAngle( float& ioImportCreaseAngle ) = 0;

    /**
     * Sets the ImportCreaseAngle parameter.
	 * The crease angle affects how DEFAULT normals are generated. If the angle between the geometric normals of two
	 * adjacent faces is less than the crease angle, normals will be calculated so that the faces are smooth-shaded 
	 * across the edge. Otherwise, normals will be calculated so that a lighting discontinuity across the edge is
	 * produce.
	 * @param iImportCreaseAngle
	 *	Value of ImportCreaseAngle parameter.
	 *	<b>Legal values</b>:
	 *	<br> [0,inf]
     */
     virtual HRESULT SetImportCreaseAngle( const float    iImportCreaseAngle ) = 0;

    /** 
     * Retrieves information about the ImportCreaseAngle setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetImportCreaseAngleInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ImportCreaseAngle setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetImportCreaseAngleLock( unsigned char      iLocked ) = 0;


    /**
	 * Returns the ExportVersion parameter (version of exported Vrml files).
	 * @param oExportVersion
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>1 :</tt>   VRML 1.0.
	 * 	<br><tt>2 :</tt>   VRML 97 (VRML 2.0).
	 */
     virtual HRESULT GetExportVersion(int&  ioExportVersion ) = 0;

    /**
	 * Sets the ExportVersion parameter (version of exported Vrml files).
	 * @param iExportVersion
	 *	Value of Import Unit parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>1 :</tt>   VRML 1.0.
	 * 	<br><tt>2 :</tt>   VRML 97 (VRML 2.0).
	 */
     virtual HRESULT SetExportVersion( const int    iExportVersion ) = 0;

    /** 
     * Retrieves information about the ExportVersion setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportVersionInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportVersionLock setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportVersionLock( unsigned char      iLocked ) = 0;


	/**
	 * Returns the ExportNormals parameter (exported Vrml files will or will not contains normal informations).
	 * @param oExportNormals
	 *	Value of ExportNormals parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain normal informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain normal informations.
	 */
     virtual HRESULT GetExportNormals( CATBoolean&  ioExportNormals ) = 0;

	/**
	 * Sets the ExportNormals parameter (exported Vrml files will or will not contains normal informations).
	 * @param iExportNormals
	 *	Value of ExportNormals parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain normal informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain normal informations.
	 */
     virtual HRESULT SetExportNormals( const CATBoolean    iExportNormals ) = 0;

    /** 
     * Retrieves information about the ExportNormals setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportNormalsInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportNormalsLock setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportNormalsLock( unsigned char      iLocked ) = 0;


	/**
	 * Returns the ExportEdges parameter (exported Vrml files will or will not contains edge informations).
	 * @param oExportEdges
	 *	Value of ExportEdges parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain edge informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain edge informations.
	 */
     virtual HRESULT GetExportEdges( CATBoolean&  ioExportEdges ) = 0;

	/**
	 * Sets the ExportEdges parameter (exported Vrml files will or will not contains edge informations).
	 * @param iExportEdges
	 *	Value of ExportEdges parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain edge informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain edge informations.
	 */
     virtual HRESULT SetExportEdges( const CATBoolean    iExportEdges ) = 0;

    /** 
     * Retrieves information about the ExportEdges setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportEdgesInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportEdgesLock setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportEdgesLock( unsigned char      iLocked ) = 0;
     
     
	/**
	 * Returns the ExportTexture parameter (exported Vrml files will or will not contains texture informations).
	 * @param oExportTexture
	 *	Value of ExportTexture parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain texture informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain texture informations.
	 */
     virtual HRESULT GetExportTexture( CATBoolean&  ioExportTexture ) = 0;

	/**
	 * Sets the ExportTexture parameter (exported Vrml files will or will not contains texture informations).
	 * @param iExportTexture
	 *	Value of ExportTexture parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE  :</tt>   exported Vrml files will contain texture informations.
	 * 	<br><tt>FALSE :</tt>   exported Vrml files will not contain texture informations.
	 */
     virtual HRESULT SetExportTexture( const CATBoolean    iExportTexture ) = 0;

    /** 
     * Retrieves information about the ExportTexture setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportTextureInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportTextureLock setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportTextureLock( unsigned char      iLocked ) = 0;

	/**
	 * Returns the ExportTextureFile parameter (Textures will be exported in the vrml file containing the geometry
	 * or in external files).
	 * @param oExportTextureFile
	 *	Value of ExportTextureFile parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Textures are exported in the Vrml file containing the geometry.
	 * 	<br><tt>1 :</tt>   Texture are exported in external files.
	 */
     virtual HRESULT GetExportTextureFile(int&  ioExportTextureFile ) = 0;

	/**
	 * Sets the ExportTextureFile parameter (Textures will be exported in the vrml file containing the geometry
	 * or in external files).
	 * @param iExportTextureFile
	 *	Value of ExportTextureFile parameter.
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   Textures are exported in the Vrml file containing the geometry.
	 * 	<br><tt>1 :</tt>   Texture are exported in external files.
	 */
     virtual HRESULT SetExportTextureFile( const int    iExportTextureFile ) = 0;

    /** 
     * Retrieves information about the ExportTextureFile setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportTextureFileInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportTextureFile setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportTextureFileLock( unsigned char      iLocked ) = 0;
	 
	/**
	 * DO NOT USE.
	 * Returns the ExportTextureFormat parameter.
	 * @param oExportTextureFormat
	 *	Value of ExportTextureFormat parameter.
	 *	<b>Legal values</b>:
	 *	<br> NOT APPLICABLE
	 */
     virtual HRESULT GetExportTextureFormat(int&  ioExportTextureFormat ) = 0;
	/**
	 * DO NOT USE.
	 * Sets the ExportTextureFormat parameter.
	 * @param iExportTextureFormat
	 *	Value of ExportTextureFormat parameter.
	 *	<b>Legal values</b>:
	 *	<br> NOT APPLICABLE
	 */
     virtual HRESULT SetExportTextureFormat( const int    iExportTextureFormat ) = 0;
    /** 
     * Retrieves information about the ExportTextureFile setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportTextureFormatInfo( CATSettingInfo*    oInfo ) = 0;
	/** 
     * Locks or unlocks the ExportTextureFile setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportTextureFormatLock( unsigned char      iLocked ) = 0;
    
	/**
	 * Returns the ExportBackgroundColor parameter (Background color of exported Vrml files).
	 * @param oExportBackgroundColor
	 *	Value of ExportBackgroundColor parameter.
	 *	<b>Legal values</b>:
	 *	<br>  R [0,255] G [0,255] B [0,255] 
	 */
     virtual HRESULT GetExportBackgroundColor(int* ioR, int* ioG, int* ioB ) = 0;

	/**
	 * Sets the ExportBackgroundColor parameter (Background color of exported Vrml files).
	 * @param iExportBackgroundColor
	 *	Value of ExportBackgroundColor parameter.
	 *	<b>Legal values</b>:
	 *	<br>  R [0,255] G [0,255] B [0,255] 
	 */
     virtual HRESULT SetExportBackgroundColor( const int iR, const int iG, const int iB ) = 0;
     
    /** 
     * Retrieves information about the ExportBackgroundColor setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetExportBackgroundColorInfo( CATSettingInfo*    oInfo ) = 0;

    /** 
     * Locks or unlocks the ExportBackgroundColor setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetExportBackgroundColorLock( unsigned char      iLocked ) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
