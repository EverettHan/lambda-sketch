//===================================================================
// COPYRIGHT DS SolidWorks 2010/09/17
//===================================================================
// SWXUtPair.h
// Definition of SWXUtPair
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/09/17 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUTPAIR_H
#define SWXUTPAIR_H

#include "SWXUtLess.h"

template<class TYPE1, class TYPE2> struct SWXUtPair
{
	typedef TYPE1 first_type;
	typedef TYPE2 second_type;

	SWXUtPair()
		: first(TYPE1()), second(TYPE2())
	{
	}

	SWXUtPair(const TYPE1& iValue1, const TYPE2& iValue2)
		: first(iValue1), second(iValue2)
	{
	}

	template<class OTHER1, class OTHER2> SWXUtPair(const SWXUtPair<OTHER1, OTHER2>& iRight)
		: first(iRight.first), second(iRight.second)
	{
	}
    
    SWXUtPair& operator=(const SWXUtPair& iRight)
    {
        if (this != &iRight)
        {
            first = iRight.first;
            second = iRight.second;
        }

        return *this;
    }
    bool operator<(const SWXUtPair& iRight) const
    {
        if (SWXUtLess<TYPE1>()(first,iRight.first))
        {
            return true;
        }
        else if (SWXUtLess<TYPE1>()(iRight.first, first))
        {
            return false;
        }
        return SWXUtLess<TYPE2>()(second, iRight.second);
    }

	TYPE1 first;	
	TYPE2 second;
};

template<class TYPE1, class TYPE2> inline SWXUtPair<TYPE1, TYPE2> SWXUtMakePair(TYPE1 iValueType1, TYPE2 iValueType2)
{
	return SWXUtPair<TYPE1, TYPE2>(iValueType1, iValueType2);
}

#endif
