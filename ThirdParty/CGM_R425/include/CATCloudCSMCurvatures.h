//===================================================================
// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATCloudCSMCurvatures.h
// Header definition of CATCloudCSMCurvatures
// CSM for Cohein-Steiner and Morvan method used for computation.
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2007  Creation: Code generated by the CAA wizard  YVL
//===================================================================

#ifndef CATCloudCSMCurvatures_H
#define CATCloudCSMCurvatures_H

#include "ExportedByCATCloudBasicResources.h"

#include "math.h"
#include "CATCldBitsArray.h"

#include "CATListOfInt.h"
#include "CATBoolean.h"



//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href CATCloudCSMCurvatures constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new CATCloudCSMCurvatures;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByCATCloudBasicResources CATCloudCSMCurvatures
{
  
  public:
    class T_Mesh {
    public:
        /*
        * GetNbPoints : Get the number of points of the mesh.
        */
        virtual int GetNbPoints () const = 0 ;
        /*
        * GetCoords : Get the coordinates of iNoPoint 'th' point of the mesh.
        */
        virtual void GetCoords (const int iNoPoint, double    oCoords[3]) const {
          GetNumCoords (iNoPoint,oCoords);
        }
        /*
        * GetNbTriangles : Get the number of triangles of the mesh.
        */
        virtual int GetNbTriangles () const = 0 ;
        /*
        * GetTriangle : Get the description of the iNoTriangle 'th' triangle of the mesh.
        * oParameters : - oNoVertices[3] the indices the 3 vertices of the triangle.  
        *               - oNoConnexes[3] the 3 neighbour triangles of the iNoTriangle 'th' triangle. 
        */
        virtual void GetTriangle (const int iNoTriangle,
                                  int       oNoVertices[3],
                                  int       oNoConnexes[3]) const = 0 ;
        /*
        * GetNeighbours : Get the neighbour triangles of the iNoVertex 'th' vertex.
        * returns the number of the triangles.  
        * oParameters   : oNoTriangles the triangles indices.
        *                 oNoTriangles must be deleted by the caller.
        */
        virtual int GetNeighbours ( const int     iNoVertex,
                                    int*&         oNoTriangles) const {
          CATListOfInt List;
          GetNeighbours ( iNoVertex, List);
          int nbTri = List.Size();
          if (nbTri > 0) {
            oNoTriangles = new int [nbTri];
            if (!oNoTriangles) return 0;
            for (int i = 1 ; i <= nbTri ; i++) {
              oNoTriangles[i-1] = List[i];
            }
          }
          return nbTri;
        }
        /*
        * GetNeighbours : Get the two triangles connex to the two vertices (iNoVertex1,iNoVertex2).
        * returns the number of the triangles.  
        * oParameters   : oNoTriangles the triangles indices.
        *                 oNoTriangles must be delete by the caller.
        */
        virtual void GetNeighbours (const int  iNoVertex1,
                                    const int  iNoVertex2,
                                    int       &oNoTriangle1,
                                    int       &oNoTriangle2) const = 0 ;
        /**
         * @deprecated : to be replaced by GetCoord.
         */
        virtual void GetNumCoords (const int iNoPoint,
                                   double    oCoords[3]) const = 0;
        /**
         * @deprecated (because of CATListOfInt).
         * to be replaced by GetNeighbours ( const int iNoVertex, int*& oNoTriangles)
         */
        virtual void GetNeighbours ( const int     iNoVertex,
                                     CATListOfInt& oNoTriangles) const = 0 ;
        /**
         * @deprecated : to be replaced by GetTriangle (const int iNoTriangle, int oNoVertices[3], int oNoConnexes[3])
         */
         virtual void GetTriangle (const int   iNoTriangle,
                                  int          oNoVertices[3],
                                  CATBoolean & oDirect) const = 0 ;
    };

    CATCloudCSMCurvatures ();

    void LoadMesh (T_Mesh* iMesh);

    int GetCurvatures( const int iVertex , 
                       double iRadiusRing ,
                       double & oMinCurvature , 
                       double & oMaxCurvature ,
                       double oVectKmin[3] ,
                       double oVectKmax[3]);

    virtual ~CATCloudCSMCurvatures ();


  private:

    CATCldBitsArray _TriangleTreated ;

    CATCldBitsArray _PointTreated ;
    
    T_Mesh*         _Maillage ;  
    int             _NbTriangles ;
    int             _NbPoints ;    
    double          _Kmin ;
    double          _Kmax ;
    double          _VectKmin[3] ;
    double          _VectKmax[3] ;    

    typedef struct voisins {
      int Vtx ; 
      double DihedralAngle ;
      double EdgeDir[3] ;
      double EdgeLength ;
      double Coeff ;
      int Treated ;     
      struct voisins *Next;
    }Voisinage;

    typedef Voisinage * ListeVoisinage;

    ListeVoisinage *_Neighbours;

    ListeVoisinage GetStructure( int iVtx1 , int iVtx2 ) ;

    CATBoolean GetSetStateEdgeTreated( int iVtx1, int iVtx2 );

    double * _TriangleArea ;

    int * _ListePoints ;

    int _NbListePoints ;

    inline double Norme ( const double iVector[3]  ) const;

    inline double NormeSquare ( const double iVector[3]  ) const ;

    inline double DotProduct ( const double iV1[3] , const double iV2[3] ) const;

    inline void CrossProduct ( const double iV1[3] , const double iV2[3] , double oV3[3] ) const;

    inline void Switch( int & ioInt1 , int & ioInt2 ) const;

    void ComputeDataEdges( void ) ;    

    void ComputeTriangleArea( void ) ; 

    void SortEigenValuesMagnitude ( const double iEigenValues[3] , int ioSortedEigenValues[3] ) ;    

    int NbPtsInsideTheRing(const int iIndiceTriangle , double CoordCenter[3], double iRadius, int& ioPtSeul ) ;

    double IntersectionSphereSegment( double A[3] , double B[3], double C[3], double iRadius ) ;


    double BuildListe(  double CoordCenter[3],
                                             double iRadius,
                                             int iTriangle ,
                                             int iNbPointInTheRing,
                                             int PointSeul);

    int ComputeCurvatureCSM( const int iVertex , double iRadius) ;

    void ComputeTriangleNormal (const int        iNoTriangle,
                                double           oNormal[3]);


};

//==============================================================================================================
// Function : Norme
// Purpose  : 
//==============================================================================================================

inline double CATCloudCSMCurvatures::Norme ( const double iVector[3]  ) const
{
  double res = NormeSquare(iVector);
  if (res <= 0.) return 0.;
  return sqrt(res) ;
}

//==============================================================================================================
// Function : NormeSquare
// Purpose  : 
//==============================================================================================================

inline double CATCloudCSMCurvatures::NormeSquare ( const double iVector[3]  ) const
{
  return  (((iVector[0] * iVector[0]) + (iVector[1] * iVector[1])) + (iVector[2] * iVector[2]))  ;
}

//==============================================================================================================
// Function : DotProduct
// Purpose  : Computes the Dot Product of two vectors.
//==============================================================================================================

inline double CATCloudCSMCurvatures::DotProduct ( const double iV1[3] , const double iV2[3] ) const
{
  return ((iV1[0]*iV2[0] + iV1[1]*iV2[1]) + iV1[2]*iV2[2] ) ;
}

//==============================================================================================================
// Function : CrossProduct
// Purpose  : Computes the Cross Product of two vectors.
//==============================================================================================================

inline void CATCloudCSMCurvatures::CrossProduct ( const double iV1[3] , const double iV2[3] , double oV3[3] ) const
{
  oV3[0] = (iV1[1]*iV2[2]) - (iV1[2]*iV2[1]) ;
  oV3[1] = (iV1[2]*iV2[0]) - (iV1[0]*iV2[2]) ;
  oV3[2] = (iV1[0]*iV2[1]) - (iV1[1]*iV2[0]) ;
}

//-----------------------------------------------------------------------------
// CATCloudCSMCurvatures : Switch
//-----------------------------------------------------------------------------
inline void CATCloudCSMCurvatures::Switch( int & ioInt1 , int & ioInt2 ) const
{
  int tmp = ioInt1 ;
  ioInt1 = ioInt2 ;
  ioInt2 = tmp ;
}

#endif
