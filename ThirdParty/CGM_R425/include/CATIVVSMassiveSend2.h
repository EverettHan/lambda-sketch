// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIVVSMassiveSend2.h
// Define the CATIVVSMassiveSend2 interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jul 2009  Creation: Code generated by the CAA wizard  BES
//===================================================================
#ifndef CATIVVSMassiveSend2_H
#define CATIVVSMassiveSend2_H
/**
* @level Private
* @usage U4 CATVVSMassiveSend_Adaptor
*/

#include "CATIVVSMassiveSend.h"
#include "CATVVSNetBase.h"
#include "CATOmxGetIID.h"
#include "CATOmxArray.h"
#include "CATMD5.h"
#include "CATVVSUrl.h"
#include "CATBoolean.h"

class CATVVSObserver;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByVVSNetBase IID IID_CATIVVSMassiveSend2;
#else
extern "C" const IID IID_CATIVVSMassiveSend2 ;
#endif

/**  
*  This class allows massive send transaction with no upload of data alredy uploaded on the VVS.
*  CATIVVSMassiveSend acts as a copy command while CATIVVSMassiveSend2 acts as Robocopy: only new urls will be uploaded on the server
*/
class ExportedByVVSNetBase CATIVVSMassiveSend2 : public CATIVVSMassiveSend
{
public:    

  /**
  * Upload a list of distant vault URls from a list of generally local, cached URLs.
  * <b>Role</b>:Send a list of URls to a list of URLs. 
  * @param iFromUrlList [in]
  *   the list of pointers to URLs to be copied. These are generally local, cached URLs, whose stream
  *   is accessible through a CATILockBytes2 interface.
  * @param iToUrlList [in]
  *   the list of pointers to URLs to copy to. These HAVE to be URLs belonging to the target vault site.
  * @param [in/out] ioVVSObserver
  *   updates the Cache Layer with details about the transfert (size remaining to upload/size already uploaded/URLs already on server)
  * @param iForceUploadOfAllStreams [in]
  *   Only set when RetrieveListOfURLsToBeSent has failed. Also used for debug purpose. The client requires all urls to be uploaded even it the stream has already been sent
  * @param iSendStatus [in]
  *   the copy diagnostic for each urls. 
  * @param copyBehavior
  *   copy behavior when an error occurs. 
  * @return
  *   <b>Legal values</b>:
  *   <br><tt> S_OK :</tt>on Success for all lockbytes.
  *   <br><tt> STG_E_READFAULT :</tt> problem while reading.
  *   <br><tt> STG_E_INVALIDPARAMETER :</tt> invalid arguments.
  *   <br><tt> STG_E_ACCESSDENIED:</tt> No sufficient permission to read.
  *   <br><tt> STG_E_UNKNOWN :</tt> unexpected error.
  *   <br><tt> E_NOTIMPL :</tt> if not implemented.
  */     
  virtual  HRESULT __stdcall Send(const CATOmxArray<CATVVSUrl> &iFromUrlList, const CATOmxArray<CATMD5> & iSrcMD5List, 
                                  const CATOmxArray<CATVVSUrl> &iToUrlList, 
                                  CATVVSObserver &ioVVSObserver, CATBoolean iForceUploadOfAllStreams, const CATVVSMassiveCopyStatus * iSendStatus, 
                                  CATIVVSMassiveSend::ErrorBehavior sendBehavior=CATIVVSMassiveSend::EnforceSend) = 0;                                  
};

template <> inline const IID& CATOmxGetIID<CATIVVSMassiveSend2> (const CATIVVSMassiveSend2* iObj) 
{return IID_CATIVVSMassiveSend2;}

#endif
