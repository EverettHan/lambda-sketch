// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlStateWidget.h
// Header definition of CATVidCtlStateWidget
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  may 2006  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlStateWidget_H
#define CATVidCtlStateWidget_H

#include <VisuDialog.h>
#include <CATVidCtlButton.h>
#include <list.h>
#include <CATVidEnum.h>
#include <CATVidLayLayer.h>
#include <CATVizViewer.h>
#include <CATBoolean.h>

class CATVidStateAndGPFrame;
class CATVidLayConstraints;
class CATVidLayLayer;
/**
 * Deprecated class.
 * @deprecated use CATVidCtlButton instead, by using CreateButton or CreateThumbnail for example
 */
class ExportedByVisuDialog CATVidCtlStateWidget: public CATVidCtlButton
{
  CATDeclareClass;
public:
  // Standard constructor
  // --------------------
  CATVidCtlStateWidget (CATCommand *i_pParent, const CATString & i_pIdentifier, const CATBoolean& i_enable = TRUE);

  void SetConstraints(CATVidWidget *i_pWidget, CATVidLayConstraints& i_constraints, CATVidState i_state);

  HRESULT GetConnectedState(CATVidState& o_connectedState);
  void DisconnectState(const CATVidState& i_state);
  void ConnectState(const CATVidState& i_state);

  // virtual from CATVidWidget
  // -------------------------
  virtual void TunnelInformation(const CATVidInformation& i_information);

  // Get the change state notification
  // --------------------------------
  CATNotification *GetStateChangeNotification() const;

protected:
  virtual ~CATVidCtlStateWidget ();

  void Clear();
  CATVidLayLayer* GetGPFrameFromState(CATVidState i_state);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlStateWidget (CATVidCtlStateWidget &);
  CATVidCtlStateWidget& operator=(CATVidCtlStateWidget& original);

  CATVidStateAndGPFrame* GetStateAndGPFrameFromState(CATVidState i_state);

private:
  list <CATVidStateAndGPFrame> _stateAndGPFrameList;
  CATVidLayLayer* _pLayLayer;
};

class CATVidStateAndGPFrame
{
public:
  CATVidStateAndGPFrame(CATVidWidget *i_pFatherWidget, CATVidState i_state);
  virtual ~CATVidStateAndGPFrame();
  CATVidState GetState();
  CATVidLayLayer* GetGPFrame();
  CATBoolean GetConnectedFlag();
  void ConnectState();
  void DisconnectState();

private:
  CATVidState    _state;
  CATVidLayLayer* _pGPFrame;
  CATBoolean _connectedFlag;
};
//-----------------------------------------------------------------------

#endif
