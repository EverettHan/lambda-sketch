//===================================================================
// COPYRIGHT Dassault Systemes 2011/06/28
//===================================================================
// CATVidCtlModificationHandle.cpp
// Header definition of class CATVidCtlModificationHandle
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/28 Creation: Code generated by the 3DS wizard JV8
//===================================================================

#ifndef CATVidCtlModificationHandle_H
#define CATVidCtlModificationHandle_H

#include "VisuDialog.h"
#include "CATVidCtlButton.h"

//-----------------------------------------------------------------------

/**
 * This widget provides a small clickable handle, it takes CATVidCtlButton as parent.
 * <b>Role</b>:
 * A modification handle can be used to create clickable areas around 3D points in order to grab them
 * and modify their position easily with the mouse or in touch mode.
 * It displays a small halo on screen, and has all the click notifications and properties of the button.
 * Plus the handle has 2 new introspectable properties : handleState and handleMode. 
 * The state of the handle defines its look. There are four basic states : default, error, origin, reference and deactivate (cf. enum in CATVid.h)
 * The mode of the handle defines its visibility behavior : generic, ghost, fullghost (cf. enum in CATVid.h)
 * <br>
 * @par Creation
 * @code
 * CATVidCtlModificationHandle* pModificationHandle = CATVidCtlModificationHandle::CreateModificationHandle(myCommandParent, "HandleName");
 * @endcode
 * @ingroup VIDControls
 */
 //* @ htmlinclude class_c_a_t_boxing.html
class ExportedByVisuDialog CATVidCtlModificationHandle: public CATVidCtlButton
{
  CATDeclareClass;
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATVidCtlModificationHandle ();
  CATVidCtlModificationHandle(CATCommand *i_pParent, const CATString & i_pIdentifier);
  virtual ~CATVidCtlModificationHandle ();
 
  /**
   * Constructs a CATVidCtlModificationHandle with generic mode and default state.
   * @param i_pParent
   *   The parent of the handle.
   * @param i_pIdentifier
   *   The name of the handle.
   */
  static CATVidCtlModificationHandle* CreateModificationHandle(CATCommand *i_pParent, const CATString & i_pIdentifier);

  /**
   * Sets a state
   * @param i_state
   * The state.
   */
  void SetHandleState( CATVid::HandleState i_state );
  /**
   * @return the state
   **/
  CATVid::HandleState GetHandleState( void ) const;

  /**
   * Sets a mode
   * @param i_mode
   * The mode.
   */
  void SetHandleMode( CATVid::HandleMode i_mode );
  /**
   * @return the mode
   **/
  CATVid::HandleMode GetHandleMode( void ) const;

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlModificationHandle (CATVidCtlModificationHandle &);
  CATVidCtlModificationHandle& operator=(CATVidCtlModificationHandle&);

  CATVid::HandleMode               _handleMode;
  CATVid::HandleState              _handleState;

};

//-----------------------------------------------------------------------

#endif
