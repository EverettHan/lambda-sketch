// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIBLRelationSuppression.h
// Define the PLMIBLRelationSuppression interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2009  Creation: Code generated by the CAA wizard  FRH
//===================================================================
#ifndef PLMIBLRelationSuppression_H
#define PLMIBLRelationSuppression_H

/**
* @level Protected
* @usage U3
*/

#include "PLMBusinessLogicInterfaces.h"
#include "CATBaseUnknown.h"

#include "CATListValCATICkeParm.h"
class CATIInstance_var;
class CATUnicodeString;



#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMBusinessLogicInterfaces IID IID_PLMIBLRelationSuppression;
#else
extern "C" const IID IID_PLMIBLRelationSuppression ;
#endif

//------------------------------------------------------------------

/**
* Interface to launch the integration of the business logic definition related to the relation establishment (at creation & reroute)
*/
class ExportedByPLMBusinessLogicInterfaces PLMIBLRelationSuppression: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
	* DO NOT USE UNLESS YOU HAVE AN AGREEMENT WITH FRH
    * Tells whether the establishment of a relationship between 2 PLM objects is a valid operation from the business logic point of view.<br>
	* This call needs to be done prior to creating the relationship.<br>
	* A Relationship can be created as a link inside a representation, or as an element of a connection
    *
    * @param iAggregatingReference
    *    The PLM reference or PLM Representation which will be the owner of the relationship
    * @param iRelationType
    *    The name of the type of relationship that we want to create
    * @param iObject
    *    The object that will be referenced by the relationship. It can be a PLM object or an object in a representation.
    * @param oValidationStatus
    *    Indicates if the operation is validated or not.
    * @param oValidationSeverity
    *    In case of there is an invalidation, it precises the severity (1== warning, >=2== cancel treatment)
    * @param iRaiseAPopup
    *    Indicates if we want the service to raise a popup indicating that there is an error or a warning
    * @param piListAdditionalAttributeForContext
    *    Additional list of attributes that will be added to the context (to pass more information specific from the caller). May be NULL.
    * @return
    *   <ul>
    *       <li> S_OK      if the business logic is successfully integrated and the operation is authorized</li>
    *       <li> E_FAIL    if the business logic service failed.
    *       </li>
    *   </ul>
    */
    virtual HRESULT RunCheck(const CATIInstance_var & iAggregatingReference,
							 const CATUnicodeString & iRelationType,
                             const CATIInstance_var & iObject,
							 CATBoolean             & oValidationStatus,
							 int                    & oValidationSeverity,
							 const CATBoolean         iPopUp = FALSE,
							 const CATLISTV(CATICkeParm_var) *piListAdditionalAttributeForContext = NULL ) = 0;
};

//------------------------------------------------------------------

#endif
