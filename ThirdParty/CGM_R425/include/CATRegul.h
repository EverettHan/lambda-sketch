// COPYRIGHT DASSAULT SYSTEMES 2003, ALL RIGHTS RESERVED.
//===================================================================
//
// CATRegul.h
// Header definition of CATRegul
//
//===================================================================

//===================================================================
//
//  Mar 2003  Creation: Code generated by the CAA wizard
//===================================================================
#ifndef CATRegul_H
#define CATRegul_H

// math
#include "CATRegularisator.h"
#include "CATTopOperator.h"

#include "CATMathDef.h"
#include "ListPOfCATFace.h"
#include "CATListOfInt.h"
#include "CATString.h"
#include "CATBoolean.h"
#include "CATRegulMode.h"

class CATGeoFactory;
class CATTopData;
class CATBody;
class CATFace;
class CATRegulImp;




/**
* Operator to smooth the faces of a volume.
*/

/**
* Operator to smooth the faces of a volume.
* As all the topological operators, the input objects are not modified. The resulting body is
* a new one to retrieve by using the <tt> CATRegul::GetResult</tt> method.
* To use it:
* <ul>
* <li>Create it with the <tt> CATCreateRegulOperator </tt> global function.
* <li>Tune it with appropriate options, using the <tt>SetXxx</tt> methods. 
* <li>Run it
* <li>Get the result in body with the <tt>GetResult</tt> method. If you do not want 
* to keep these resulting body, use the @href CATICGMContainer#Remove method to remove them from the 
* geometric factory, after the operator deletion.
* <li>Release the operator with the <tt>Release</tt> method after use.
* </ul> 
*/

class ExportedByCATRegularisator CATRegul : public CATTopOperator
{
  CATCGMVirtualDeclareClass(CATRegul);

public:
  
  /**
  * @nodoc
  * Virtual constructor of a CATRegul.<br>
  * Cannot be called. Use the <tt>CATCreateRegulOperator</tt> global function
  * to create the CATRegul operator.
  */

  CATRegul (CATGeoFactory              * iFactory,
            CATTopData                 * iTopData,
            CATRegulImp                * iImpl);


  /**
  * Standard destructor.<br>
  */
  virtual ~CATRegul ();
  
  /**
  * Set the deviation allowed by the user. <br> 
  * @param iDeviation
  * <b>Legal Values</b>:<br>
  *	<ul>
  *		<li> <tt>iDeviation</tt> : represents the value of the deviation.This
  *								value must be positive.<br>				
  *	</ul>
  *	
  */
  void SetDeviationAllowed(CATLength iDeviation);
  
  
  /**
  * Set the DEFAULT offset value (if offset value is the same for all faces). <br> 
  * @param iOffsetValue
  * <b>Legal Values</b>:<br>
  *	<ul>
  *		<li> <tt>iOffsetValue</tt> : the default offset value.<br>
  *	</ul>
  */
  void SetDefaultOffsetValue(CATLength iOffsetValue);

  /**
  * Activate/Desactivate local regularization treatment (which may split faces) to
  * smooth subparts of the non offsetable faces.
  * @param iLocalRegul
  *	<ul>
  *	<li><tt>TRUE</tt>:  Activates local regularisation.
  *	<li><tt>FALSE</tt>: Deactivates local regularisation.
  *	</ul>
  */
  void SetLocalRegularization(CATBoolean iActivate=TRUE);
  
  
  /**
  * Set the mode of diagnosis to auto compute and run operator.
  * @param iDiagnosisMode
  *	<ul>
  *	<li><tt>0</tt>: no diagnosis (default).
  *	<li><tt>1</tt>: diagnosis for local curvature problem mode (non offsetable).
  *	<li><tt>2</tt>: diagnosis for twisted surface problem mode.
  *	<li><tt>4</tt>: diagnosis for peaked surface mode.
  *	<li><tt>8</tt>: diagnosis for parallel TuTv surface mode.
  *	</ul>
  */
  void SetSelfDiagnosisMode(int iDiagnosisMode = 0);

  /**
  * Set the level of operator computing.
  * @param iLevelOfCompute
  *	<ul>
  *	<li><tt>0</tt>: default.
  *	<li><tt>1</tt>: auto compute all diagnosis and stop.
  *	<li><tt>1</tt>: auto compute all diagnosis and run.
  *	</ul>
  */
  void SetLevelOfCompute(int iLevelOfCompute = 0);

  /** @nocgmitf */
  void SetTweakResult(int iTweakResult);


  /**
  * @nodoc
  * @param ipFace
  * @param iDiag
  * @param iOffsetValue
  */
  int SetProblemFace(CATFace * ipFace, int iDiag, double iOffsetValue = 0.);

  /**
  * Set the level of operator for warning mode.
  * @param iLevelOfWarning
  *	<ul>
  *	<li><tt>0</tt>: default.
  *	<li><tt>1</tt>: warning for smoothed faces ok.
  *	</ul>
  */
  void SetLevelOfWarning(int iLevelOfWarning = 0);


  /**
  * Runs <tt>this</tt> operator.
  */
  int Run();

  /**
  * Returns the pointer to the resulting body.
  * @return
  * The pointer to the resulting body, <tt>NULL</tt> if the operation failed. 
  * If you do not want to keep the resulting body, 
  * use the @href CATICGMContainer#Remove method to remove it from the 
  * geometric factory, after the operator deletion.
  */
  CATBody * GetResult();


  /** @nocgmitf */
  int RunOperator();
  

  /**
  * In case of error, returns the faces that cannot be smoothed. <br>
  * @param oTrickyFaces
  */
  CATBoolean GetRegulTrickyFaces(CATLISTP(CATFace) & oRegulTrickyFaces);


  /**
  * In case of error, returns the faces that cannot be smoothed. <br>
  * @param oTrickyFaces
  * @param oListDiag
  * @param oListDiagResult
  */
  CATBoolean GetRegulTrickyFaces(CATLISTP(CATFace) &oRegulTrickyFaces, 
                                 CATListOfInt &oListDiag, 
                                 CATListOfInt &oListDiagResult);

  /**
  * In case of SetLevelOfCompute(1) returns the faces with assciated diagnosis. <br>
  * @param oListFaces
  * @param oListDiags
  */
  int GetFacesWithDiagnosis(
                            CATLISTP(CATFace) & oListFaces,
                            CATListOfInt      & oListDiags);

  /**
  * returns the faces no offsetable that disappear with offset. <br>
  * @param oListNoOffetableToDisappearFaces
  */
  CATBoolean GetNoOffsetableToDisappearFaces(CATLISTP(CATFace) & oListNoOffetableToDisappearFaces);

  //==============================================================================
  //	Progress method
  //==============================================================================
  /**
  *	This method is use to the call back and the cancel button. <br>
  *  it return TRUE if the algorthim can continue, FALSE otherwise.<br>
  *	<b>Legal values</b>:
  *	<ul> 
  *		<li> the proportion ( between 0 and 1) of the completed algorithm.<br>
  *	</ul>
  * 
  */
  /** @nocgmitf */
  CATBoolean OnSurfFuzzyOfProgressEvent  (double iProportionCompleted);
  
  /** @nocgmitf */
  int        GetFacesImages              (CATLISTP(CATFace) & iListFacesInit, CATLISTP(CATFace) & iListFacesImages);

  /** @nocgmitf */
  int        GetFacesImages              (CATFace * ipFace, CATLISTP(CATFace) & iListFacesImages);
  
  // To get a journal with creation
  /** @nocgmitf */
  void       SetCreationJournalMode      (int iMode);


  //==============================================================================
  //
  // CGMREPLAY METHODES
  //
  //==============================================================================

  /** @nocgmitf */
  static const CATString * GetDefaultOperatorId ();
  /** @nocgmitf */
  const CATString        * GetOperatorId        ();
  /** @nocgmitf */
  void                     WriteInput           (CATCGMStream  & oStr);
  /** @nocgmitf */
  void                     ReadInput            (CATCGMStream  & ioStr, int iVersionOfStream, short iNumReplayVersion = 1);
  /** @nocgmitf */
  CATExtCGMReplay        * IsRecordable         (short & oLevelOfRuntime, short & oVersionOfStream);
  /** @nocgmitf */
  void                     Dump                 ( CATCGMOutput & os ) ;
  /** @nocgmitf */
  void                     RequireDefinitionOfInputAndOutputObjects();
  /** @nocgmitf */
  void                     WriteOutput          (CATCGMStream & Str);
  /** @nocgmitf */
  CATBoolean               ValidateOutput       (CATCGMStream & Str, CATCGMOutput & os,int VersionNumber);
  /** @nocgmitf */
  void                     DumpOutput           (CATCGMOutput & os );

private :
  
  
  /**
  * Not implemented. <br>
  */
  CATRegul (CATRegul &);
  
  
  /**
  * Not implemented. <br>
  */
  CATRegul & operator= (CATRegul&);
   

protected :

  CATRegulImp * GetRegulImpl();

};


// ------------------------
// CATCreateRegulOperator
// ------------------------

 /** 
 * Global function for the creation of a CATRegul operator.
 * @param iFactory
 * The pointer to the factory of the resulting body.
 * @param iTopData
 * The pointer to the data defining the software configuration and the journal. The journal inside <tt>iTopData</tt> 
 * @param iInputBody
 * The pointer to the input body.
 */

ExportedByCATRegularisator CATRegul * CATCreateRegulOperator(CATGeoFactory * iFactory,
                                                             CATTopData    * iTopData,
                                                             CATBody       * iInputBody); 




#endif
