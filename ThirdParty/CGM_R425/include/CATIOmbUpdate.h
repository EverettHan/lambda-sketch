// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIOmbUpdate.h
// Define the CATIOmbUpdate interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Oct 2004  Creation: Code generated by the CAA wizard  FLE
//===================================================================
#ifndef CATIOmbUpdate_H
#define CATIOmbUpdate_H

/**
 * @level Private
 * @usage U3
 */

#include "AC0XXLNK.h"
#include "CATBaseUnknown.h"
#include "CATOmbTimeStamp.h"

extern ExportedByAC0XXLNK IID IID_CATIOmbUpdate ;

//------------------------------------------------------------------

/**
 * Interface dedicated to the update mechanism.
 * The objects concerned by the update mechanism have :
 *      - a status (up to date or not) concerning the update 
 *      - a state (managed by the StateStamp) concerning modification of the object's data.
 * This interface must be implemented on virtual objects, and only on virtual 
 * objects (i.e. not on CATISpecObjects) which can be pointed by features
 * as part of their update mechanism through tk_external attributes.
 */

class ExportedByAC0XXLNK CATIOmbUpdate: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**  
   * Rebuilds the object ( generate the result ).
   * <br><b> Note: </b> The default update mechanism detects all objects that have been modified upstream from an
   * object, rebuilds all the objects impacting the updated object, and finally rebuilds
   * the final object.
   * Return 0 in case of success.
   */
  virtual int Update() = 0;

  /**
   * Returns the status of the object concerning the update mechanism.
   * @return CATBoolean
   *    TRUE : the object is up to date.
   *    FALSE : the object is not up to date.
   */
  virtual CATBoolean IsUpToDate() const = 0;

  /**
   * Returns the UpdateStamp held by the object.
   * This UpdateStamp must always be the same unless some input of the
   * object has been modified, and its initial value must NOT be 0.
   * (1 for example, 0 is used as a specific management value by update engine)
   */
  virtual CATOmbTimeStamp  GetUpdateStamp() const=0 ;


};

CATDeclareHandler(CATIOmbUpdate, CATBaseUnknown);

//------------------------------------------------------------------

#endif
