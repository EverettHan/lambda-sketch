// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMCompNewVersionTransaction.h
// Define the CATIPLMCompNewVersionTransaction interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2005  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompNewVersionTransaction_H
#define CATIPLMCompNewVersionTransaction_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompNewVersionTransaction;
#else
extern "C" const IID IID_CATIPLMCompNewVersionTransaction;
#endif

class CATIPLMCompNewVersionRecordWrite;
class CATPLMID;
class CATTime;
class CATUnicodeString;
class CATIPLMCompRecordReadSet;
class CATOmxKeyString;
class CATOmxAny;

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
 *
 * CATIPLMCompNewVersionTransaction  manages the list of record (the table of data).
 * The NewVersion message can be seen as a set of Record and in a record through the CATIPLMCompRecordWrite interface,  you will perform new versionning of Object.
 */
class ExportedByCATPLMServicesItf CATIPLMCompNewVersionTransaction : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Returns the name of the transaction. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param oName
  *   The name
  */
  virtual HRESULT GetName(CATUnicodeString **oName) = 0;

  /**
  * Creates the next CATIPLMCompNewVersionRecordWrite corresponding to the given CATPlmID.
  * through the CATIPLMCompNewVersionRecordWrite interface, you can perform new versionning of Object.
  *
  * @param  iId
  *     The CATPlmID of the object to modify within the RecordWrite.
  * @param  oRecordWrite [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompNewVersionRecordWrite object.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>successfully</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Next(const CATPLMID & iId, CATIPLMCompNewVersionRecordWrite ** oRecordWrite) = 0;

  /**
  * Save in the PDM all the NewVersion operations included in the transaction.
  *
  * Save method returns a CATIPLMCompRecordReadSet which allows accessing to the return message.
  * By calling Next method, analyse the report on each Operation (record) done.
  *
  * @param  oRecordReportSet [out, CATBaseUnknown#Release]
  *     Provides access to the list of record.(The message)
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Save is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Save entirely or partially failed. A report is available.
  *     Get further information by using CATIPLMCompRecordReadSet returned
  *     </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A fatal communication problem occurs during the operation.
  *     Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT NewVersion(CATIPLMCompRecordReadSet *& oRecordReportSet) = 0;

  virtual HRESULT NewVersionWithSelectAttr(const CATPLMTypeHToOrderedOSetOfKS& iMapBaseTypeHToSetOfAttr,
    const CATPLMTypeHToTypeHToOrderedOSetOfKS& iMapBaseTypeHToExtTypeHToSetOfAttr,
    CATIPLMCompRecordReadSet *& oRecordReportSet) = 0;

  /**
  * Sets the Action associated to the transaction.
  * @param  iId
  *     The CATPlmID of the action.
  */
  virtual HRESULT SetAction(const CATPLMID & iId) = 0;

  /**
  * Sets the Workspace associated to the transaction.
  * Should be done before any ::Next statement to make sure that streaming can be acheived.
  * @param  iId
  *     The CATPlmID of the workspace.
  */
  virtual HRESULT SetWorkspace(const CATPLMID & iId) = 0;

  /**
  * Sets the Applicability Date associated to the transaction.
  * @param  iValue
  *     The CATTime corresponding to Applicabilitydate.
  *     The provided date must be between 1970 and 2038.
  */
  virtual HRESULT SetApplicabilityDate(const CATTime * iValue) = 0;

  /*
  * Add in body of request BEFORE SET CONTEXT (...) some specific parameters.
  * Those specific parameters activate or not some triggers server side.
  *
  * BE CAREFUL (New version transaction):
  * Those specific parameters appears when method NewVersion is called and transaction is sent to server (eg: On M1, 00XY_NewVersionProcessor.vplmsession is filled with parameters).
  *
  * BE CAREFUL:
  * SetCustomizedParameters must be called before first call to Next
  *
  * @param iName
  *  iName can be "customdata" or "customlisteners" or customtransactionparameters
  * @param iKey
  (key_1, value_1),..., (key_N, value_N)
  iKey is used for key_1,...,key_N
  * @param iValue
  (key_1, value_1),..., (key_N, value_N)
  iValue is used for value_1,...,value_N
  */
  virtual HRESULT SetCustomizedParameters(const CATUnicodeString& iName, const CATOmxKeyString& iKey, const CATOmxAny& iValue) = 0;
};

#endif
