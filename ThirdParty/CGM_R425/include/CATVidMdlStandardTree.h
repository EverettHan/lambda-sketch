//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/06/07
//===================================================================
// CATVidMdlStandardTree.h
// Header definition of class CATVidMdlStandardTree
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/07 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlStandardTree_H
#define CATVidMdlStandardTree_H

#include <VisuDialog.h>
#include <CATVidMdlTreeAdapter.h>

class CATVidMdlTreeItem;

/** @ingroup groupVidModelViewModel
 * Basic implementation of a static tree based model provided by CID.
 *
 * This model stores elements as CATBaseUnknown_var instances. However, to be
 * able to build the view of an item, this item must be instrospectable
 * (because the view is data binded to the data item).
 *
 * This model must be associated to a CATVidCtlTreeView component in order to
 * be displayed.
 *
 * Adding an element to this model can be done in two different ways:
 * Then, the model takes the ownership of the given data item.
 *
 *
 * The following code snippet shows how a CATVidMdlStandardTree can be used:
 * @code
 * // Create the model for the tree
 * CATVidMdlStandardTree * pTreeModel = new CATVidMdlStandardTree();
 * CHECK_POINTER_RET(pTreeModel);
 *
 * // Initialize root element
 * CATVidMdlTreeItem * pItem = new CATVidMdlTreeItem(new DataItem("Root"), NULL);
 * pTreeModel->SetRootElement(pItem);
 *
 * // Creating an index on the root
 * CATVidMdlIndex rootIdx = pTreeModel->GetRoot();
 *
 * pTreeModel->Append(new DataItem("Object number 1"), rootIdx);
 * pTreeModel->Append(new DataItem("Object number 2"), rootIdx);
 * pTreeModel->Append(new DataItem("Object number 3"), rootIdx);
 * pTreeModel->Append(new DataItem("Object number 4"), rootIdx);
 * pTreeModel->Append(new DataItem("Object number 5"), rootIdx);
 * pTreeModel->Append(new DataItem("Object number 6"), rootIdx);
 * 
 *
 * // Retrieve a CATVidMdlIndex on the first child
 * CATVidMdlIndex firstIdx = pTreeModel->CreateIndex(0, 0, rootIdx);
 * // firstIdx points to the data element identified by the string
 * // "Object Number 1"
 *
 * // Retrieve a CATVidMdlIndex on the third child
 * CATVidMdlIndex thirdIdx = pTreeModel->CreateIndex(2, 0, rootIdx);
 * // thirdIdx points to the data element identified by the string
 * // "Object Number 3"
 *    
 * // Add children to the third child of the root
 * pTreeModel->Append(new DataItem("Object number 7"), thirdIdx);
 * pTreeModel->Append(new DataItem("Object number 8"), thirdIdx);
 *    
 * // Retrieve a CATVidMdlIndex on the second level child
 * CATVidMdlIndex secondLvlIdx = pTreeModel->CreateIndex(1, 0, thirdIdx);
 * // secondLvlIdx points to the data element identified by the string
 * // "Object Number 8"
 *
 * @endcode
 *
 */
class ExportedByVisuDialog CATVidMdlStandardTree: public CATVidMdlTreeAdapter
{
  CATDeclareClass;
public:
  /**
   * Default Constructor
   */
  CATVidMdlStandardTree();
  /**
   * Destructor
   */
  ~CATVidMdlStandardTree();
  /**
   * @copydoc CATIVidMdl#HasIndex
   *
   * For a standard tree model, HasIndex returns 0 when i_row doesn't correspond to
   * a valid index and i_column is not equal to 0.
   */
  virtual int HasIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#CreateIndex
   *
   * CreateIndex asserts when HasIndex returns 0
   * Create index of the root element if i_parent is not a valid index.
   * 
   * @note 
   * Use CreateIndex instead of the index constructor
   * in order to make sure to work with consistant indexes.
   */
  virtual CATVidMdlIndex CreateIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetParent
   *
   * Return an invalid index if i_index is the root index or if it is not a valid index.
   */
  virtual CATVidMdlIndex GetParent(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetRowCount
   *
   * Return the row number of the root element if i_index is not a valid index.
   */
  virtual int GetRowCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetColumnCount
   *
   * Return the column number of the root element if i_index is not a valid index, else return 1.
   */
  virtual int GetColumnCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#InsertRow
   *
   * Return FALSE if i_row doesn't correspond to a valid index and if i_parent is not a valid index.
   */
  virtual CATBoolean InsertRow(int i_row, const CATVidMdlIndex & i_parent);
  /**
  * @copydoc CATIVidMdl#InsertColumn
  *
  * Return FALSE if i_column doesn't correspond to a valid index and if i_parent is not a valid index.
  */
  virtual CATBoolean InsertColumn(int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#RemoveRow
   */
  virtual CATBoolean RemoveRow(int i_row, const CATVidMdlIndex & i_parent);
  /**
  * @copydoc CATIVidMdl#RemoveColumn
  */
  virtual CATBoolean RemoveColumn(int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetElement
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#SetElement
   */
  virtual CATBoolean SetElement(const CATVidMdlIndex & i_index, const CATBaseUnknown_var & i_value);
  /**
   * @copydoc CATIVidMdl#InsertItem
   */
  virtual CATBoolean InsertItem(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItem
   */
  virtual CATBoolean AppendItem(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendList
   */
  virtual CATBoolean AppendList(const CATSYPDynArray<CATBaseUnknown_var> & i_listOfItems, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#InsertItemClone
   */
  virtual CATBoolean InsertItemClone(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItemClone
   */
  virtual CATBoolean AppendItemClone(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#GetRoot
   */
  virtual CATVidMdlIndex GetRoot(int i_Column = 0);
  /**
   * @copydoc CATIVidMdl#Reset
   */
  virtual void Reset();
  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();
  /**
   * Inserts the introspectable i_item at the i_row position under the tree item referenced by i_parent.
   *
   * @param i_row the row where to insert i_item.
   * @param i_item the introspectable item to insert.
   * @param i_parent the index that references the parent tree item where to insert a child.
   *
   * @return TRUE if the item has been successfully inserted, FALSE otherwise.
   */
  CATBoolean Insert(int i_row, CATBaseUnknown_var i_item, const CATVidMdlIndex & i_parent);
  /**
   * Appends the introspectable i_item to the tree item referenced by i_parent.
   *
   * @param i_item the introspectable item to append.
   * @param i_parent the index that references the parent tree item where to append a child.
   *
   * @return TRUE if the item has been successfully appended, FALSE otherwise.
   */
  CATBoolean Append(CATBaseUnknown_var i_item, const CATVidMdlIndex & i_parent);
  /**
   * Get the model item referenced by the given index.
   *
   * @return the CATVidMdlTreeItem item referenced by the given index, if none, return NULL.
   */
  CATVidMdlTreeItem * GetItemFromIndex(const CATVidMdlIndex & i_index);
  /**
   * Set the root element with the given CATVidMdlTreeItem.
   *
   * @param i_pRoot the new root element to install in the model.
   */
  void SetRootElement(CATVidMdlTreeItem * i_pRoot);  
  /** 
   * Sets a flag indicating that a DataModifiedEvent will be sent whenever the model is informed of 
   * a modification of one of its node's datas.
   * It will works only if the data are CATSYPDataBlock (they sent an event whenever a property is modified)
   * And if the root item is a CATVidMdlRootTreeItem.
   */ 
  void SetDispatchDataModifiedEventFlag(int i_dispatchDataModifiedEventFlag);
  /** 
   * @return the flag indicating that a DataModifiedEvent will be sent whenever the model is informed of 
   * a modification of one of its node's datas.
   */
  int GetDispatchDataModifiedEventFlag() const;

protected:
  //This array is used to keep temporary in memory the model items.(whereas they are dereferenced by the model).
  //If we do not force this memory keeping, CATVidMdlAdapter::Reset() call lead to "dispose" the view.
  //Particularly, it consists in remove some event handlers which can have been instanciated from a data block of a DB factory.
  //The remove of these handlers cannot be done if model item (datablock) has been removed.
  //So just during the method duration, we keep the model items in this array.
  virtual CATSYPDynArray<CATBaseUnknown_var> KeepItemsTemporaryInMemory();

  virtual void GetAllIndexesFromRoot(CATVidMdlTreeItem * i_pItem, int i_column, CATSYPDynArray<CATVidMdlIndex> & oindexesList);

private:
  CATVidMdlIndex BuildIndexFromTreeItem(CATVidMdlTreeItem* i_pItem);

	int GetCurrentRow(const CATVidMdlIndex & i_fromIndex);
  /** The root element of the model */
  CATVidMdlTreeItem * _rootElement;
  int _dispatchDataModifiedEventFlag;
  // Copy constructor and assignement operator not implemented
  // ---------------------------------------------------------
  CATVidMdlStandardTree(const CATVidMdlStandardTree &);
  CATVidMdlStandardTree & operator= (const CATVidMdlStandardTree &);
  friend class CATVidMdlTreeItem;
};

//-----------------------------------------------------------------------

#endif
