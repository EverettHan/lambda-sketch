//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/07/02
//===================================================================
// CATVidGridView.h
// Header definition of class CATVidGridView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/07/02 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidGridView_H
#define CATVidGridView_H

#include <CATBaseUnknown.h>
#include <VisuDialog.h>
#include <CATLISTV_CATBaseUnknown.h>
#include <CATListOfInt.h>

class l_CATVidGridView;
class CATVidCtl;
class CATISYPCollection_var;
template <class T> class CATSYPConstArray;
class CATVidCtlAbstractItemsView;
class CATVidGridViewColumn;
class CATVidMdlIndex;

/**
 *
 * Define a grid for multi-columns control.
 *
 * @par Overview
 * This object lets a user define which columns will be displayed by the 
 * multi-columns control. Using this object, a user can define the number
 * of columns to display and also provide some information for the column
 * header.
 * If a multi-columns control doesn't have a CATVidGridView object associated
 * to it, its columns are automatically generated.
 *
 * @par
 * This object gathers all information used by a multi-columns list view to
 * display its columns.
 * In particular, a CATVidGridView object indicates how many columns have to be
 * displayed, the content of the header of each column, and possibly the data
 * template to use to display the content of each column.
 *
 */
class ExportedByVisuDialog CATVidGridView : public CATBaseUnknown
{

  CATDeclareClass;

public:

  CATVidGridView(CATVidCtlAbstractItemsView * iview = NULL);

  /** Default constructor */
  //CATVidGridView();
  /** Destructor */
  virtual ~CATVidGridView();

  /**
   * Indicate whether the gridview object contains some columns definition
   * to use to build the multi-list.
   *
   * @return 1 when the gridview object contains some columns definition,
   * 0 otherwise.
   */
  int HasContent() const;

  /**
   * Set whether the columns can be reordered or not.
   *
   * @note
   * Not implemented for the moment.
   *
   * @param i_flag 1 if the column can be reordered, 0 otherwise.
   */
  void SetReorderColumnsFlag(int i_flag);
  /**
   * Indicate whether the columns can be reordered or not.
   *
   * @note
   * Not implemented for the moment.
   *
   * @return 1 if the column can be reordered, 0 otherwise.
   */
  int GetReorderColumnsFlag() const;

  /**
   * Set the data template name to use to build the view of the header of
   * the columns of this grid.
   *
   * @note
   * This data template is used to build the view of the content of the columns
   * header when a custom header content is provided and no data template is
   * set at the column level. It ease the definition of a custom data template
   * when several identical custom headers are provided for columns.
   *
   * @param i_columnHeaderDataTemplate the data template name to use to build
   * the view of the header of the columns of this grid.
   */
  void SetColumnHeaderDataTemplate(const CATUnicodeString & i_columnHeaderDataTemplate);

  /**
   * Get the data template name used to build the view of the header of
   * the columns of this grid.
   *
   * @see CATVidGridView#SetColumnHeaderDataTemplate
   *
   * @return the data template name used to build the view of the header of
   * the columns of this grid.
   */
  CATUnicodeString GetColumnHeaderDataTemplate() const;

  /**
   * Set the stylesheet name that contains the data template used to build the
   * view of the column headers.
   *
   * @see CATVidGridView#SetColumnHeaderDataTemplate
   *
   * @param i_columnHeaderStyleSheet the stylesheet name that contains the data
   * template used to build the view of the column headers.
   */
  void SetColumnHeaderStyleSheet(const CATUnicodeString & i_columnHeaderStyleSheet);

  /**
   * Get the stylesheet name that contains the data template used to build the
   * view of the column headers.
   *
   * @see CATVidGridView#SetColumnHeaderDataTemplate
   *
   * @return the stylesheet name that contains the data template used to build
   * the view of the column headers.
   */
  CATUnicodeString GetColumnHeaderStyleSheet() const;

  /**
   * Adds the given column.
   */
  void AddColumn(CATVidGridViewColumn * i_pGridViewColumn);

  /**
   * Returns the column at the specified index (the first column has an index equal to 0).
   * @see GetCount
   */
  CATVidGridViewColumn * GetColumn(int i_index);

  /**
   * Move an input i_pGridViewColumn in another index position.
   * Input i_index must be between 0 and column number-1 included.
   * Otherwise, an assertion will occurs.   
   */
  void MoveColumnToPosition(CATVidGridViewColumn * i_pGridViewColumn, int i_index);
  
  /**
   * Try Launching by code cell edition.
   * The edition will work if : 
   *  1) Cell is existing and visible.
   *  2) Cell is editable.
   *
   * Do nothing if both above conditions are not rspected.   
   */
  void TryToEditCell(CATVidMdlIndex i_ModelIndex, int i_CellColumn);


 /**
 * Change VisibleFlag of a list of columns in one shot.
 * @param i_listOfColumns an array containing CATVidGridViewColumn *.
 * @param i_listOfVisibilityFlag a list containing the VisibleFalg values (1 to display the column, 0 otherwise).
 */
  void ChangeColumnsVisibility(const CATSYPConstArray<CATVidGridViewColumn *>& i_listOfColumns, CATListOfInt & i_listOfVisibilityFlag);

  //---------------------------------------------------------------------------
  // CATISYPCollection implementation
  //---------------------------------------------------------------------------
  /**
   * @copydoc CATISYPCollection#GetAt
   */
  virtual CATBaseUnknown_var GetAt(int i_index);
  /**
   * @copydoc CATISYPCollection#GetCount
   */
  virtual int GetCount();
  /**
   * @copydoc CATISYPCollection#Append
   */
  virtual void Append(const CATBaseUnknown_var & i_spObject);
  /**
   * @copydoc CATISYPCollection#AppendList
   */
  virtual void AppendList(const CATSYPConstArray<CATBaseUnknown_var> & i_list);
  /**
   * @copydoc CATISYPCollection#Remove
   */
  virtual void Remove(const CATBaseUnknown_var & i_spObject);
  /**
   * @copydoc CATISYPCollection#RemoveList
   */
  virtual void RemoveList(const CATSYPConstArray<CATBaseUnknown_var> & i_list);
  /**
   * @copydoc CATISYPCollection#Clear
   */
  virtual void Clear();
  /**
   * @copydoc CATISYPCollection#Contains
   */
  virtual int Contains(const CATBaseUnknown_var & i_spObject);
  /**
   * @copydoc CATISYPCollection#Append
   */
  virtual void Append(const CATListValCATBaseUnknown_var & i_list);
  /**
   * Ensure the conversions of CATVidGridView in CATISYPCollection.
   * Used by StyleProcessor.
   *
   * @return this object as a CATISYPCollection 
   */
  CATISYPCollection_var GetItems();

  /*
  *Private use only
  */
  l_CATVidGridView* GetLetter() const { return _pImpl; }

private:
  // Copy constructor and assignement operator are disabled
  CATVidGridView(const CATVidGridView &);
  CATVidGridView & operator= (const CATVidGridView &);

  // Implementation object
  l_CATVidGridView * _pImpl;  
	CATVidCtlAbstractItemsView * _pView;

};

#endif
