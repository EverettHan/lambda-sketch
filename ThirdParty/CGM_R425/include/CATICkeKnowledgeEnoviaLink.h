// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATICkeKnowledgeEnoviaLink.h
// Define the CATICkeKnowledgeEnoviaLink interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jun 2005  Creation: Code generated by the CAA wizard  sgq
//===================================================================
#ifndef CATICkeKnowledgeEnoviaLink_H
#define CATICkeKnowledgeEnoviaLink_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATICkeKnowledgeEnoviaLink;
#else
extern "C" const IID IID_CATICkeKnowledgeEnoviaLink ;
#endif

class CATUnicodeString;
class CATICkeLinkableAtom_var;
class CATIProxyObject_var;
class CATICkeKnowledgeEnoviaLinkListener_var;

//------------------------------------------------------------------

/**
* Interface used for pointing through product structure in ENOVIA context.
*
* @href CATICkeKnowledgeEnoviaLinkFactory, CATICkeKnowledgeEnoviaLinkListener
*/
class ExportedByKnowledgeItf CATICkeKnowledgeEnoviaLink: public CATBaseUnknown
{
	CATDeclareInterface;

public:

	virtual HRESULT GetInformation (CATUnicodeString& WeakType,
		CATUnicodeString& TypeOfPointed,
		CATUnicodeString& RoleOfPointed) = 0;

	// Returns a usable pointable object
	virtual HRESULT GetTarget (CATICkeLinkableAtom_var& oPointed,  int iLoad = 0) const = 0;

	// Returns the real pointedobject
	virtual HRESULT GetFinalTarget (CATBaseUnknown_var& oPointed,  int iLoad = 0) const = 0;

	// Returns the relay allowing to access the real pointable object
	virtual HRESULT GetRelay (CATBaseUnknown_var& oPointed) const = 0;

	// is the target loaded: indicates if the component is found and/or the atom
	virtual HRESULT IsTargetLoaded() const = 0;

	virtual HRESULT IsTargetLost(int &status) const = 0; // status=lost, not lost, don’t know

	// Note that this service returns an integer which is in fact a CATOmbLinkStatusServices::LinkResolutionStatus (from CATOmbLinkStatusServices.h)
	virtual int GetTargetStatus() const = 0;

	// get proxy if any
	virtual HRESULT GetProxy (CATIProxyObject_var& oProxy) = 0;

	// Add and Remove Listener
	virtual void AddListener (const CATICkeKnowledgeEnoviaLinkListener_var& iListener) = 0;
	virtual void RemoveListener (const CATICkeKnowledgeEnoviaLinkListener_var& iListener) = 0;

	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler(CATICkeKnowledgeEnoviaLink, CATBaseUnknown);

#endif
