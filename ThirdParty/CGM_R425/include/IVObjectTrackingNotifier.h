//===================================================================
// COPYRIGHT Dassault Systemes 2022/11/09
//===================================================================
// IVObjectTrackingNotifier.cpp
// Header definition of class IVObjectTrackingNotifier
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/11/09 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef IVObjectTrackingNotifier_H
#define IVObjectTrackingNotifier_H

#include "IVInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATMathTransformation.h"

//-----------------------------------------------------------------------
class CATSYPEventFactory;
class CATSYPEvent;
class CATSYPEventArgs;
class CATSYPEventHandler;
class CATSYPEventHandlersSupport;
class IVObjectTrackingEventArgs;

//-----------------------------------------------------------------------
class ExportedByIVInterfaces IVObjectTrackingNotification
{
public:
// Standard constructors and destructors
// -------------------------------------
  IVObjectTrackingNotification();
  virtual ~IVObjectTrackingNotification();

  IVObjectTrackingNotification (IVObjectTrackingNotification&);
  IVObjectTrackingNotification& operator=(IVObjectTrackingNotification&);

public:
// Attributes
// -------------------------------------
    enum PlayerState
    {
      NoState = 0,
      OnPlay,
      OnPause,
      OnStop
    };

    enum ImageSource
    {
      NoSource = 0,
      OnCameraLive,
      OnVideoFile
    };

    enum DisplayMode
    {
      NoShow = 0,
      OnShow
    };

    enum ModelDisplay
    {
      NotAssigned = 0,
      OnVisualization,
      OnOcclusion
    };


public:
// Methods
// -------------------------------------
  inline void SetImageSource(ImageSource iImageSource) { m_imageSource = iImageSource; };
  inline ImageSource GetImageSource() const { return m_imageSource; };
  //
  inline void SetPlayerState(PlayerState iplayerState) { m_playerState = iplayerState; };
  inline PlayerState GetPlayerState() const { return m_playerState; };
  //
  inline void SetCurrentVPTransfo(CATMathTransformation& iCurrentVPTransfo) { m_currentVPTransfo = iCurrentVPTransfo; };
  inline void GetCurrentVPTransfo(CATMathTransformation& oCurrentVPTransfo) { oCurrentVPTransfo = m_currentVPTransfo; };
  //
  inline void SetAABBDisplayMode(DisplayMode iAABBShow) { m_showAABB = iAABBShow; };
  inline DisplayMode GetAABBDisplayMode() const { return m_showAABB; };
  //
  inline void SetStatsDisplayMode(DisplayMode iStatsDataShow) { m_showStats = iStatsDataShow; };
  inline DisplayMode GetStatsDisplayMode() const { return m_showStats; };
  //
  inline void SetPrimitivesStatus(bool iStatus) { m_primitivesStatus = iStatus; };
  inline bool GetPrimitivesStatus() const { return m_primitivesStatus; };
  

//
//
//


private:
// Attributes
// -------------------------------------
  ImageSource m_imageSource;
  PlayerState m_playerState;
  CATMathTransformation m_currentVPTransfo;
  DisplayMode m_showAABB;
  DisplayMode m_showStats;
  bool m_primitivesStatus;
};


//-----------------------------------------------------------------------
class ExportedByIVInterfaces IVObjectTrackingNotifier: public CATBaseUnknown
{
  CATDeclareClass;

public:
// Standard constructors and destructors
// -------------------------------------
  IVObjectTrackingNotifier ();
  virtual ~IVObjectTrackingNotifier ();

public:
// Methods
// -------------------------------------
  int AddHandler(CATSYPEvent* ipEvent, CATSYPEventHandler* ipHandler, int iHandleConsumedEvents);
  int RemoveHandler(CATSYPEvent *ipEvent, CATSYPEventHandler *ipHandler);
  int Dispatch(CATSYPEventArgs *ipArgs);

  //CATSYPEvents
  static CATSYPEvent* ImageSourceUpdated();
  static CATSYPEvent* PlayerStateUpdated();
  static CATSYPEvent* SetPoseEvent();
  static CATSYPEvent* ShowAABBEvent();
  static CATSYPEvent* ShowStatsEvent();
  static CATSYPEvent* SaveLearningFileEvent();
  static CATSYPEvent* DisplayMSGToDlg();

  //Events Dispatchers
  void DispatchEvent(CATSYPEvent* EventToDispatch);
  void DispatchEvent(IVObjectTrackingEventArgs* ipEventArgsToDispatch);


//
// 
//


private:
// Attributes
// -------------------------------------
  static CATSYPEventFactory * _pEventFactory;
  CATSYPEventHandlersSupport* m_pSYPEventHandlerSupport;

private:
// Copy constructor and equal operator
// -----------------------------------
  IVObjectTrackingNotifier (IVObjectTrackingNotifier &);
  IVObjectTrackingNotifier& operator=(IVObjectTrackingNotifier&);

private:
// Methods
// -------------------------------------
  static CATSYPEventFactory *GetEventFactory();

};

//-----------------------------------------------------------------------

#endif
