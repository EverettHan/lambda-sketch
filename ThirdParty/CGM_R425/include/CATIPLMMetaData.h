// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMMetaData.h
// Define the CATIPLMMetaData interface
//
//===================================================================
//
// Usage notes:
//   This interface provides access to the meta data
//
//===================================================================
//  May 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMMetaData_H
#define CATIPLMMetaData_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMMetaData;
#else
extern "C" const IID IID_CATIPLMMetaData ;
#endif

class CATPLMDomain;
class CATString;
class CATListValCATString;
class CATListValCATUnicodeString;
class CATPLMEnvironment;
class CATPLMType;
class CATPLMTypeId;
class CATListPtrCATPLMDomain;
class CATListPtrCATPLMType;
class VPMIDicExtension;
class CATUnicodeString;

/**
* This interface provides access to the object, relation and function types managed by the provider inside a domain. The provider for which the domain has no significance will use a "default" domain.<br>
* It is recommended that the implementation of this interface keeps in a cache all the metadata definition because the objects managed in the Immersive Applications may point this metadata model.
*/
class ExportedByCATPLMServicesItf CATIPLMMetaData: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Load the Domain for the given domainId.
  * @param  iDomainId
  *     The domain ID.
  * @param  oDomain [out, CATBaseUnknown#Release]
  *     The loaded CATPLMDomain with the given Id.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Load is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Domain already loaded.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT LoadDomain(CATString *iDomainId, CATPLMDomain **oDomain) =0;

  /**
  * Returns the Domains for the given domainIds.
  * @param  iDomainIds
  *     The domain IDs.
  * @param  oDomains [out]
  *     The loaded CATPLMDomains with the given Ids.
  *     Ptrs to be released by caller.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Load is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>All the domains are already loaded (this case includes the empty iDomainIds case ). </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT LoadDomains (const CATListValCATString  & iDomainIds  , CATListPtrCATPLMDomain & oDomains)=0;

  /**
  * Returns the Domain for the given domainId.
  * The GetDomain method returns a NULL domain as far as the  domain  has not been loaded using the LoadDomain method.
  * @param  iDomainId
  *     The domain ID.
  * @param  oDomain [out, CATBaseUnknown#Release]
  *     The loaded CATPLMDomain with the given Id.
  */
  virtual HRESULT GetDomain(CATString *iDomainId, CATPLMDomain **oDomain) =0;

  /**
  * Returns the available list of Domain.
  * @param  oDomainId
  *     The domain ID list.
  * @param  oDomain
  *     The domain display name list
  */
  virtual HRESULT ListDomains(CATListValCATString **oDomainId, CATListValCATUnicodeString **oDomainAlias) =0;

  /**
  * Get the available environments.
  *
  * <br><b>Role</b>: Provide to the user the different environments available.
  *
  * @param CATLISTV(CATString) & oEnvId [out]
  *   The environment ids
  * @param CATLISTV(CATUnicodeString) & oEnvAlias [out]
  *   The environment display names.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> At least one environment is available.
  * <dt> <code>S_FALSE</code>  <dd> No environment available.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT ListEnvironments( CATListValCATString & oEnvId, CATListValCATUnicodeString & oEnvAlias) =0;

  /**
  * Load the environment identified through the provided identifier. This will result in the loading of the corresponding domains.
  *
  * <br><b>Role</b>: Provide the user an entry point to be able to load the metadata associated to a provided environment.
  *
  * @param iEnvId [in]
  *   The environment identifier.
  * @param oEnvironment [out, CATBaseUnknown#Release]
  *   The loaded environment. Release the pointer when useless.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> The provided environment was successfully loaded.
  * <dt> <code>E_FAIL</code>   <dd> Failure of the load operation.
  *
  */
  virtual HRESULT LoadEnvironment( const CATString & iEnvId, CATPLMEnvironment ** oEnvironment ) =0;

  /**
  * Returns the Environment for the given EnvironmentId.
  * The GetEnvironment method returns a NULL Environment as far as the  environment  has not been loaded using the LoadEnvironment method.
  * @param  iEnvId
  *     The environment ID.
  * @param  oEnvironment [out, CATBaseUnknown#Release]
  *     The loaded CATPLMEnvironment with the given Id.
  * @param  iType 
  *     The Repository which load the Environment from. By default the repository is undefined. Gets the Environment whatever the Repository source
  */
  virtual HRESULT GetEnvironment(const CATString & iEnvId, CATPLMEnvironment ** oEnvironment) =0;

  /**
  * Get the available Modelers.
  *
  * <br><b>Role</b>: Provide to the user the different modelers available.
  *
  * @param oModelerId [out]
  *   The Modeler ids
  * @param oModelerAlias [out]
  *   The modeler display names.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> At least one Modeler is available.
  * <dt> <code>S_FALSE</code>  <dd> No Modeler available.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  */
  virtual HRESULT ListModelers( CATListValCATString & oModelerId, CATListValCATUnicodeString & oModelerAlias ) =0;

  /**
  * Load the Modeler identified through the provided identifier.
  *
  * <br><b>Role</b>: Load the given Modeler.
  *
  * @param const CATString & iModelerId [in]
  *   The Modeler identifier.
  * @param oTypes [out]
  *   The types of components that can be examined in this modeler.
  *   Ptrs to be released by caller.
  *
  * @return
  *     <dt><code>S_OK</code></dt>
  <dd> The provided Modeler was successfully loaded.
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIPLMErrorStack</dd>
  *
  */
  virtual HRESULT LoadModeler( const CATString & iModelerId, CATListPtrCATPLMType & oTypes ) =0;

  /**
  * Returns the Modeler for the given ModelerID.
  * The GetModeler method returns a NULL Modeler as far as the  Modeler  has not been loaded using the LoadModeler method.
  * @param  iModelerId
  *     The MOdeler ID.
  * @param oTypes [out]
  *   The types of components that can be examined in this modeler. Release the returned objects when useless.
  *   Ptrs to be released by caller.
  */
  virtual HRESULT GetModeler(const CATString & iModelerId, CATListPtrCATPLMType & oTypes ) =0;

  /**
  * Returns the PLM Type from a type identification. The PLMType's environment has to be loaded before calling this service 
  *
  * <br><b>Role</b>: Returns the PLM Type from a type identification.
  *
  * @param iTypeId [in]
  *   The Type identifier.
  * @param oType [out, CATBaseUnknown#Release]
  *   The CATPLMType. Release the pointer when useless. NULL if the PLMType's environment has not been Loaded
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> successful.
  * <dt> <code>E_FAIL</code>   <dd> Failure. the Environment for the PLMType may not be Loaded
  */
  virtual HRESULT GetPLMTypeFromTypeId( const CATPLMTypeId iTypeId, CATPLMType ** oType) =0;

  /**
  * Returns the DataBase sites.
  * @param  oSiteNames
  *     The list of sites managed by the Repository.
  */
  virtual HRESULT ListSiteNames(CATListValCATUnicodeString * oSiteNames) =0;

#ifdef CATIAR418
  virtual HRESULT AddExtension(VPMIDicExtension* ipExtensionType) = 0;

  virtual HRESULT EnrichExtension(VPMIDicExtension* ipExtensionType) = 0;
#endif
  virtual HRESULT SwitchSecurityContext(CATPLMType* ipType) = 0;

  virtual HRESULT BuildMaskForPackage(const CATUnicodeString& iPackageName) = 0;

  virtual HRESULT ListDomains(CATListValCATString& olDomainId,CATListValCATUnicodeString& olDomainAlias) = 0;

  virtual HRESULT ListDomains(CATPLMDomainList& olDomain,CATBoolean isCheckVisibilityActivated = FALSE) = 0;

#if !defined(_WINDOWS_SOURCE) \
           /* PLMAdapter  */ || defined(__CATPLMImplAdapterClass) || defined(__TSTCATPLMxConnectListModelers) || defined(__TSTCATPLMxConnectListEnvironments) || defined(__TSTCATPLMxConnectListDomains) || defined(__TSTCATPLMxConnectLoadModeler)
  virtual CATBoolean IsMetadataLoaded() const = 0;

  virtual CATBoolean IsAdminLoaded() const = 0;

  virtual void CleanUp() = 0;
#endif
};

#endif
