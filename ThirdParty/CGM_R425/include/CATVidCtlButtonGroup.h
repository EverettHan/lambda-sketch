//===================================================================
// COPYRIGHT Dassault Systemes 2018-07-03
//===================================================================
// CATVidCtlButtonGroup.cpp
// Header definition of class CATVidCtlButtonGroup
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018-07-03 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATVidCtlButtonGroup_H
#define CATVidCtlButtonGroup_H


// VisuImmersiveDialog framework
#include <VisuDialog.h>
#include <CATVidCtlStack.h>
#include <CATVidLayConstraintsAndWidget.h>
#include <CATVidCtl.h>

// IntrospectionInfrastructure framework
#include <CATSYPArray.h>

// System framework
#include <CATUnicodeString.h>
#include <CATBoolean.h>

//-----------------------------------------------------------------------

/*
* Definition :
* ============
*
* + Button group is a button container which handles the selection of its items.
*
* Scope and Limitations :
* =======================
*
* + Consistent Button type only should be added to ButtonGroup (i.e. only CATVidCtlButton or only CATVidCtlRadioButton ...)
*
* + ButtonGroup is based upon button value which implies the following constraints :
*   => Button value must exist and must be unique per button as it works as a button identifier
*
* + Same Button should not be added several times to the ButtonGroup
*
* + ButtonGroup does not enforce the above constraints as its callback is called after the item has been added to the collection.
*
*
* Possible Improvements :
* =======================
*
* + Add an ID unique to each Button (inside Button class), created by a random generator when Button constructor is called,
*   and use an array of IDs instead of an array of values to identify the checked Button in the ButtonGroup.
*
* + Add a callback inside CATVidCtlCollection before the item is added to the collection, to be able to prevent invalid adds.
*
* Sample :
* ========
* @code
*
*  #include <CATVidCtlButtonGroup.h>
*  #include <CATVidCtlRadioButton.h>
*  #include <CATVidCtlButton.h>
*  #include <CATVidWidget.h>
*  #include <CATVidLayStackConstraints.h>
*
*  // myParentWidget represents the parent widget to which the ButtonGroup with affiliated.
*  CATVidWidget * myParentWidget;
*
*  // Create a button group named "MyButtonGroupRadioName"
*  CATVidCtlButtonGroup* pButtonGroup = new CATVidCtlButtonGroup();
*  pButtonGroup->SetFather(myFatherWidget); //myFatherWidget might be NULL
*  CATString identifier("MyButtonGroupRadioName");
*  pButtonGroup->SetName(identifier);
*
*  // Create some Radio Buttons and set a value, for instance a CATUnicodeString
*  CATVidCtlButton * pButton1 = CATVidCtlRadioButton::CreateRadioButton(pButtonGroup, "MyRadio1Name");
*  pButton1->SetLabel("MyRadio1Label");
*  CATBaseUnknown_var var_value_set1 = CATBoxingOfCATUnicodeString::Box("MyRadio1Value");
*  pButton1->SetValue(var_value_set1);
*  pButton1->SetRequestedMinimumDimension(CATMathPoint2Df(50.f, 50.f));
*
*  CATVidCtlButton * pButton2 = CATVidCtlRadioButton::CreateRadioButton(pButtonGroup, "Radio2");
*  ...
*
*  CATVidCtlButton * pButton3 = CATVidCtlRadioButton::CreateRadioButton(pButtonGroup, "Radio3");
*  ...
*
*  // Add Button at the end of the ButtonGroup collection
*  CATVidLayStackConstraints cst1;
*  pButtonGroup->SetConstraints(pButton1, cst1);
*  CATVidLayStackConstraints cst3;
*  pButtonGroup->SetConstraints(pButton3, cst3);
*
*  // Add Button at a specified index in ButtonGroup
*  int indexWhereToInsert = 1;
*  pButtonGroup->InsertAt(CATBaseUnknown_var(pButton2), indexWhereToInsert);
*
*  // Remove Button from ButtonGroup
*  pButtonGroup->RemoveWidget(pButton3);
*
*  // Get Button index in ButtonGroup
*  int index = pButtonGroup->GetIndex(pButton2);
*
*  // Get Button from its index in ButtonGroup collection
*  int indexToGet = 1;
*  CATVidWidget * pWidget = pButtonGroup->GetAt(indexToGet);
*  CATVidCtlButton * pButtonGetAt = CAT_DYNAMIC_CAST(CATVidCtlButton, pWidget);
*  if (pButtonGetAt)
*  {
*    // Do some stuff
*  }
*
*  // Get Button from its value from ButtonGroup collection
*  CATVidWidget * pWidget = pButtonGroup->GetItemFromValue(var_value_set2);
*  CATVidCtlButton * pButtonFromValue = CAT_DYNAMIC_CAST(CATVidCtlButton, pWidget);
*  if (pButtonFromValue)
*  {
*    const CATBaseUnknown_var& var_value_get = pButtonFromValue->GetValue();
*    CATUnicodeString us_value;
*    CATBoxingOfCATUnicodeString::Unbox(var_value_get, us_value);
*  }
*
*  // Check Button from its index in ButtonGroup collection
*  int indexToSelect = 1;
*  pButtonGroup->SelectIndex(indexToSelect);
*
*  // Move one button from one index to another one in ButtonGroup collection
*  int originIndex = 2, destIndex = 1;
*  pButtonGroup->MoveTo(originIndex, destIndex);
*
*  // Check Button from its value in ButtonGroup
*  pButtonGroup->SelectValue(var_value_set2);
*
*  // Get Button count in ButtonGroup collection
*  pButtonGroup->GetCount()
*
*  // Register/Unregister to/from ButtonGroup ValueChanged event
*  http://wikitechno/wiki/index.php/VID_:_Propagating_Events#Listening_To_A_Button_Click
*
*  // Trigger ButtonGroup ValueChanged event by checking/unchecking Button
*  pButton2->SetCheckState(TRUE);
*
*  // Trigger ButtonGroup ValueChanged event by setting new value to Button
*  CATBaseUnknown_var var_value_set1_bis = CATBoxingOfCATUnicodeString::Box("MyNewButton1Value**");
*  pButton1->SetValue(var_value_set1_bis);
*
*  // Set directly a button group value
*  CATSYPDynArray<CATBaseUnknown_var> valueArrayToSet;
*  CATBaseUnknown_var var_value_set = CATBoxingOfCATUnicodeString::Box("MyItemValue**");
*  valueArrayToSet.Add(var_value_set);
*  CATBoolean res = pButtonGroup->SetValue(valueArrayToSet);
*
*  // Get button group value
*  const CATSYPDynArray<CATBaseUnknown_var>& valueArrayToGet = pButtonGroup->GetValue();
*
* @endcode
*/


class ExportedByVisuDialog CATVidCtlButtonGroup : public CATVidCtlStack
{
  CATDeclareClass;

public:
  enum CATVidCtlButtonGroupType
  {
    STANDARD,
    CHECKBOX,
    RADIO
  };

  /** @name Events
  * The events dispatched by @ref CATVidCtlButtonGroup instances.
  */
  /**@{*/
  /**
  * Get the @c ValueChanged event.
  *
  * The @c ValueChanged event is dispatched on the button when
  *
  * @par EventProperties
  *   - Name: @c "ValueChanged"
  *   - Type of propagation: @c NoPropagation
  *   - Type of argument: @ref CATSYPEventArgs
  *
  * @return the event instance. @c AddRef has NOT been called on
  * the returned pointer.
  */
  static CATSYPEvent* ValueChanged();
  /**@}*/

  /**
  * Default constructor.
  * No associsated style, use the static factory CreateButtonGroup.
  */
  CATVidCtlButtonGroup();

  /**
  * Get the Button its Value.
  * @param i_value the value
  * @return the Button in the ButtonGroup that matches the value.
  */
  CATVidWidget* GetItemFromValue(const CATBaseUnknown_var& i_value);

  /**
  * Get the index of a button in the button group collection
  * @param i_pWidget the button to get the index for (index starts at 0)
  * @return the index of the button or -1 if the button is not part of the collection
  */
  int GetIndex(CATVidWidget* i_pWidget);

  /**
  * Check the Button located at a specified index in the ButtonGroup.
  * @param i_index the index (index starts at 0)
  * @return nothing
  */
  void SelectIndex(int i_index);

  /**
  * Check the Button with the matching value in the ButtonGroup.
  * @param i_value the value
  * @return nothing
  */
  void SelectValue(const CATBaseUnknown_var& i_value);

  /**
  * Set a value to ButtonGroup.
  * Value validity is checked and will not be set if the given value is not valid
  * @param i_value the value of the button group
  * @return TRUE if value was added, FALSE otherwise
  */
  CATBoolean SetValue(const CATSYPDynArray<CATBaseUnknown_var>& i_value);

  /**
  * @return the value of the button group.
  */
  const CATSYPDynArray<CATBaseUnknown_var>& GetValue() const;

  /**
  * Handle events for button group.
  * Can be used in sypstyle.
  * Needs to be public because of sypintro.
  * @param i_pSender
  * @param i_pArgs
  * @return nothing
  */
  void HandleEvent(CATBaseUnknown* i_pSender, CATSYPEventArgs* i_pArgs);

  /** @copydoc CATISYPCollection#Clear */
  virtual void Clear() override;
protected:

  virtual ~CATVidCtlButtonGroup();

  // Overriden methods
  virtual void InternalSetConstraints(CATVidLayConstraintsAndWidget* i_pConstraintsAndWidget, CATBoolean i_newWidget, CATVidLayConstraints* i_pOldConstraints);
  virtual void InternalRemoveWidget(CATVidLayConstraintsAndWidget* i_pConstraintsAndWidget, CATBoolean i_widgetDeleted);

private:

  CATVidCtlButtonGroup(CATVidCtlButtonGroup&);
  CATVidCtlButtonGroup& operator=(CATVidCtlButtonGroup&);

  // Handling of events
  void _AddHandler(CATVidCtlButton* i_pButton);
  void _HandleEventInternal(CATBaseUnknown* i_pSender, CATSYPEventArgs* i_pArgs);
  void _RemoveHandler(CATVidCtlButton* i_pButton);

  // Translate button checkmode to buttongroup enum
  unsigned int _TranslateToCheckMode(CATVidCtlButtonGroupType i_type);
  CATVidCtlButtonGroupType _TranslateFromCheckMode(unsigned int i_checkmode);

  // Update ButtonGroup type with the checkMode of the first Button in collection
  void _UpdateType();

  // Update Button style
  void _UpdateStyle();

  // Handle directly button group value (in case of add/remove item in collection). Matching items wont be updated using these methods.
  void _AddItemValue(const CATBaseUnknown_var& i_varValue, CATBoolean i_bCheckState);
  void _RemoveItemValue(const CATBaseUnknown_var& i_varValue, CATBoolean i_bCheckState);
  void _UpdateItemValue(const CATBaseUnknown_var& i_varOldValue, const CATBaseUnknown_var& i_varNewValue);
  void _UpdateValue(const CATBaseUnknown_var& i_varValue, CATBoolean i_bCheckState);

  // Apply button group value specified by API client. Button group value will be updated through item events callbacks.
  void _ApplyValue(const CATSYPDynArray<CATBaseUnknown_var>& i_value);

  // Check the validity of the button group value provided by API client
  CATBoolean _isValueValid(const CATSYPDynArray<CATBaseUnknown_var>& i_value);

  // Check that the added item is compliant with the button group. If not assert.
  void _CheckAddedItemConformity(CATVidWidget* pWidget);

  //Compare 2 button group values
  int _compareValue(const CATSYPDynArray<CATBaseUnknown_var>& i_value1, const CATSYPDynArray<CATBaseUnknown_var>& i_value2);

  // Notify ButtonGroup client of ValueChanged with event
  void _DispatchValueChanged();

  // callbacks
  void _ButtonValueChanged(CATSYPEventArgs* i_pArgs);
  void _ButtonCheckStateChanged(CATSYPEventArgs* i_pArgs);

  CATSYPEventHandler* _pSYPEventHandler;
  CATVidCtlButtonGroupType              _type;
  CATBoolean                            _preventValueChangedEvent;

  CATSYPDynArray<CATBaseUnknown_var>    _value;
};
//-----------------------------------------------------------------------

#endif
