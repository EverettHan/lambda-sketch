// COPYRIGHT Dassault Systemes 2009
//===================================================================
// PLMIPointingVariantsMngrFactory.h
// Define the PLMIPointingVariantsMngrFactory interface
//===================================================================
//  June 2009  Creation: Code generated by the LRG wizard
//===================================================================
#ifndef PLMIPointingVariantsMngrFactory_H
#define PLMIPointingVariantsMngrFactory_H

/**
* @level Protected
* @usage U3
*/

#include "CATBaseUnknown.h"
#include "PLMPointingCmpVarsMgmt.h"
class CATListPtrCATIPLMComponent;
class CATICfgOperationInput;
class PLMIPointingVariantsManager;
class PLMIPointingVariantsManager_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMPointingCmpVarsMgmt IID IID_PLMIPointingVariantsMngrFactory;
#else
extern "C" const IID IID_PLMIPointingVariantsMngrFactory ;
#endif

#define PLMPointingVariantsMngrFactory_Component "PLMPointingVariantsMngrFactory"

//------------------------------------------------------------------

/**
* Factory to create synchronous or asynchronous managers of variants of pointing plm components.
*
* @example
*  PLMIPointingVariantsMngrFactory *pPLMPointingVariantsMngrFactory = NULL;
*  if (SUCCEEDED(::CATInstantiateComponent(PLMPointingVariantsMngrFactory_Component,IID_PLMIPointingVariantsMngrFactory,(void **)&pPLMPointingVariantsMngrFactory))&&pPLMPointingVariantsMngrFactory)
*  {
*    ...
*  }
*  CATSysReleasePtr(pPLMPointingVariantsMngrFactory);
*/
class ExportedByPLMPointingCmpVarsMgmt PLMIPointingVariantsMngrFactory: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Service to create a SYNCHRONOUS manager of variants of impacted pointing plm components in session.
  *
  *  @param opPLMPointingVariantsMngr (output parameter)
  *      The created synchronous manager.
  *   @return
  *     <ul>
  *       <li> S_OK if the manager has been successfully created.</li>
  *       <li> E_INVALIDARG if some of the input arguments are not valid.</li>
  *       <li> E_FAIL if the creation of the manager failed.<br>
  *           Use @href CATError#CATGetLastError and @href CATError#GetMsgId to retrieve additional 
  *           information about the reason of the failure.
  *           Eventually release the @href CATError you retrieved and call @href 
  *           CATError#CATCleanLastError to clean the error manager.
  *           <ul>
  *             <li><tt>PointingCmpVarMngr_ERR_05</tt>:</li>
  *                There is already a manager in use.
  *           </ul>
  *        <li> E_UNEXPECTED otherwise.
  *      </ul>
  */
  virtual HRESULT CreateSynchronousManager(PLMIPointingVariantsManager*& opPLMPointingVariantsMngr)=0;

  /**
  * Service to create an ASYNCHRONOUS manager to manage the variants of a given set of pointing components in session.
  *
  *  @param  iSetOfPointingComponentsToManage
  *      The set of pointing components in session which variants to be managed.<br>
  *      This set must not be provided by caller as empty (size>0)
  *  @param  opPLMPointingVariantsMngr (output parameter)
  *      The created asynchronous manager for the given set of pointing components in session which variants to be managed.
  *   @return
  *     <ul>
  *       <li> S_OK if the asynchronous manager has been successfully created.</li>
  *       <li> E_INVALIDARG if some of the input arguments are not valid.</li>
  *       <li> E_FAIL if the creation of the manager failed.<br>
  *           Use @href CATError#CATGetLastError and @href CATError#GetMsgId to retrieve additional 
  *           information about the reason of the failure.
  *           Eventually release the @href CATError you retrieved and call @href 
  *           CATError#CATCleanLastError to clean the error manager.
  *           <ul>
  *             <li><tt>PointingCmpVarMngr_ERR_05</tt>:</li>
  *                There is already a manager in use.
  *           </ul>
  *        <li> E_UNEXPECTED otherwise.
  *      </ul>
  */
  virtual HRESULT CreateAsynchronousManagerForPointingComponents(const CATListPtrCATIPLMComponent& iSetOfPointingComponentsToManage,PLMIPointingVariantsManager*& opPLMPointingVariantsMngr)=0;

  /**
  * Service to create an ASYNCHRONOUS manager to manage the variants of plm components in session that are pointing to the given
  * set of input instances <tt>iSetOfPointedInstances</tt>
  *
  *  @param  iSetOfPointedInstances
  *      The set of instances in session pointed by plm components which variants will be managed.<br>
  *      This set must not be provided by caller as empty (size>0)
  *  @param  opPLMPointingVariantsMngr (output parameter)
  *      The created asynchronous manager for the given set of instances in session pointed by plm components which variants will be managed.
  *   @return
  *     <ul>
  *       <li> S_OK if the asynchronous manager has been successfully created.</li>
  *       <li> E_INVALIDARG if some of the input arguments are not valid.</li>
  *       <li> E_FAIL if the creation of the manager failed.<br>
  *           Use @href CATError#CATGetLastError and @href CATError#GetMsgId to retrieve additional 
  *           information about the reason of the failure.
  *           Eventually release the @href CATError you retrieved and call @href 
  *           CATError#CATCleanLastError to clean the error manager.
  *           <ul>
  *             <li><tt>PointingCmpVarMngr_ERR_05</tt>:</li>
  *                There is already a manager in use.
  *           </ul>
  *        <li> E_UNEXPECTED otherwise.
  *      </ul>
  */
  virtual HRESULT CreateAsynchronousManagerForPointedInstances(const CATListPtrCATIPLMComponent& iSetOfPointedInstances,PLMIPointingVariantsManager*& opPLMPointingVariantsMngr)=0;

  /**
  * Service to force the unregistration of a manager that is currently used.
  *
  *  @param  ispPLMPointingVariantsMngr
  *      The manager to unregister. It becomes unusable by the way.
  *   @return
  *     <ul>
  *       <li> S_OK if the manager has been successfully unregistered.</li>
  *       <li> E_INVALIDARG if some of the input arguments are not valid.</li>
  *       <li> E_FAIL if the unregistration of the manager failed.</li>
  *       <li> E_UNEXPECTED otherwise.</li>
  *      </ul>
  */
  virtual HRESULT UnregisterAndDestroyManager(const PLMIPointingVariantsManager_var &ispPLMPointingVariantsMngr)=0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIPointingVariantsMngrFactory, CATBaseUnknown);

#endif
