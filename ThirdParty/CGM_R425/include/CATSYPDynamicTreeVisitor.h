//===================================================================
// COPYRIGHT  2013/08/02
//===================================================================
// CATSYPDynamicTreeVisitor.cpp
// Header definition of class CATSYPDynamicTreeVisitor
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/08/02 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATSYPDynamicTreeVisitor_H
#define CATSYPDynamicTreeVisitor_H

#include "CATStyleProcessor.h"
#include "CATSYPMetaClass.h"
#include "CATISYPIntrospectable.h"
#include "CATISYPCollection.h"
#include "CATISYPPresenter.h"
#include "CATSYPModelTag.h"
#include "CATSYPModelTemplate.h"
#include "CATSYPModelTagFactory.h"
#include "CATLISTP_Declare.h"
#include "CATSYPStyleProcessor.h"
#include <vector>

class CATSYPErrorReportFactory;
class CATListPtrCATSYPModelTag;

//-----------------------------------------------------------------------
class ExportedByCATStyleProcessor CATSYPDynamicTreeVisitor
{
public:
    enum ErrorCodeEnum{
    NoError = 0,
    Error,
    FATAL_ERROR,
  };

  // Standard constructors and destructors
  // -------------------------------------
  CATSYPDynamicTreeVisitor (const CATSYPHashMap<CATUnicodeString, CATSYPModelTagFactory*>& i_namespaceMap, CATBoolean i_bVisitEveryObject = FALSE);
  CATSYPDynamicTreeVisitor (const CATSYPHashMap<CATUnicodeString, CATSYPModelTagFactory*>& i_namespaceMap, 
    const CATUnicodeString& i_templateName,
    const CATUnicodeString& i_variationName,
	CATBoolean i_bVisitEveryObject = FALSE);
  virtual ~CATSYPDynamicTreeVisitor ();
  CATSYPModelTemplate* GetResult();
  /** i_spObject has to be an introspectableObject*/
  HRESULT GenerateModel(CATBaseUnknown* i_object);
  INLINE CATBoolean GetModelViewComponentFlag() { return _bIsModelViewComponentFlag; };
  CATBaseUnknown* GetRootWidget()const { return (CATBaseUnknown*)((CATBaseUnknown_var)_rootWidgetWR); }
  CATBaseUnknown* GetObjectFromMapStructure(const CATSYPModelTag* i_pTag);
  const CATSYPDynArray<const CATSYPModelTag*>& GetObjectsHierarchyStack();
  CATBoolean IsModelViewComponent() { return _bIsModelViewComponentFlag; };
  CATUnicodeString GetSypNameFromObject(const CATISYPIntrospectable_var& i_spIntrospectable);
  CATSYPModelTag* GetModelTagFromNamedObjectsMap(CATUnicodeString& i_sypName);
  const CATSYPHashMap<CATUnicodeString, CATBaseUnknown_WR>& GetModelViewControlsMap();
private:
  const CATUnicodeString& GetCurrentNamespaceURI()const;
  void SetTemplateName(const CATUnicodeString& i_templateName);
  void SetVariationName(const CATUnicodeString& i_variationName);
  CATBoolean IsTagPresentInHierarchyStack(CATSYPModelTag* i_pTag);
  CATBoolean _bVisitEveryObject;
  INLINE void SetModelViewComponentFlag(CATBoolean i__bIsModelViewComponentFlag) { _bIsModelViewComponentFlag = i__bIsModelViewComponentFlag; };
  CATBoolean IsObjectInObjectsMap(const CATISYPIntrospectable_var& i_spIntrospectable);
  CATBoolean _bIsModelViewComponentFlag;
  /*
  * Return if input i_spObject templated or not
  * @param i_spObject : widget to check
  */
  int IsTemplate(const CATBaseUnknown_var& i_spObject);
  CATSYPDynamicTreeVisitor (CATSYPDynamicTreeVisitor &);
  CATSYPDynamicTreeVisitor& operator=(CATSYPDynamicTreeVisitor&);
  CATSYPModelTag* BuildModelTagAndProperties(const CATSYPMetaClass* i_pMetaClass, unsigned int i_containerType, CATISYPIntrospectable_var& i_spIntrospectable);
  CATSYPModelTemplate* CreateTemplate(const CATBaseUnknown_var& spObject,const CATSYPMetaClass* pMetaClass);
  ErrorCodeEnum BuildPropertiesFromMetaClass(const CATSYPMetaClass* i_pMetaClass,unsigned int i_containerType,CATSYPModelTag* i_pModelTag,CATISYPIntrospectable_var& i_spObject);
  CATISYPCollection_var GetImplicitCollection(const CATBaseUnknown_var& spObject, const CATSYPMetaClass& i_SYPMetaClass);
  CATISYPPresenter_var GetImplicitPresenter(const CATBaseUnknown_var& spObject, const CATSYPMetaClass& i_SYPMetaClass);
  CATBaseUnknown_var sGetSYPProperty(const CATUnicodeString& i_propertyName, const CATSYPMetaClass& i_SYPMetaClass, const CATBaseUnknown_var& i_spObject);
  const CATSYPHashMap<CATUnicodeString, CATSYPModelTagFactory*>& _namespaceMap;   //To be filled from CATSYPModelBuilder _namespaceMap
  const CATSYPModelTagFactory* GetModelTagFactory(const CATUnicodeString & i_URI) const;
  const CATSYPModelTag* FindObjectInHierarchyFromClassName( const CATUnicodeString &i_className,unsigned int i_containerType );	//Not Used
  ErrorCodeEnum AddBindings();
  ErrorCodeEnum CreateTriggers(const CATBaseUnknown_var& i_Introspectable);
  ErrorCodeEnum SetArbitraryElementName(CATSYPModelTag * i_pModelTag);
  const CATSYPHashMap<CATUnicodeString, CATListPtrCATSYPModelTag*>& GetMapStructure() const;
  const CATSYPHashMap<CATUnicodeString, CATSYPModelTag*>&  GetNamedModelTag() const;
  void AddToMapStructure(CATSYPModelTag* i_pTag,const CATISYPIntrospectable_var& i_spIntrospectable);
  CATListPtrCATSYPModelTag** GetListFromMapStructureForClass(CATUnicodeString i_className);
  //Fathertag can be NULL for first tag
  HRESULT Visit(CATBaseUnknown* i_spObject,CATSYPModelTag* pFatherTag);
  HRESULT ReleaseMapStructure();

private:
  CATBaseUnknown_WR _rootWidgetWR;
  CATUnicodeString _namespaceURI;
  CATSYPModelTemplate* _pModelTemplate;
  CATUnicodeString _templateName;
  CATUnicodeString _variationName;
  CATBoolean _bIsFirstNode;
  CATSYPHashMap<CATUnicodeString, CATListPtrCATSYPModelTag*> _objectsListMap;
  CATSYPHashMap<CATUnicodeString, CATSYPModelTag*> _namedObjectsMap;
  CATSYPHashMap<CATUnicodeString, CATBaseUnknown_WR> _objectsMap;
  CATSYPDynArray<const CATSYPModelTag*> _objectsHierarchyStack;
  CATSYPErrorReportFactory* _pErrorReportFactory;
  CATSYPHashMap<CATUnicodeString, CATBaseUnknown_WR> _modelViewControlsMap;
  CATListOfCATUnicodeString _mapStrutureKeys;
  std::vector<CATSYPModelTag*> _modelTagsToRelease;
};

//-----------------------------------------------------------------------

#endif
