// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlSlider.h
// Header definition of CATVidCtlSlider
//
//===================================================================
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlSlider_H
#define CATVidCtlSlider_H

#include "VisuDialog.h"
#include "CATVidCtlAbstractSlider.h"
#include "CATVidLaySideAttach.h"
#include "CATBoolean.h"
#include "CATVidColor.h"
#include <CATSYPDeclareEnumFactory.h>

class CATVidGPSquare;
class CATVidCtlHandle;
class CATVidColor;
class CATVidLaySideAttach;
//-----------------------------------------------------------------------
/**
 * @ingroup VIDControls
 * This widget provides an horizontal or vertival slider, wityh optional ticks marks.
 * @par Creation
 * @code
 * CATVidCtlSlider* pButton = CATVidCtlSlider::CreateSlider(myCommandParent, "WidgetName");
 * @endcode
 * @image html CATVidCtlSlider.png V6 theme
 * @image html CATVidCtlSlider-Vertical.png V6 theme
 * @image html CATVidCtlSlider-Bright.png V6 theme, bright ambiance
 * @image html CATVidCtlSlider-3DViaShape.png 3DViaShape
 */
class ExportedByVisuDialog CATVidCtlSlider: public CATVidCtlAbstractSlider
{
  CATDeclareClass;

public:

  /** The tick position */
  enum TickPosition {
    /** No tick is display */
    NoTicks=0, 
    /** Ticks are displayed both sides of the slider*/
    TicksBothSides, 
    /** Ticks are displayed above the slider, if horizontal. Ignored otherwise*/
    TicksAbove, 
    /** Ticks are displayed below the slider, if horizontal. Ignored otherwise*/
    TicksBelow, 
    /** Ticks are displayed at the left of the slider, if vertical. Ignored otherwise*/
    TicksLeft, 
    /** Ticks are displayed at the right of the slider, if vertical. Ignored otherwise*/
    TicksRight };

  /**
   * Constructs a styled CATVidCtlSlider.
   * @param i_pParent
   *   The parent of the button.
   * @param i_pIdentifier
   *   The name of the button.
   */
  static CATVidCtlSlider* CreateSlider(CATCommand *i_pParent, const CATString & i_pIdentifier);
  /** Constructor */
  CATVidCtlSlider ();

  /**
   * Sets the tickmark position of the slider.
   * @see #TickPosition for available options.
   */
  void SetTickPosition ( CATVidCtlSlider::TickPosition position );
  /** @return the tick position */
  CATVidCtlSlider::TickPosition GetTickPosition() const;

  /**
  * Sets the value interval beetween two marks as an int.
  * @see CATVidCtlAbstractSlider#SetValue
  */
  void SetTickInterval(int i_tickInterval);
  /** @return the value interval beetween two ticks as an int*/
  int GetTickInterval() const;

  /**
   * Sets the value interval beetween two marks as a double.
   * @see CATVidCtlAbstractSlider#SetValue
   */
  
  void SetTickIntervalAsDouble(double i_tickInterval);
  /** @return the value interval beetween two ticks as a double */
  double GetTickIntervalAsDouble() const;

  /** permit to manage the value when there is a step and when we released between two steps */
  void HandleBackgroundRelease(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);
  virtual void HandleBackgroundPress(CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);

protected:

  /** Constructor */
  CATVidCtlSlider (CreateLetterFunc i_pCreateLetterFunc);
  /** @destructor*/
  virtual ~CATVidCtlSlider ();

private:

  // Copy constructor and equal operator
  CATVidCtlSlider (CATVidCtlSlider &);
  CATVidCtlSlider& operator=(CATVidCtlSlider&original);
  void UpdateValueOnRelease();

  TickPosition _tickPosition;
  double _tickInterval;

#ifndef VID_DEPRECATED
  public:
  /**
   * @name Deprecated members
   */
  /**@{*/ 
  CATVidCtlSlider (CATCommand *i_pParent, const CATString & i_pIdentifier, CATBoolean i_verticalFlag = FALSE, CATBoolean i_useSizeRatioFlag = FALSE);
  void SetSliderPercentage(float i_percentage);
  float GetSliderPercentage();
  void SetBarSizeRatio(float i_ratio);
  float GetBarSizeRatio();
  void SetBarSize(float i_size);
  float GetBarSize();
  void SetBackgroundSquareHeightRatio(float i_ratio);
  float GetBackgroundSquareHeightRatio();
  void SetBackgroundColor(const CATVidColor& i_color);
  void SetSliderColor(const CATVidColor& i_color);
  CATNotification *GetSliderDragNotification() const;
  /**@}*/ 
private:
  /**
   * @name Deprecated members
   */
  /**@{*/ 
  void OnDrag (CATCommand *i_pCommand, CATNotification *i_pNotification, CATCommandClientData i_commandData );
  void OnPress (CATCommand *i_pCommand, CATNotification *i_pNotification, CATCommandClientData i_commandData );
  float ComputeBarSize();
  /**@}*/ 
protected:
  /**
   * @name Deprecated members
   */
  /**@{*/ 
  CATVidLaySideAttach* _pLaySideAttach;
  CATVidCtlHandle* _pBarButton;
  CATVidGPSquare* _pBackgroundGP;
  float _barSizeRatio;
  float _barSize;
  float _backgroundSquareHeightRatio;
  CATBoolean _verticalFlag;
  CATBoolean _useSizeRatioFlag;
  CATVidColor _backgroundColor;
  /**@}*/ 
#endif
};

CATSYP_DECLARE_ENUMFACTORY(ExportedByVisuDialog, CATVidCtlSlider__TickPosition);

#endif
