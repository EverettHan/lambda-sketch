//===================================================================
// COPYRIGHT Dassault Systemes 2019-12-13
//===================================================================
// VisSceneExportServices.cpp
// Header definition of class VisSceneExportServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2019-12-13 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisSceneExportServices_H
#define VisSceneExportServices_H

#include "SGInfra.h"
#include "CATListPV.h"
#include "CATDescribeCgr.h"
#include "CATCGRSetting.h"
#include "CATUnicodeString.h"
#include "CATReadWriteCgr.h"
#include "CATExportTo3DXM.h"

class CATRep;
class CATGraphicMaterial;
class CATSGVisuData;
class VisMaterialHolder;

//-----------------------------------------------------------------------

class ExportedBySGInfra VisSceneExportServices
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  VisSceneExportServices();
  virtual ~VisSceneExportServices();

  /**
  * Force update of texture coordinates by traversing rep tree.
  */
  void ForceUpdateTexureCoordinates(CATRep* ipReps);

  /**
  * Enum representing resource type which will not be exported in CGR stream
  */
  typedef enum
  {
    eMaterial = 0x01,
    eLightmap = 0x02
  } ExternalResourceType;

  /**
  * Options common to any export
  */
  struct ExportedBySGInfra Options
  {
    // URN string wihch is streamed in CGR : NOT used yet
    CATUnicodeString _urnStr = "urn:ext:3dxm:"; 

    // Options specific to CGR export (refer CATReadWriteCgr.h for more details)
    CATSettingCgr _cgrSetting = CATSettingCgr(USE_LODS_TEXTURE_EDGE | USE_3DCUSTOMREP);

    // setting to enable resource export external to CGR stream
    int _extExport = int(eMaterial | eLightmap);
  };

  static VisSceneExportServices::Options DefaultOptions();

  /**
  * Export a representation to CGR
  * - You can call this function multiple times for each CATRep to be streamed.
  * - Resources like material and lightmap will not be streamed in CGR. Instead, only their ID is streamed and they will be saved in a list
  *   which can be streamed to 3DX format buffer using ExportResources call at the end of streaming all representation
  */
  HRESULT ExportToCGR(CATRep* ipReps, char*& oCGRBuffer, int &oSzCGRBuffer, const Options iOptions = VisSceneExportServices::DefaultOptions());

  /**
  * Export materials to 3DX format buffer
  * - All materials stored so far during representation export calls will be used. 
  * return S_FALSE if there are no materials to stream 
  * Should be called after the internal storage m_pData has been populated using the ExportToCGR method, unless you want to export an empty collection.
  */
  HRESULT ExportMaterialsTo3DXM(CATUnicodeString& oJson, std::vector<CATExportTo3DXM::BinaryBuffer>& oBuffers, CAT3DXMExportSettings const& iParams = CAT3DXMExportSettings());

  /**
  * Export materials to 3DX format buffer
  * - All materials stored so far during representation export calls will be used.
  * return S_FALSE if there are no materials to stream
  * Same as ExportMaterialsTo3DXM(CATUnicodeString&, std::vector<CATExportTo3DXM::BinaryBuffer>&, CAT3DXMExportSettings const& iParams)
  * except an additional parameter iAdditionalMaterials allows passing a list of additional materials to be added into the output 3DX stream.
  * Should be called after the internal storage m_pData has been populated using the ExportToCGR method, unless you want to export iAdditionalMaterials only.
  * iAdditionalMaterials are added into the m_pData collection of materials similalry to how it is done in ExportToCGR.
  */
  HRESULT ExportMaterialsTo3DXM(CATUnicodeString& oJson, std::vector<CATExportTo3DXM::BinaryBuffer>& oBuffers, const std::vector<VisMaterialHolder*>& iAdditionalMaterials, CAT3DXMExportSettings const& iParams = CAT3DXMExportSettings());

  /**
  * Return the list of materials accumulated in the internal m_pData collection during the calls to ExportToCGR and ExportMaterialsTo3DXM (additional materials).
  */
  const std::vector<CATGraphicMaterial*>& GetMaterialList() const;

  /**
  * Export resources to 3DX format buffer
  * - All lightmaps stored so far during representation export calls will be used. 
  * return S_FALSE if there are no lightmaps to stream 
  */
  HRESULT ExportLightmapsTo3DXM(CATUnicodeString& oJson, std::vector<CATExportTo3DXM::BinaryBuffer>& oBuffers, CAT3DXMExportSettings const& iParams = CAT3DXMExportSettings());

  //-----------------------------------------------------------------------
  inline CATSGVisuData* GetVisuData() { return m_pData; };

private:
  // Copy constructor and equal operator
  // -----------------------------------
  VisSceneExportServices(VisSceneExportServices &);
  VisSceneExportServices& operator=(VisSceneExportServices&);

  CATSGVisuData* m_pData;
};

//-----------------------------------------------------------------------


#endif
