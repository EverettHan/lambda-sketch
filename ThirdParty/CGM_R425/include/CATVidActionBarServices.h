//===================================================================
// COPYRIGHT Dassault Systemes 2017/01/05
//===================================================================
// CATVidActionBarServices.h
// Header definition of class CATVidActionBarServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/01/05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATVidActionBarServices__H
#define CATVidActionBarServices__H

#include <VisuDialogEx.h>
#include <CATISYPIntrospectable.h>
#include <CATVid.h>

class CATString;
class CATUnicodeString;
class CATSYPDataBlockFactory;
class CATVidCtlActionBarV3Button;
class CATVidCtl;
class CATVidCtlActionBarV3FlyOut;
class CATVidWidget;

/**
 * CATVidActionBarServices
 *
 * Services to instantiate view elements of the Action Bar V3.
 */
class ExportedByVisuDialogEx CATVidActionBarServices
{
public:

  /**
   * Create an Action Bar V3 button.
   *
   * @note This member function creates a standard CATVidCtlActionBarV3Button.
   *
   * @param i_id identifier for the button to create
   * @param i_icon relative path of the icon to set
   * (relative to CATGraphicPath)
   *
   * @return the created button in case of success or NULL otherwise.
   */
  static CATVidCtlActionBarV3Button * CreateActionBarV3Button(const CATString & i_id, const CATUnicodeString & i_icon);
  /**
   * Create an Action Bar V3 standard flyOut.
   *
   * @param i_id identifier for the flyOut to create
   *
   * @return the created flyOut in case of success or NULL otherwise.
   */
  static CATVidCtlActionBarV3FlyOut * CreateActionBarV3StandardFlyOut(const CATString & i_id);
  /**
   * Create an Action Bar V3 iconbox flyOut.
   *
   * @param i_id identifier for the flyOut to create
   * @param i_iconName name of the icon to display in the topline.
   *
   * @return the created icon box in case of success or NULL otherwise.
   */
  static CATVidCtlActionBarV3FlyOut * CreateActionBarV3IconBoxFlyOut(const CATString & i_id, const CATUnicodeString & i_iconName);
  /**
   * Initialize the CATSYPDataBlockFactory object to generate CATSYPDataBlock
   * object compatible with tooltip properties.
   *
   * @param i_factory the CATSYPDataBlockFactory to setup
   */
  static void SetupTooltipDataBlockFactory(CATSYPDataBlockFactory & i_factory);
  /**
   * Setup the Action Bar compliant tooltip data on the given CATVidCtl object.
   *
   * @param i_spRawData the introspectable object containing the tooltip data
   * to setup.
   * @param i_factory the CATSYPDataBlockFactory object able to generate
   * CATSYPDataBlock compliant with the tooltip properties for Action Bar V3
   * tooltip.
   * @param io_pCtl the CATVidCtl object to setup with a tooltip.
   */
  static void SetupTooltip(CATISYPIntrospectable_var i_spRawData, CATSYPDataBlockFactory & i_factory, CATVidCtl * io_pCtl);
  /**
   * Setup the data to display within a tooltip.
   *
   * @param i_spRawData the introspectable object containing the tooltip data
   * to setup.
   * @param i_factory the CATSYPDataBlockFactory object able to generate
   * CATSYPDataBlock compliant with the tooltip properties for Action Bar V3
   * tooltip.
   * @param io_spTarget the introspectable object on which to store the tooltip
   * data. It needs to have a property "TooltipProvider".
   */
  static void SetupTooltipData(CATISYPIntrospectable_var i_spRawData, CATSYPDataBlockFactory & i_factory, CATISYPIntrospectable_var io_spTarget);
  /**
   * Compute the tooltip type based on the given tooltip data.
   *
   * @param i_tooltipData the tooltip data to analyze.
   *
   * @return the tooltip type corresponding to the given tooltip data.
   */
  static CATVid::TooltipType ComputeTooltipType(CATISYPIntrospectable_var i_spTooltipData);

  /**
   * Compute all the data needed to determine the position at which the tooltip
   * should be displayed.
   *
   * @param i_pWidget the widget for which the tooltip will be displayed
   * @param o_widgetDimension the dimension of i_pWidget
   * @param o_widgetAbsolutePosition the absolute position of i_pWidget
   * @param o_mousePosition the mouse position in DPI
   */
  static void ComputeInputDataForTooltipPosition(CATVidWidget * i_pWidget,
                                                 CATMathPoint2Df & o_widgetDimension,
                                                 CATMathVectorf & o_widgetAbsolutePosition,
                                                 CATMathPoint2Df & o_mousePosition);

private:
  // Not implemented
  CATVidActionBarServices();
  ~CATVidActionBarServices();
  CATVidActionBarServices(const CATVidActionBarServices &);
  CATVidActionBarServices& operator= (const CATVidActionBarServices &);
};

#endif
