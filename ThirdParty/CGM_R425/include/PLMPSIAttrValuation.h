// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// PLMPSIAttrValuation.h
// Header definition of PLMPSIAttrValuation
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2004  Creation: Code generated by the CAA wizard  aif
//===================================================================

/**
 * @level Protected
 * @usage U3
 */

#ifndef PLMPSIAttrValuation_H
#define PLMPSIAttrValuation_H

#include "PLMPSISessionInterfaces.h"
#include "CATBoolean.h"
#include "PLMPSIAttrInfos.h"
class CATIValue;

//-----------------------------------------------------------------------
/**
 * @nodoc : Use CATICkeParm.
 * Class representing an attribute and its value for a typed PLM entity.
 * To manage attributes, see the @href CATIPsiPLMProperties Interface.<br>
 * For attributes description, see the @href PLMPSIAttrInfos Interface.
 */
class ExportedByPLMPSISessionInterfaces PLMPSIAttrValuation
{
  public : 

	  /**
       * Constructor.
       * @param iPrdAttrInfos 
	   *	The attribute description
       * @param iPrdValue            
	   *	The attribute value
       */
	  PLMPSIAttrValuation(const PLMPSIAttrInfos & iPrdAttrInfos, CATIValue * & iPrdValue); 

	  /**
       * Copy Constructor.
       */
	  PLMPSIAttrValuation (const PLMPSIAttrValuation &);

	 /**
	   * Destructor.
	   */
	  virtual ~PLMPSIAttrValuation();

 	 /**
      * Returns the attribute information.
      * @return 
	  *    The attribute information
      */
 	  PLMPSIAttrInfos GetPrdAttrInfos() const;

	 /**
      * Returns the attribute value.
      * @return [CATBaseUnknown#Release]   
		 *    The returned value of the attribute.<br>
     *    In some cases, it could be NULL when
		 *    <ul>
		 *       <li>the value is equal to zero (in case of integer or double type) or FALSE (in case of CATBoolean type)</li>
		 *       <li>or the value is an empty string</li>
		 *    </ul>
		 * <br>
		 *    This value could be multi-valuated.
		 *    In such case, the returned value must be transformed in @href CATIList in order to get all values.
		 *    @example
		 *    <br>For example:
		 *    <pre>
		 *        PLMPSIAttrValuation MyAttrVal;
		 *        ....
		 *        CATIValue* piValue=MyAttrVal.GetPrdAttrValue();
		 *        CATIList_var hList=piValue;
		 *        if(!hList)
		 *           // It is a mono-valuated attribute
		 *        else
		 *           // It is a multi-valuated attribute
		 *        if (piValue) { piValue->Release(); opValue=NULL; }
		 *      }
		 *    }
		 *    </pre>
	  */
	  CATIValue* GetPrdAttrValue() const;

	/** 
	* Operator ==: Tests if This AttrValuation is the same as @param iInfos.
	*
	* @param iInfos [in]
	*   The Information to be compared with This.
	*
	* @return
	*   Returns TRUE if this has same data as @param iInfos, else FALSE.
	*
	*/
	  CATBoolean           operator==(const PLMPSIAttrValuation& iInfos ) const;

	/** 
	* Operator !=: Tests if This AttrValuation is different from @param iInfos.
	*
	* @param iInfos [in]
	*   The Information to be compared with This.
	*
	* @return
	*   Returns FALSE if this has same data as @param iInfos, else TRUE.
	*
	*/
	  CATBoolean           operator!=(const PLMPSIAttrValuation& iInfos ) const;
 
	/** 
	* Operator = : Valuates This with @param iInfos data.
	*
	* @param iInfos [in]
	*   The Information to be set.
	*
	* @return
	*   No return.
	*
	*/
	  PLMPSIAttrValuation &operator=(const PLMPSIAttrValuation& iInfos );

  private : 
	  	 
    // Default constructor - Not implemented
    PLMPSIAttrValuation(); 

	  PLMPSIAttrInfos _prdAttrInfo;
	  CATIValue * _prdValue;
};

//-----------------------------------------------------------------------

#endif
