// COPYRIGHT DASSAULT SYSTEMES 2013

#ifndef VisTexCoordsUpdater_h
#define VisTexCoordsUpdater_h

#include "CATVisFoundation.h"

#include "VisConnectivityType.h"
#include "VisVertexComponent.h"

#include "CATVizPtrList.h"

class IVisSG3DPrimitiveGroup;
class IVisSGCustomPrimitive;

class VisIndicesDescription;
class VisVerticesDescription;

class CATMappingOperator;

class VisVerticesDescriptionHelper;
class VisIndicesDescriptionHelper;

//==============================================================================
/**
 * \class VisTexCoordsUpdaterSettings
 * \brief The VisTexCoordsUpdaterSettings class regroups all settings of the VisTexCoordsUpdater class.
 *
 * It allows users to specify which vertex component will be generated by the VisTexCoordsUpdater class,
 * and in which vertex slot of the IVisSG3DPrimitiveGroup they will be stored.
 *
 * The class provides Enable/Disable methods for each component (texture coordinates, tangents and binormals)
 * to indicate if it will be generated or not.
 * Output vertex slots can be specified using the SetTexCoordsComponent(), SetTangentsComponent()
 * and SetBinormalsComponent() methods.
 *
 * Note: The texture coordinate slot will also be used to query texture coordinates
 * for tangents and binormals generation.
 *
 * It further provides a SetTexCoordsMappingOperator() method to specify the mapping operator
 * used for texture coordinates generation.
 */
class ExportedByCATVisFoundation VisTexCoordsUpdaterSettings
{
public:
  /**
   * \fn VisTexCoordsUpdaterSettings()
   */
  VisTexCoordsUpdaterSettings();

  /**
   * \fn ~VisTexCoordsUpdaterSettings()
   */
  virtual ~VisTexCoordsUpdaterSettings();

  /**
   * \fn EnableTexCoordsGeneration()
   *
   * Enables texture coordindates generation.
   * By default, texture coordinates generation is disabled.
   */
  void EnableTexCoordsGeneration();

  /**
   * \fn DisableTexCoordsGeneration()
   *
   * Disables texture coordinates generation.
   */
  void DisableTexCoordsGeneration();

  /**
   * \fn GetTexCoordsComponent()
   *
   * Returns the vertex slot in which generated texture coordinates will
   * be stored. By default, this slot is set to VIS_TEX_COORD_0.
   */
  VisVertexComponent GetTexCoordsComponent() const;

  /**
   * \fn SetTexCoordsComponent(iComponent)
   *
   * Sets the vertex slot in which generated texture coordinates will
   * be stored to \a iComponent.
   */
  void SetTexCoordsComponent(VisVertexComponent iComponent);

  /**
   * \fn GetTexCoordsMappingOperator()
   *
   * Returns the mapping operator used to generate texture coordinates.
   */
  CATMappingOperator* GetTexCoordsMappingOperator() const;

  /**
   * \fn SetTexCoordsMappingOperator(ipOperator)
   *
   * Sets the mapping operator used to generate texture coordinates to \a ipOperator.
   * \a ipOperator must be a valid mapping operator.
   */
  void SetTexCoordsMappingOperator(CATMappingOperator* ipOperator);

  /**
   * \fn EnableTangentsGeneration()
   *
   * Enables tangents generation.
   * By default, tangents generation is disabled.
   */
  void EnableTangentsGeneration();

  /**
   * \fn DisableTangentsGeneration()
   *
   * Disables tangents generation.
   */
  void DisableTangentsGeneration();

  /**
   * \fn GetTangentsComponent()
   *
   * Returns the vertex slot in which generated tangents will be stored.
   * By default, this slot is set to VIS_TEX_COORD_1.
   */
  VisVertexComponent GetTangentsComponent() const;

  /**
   * \fn SetTangentsComponent(iComponent)
   *
   * Sets the vertex slot in which generated tangents will be stored to \a iComponent.
   */
  void SetTangentsComponent(VisVertexComponent iComponent);

  /**
   * \fn EnableTangentsGeneration()
   *
   * Enables binormals generation.
   * By default, binormals generation is disabled.
   */
  void EnableBinormalsGeneration();

  /**
   * \fn DisableBinormalsGeneration()
   *
   * Disables binormals generation.
   */
  void DisableBinormalsGeneration();

  /**
   * \fn GetBinormalsComponent()
   *
   * Returns the vertex slot in which generated binormals will be stored.
   * By default, this slot is set to VIS_TEX_COORD_2.
   */
  VisVertexComponent GetBinormalsComponent() const;

  /**
   * \fn SetBinormalsComponent(iComponent)
   *
   * Sets the vertex slot in which generated binormals will be stored to \a iComponent.
   */
  void SetBinormalsComponent(VisVertexComponent iComponent);

private:
  bool _generateTexCoords;
  bool _generateTangents;
  bool _generateBinormals;

  VisVertexComponent _texCoordsComponent;
  VisVertexComponent _tangentsComponent;
  VisVertexComponent _binormalsComponent;

  CATMappingOperator* _pTexCoordsMappingOperator;

  friend class VisTexCoordsUpdater;
};

//==============================================================================
/**
 * \class VisTexCoordsUpdater
 * \brief The VisTexCoordsUpdater class provides services to generate texture coordinates,
 *        tangents and binormals for a IVisSG3DPrimitiveGroup.
 *
 * It provides two methods Process3DPrimitiveGroup() and ProcessCustomPrimitive() which generate
 * vertex components for a IVisSG3DPrimitiveGroup and a IVisSGCustomPrimitive respectively.
 *
 * The IVisSG3DPrimitiveGroup/IVisSGCustomPrimitive must allready have positions and normals to compute the
 * texture coordinates.
 * It must also have texture coordinates (if they are not generated) to generate tangents and binormals.
 *
 * The class constructor takes a VisTexCoordsUpdaterSettings instance as an argument
 * to specify which vertex components will be generated.
 * See VisTexCoordsUpdaterSettings documentation for details.
 *
 * Note: If several IVisSG3DPrimitiveGroup/IVisSGCustomPrimitive share their vertex data
 * (either VisVerticesDescriptions or VisRawBuffers), they should be processed
 * with the same instance of VisTexCoordsUpdater to avoid regenerating the same
 * vertex components several times.
 */
class ExportedByCATVisFoundation VisTexCoordsUpdater
{
public:
  /**
   * \fn VisTexCoordsUpdater(iSettings)
   */
  explicit VisTexCoordsUpdater(const VisTexCoordsUpdaterSettings& iSettings);

  /**
   * \fn ~VisTexCoordsUpdater()
   */
  virtual ~VisTexCoordsUpdater();

  /**
   * \fn Process3DPrimitiveGroup(ipiGroup)
   *
   * Generates specified vertex components for \a ipiGroup.
   * Note: \a ipiGroup must contain only primitives of type IVisSGCustomPrimitive.
   */
  void Process3DPrimitiveGroup(IVisSG3DPrimitiveGroup* ipiGroup);

  /**
   * \fn ProcessCustomPrimitive(ipiPrimitive)
   *
   * Generates specified vertex components for \a ipiPrimitive.
   */
  void ProcessCustomPrimitive(IVisSGCustomPrimitive* ipiPrimitive);

private:
  void AddTexCoordsComponents(VisVerticesDescription* ipDescription);

  void ComputeTexCoords(
    VisVerticesDescription* iopDescription);

  void ComputeTanBinorms(
    VisConnectivityType iConnectivity, VisIndicesDescription* ipIndicesDescription,
    VisVerticesDescription* iopVerticesDescription);

  bool CompareVerticesDescriptions(
    VisVerticesDescription* ipDescription1,
    VisVerticesDescription* ipDescription2);

  void ComputeVerticesTanBinorms(
    VisVerticesDescriptionHelper& helper,
    unsigned i0, unsigned i1, unsigned i2);

  bool CheckCustomPrimitive(IVisSGCustomPrimitive* ipiPrimitive);

  VisTexCoordsUpdaterSettings _settings;

  CATVizPtrList<VisVerticesDescription> _lpVerticesDescriptionsComponents;
  CATVizPtrList<VisVerticesDescription> _lpVerticesDescriptionsTexCoords;

  VisTexCoordsUpdater(const VisTexCoordsUpdater&);
  void operator = (const VisTexCoordsUpdater&);
};

#endif  // VisTexCoordsUpdater_h
