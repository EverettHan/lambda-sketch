// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATIVolatileInstance.h
// Purely internal to distinguish the applicative instance from the internal one
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Aug 2006  Creation: Code generated by the CAA wizard  FRH
//===================================================================
#ifndef CATIVolatileInstance_H
#define CATIVolatileInstance_H

#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

class CATUnicodeString;
class CATIValue_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATIVolatileInstance;
#else
extern "C" const IID IID_CATIVolatileInstance ;
#endif

//------------------------------------------------------------------

/**
* Interface representing xxx.
*
* <br><b>Role</b>: Components that implement
* CATIVolatileInstance are ...
* <p>
* Do not use the CATIVolatileInstance interface for such and such

*
* @example
*  // example is optional
*  CATIVolatileInstance* currentDisplay = NULL;
*  rc = window-&gt;QueryInterface(IID_CATIVolatileInstance,
*                                     (void**) &amp;currentDisplay);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByCATLifSpecs CATIVolatileInstance: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * Indicates if the object should be protected when evaluation context is PreventsObjectModification
	 * returns 0 if not, 1 if it should be protected
     * </dl>
     */
	 virtual int ShouldBeProtected() const = 0;

	 
    /**
     * Indicates if the object allows to host any kind of extensions
	 * @return TRUE is it enables to be extended
     * </dl>
     */
	 virtual CATBoolean CanBeExtendedByAnykindOfExtension () const = 0;

   /**
	* Sets a protected (external) attribute value with a key.<br>
	* @param iName Name of the attribute.
	* @param iValue Value of the attribute.
	* @param iKey Name of the key to be used to valuate this particular attribute
	* @return
	*  <ol>
	* 	 <li> E_INVALIDARG if the valuation has failed (attribute non existing on object, attribute of a bad type, bad key).
	* 	 <li> E_ACCESSDENIED if the valuation has failed (read only attribute, object not editable).
	* 	 <li> S_OK	if the attribute has been set successfully.
	*  </ol>
	*/
	virtual HRESULT SetValueOnProtectedAttribute (  const CATUnicodeString& iName,
													const CATUnicodeString& iKey,
													const CATIValue_var& iValue ) = 0;


	/**
	 * Forces the fact that the attribute is seen as modified CATIInstanceModifiedAttributes
	 * @param iName Name of the attribute.
	 * @return
 	 *  <ol>
	 * 	 <li> E_INVALIDARG if the attribute didn't exist
	 * 	 <li> S_OK	if the attribute was not already modified
	 * 	 <li> S_FALSE if the attribute was already modified
	 *  </ol>
	 */
	virtual HRESULT ForceAttributeModification(const CATUnicodeString& iName) =0 ;



  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};
CATDeclareHandler(CATIVolatileInstance,CATBaseUnknown);

//------------------------------------------------------------------

#endif
