//===================================================================
// COPYRIGHT Dassault Systemes 2014/12/01
//===================================================================
// CATIPLMWSReservationEngine.cpp
// Header definition of class CATIPLMWSReservationEngine
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2014/12/01 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIPLMWSReservationEngine_H
#define CATIPLMWSReservationEngine_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
class CATPLMID;
class CATPLMIDSet;
class CATIAdpErrorMonitor;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMWSReservationEngine;
#else
extern "C" const IID IID_CATIPLMWSReservationEngine;
#endif


/**
 * Manages the reservations of components in a workspace.
 * First, change the reservation status for any number of components, then 
 * execute the reservation transaction. Finally, if the operation failed, get 
 * the error monitor to access more detailed information.
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMWSReservationEngine : public CATBaseUnknown
{
CATDeclareInterface;

public:

  /**
   * Available reservation statuses.
   * @param reservationStatus_None The component is not reserved.
   * @param reservationStatus_Local The component is reserved locally.
   * @param reservationStatus_Parent The component is reserved globally.
   */
  enum ReservationStatus
  {
    // The component is not reserved.
    reservationStatus_None,
    // The component is reserved locally.
    reservationStatus_Local,
    // The component is reserved globally.
    reservationStatus_Parent
  };
  
  /**
   * Adds a reservation status change for a component.
   * If the component reservation status is already as requested, it remains 
   * unchanged.
   * This method fails if a reservation status change was already added for this
   * component.
   * @param iComponent [in] The component.
   * @param iTargetStatus [in] The requested reservation status.
   * @return
   *  An error code.
   *  <br/><strong>Legal values</strong>:
   *  <dl>
   *    <dt>S_OK</dt>
   *    <dd>The operation succeeded</dd>
   *    <dt>E_FAIL</dt>
   *    <dd>A reservation change was already registered for this component</dd>
   *  </dl>
   */
  virtual HRESULT ChangeReservationForComponent(const CATPLMID & iComponent, ReservationStatus iTargetStatus) = 0;

  /**
   * Adds a reservation status change for several components.
   * This method fails if a reservation status change was already added for any 
   * component.
   * @param iComponents [in] The components.
   * @param iTargetStatus [in] The requested reservation status.
   * @return
   *  An error code.
   *  <br/><strong>Legal values</strong>:
   *  <dl>
   *    <dt>S_OK</dt>
   *    <dd>The operation succeeded</dd>
   *    <dt>E_INVALIDARG</dt>
   *    <dd>A reservation change was already registered for one or more components</dd>
   *    <dt>E_FAIL</dt>
   *    <dd>An unexpected error occurred</dd>
   *  </dl>
   */
  virtual HRESULT ChangeReservationForComponents(const CATPLMIDSet & iComponents, ReservationStatus iTargetStatus) = 0;
  
  /**
   * Executes the reservation transaction.
   * If the transaction fails, no reservation status is changed.
   * Whatever the result of the transaction is, the reservation engine is 
   * cleared so that it can be used again for another reservation transaction.
   * @param iTriggersOff [in] TRUE to disable the server-side triggers 
   *  (available starting from R2106x only).
   * @return
   *  An error code.
   *  <br/><strong>Legal values</strong>:
   *  <dl>
   *    <dt>S_OK</dt><dd>The transaction succeeded</dd>
   *    <dt>E_INVALIDARG</dt><dd>Neither #ChangeReservationForComponent nor 
   *      #ChangeReservationForComponents were called beforehand</dd>
   *    <dt>E_FAIL</dt><dd>An error occurred and the error monitor was correctly
   *      notified of the error</dd>
   *    <dt>E_UNEXPECTED</dt><dd>The operation failed</dd>
   *  </dl>
   */
  virtual HRESULT ExecuteReservationTransaction(CATBoolean iTriggersOff = FALSE) = 0;
  
  /**
   * Retrieves the error monitor used by this engine.
   * @param opErrorMonitor [out, CATBaseUnknown#Release]
   *  The pointer to the error monitor.
   * @return
   *  An error code.
   *  <br/><strong>Legal values</strong>:
   *  <dl>
   *    <dt>S_OK</dt><dd>The operation succeeded</dd>
   *    <dt>E_FAIL</dt><dd>The operation failed</dd>
   *  </dl>
   */
  virtual HRESULT GetErrorMonitor(CATIAdpErrorMonitor *& opErrorMonitor) = 0;

};
CATDeclareHandler(CATIPLMWSReservationEngine, CATBaseUnknown);
//-----------------------------------------------------------------------

#endif
