// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATVisRepresentationModel.h
// Header definition of CATVisRepresentationModel
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2004  Creation: Code generated by the CAA wizard  jut
//===================================================================
#ifndef CATVisRepresentationModel_H
#define CATVisRepresentationModel_H

#include "SceneGraphManager.h"
#include "CATExtIVisu.h"
#include "CATILockBytes2.h"

class CATUnicodeString;
class CATCGRContainer;
class CATCGRContainerPath;
class CAT3DBagRep;
class CAT3DRep;

//-----------------------------------------------------------------------

/**
 * Describe your class here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedBySceneGraphManager CATVisRepresentationModel : public CATExtIVisu
{
   CATDeclareClass;
   
public:

   // Static construction methods
   static CATVisRepresentationModel * Create(const CATUnicodeString & iLateType, CATILockBytes2 * iLB2);
   static CATVisRepresentationModel * Create(const CATUnicodeString & iLateType, const CATUnicodeString & iFileName);

   // DO NOT OVERLOAD. Overload the protected method InternalBuildRep.
   // Otherwise your code will generate leaks.
   virtual CATRep * BuildRep();

   // Standard constructors and destructors
   // -------------------------------------
   CATVisRepresentationModel(const char * iFilename);
   CATVisRepresentationModel(CATILockBytes2 * iLB2);

   virtual ~CATVisRepresentationModel();
   virtual ULONG __stdcall Release();

   // CATICGRDocument adhesion
   virtual CATCGRContainer * GetCGRContainer(const CATUnicodeString & iName, int recursiveUnstreaming = 1);
   virtual CATCGRContainer * GetCGRContainer(const CATCGRContainerPath & iPath, int recursiveUnstreaming = 1);
   virtual HRESULT FetchIntoCGRBuffer(char *&oBuffer, int &oLBuffer);

   // Cross highlight default implementation
   virtual HRESULT BuildRepPath        (const CATPathElement &iPathElt, CATRepPath &ioPathRep) ;
   virtual HRESULT BuildHighlightLook  (const CATPathElement &iPathElt, CATRepPath &ioPathRep) ;
   virtual HRESULT DecodeGraphic       (const CATPickPath &iPickPath, CATPathElement &ioPathElt) ;

   // Retrieve the underlying ILockBytes2. Must be Released() by caller
   inline CATILockBytes2 * GetILockBytes2();

protected:

   // Must be overloaded to properly load and destroy the representation.
   // Waiting for CATVisV5XVLModel to migrate in order to put BuildRep on
   // a private scope.
   virtual CATRep * InternalBuildRep();
   virtual HRESULT  InternalBuildReps(list<CATVisRepresentationModel> models);
   CATILockBytes2 * _LB2;
   CATVisRepresentationModel();

private:

   // Copy constructor and equal operator
   // -----------------------------------
   CATVisRepresentationModel (CATVisRepresentationModel &);
   CATVisRepresentationModel& operator=(CATVisRepresentationModel&);

   HRESULT ReleaseVisu();
   CAT3DBagRep * _bag;
   CATRep * _loadedRep;

   static list<CATVisRepresentationModel> sDocList;

public:

   HRESULT SetVisuRep(CATRep * iRep);
   void SetData(CAT3DRep *iRep);
};

//-----------------------------------------------------------------------
CATILockBytes2 * CATVisRepresentationModel::GetILockBytes2()
{
   if(_LB2)
      _LB2->AddRef();

   return _LB2;
}



#endif
