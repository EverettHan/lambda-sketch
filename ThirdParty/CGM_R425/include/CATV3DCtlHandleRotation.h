//===================================================================
// COPYRIGHT Dassault Systeme 2012/09/20
//===================================================================
// CATV3DCtlHandleRotation.h
// Header definition of class CATV3DCtlHandleRotation
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/09/20 Creation: Code generated by the 3DS wizard MF6
//===================================================================

#ifndef CATV3DCtlHandleRotation_H
#define CATV3DCtlHandleRotation_H

#include <VisuImmersive3D.h>
#include <CATV3DCtlHandle.h>
#include <CATMathPoint.h>
#include <CATMathVector2Df.h>

//-----------------------------------------------------------------------------
/**
 * This widget provides a standard styled line rotation manipulator.
 *
 * @par Role
 * A line rotation handle is used to manipulate object around a line.
 * It send a translation event when manipulated and automaticaly handle his 
 * position when draging.
 * <br>
 *
 * @par Handle Position
 * Orient Handle using axis defined in @c CATV3DLay3D.Constraints
 * @see CATV3DLay3DConstraints#SetAxis
 * @see CATV3DTopWidget#SetLay3DConstraints
 *
 * @par Rotation line
 * The rotation line is always along the third direction of the constraining axis.
 * @see CATV3DLay3DConstraints#SetAxis
 *
 * @par Templates
 * Available template names : Arc
 *
 * @par Creation
 * @code
 * CATV3DCtlHandleRotation* pHandle = CATV3DCtlHandleTranslation::CreateHandleRotation();
 * @endcode
 * @ingroup V3DControls
 */
class ExportedByVisuImmersive3D CATV3DCtlHandleRotation : public CATV3DCtlHandle
{
  CATDeclareClass;
public:
  /** Constructor*/
  CATV3DCtlHandleRotation ();
  /** Destructor*/
  virtual ~CATV3DCtlHandleRotation ();

  /**
   * Constructs a CATV3DCtlHandleRotation with blob style.
   */
  static CATV3DCtlHandleRotation * CreateBlobHandleRotation(CATViewpoint* i_pViewpoint=NULL);

  /**
  * Constructs a CATV3DCtlHandleRotation with standard arc style.
  */
  static CATV3DCtlHandleRotation* CreateHandleRotation(CATViewpoint* i_pViewpoint = NULL);

  /**
  * Constructs a CATV3DCtlHandleRotation with standard arc style.
  */
  static CATV3DCtlHandleRotation* CreateHandleFullArcRotation(CATViewpoint* i_pViewpoint = NULL);

  /**
   * Constructs a CATV3DCtlHandleRotation with bidirectional arrow style.
   */
  static CATV3DCtlHandleRotation* CreateDoubleArrowHandleRotation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs a CATV3DCtlHandleRotation with 3D bidirectional arrow style.
   */
  static CATV3DCtlHandleRotation* CreateDoubleArrow3DHandleRotation(CATViewpoint* i_pViewpoint=NULL);

  static void CreateHandlesRotation(CATViewpoint* i_pViewpoint, const CATSYPDynArray<CATV3DLay3DConstraints>& i_lConstraints, const CATUnicodeString& i_type, CATSYPDynArray<CATV3DCtlHandleRotation*>& oHandles);

  /**
   * Get the @c Rotate event.
   *
   * The @c Rotate event is dispatched on the HandleRotation when receiving
   * a drag event.
   *
   * This event is issued from the @ref Drag event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Rotate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Rotate();

  /**
   * Sets the rotation line absolute origin.
   * The rotation line direction is initially set along V(0.,0.,1.),
   * then oriented using constraint axis.
   * @see CATV3DLay3DConstraints#SetAxis
   * 
   * @param iOrigin
   * The absolute origin of the rotation line.
   */
  void SetRotationLineOrigin(const CATMathPoint &iOrigin);
  /**
   * @return the rotation line origin.
   * @see SetRotationLineOrigin
   */
  CATMathPoint GetRotationLineOrigin() const;

  /**
   * Sets the rotation line offset.
   * This is a 2D offset from the axis origin in the plane defined by the manipulator.
   * The rotation line direction is initially set along V(0.,0.,1.),
   * then oriented using constraint axis.
   * @see CATV3DLay3DConstraints#SetAxis
   * 
   * @param iVector
   * The 2D offset of the rotation line.
   */
  void SetRotationLineOffset(const CATMathVector2Df &iVector);
  /**
   * @return the rotation line offset.
   * @see SetRotationLineOffset
   */
  CATMathVector2Df GetRotationLineOffset() const;
  /**
   * Sets the manipulator position to a new position from its current position with a given angle.
   * @param iImposAngle
   * The angle (in degrees) to force rotation.
   */
  void SetAngle(const double &iImposAngle);
  /**
   * @return the imposed angle (in radians) from current position.
   * @see SetAngle
   */
  double GetAngle() const;

  /**
   * Sets the manipulator position to a new position from its initial position with a given angle.
   * @param iImposAngle
   * The angle (in degrees) to force rotation.
   */
  void SetAbsAngle(const double &iImposAngle);
  /**
   * @return the imposed angle (in radians) from initial position.
   * @see SetAbsAngle
   */
  double GetAbsAngle() const;

  /**
   * Handle drag event of manipulator view. Should be private.
   */
  void HandleDrag(CATBaseUnknown *i_pSender, CATV3DManipulationEventArgs *i_pArgs);

  /**
   * @copydoc l_CATV3DCtl#TemplateDataUpdated
   *
   * Here are the mandatory "syp:named" objects : 
   * @li GPManip [CATV3DGraphicPrimitive]
   */
  void TemplateDataUpdated();

private:
  CATV3DCtlHandleRotation (CATV3DCtlHandleRotation &);
  CATV3DCtlHandleRotation& operator=(CATV3DCtlHandleRotation&);
};

#endif
