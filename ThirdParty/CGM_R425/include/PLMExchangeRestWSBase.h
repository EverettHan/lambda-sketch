//===================================================================
// COPYRIGHT Dassault Systemes 2016/10/04
//===================================================================
// PLMExchangeRestWSBase.cpp
// Header definition of class PLMExchangeRestWSBase
//===================================================================
//
// Usage notes: The basic of REST Web services based on JSON messages 
//
//===================================================================
//  2016/10/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef PLMExchangeRestWSBase_H
#define PLMExchangeRestWSBase_H

#include "PLMExchangeWebServices.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"
#include "CATHttpClient.h"

//-----------------------------------------------------------------------

class ExportedByPLMExchangeWebServices PLMExchangeRestWSBase
{
private:
   // Copy constructor and equal operator
   // -----------------------------------
   PLMExchangeRestWSBase (PLMExchangeRestWSBase &);
   PLMExchangeRestWSBase& operator=(PLMExchangeRestWSBase&);

   /**
   * Method called internally to get the returned status from header 
	* @param ioHttpClient [in]
	*	The Http client that contains the returned header of the query.
   * @param oStatusMessage [out]
	*	The status message of the header.
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT GetQueryStatusFromHeader(CATHttpClient& ioHttpClient, CATUnicodeString& oStatusMessage);


   /**
   * Method called internally to get a value of a tag in the header header 
	* @param ioHttpClient [in]
	*	The Http client that contains the header to retrieve value from.
   * @param iHeaderFlag [in]
	*	The flag that specifies the type of header info, generally HTTP_QUERY_CUSTOM for custom information.
   * @param iRequestHeaderTag [in]
	*	The tag of the header info to retrieve in case the flag is HTTP_QUERY_CUSTOM.
   * @param oRequestHeaderVal [out]
	*	The returned value of the header tag
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */

   static HRESULT GetTagValueFromHeader(CATHttpClient& ioHttpClient, const DWORD& iHeaderFlag, const CATUnicodeString & iRequestHeaderTag, CATUnicodeString& oRequestHeaderVal);

   /**
   * Method internally called to send GET request using the http client as parameter for input and ouput 
   * @param iUrl
   * URL to be used for GET
	* @param iRequestHeaders [in]
	*	The headers to be added to the request.
   * @param ioHttpClient [in]
	*	The http client used to execute the query. This Httpclient is used later to check headers info 
   * @param oAnswer
   * json response
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */

   static HRESULT SendClientGetRequest(const char * iUrl, const CATListOfCATUnicodeString& iRequestHeaders, CATHttpClient& ioHttpClient, CATUnicodeString & oAnswer); 


   /**
   * Method internally called to send to send POST method using the http client as parameter for input and ouput
   * @param iUrl
   * URL to be used for POST
   * @param iRequestHeaders [in]
	*	The headers to be added to the request.
   * @param ioHttpClient [in]
	*	The http client used to execute the query. This Httpclient is used later to check headers info 
   * @param iJSONContent
   * The POST message content in JSON format
   * @param oAnswer
   * json response
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT SendClientPostRequest(const char * iUrl, const CATListOfCATUnicodeString& iRequestHeaders, CATHttpClient& ioHttpClient, const char * iJSONContent, CATUnicodeString & oAnswer); 

 public: 
   /**
   * Method to add headers to HTTPClient request 
	* @param iRequestHeaders [in]
	*	The headers to be added to the request.
   * @param ioHttpClient
   * the HTTP client where to add request headers
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT AddRequestHeaders(const CATListOfCATUnicodeString& iRequestHeaders, CATHttpClient& ioHttpClient); 

   /**
   * Method to send GET request 
   * @param iUrl
   * URL to be used for GET
	* @param iRequestHeaders [in]
	*	The headers to be added to the request.
   * @param oAnswer
   * json response
    * @param oErrorMessage
   * To get more information about the error if request fails 
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT SendGetRequest(const char * iUrl, const CATListOfCATUnicodeString& iRequestHeaders, CATUnicodeString & oAnswer, CATUnicodeString & oErrorMessage);


  /**
   * Method to send GET request with additional parameters to get more information from header 
   * @param iUrl
   * URL to be used for GET
	* @param iRequestHeaders [in]
	*	The headers to be added to the request.
    * @param iHeaderFlag [in]
	*	The flag that specifies the type of header info, generally HTTP_QUERY_CUSTOM for custom information.
   * @param iRequestHeaderTag [in]
	*	The tag of the header info to retrieve in case the flag is HTTP_QUERY_CUSTOM.
   * @param oRequestHeaderVal [out]
	*	The returned value of the header tag
   * @param oAnswer
   * json response
    * @param oErrorMessage
   * To get more information about the error if request fails 
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT SendGetRequest( const char * iUrl, const CATListOfCATUnicodeString& iRequestHeaders, const DWORD &iHeaderFlag, const CATUnicodeString & iRequestHeaderTag, CATUnicodeString & oRequestHeaderVal, CATUnicodeString & oAnswer, CATUnicodeString & oErrorMessage );


   /**
   * Method to send POST method 
   * @param iUrl
   * URL to be used for POST
   * @param iRequestHeaders [in]
	*	The headers to be added to the request.
   * @param iJSONContent
   * The POST message content in JSON format
   * @param oAnswer
   * json response
    * @param oErrorMessage
   * To get more information about the error if request fails 
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT SendPostRequest(const char * iUrl, const CATListOfCATUnicodeString& iRequestHeaders, const char * iJSONContent, CATUnicodeString & oAnswer, CATUnicodeString & oErrorMessage);

   /**
   * Method to send DELETE method 
   * @param iUrl
   * URL to be used for DELETE
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   * /
   static HRESULT SendDeleteRequest(const char * iUrl);/**/  

   /**
   * Method GET for webservice
   * @param istrURL
   * URL to send
   * @param iService
   * Service name to send
   * @param iParamName
   * a service parameter name
   * @param iParamValue
   * a service parameter value
   * @param iRequestHeaders [in]
	* The headers to be added to the request.
   * @param oAnswer
   * json response
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT ExecuteGETWebService(   const CATUnicodeString& iServiceURL, 
                                          const CATUnicodeString& iServiceName, 
                                          const CATUnicodeString& iParamName, 
                                          const CATUnicodeString& iParamValue, 
                                          const CATListOfCATUnicodeString& iRequestHeaders,
                                          CATUnicodeString& oResponseMessage);

   /**
   * Method POST for webservice
   * @param istrURL
   * URL to send
   * @param iService
   * Service name to call
   * @param iRequestHeaders [in]
	* The headers to be added to the request.
   * @param iJSONContent
   * the json post message content   
   * @param oAnswer
   * json response
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT ExecutePOSTWebService(  const CATUnicodeString & iServiceURL, 
                                          const CATUnicodeString & iServiceName, 
                                          const CATListOfCATUnicodeString & iRequestHeaders,
                                          const CATUnicodeString & iusPostMessage,       
                                          CATUnicodeString & oResponseMessage);

};

//-----------------------------------------------------------------------

#endif
