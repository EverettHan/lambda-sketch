//=============================================================================
// COPYRIGHT Microsoft 2011/03/28
//=============================================================================
// CATVidDnDDataSupport.cpp
// Header definition of class CATVidDnDDataSupport
//=============================================================================
//  2011/03/28 Creation: Code generated by the 3DS wizard
//=============================================================================

#ifndef CATVidDnDDataSupport_H
#define CATVidDnDDataSupport_H

#include "VisuDialog.h"
#include "CATBoolean.h"
#include "CATBaseUnknown.h"
#include "CATBaseUnknown_WR.h"

class CATUnicodeString;
class CATPixelImage;
class CATSYPProperties;
class CATVidWidget;
class IDataObject;
struct IDataObject;

/**
 * @deprecated Use @ref CATVidCtl drag-and-drop instead.
 *
 * Helper class associated with each @ref CATVidDnDTransferHandler, that
 * manages data operations and interactions.
 *
 * @see CATVidDnDTransferHandler
 */
class ExportedByVisuDialog CATVidDnDDataSupport: public CATBaseUnknown
{
  CATDeclareClass;
  friend class CATVidDnDTransferHandler;

public:
  /**
   * Data types supported for Drag&Drop interactions.
   */
  enum DataType_e
  {
    /* A Name/Value dictionary of all introspectable properties of the emitter 
    widget that are not @ref CATSYPPropertyDescriptor#WriteOnly. */
    e_EmitterProperties,
    /* A CATUnicodeString. */
    e_Text,
    /* A CATPixelImage. */
    e_CATPixelImage
  };

public:
  /**
   * Constructor.
   *
   * @param i_bAcquireOSDataObj @c TRUE if a non-CID drag source is accepted 
   * for drop, @c FALSE else (default).
   */
  CATVidDnDDataSupport(CATBoolean i_bAcquireOSDataObj = FALSE);
  /** Destructor. */
  virtual ~CATVidDnDDataSupport();
  /**
   * @copydoc CATVidDnDTransferHandler#IsDataPresent 
   */
  virtual CATBoolean IsDataPresent(CATVidDnDDataSupport::DataType_e i_dataType) const;

  //---------------------------------------------------------------------------
  // Direct data accessor methods
  //---------------------------------------------------------------------------
  /**
   * Get a @ref CATPixelImage from the dragged CID control.
   *
   * @param o_imgOut reference to the output @ref CATPixelImage, if any.
   *
   * @return @c TRUE if an image has been found, @c FALSE otherwise.
   */
  virtual CATBoolean GetPixelImage(CATPixelImage& o_imgOut) const { return FALSE; }
  /**
   * Get a @ref CATUnicodeString from the dragged CID control.
   *
   * @param o_imgOut reference to the output @ref CATUnicodeString, if any.
   *
   * @return @c TRUE if a text has been found, @c FALSE otherwise.
   */
  virtual CATBoolean GetText(CATUnicodeString& o_textOut) const { return FALSE; }

  //---------------------------------------------------------------------------
  // Boxed data accessor method
  //---------------------------------------------------------------------------
  /**
   * Get boxed data from the drag source.
   *
   * @param i_type datatype required
   * @param o_output boxed data value returned
   *
   * @return @c TRUE if successful, @c FALSE otherwise.
   */
  virtual CATBoolean GetData(DataType_e i_type, CATBaseUnknown_var& o_output) const { return FALSE; }

protected:
  /**
   * Populates data to be transferred in a @ref CATVidOleDataObject to allow
   * it to be dropped outside CID, using Windows Drag&Drop mechanism.
   */
  virtual void PopulateDataInOleDataObject() {}
  /**
   * Creates and populates a @ref CATVidOleDataObject object to 
   * be used to transfer data in Drag&Drop of CID to non-CID targets.
   * This method should be called when starting the drag of the CID control.
   */
  IDataObject* FetchDataObjectForExternalDrop();

protected:
  /**
   * Used for two cases: 
   * @li a downcast of IDataObject* to CATVidOleDataObject* in case of 
   * Drag&Drop of non-CID to CID.
   * @li a CATVidOleDataObject* for Drag&Drop from CID to non-CID.
   */
  IDataObject*  _pIDataObj; 
  /** @c TRUE if a non-CID drag source is accepted for drop, @c FALSE else. */ 
  CATBoolean _bExternalDragSource;

private:
  /** Copy constructor. */
  CATVidDnDDataSupport (CATVidDnDDataSupport &);
  /** Equal operator. */
  CATVidDnDDataSupport& operator=(CATVidDnDDataSupport&);
};

//-----------------------------------------------------------------------------

#endif
