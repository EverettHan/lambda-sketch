// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Mar 2005  Creation: Code generated by the CAA wizard  phb
//===================================================================
#ifndef CATOmbRepRefLoadingServices_H
#define CATOmbRepRefLoadingServices_H

/**
* @level  Protected
* @usage   U1
*/

#include "CATOmbSelectiveLoadingForInfraOnly.h"
#include "CATCollec.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATVVSUrl.h"
#include "CATOmxArray.h"

class CATBaseUnknown;
class CATIOmbRepRefLoadingStatus_var;
class CATIOmbStreamDescriptor_var;
class CATIOmbContainerInfo_var;
class CATIOmbLoadingRequest_var;
class CATOmbStreamDescriptorDefinitionQualifiers;
class CATOmbStreamDescriptorObjectQualifiers;
class CATDocument;
class CATIContainer_var;
class CATComponentId;
class CATOmbRepRefLoadingManagementExt;
class CATOmyCioUrlUsageCtx;
class CATOmbLoadableDataUniqueKey;
class CATIOmbNonCATIAStreamDescriptor;
struct CATOmbStreamDescriptorQualifiers;

//-----------------------------------------------------------------------
/**
* Class providing services for Selective Loading on Representation Reference objects.
*/
class ExportedByCATOmbSelectiveLoading CATOmbRepRefLoadingServices
{
public:
  /**
  * Inits the loading status data structure from data provided by the RepRef open factory.
  */
  static HRESULT InitLoadingStatusForOpenFactory(CATBaseUnknown* iRepRef, const CATOmxArray<CATOmbStreamDescriptorQualifiers>& iLstQualifiers, const CATComponentId& iRepRefId);

  /**
  * deprecated... use CATOmbSdsInitialisationServices::InitComponentForCreationFactory
  */
  static HRESULT InitLoadingStatusForCreationFactory(const CATComponentId& iCID, const CATUnicodeString &iAuthoringType, const CATVVSUrl &iContentUrl, const CATOmyCioUrlUsageCtx* iCtx);

  /**
  * Adds an Extended StreamDescriptor to a given Representation Reference from a declared PersistencyType
  * Dedicated to Extended StreamDescriptor creation with static persistency type already declaed in a .ExtDefinition file.
  * @param iRepRef [in]
  * The RepRef an extended streamDescriptor is to be created on
  * @param iPersistencyType [in]
  * The persistency type (= file extension) of the Stream Descriptor to be created
  * This type must have been previously declared by a .extDefinition declaration file
  * @param iPersistencyName [in]
  * The persistency name is the field making unique the key that identifies the Stream Descriptor to be created: [format Authoring|role EXTENDED|a non empty PersistencyName]
  * @param iUrl [in]
  * The Url locating the Non CATIA file to be linked to its Stream Descriptor
  *   it can be LargeFile formatted, meaning created by CATOmbNonCATIAStreamAccess::CreateLargeFileAccess, or not, depending on the intent.
  *   if Large File intent, non LargeFile/LargeFile iUrl accepted, otherwise only Non LargeFile
  * Warning: when several StreamDescriptors are being created using the SAME local Url, this local Url is SHARED as long as the session content is not saved,
  *          so that any modification of the data located by this Url is seen by all these StreamDescriptors.
  * @param iWS [in]
  * Creation stamp: used for internal test only: keep imperatively the default value for standard operation
  * @return
  *   S_OK : Creation successful : The SD has been created in session and can be retrieved from its key
  *   E_INVALIDARG : iUrl not set
  *   CATOmb_E_LargeFileMismatchType: Mismatch error when static Non LargeFile iPersistencyType input and LargeFile Url
  *   CATOmb_E_forbiddenCATIAExType : CATIA type not supported as iPersistencyType input
  *   CATOmb_E_ExtensionNotDefined  : Extension not found from any .extDefinition file in runtime view
  *   E_FAIL : Creation failed : internal error. SD not created for any other reason
  */
  static HRESULT AddExtendedSDForRepRef(CATBaseUnknown* iRepRef, CATUnicodeString&	iPersistencyType, CATUnicodeString&	iPersistencyName, CATVVSUrl& iUrl, int iWS = 0);

  /**
  * Gets an Authoring extended Stream descriptor of a given Repref by key
  * @param iRepRef [in]
  * The RepRef an extended streamDescriptor is to be found
  * @param iKey [in]
  * The key for the extended streamDescriptor to find: [format Authoring|role EXTENDED|a non empty PersistencyName]
  * @param opiNonCATIASd [out, IUnknown#Release]
  */
  static HRESULT GetExtendedContent(CATBaseUnknown*	iRepRef, const CATOmbLoadableDataUniqueKey& iKey, CATIOmbNonCATIAStreamDescriptor*& opiNonCATIASd);

  /**
  * Adds an Extended StreamDescriptor to a given Representation Reference from a dynamic persistencyType
  * SIMULIA use ONLY! please ask if other needs
  * Dedicated to Extended StreamDescriptor creation without previous static persistency type declaration in .ExtDefinition files and with Non LargeFile intent
  * If input persistency type/extension is already declared in session by some .ExtDefinition file as son of any LargeFile type or if Input Url is LargeFile formatted,
  * a mismatch error occurs
  *
  * @param iRepRef [in]
  * The RepRef an extended streamDescriptor is to be created on
  * @param iPersistencyType [in]
  * The static/dynamic persistency type (= file extension) of the Stream Descriptor to be created
  * static: already declared in session by some .ExtDefinition file, with No LargeFile capability, otherwise a mismatch error occurs.
  * dynamic: unknown for the session, never registered in static declaration table, even by this call.
  *          the SD is always created from this PersistencyType with No LargeFile capability.
  * @param iPersistencyName [in]
  * The persistency name is the field making unique the key that identifies the Stream Descriptor to be created: [format Authoring|role EXTENDED|a non empty PersistencyName]
  * @param iUrl [in]
  * The Url locating the Non CATIA file to be linked to its Stream Descriptor
  *   It cannot be LargeFile formated, meaning created by CATOmbNonCATIAStreamAccess::CreateLargeFileAccess
  * @return
  *   S_OK : Creation successful : The SD has been created in session and can be retrieved from its key
  *   E_INVALIDARG : iUrl not set
  *   CATOmb_E_LargeFileMismatchType: Mismatch error when LargeFile Url or static LargeFile iPersistencyType input
  *   CATOmb_E_forbiddenCATIAExType : CATIA type not supported as iPersistencyType input
  *   E_FAIL : Creation failed : internal error. SD not created for any other reason
  */
  static HRESULT AddExtendedSDToRepRefForSimulia(CATBaseUnknown* iRepRef, CATUnicodeString& iPersistencyType, CATUnicodeString& iPersistencyName, CATVVSUrl& iUrl);

  /**
  * Adds an Extended large file StreamDescriptor to a given Representation Reference from a dynamic persistencyType
  * SIMULIA use ONLY! please ask if other needs
  * behaves as AddExtendedSDToRepRefForSimulia PLUS large file capability declaration on created StreamDescriptor:
  *
  *  When this method used with iLargeFile=FALSE and input persistency type/extension is already declared in session by some .ExtDefinition file as son of any LargeFile type or
  *  if Input Url is LargeFile formatted, a mismatch error occurs
  *
  * @param iRepRef [in]
  * The RepRef an extended streamDescriptor is to be created on
  * @param iPersistencyType [in]
  * The static/dynamic persistency type (= file extension) of the Stream Descriptor to be created
  *   static : already declared in session by some .ExtDefinition file. The large file capability relies first on this declaration and should not be contradicted by iLargeFile,
  *            otherwise a mismatch error occurs.
  *            The (non)large file capability is the same for all SDs created from this PersistencyType.
  *   dynamic: unknown for the session, never registered in static declaration table, even by this call.
  *            The (non)large file capability is settable for each SD created from this PersistencyType.
  * @param iPersistencyName [in]
  * The persistency name is the field making unique the key that identifies the Stream Descriptor to be created: [format Authoring|role EXTENDED|a non empty PersistencyName]
  * @param iUrl [in]
  * The Url locating the Non CATIA file to be linked to its Stream Descriptor.
  *   it can be LargeFile formatted, meaning created by CATOmbNonCATIAStreamAccess::CreateLargeFileAccess, or not, depending on the intent.
  *   if Large File intent, non LargeFile/LargeFile Url accepted, otherwise only Non LargeFile
  * @param iLargeFile [in]
  * Large file capability to be eventually set for this SD.
  * @param oKey [out]
  * The unique key handling the Stream Descriptor created in session
  * @return
  *   S_OK :   Creation successful : The SD has been created in session and can be retrieved from its key
  *   E_INVALIDARG : iUrl not set
  *   CATOmb_E_LargeFileMismatchType: Mismatch error when iLargeFile=FALSE intent with LargeFile Url and/or static LargeFile iPersistencyType input
  *   CATOmb_E_LargeFileMismatchType: Mismatch error when iLargeFile=TRUE intent with static Non LargeFile iPersistencyType input
  *   CATOmb_E_forbiddenCATIAExType : CATIA type not supported as iPersistencyType input
  *   E_FAIL : Creation failed : internal error. SD not created for any other reason
  */
  static HRESULT AddDynamicExtendedSD(CATBaseUnknown* iRepRef, const CATUnicodeString& iPersistencyType, const CATUnicodeString& iPersistencyName, CATVVSUrl& iUrl, const CATBoolean iLargeFile, CATOmbLoadableDataUniqueKey& oKey);

protected:

private:
  // Extended SD creation asked from :
  // None: creation method deals only with static PersistencyTypes (i.e. declared in table from .extdefinition declarative files)
  // StdFile: creation method deals with dynamic Non Large File intent and current PT one is effectively dynamic
  // StdFileDec: creation method deals with dynamic Non Large File intent and current PT one in fact already declared static
  // LargeFile : creation method deals with dynamic Large File intent and current PT one is effectively dynamic
  // StdFileDec : creation method deals with dynamic Large File intent and current PT one in fact already declared static
  enum  DynSDType { None = 0, StdFile = 1, StdFileDec = 2, LargeFile = 3, LargeFileDec = 4 };

  // Constructor (not implemented)
  // -----------
  CATOmbRepRefLoadingServices();

  friend class CATPLMTestCreateReferencePanel;
  friend class CATPLMTestCreateReference;
  friend class CATEPSIInternalAccess;
  friend class CATFbdImportDocPartExt;
  friend class CATFbdImportEngine;
  friend class CATOmbTransientSdInitServicesForPartImport;

  static HRESULT InitLoadingStatusForJDPPartImport(CATBaseUnknown* iRepRef, const CATUnicodeString &iPartPath);

  static HRESULT SwitchARepRef(CATBaseUnknown& iRepRef, const CATUnicodeString& Mode);

  static HRESULT AddExtendedSDToRepRef(CATBaseUnknown* iRepRef, const CATUnicodeString& iNonCATIASuperType, const CATUnicodeString& iPersistencyType, const CATUnicodeString& iPersistencyName, CATVVSUrl& iUrl, CATOmbLoadableDataUniqueKey& oKey);
  static HRESULT CheckAndAddDynExtendedSD(CATBaseUnknown* iRepRef, const CATUnicodeString& iNonCATIASuperType, const CATUnicodeString& iPersistencyType, const CATUnicodeString& iPersistencyName, CATVVSUrl& iUrl);
  static HRESULT CheckAndAddExtendedSD(CATBaseUnknown* iRepRef, CATUnicodeString& iPersistencyType, CATUnicodeString& iPersistencyName, CATVVSUrl& iUrl, int iWS);
  static HRESULT FormatSDCreationError(CATBaseUnknown* iRepRef, const CATOmbLoadableDataUniqueKey& iKey, const CATUnicodeString& iPT, CATVVSUrl& iUrl, HRESULT iHR);

  static DynSDType _DynSDType;
};

//-----------------------------------------------------------------------

#endif
