// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// CATVidCtlViewerBase.h
// Header definition of CATVidCtlViewerBase
//
//===================================================================
//
//  July 2010  Creation: jov
//===================================================================
#ifndef CATVidCtlViewerBase_H
#define CATVidCtlViewerBase_H

#include <CATVisImmersivePanel.h>
#include <CATVidCtl.h>
#include <CATVidInformation.h>
#include <CATVisRepresentationRole.h>
#include <CATVisInvalidationToken.h>
#include <CATMotionEvent.h>
#include <CATViewerUtility.h>
#include <CATPickPathList.h>
#include <CATVidBorder.h>

class CATViewer;
class CATVidCtlDlgContainer;
class CATVidGPSquare;
class CATIndicator;
class CATRep;
class CATViewpoint;
class CATVidGPPolygon;


/**
 * An immersive viewer that interacts with devices and Visu controllers.
 *
 * @par Role
 * This control allows to visualize 3D or 2D data in 3D from a given viewpoint within a pixel area.<br>
 * It has the following <b>features</b>: 
 * @arg Rotation, Translation, Zoom-in, Zoom-out are natively supported (according to the standard V6 triggers)
 * @arg End-user is able to interact with the 3D data : standard selection mechanisms are available :
 * selection, trap selection.
 * @arg Fully-compliant with the visu controller mechanism, CATVisManager : creating the visu representation
 * of a given model, updating the visu representation when given model is modified, mapping visu representation
 * to model world, providing a visual feedback of selected parts of the model (highlight + prehighlight).
 *
 * @image html ClearGrey.jpg
 *
 *
 * @par Difference with CATViewer
 * It exposes a <b>restricted API</b> regarding the customization.<br>
 * Especially, it does not expose any CATViewpoint, and does not support any ambiance customization (in this drop at least).
 * The ambiance of the %CATVidCtlViewerBase is automatically managed and fits to the main viewer one.
 * 
 * @image html LightBlue.jpg "Light Blue ambiance"
 * @image html CrystalLab.jpg "Crystal Lab ambiance"
 * 
 *
 * @par Use
 * As any VID control, it can be added to a <a href="http://codewiki/codewiki/index.php/VID_:_Widget_Gallery#Dialogs"><b>dialog</b></a><br>
 * Instantiate it using its factory :
 * @code
 * CATVidCtlViewerBase* pCtlViewer = CATVidCtlViewerBase::CreateCATVidCtlViewerBase(NULL, "Viewer");
 * @endcode
 * 2 possibilities :
 * @arg You can directly add a representation using AddRep().
 * @arg %CATVidCtlViewerBase <b>connects the 3D or 2D data</b> (model) to the visu controller, CATVisManager, instead of using a viewpoint.<br>
 * The representation generated by the visu controller will be automatically added to it.<br>
 * The relation CATVisManager-CATVidCtlViewerBase is similar as CATVisManager-CATVisViewpoint, given some limitations (see below)<br>
 * In fact, all functions of CATVisManager now take a CATBaseUnknown instead of a CATVisViewpoint for this purpose.
 * <br><br><br>
 *
 * @par Example with CATVisManager
 * A short sample demonstrating how a CATVidCtlViewerBase can be created, inserted in a VID dialog and connected to the visu manager :
 * @code
 * #include "CATI3DGeoVisu.h"
 * #include "CATCommand.h"
 * #include "CATPathElement.h"
 * #include "CATHSO.h"
 * #include "CATPSO.h"
 * #include "CATVisManager.h"
 * 
 * 
 * // Retrieve all elements to attach
 * CATCommand* pSelector = ...; // pEditor->GetSelector();
 * CATPathElement* pPathElement = ...; //...->GetRootObjectPath();
 * CATHSO* pHSO= ...; // pEditor->GetHSO();
 * CATPSO* pPSO= ...; // pEditor->GetPSO();
 *
 * // Retrieve the VisuManager
 * CATVisManager *pVisuManager  = CATVisManager::GetVisManager();
 * CHECK_POINTER_RET(pVisuManager);
 *
 * // Create the CATVidCtlViewerBase
 * CATVidCtlViewerBase* pCtlViewer = CATVidCtlViewerBase::CreateCATVidCtlViewerBase(this, "Viewer");
 * CHECK_POINTER_RET(pCtlViewer);
 * pCtlViewer->SetDimension(CATMathPoint2Df(200, 200));
 * 
 * // Attach to the VisuManager
 * list<IID> list_iid_3D;
 * list_iid_3D += new IID ( IID_CATI3DGeoVisu );
 * pVisuManager->AttachTo (pPathElement, pCtlViewer, list_iid_3D, pSelector);
 * pVisuManager->AttachHSOTo(pHSO,pCtlViewer);
 * pVisuManager->AttachPSOTo(pPSO,pCtlViewer);
 * pCtlViewer->SetBackgroundManipulationListener(pSelector);
 * delete list_iid[0];
 * 
 * // Add the CATVidCtlViewerBase widget to a dialog
 * CATVidFraDialog* pDialog = new CATVidFraDialog(NULL, "Viewer dialog");
 * pDialog->SetApplicativeWidget(pCtlViewer);
 * pDialog->SetVisibleFlag(TRUE);
 * @endcode
 *
 *
 * @par Limitations
 * There is no camera management for now (to come).
 *
 * @see <a href="http://testautoweb/cgi-bin/taXrefShow?xrefLevel=R212rel&path=0/VisualizationController/PublicInterfaces/CATIVisView.h "><b>CATIVisView</b></a>
 * @see <a href="http://testautoweb/cgi-bin/taXrefShow?xrefLevel=R212rel&path=0/VisualizationFoundation/ProtectedInterfaces/CATIVisRootNode.h"><b>CATIVisRootNode</b></a>
 * @see <a href="http://testautoweb/cgi-bin/taXrefShow?xrefLevel=R212rel&path=0/VisualizationFoundation/PublicInterfaces/CATRep.h"><b>CATRep</b></a>
 * @see <a href="http://testautoweb/cgi-bin/taXrefShow?xrefLevel=R212rel&path=0/VisualizationFoundation/PublicInterfaces/CAT3DRep.h"><b>CAT3DRep</b></a>
 * @see <a href="http://testautoweb/cgi-bin/taXrefShow?xrefLevel=R212rel&path=0/VisualizationFoundation/PublicInterfaces/CAT2DRep.h"><b>CAT2DRep</b></a>
 * @see <a href="http://codewiki/codewiki/index.php/VID_:_Widget_Gallery"><b>CodeWiki -> Widget Gallery</b></a>
 */
class ExportedByCATVisImmersivePanel CATVidCtlViewerBase: public CATVidCtl
{
  CATDeclareClass;
public:
  /**
   * This mode allow to customize the viewpoint editor, by changing its mode.
   */
  enum ViewpointEditionMode{
   /** Default mode*/
   DefaultMode=0,
   /** Only rotating is permitted. */
   RotateMode,
   /** Only zooming is permitted.*/
   ZoomMode,
   /** Only panning is permitted.*/
   PanMode,
   /** In 3D mode, only panning and zooming are permitted.*/
   KeepSightMode,
   /** In 3D mode, only rotation is permitted, and zoom is restricted to a specific range.*/
   GlobeMode,
   /** In 3D mode, origin if fixed, camera roll is disabled, zoom is optical.*/
   CameraMode,
   /** SWX viewpoint edition mode*/
   SWXMode,
   /** No change is permitted.*/
   DisabledMode 
  };
  /**
   * Get the @c ViewpointModifiedEvt event.
   *
   * @par EventProperties
   * Name: @c "ViewpointModifiedEvt"
   * Type of propagation: @c NoPropagation
   * Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *ViewpointModifiedEvt();
  /**
   * Get the @c GraphicWindowSwapEvt event.
   *
   * This event is dispatched when the window finishes drawing.
   *
   * @par EventProperties
   * Name: @c "GraphicWindowSwapEvt"
   * Type of propagation: @c NoPropagation
   * Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *GraphicWindowSwapEvt();
  /**
   * Get the @c GraphicWindowDimensionModified event.
   * 
   * The update of the dimension of the visu object graphic window is 
   * not synchroneous. Thus an event is dispatched when
   * the update appends.
   *
   * @par EventProperties
   * Name: @c "GraphicWindowDimensionModified"
   * Type of propagation: @c NoPropagation
   * Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *GraphicWindowDimensionModified();
  /**
   * Get the @c ViewModeChanged event.
   *
   * @par EventProperties
   * Name: @c "ViewModeChanged"
   * Type of propagation: @c NoPropagation
   * Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *ViewModeChanged();
  /**
   * Get the @c FullScreenRequested event.
   *
   * @par EventProperties
   * Name: @c "FullScreenRequested"
   * Type of propagation: @c NoPropagation
   * Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *FullScreenRequested();
  /**
   * Default constructor. 
   */
  CATVidCtlViewerBase();
  /**
   * @copydoc CATIVisRootNode::AddRep
   */
  HRESULT AddRep (CATRep& i_rep, CATVisRepresentationRole i_repType);
  /**
   * @copydoc CATIVisRootNode::RemoveRep
   */
  HRESULT RemoveRep (CATRep& i_rep, CATVisRepresentationRole i_repType, int i_updateFlag=1);
  /**
   * @copydoc CATIVisRootNode::RemoveAll
   */
  HRESULT RemoveAll (CATVisRepresentationRole i_repType);
  /**
   * @copydoc CATIVisView::Invalidate
   */
  HRESULT Invalidate(CATVisInvalidationToken i_invalidationToken, CATVisRepresentationRole i_repType=AllRoles);
  /**
   * @copydoc CATIVisView::ComputeBoundingElement
   */
  virtual HRESULT ComputeBoundingElement( CATVisRepresentationRole i_repType=AllRoles);
  /**
   * @return 1 if 3D, 0 if 2D. 
   */

  CATBoolean Get3DFlag() const;
  /**
   * Same as Get3DFlag.
   * @return 1 if 3D, 0 if 2D. 
   */
  int Is3D()const;
  /**
   * Reframe the scene, that is make it fully visible on screen.
   */
  void Reframe();
  /**
  * Sets a listener to the events that can occur in the background of the %CATVidCtlViewerBase.
  * @param i_pListener the listener to set.
  */
  void SetBackgroundManipulationListener(CATCommand* i_pListener);
  /**
  * @return the listener of the events that occur in the background of the %CATVidCtlViewerBase.
  */
  CATCommand* GetBackgroundManipulationListener() const;
  /**
   * Calls a draw request. Note that this call is most of the time unusefull. Call it only when visu can't be notified
   * that the view has to be refreshed.
   */
  void DrawRequest();
  /**
   * Sets a "special" rep, accessible by introspection, and that can be considered in some
   * scenario like "the" rep of the Viewer.
   * It calls internally #AddRep and #RemoveRep, but allow to keep it as a member data.
   */
  void SetSpecialRep(CATRep* i_pRep);
  /** @return the "special" rep of the viewer, usefull in some scenarios.*/
  CATRep* GetSpecialRep() const;
  /**
   * Sets a flag indicating if the ReferenceAxis should be seen.
   * Default value is TRUE.
   */
  void SetShowReferenceAxisFlag(int i_showReferenceAxisFlag);
  /** @return a flag indicating if the ReferenceAxis should be seen */
  int GetShowReferenceAxisFlag();
  /** 
   * Generates a CATPickPathList corresponding to all representations laying under
   *  the given position.
   *  @param  istyle    
   *   A CATPickingStyle specifying the way the @href CATPickPathList is generated
   *  @param  ix        
   *   The x coordinate of the position at wich we want to pick
   *  @param  iy        
   *   The y coordinate of the position at wich we want to pick
   *  @param  idx       
   *   The width in pixel 
   *  @param  idy       
   *   The height in pixel
   *  @param  oPlist    
   *   The CATPickPathList generated
   *  @param  irepp     
   *   The CATRepPath we want to pick on. If this parameter is NULL, we pick on all representations
   *  @param  ipolygon  
   *   If the CATPickingStyle is CATPickingInsidePolygon, define the polygon used for the picking
   *  @param  inb_point 
   *   If the CATPickingStyle is CATPickingInsidePolygon, define the number of points in the polygon
   *  @param  ipick_style 
   *   The @href CATViewModeType used to do the picking
   */
  void Pick( const CATPickingStyle istyle, const float ix, const float iy, const float idx, const float idy, CATPickPathList &oPlist, CATRepPath *irepp = NULL, const float *ipolygon = NULL, const int inb_point = 0, const int ipick_style = 0 );
  /** 
   * Generates a CATPickPathList corresponding to all representations laying under
   *  the given position.
   *  @param  istyle      A CATPickingStyle specifying the way the @href CATPickPathList is generated
   *  @param  iorg        The Point from wich we pick
   *  @param  idir        The direction into wich we pick
   *  @param  ineard      The distance from iorg at wich we begin to pick
   *  @param  ifard       The distance from iorg at wich we stop to pick
   *  @param  oPlist      The @href CATPickPathList generated
   *  @param  irepp       The @href CATRepPath we want to pick on. If this parameter is NULL, we pick on all representations
   *  @param  ipick_style The @href CATViewModeType used to do the picking
   */ 
  void Pick( const CATPickingStyle istyle, const CATMathPointf &iorg, const CATMathDirectionf &idir, const float ineard, const float ifard, const float idx, const float idy, CATPickPathList &oPlist, CATRepPath * irepp= NULL, const int ipick_style = 0 );
  /**
   * Sets the shape as circular.
   */
  void SetCircularShapeFlag(int i_circularShapeFlag);
  /** @return a flag indicating if the shape of the viewer is a circle*/
  int GetCircularShapeFlag() const;
  /** Sets the ViewpointEditionMode*/
  void SetViewpointEditionMode(CATVidCtlViewerBase::ViewpointEditionMode i_mode);
  /** Gets the ViewpointEditionMode*/
  CATVidCtlViewerBase::ViewpointEditionMode GetViewpointEditionMode() const;
  /** Set params for GlobeMode ViewpointEditionMode **/
  void SetGlobeModeParams(float i_minDistance, float i_maxDistance, float i_startDistance);
  /** Set params for CameraMode ViewpointEditionMode **/
  void SetCameraModeParams(float i_minAngle, float i_maxnAngle, float i_startAngle);
  /**
   * Sets a flag that allow to follow automatically the ambiance of the viewer of the widget. 
   * If on, the property AmbianceName is ignored.
   * Default value is 1.
   */
  void SetAutoAmbianceFlag(int i_autoAmbianceFlag);
  /** @return the flag that allow to follow automatically the ambiance of the viewer of the widget. */
  int GetAutoAmbianceFlag() const;

  /**
  * Sets a vizviewer, which will be taken as reference for ambiance update. This will only occurs in AutoAmbianceFlag set to TRUE.  
  * Default value is NULL.
  */
  void SetAutoAmbianceReferenceViewer(CATVizViewer * i_autoAmbianceReferenceViewer);
  /** @return the reference viewer on which the ambiance of THIS viewer is mapped. If NULL AND AutoAmbianceFlag is set to TRUE, ambiance of THIS viewer follow automatically the ambiance of the viewer of the widget */
  CATVizViewer* GetAutoAmbianceReferenceViewer() const;

  /**
   * Sets a flag indicating if a background should be used in the CtlViewer.
   * Used only with AutoAmbianceFlag=0. Is set to true, the properties AmbianceName, 
   * GraduatedBackgroundFlag ans Backgroundcolor are ignored.
   */
  void SetTransparentBackgrounFlag(int i_transparentBackgroundFlag);
  /** @return a flag indicating if a background should be used in the CtlViewer.*/
  int GetTransparentBackgrounFlag() const;
  /** 
   * Sets the ambiance name to use in the ctlViewer. Ignored if AutAmbianceFlag is 1. 
   * Empty string correspond to no ambiance; then the ViewerColor and GraduatedBackgroundFlag properties will be used.
   * Ignored if the property TransparentBackgrounFlag is set to 1.
   */
  void SetAmbianceName(const CATString& i_name);
  /** @return the ambiance name.*/
  CATString GetAmbianceName() const;
  /** 
   * Sets a flag that allow to follow automatically the view mode of the viewer of the widget. 
   * If on, the property ViewMode is ignored.
   * Default value is 1.
   */
  void SetAutoViewModeFlag(int i_autoViewModeFlag);
  /** @return the the flag that allow to follow automatically the ambiance of the viewer of the widget. */
  int GetAutoViewModeFlag() const;
  /**
   * Sets the viewmode for viewer enclosed in the current CATSupport.
   * @param i_viewMode
   * The viewer mode
   * <br><b>Legal values:</b> @href CATViewModeType 
   */
  void SetViewMode(int i_viewMode);
  /** @returns the viewMode.*/
  int GetViewMode() const;
  /** 
   * Sets a flag indicating if the background of the viewer is graduated. 
   * Used only with AutoAmbianceFlag=0 and AmbianceName empty.Default is false.
   * Ignored if the property TransparentBackgrounFlag is set to 1.
   */
  void SetGraduatedBackgroundFlag(int i_graduatedFlag);
  /** @return a flag indicating if the background of the viewer is graduated. */
  int GetGraduatedBackgroundFlag() const;
  /** 
   * Sets the color of the background of the viewer. 
   * Used only with AutoAmbianceFlag=0 and AmbianceName empty.
   * Ignored if the property TransparentBackgrounFlag is set to 1.
   */
  void SetBackgroundColor(const CATVidRGB& i_rgb);
  /** @return the background color of the viewer.*/
  CATVidRGB GetBackgroundColor()const;
  /** @return the rep list of the viewer.*/
  list<CATRep>* GetRepList();
  /** Starts an animation mode, involving some modifications in the rendering, to have good performances */
  void StartAnimation();
  /** Stops an animation mode, involving some modifications in the rendering, to have good performances */
  void StopAnimation();
  /** Sets the touch behavior on manipulator for VID internal GP*/
  void SetInactiveTouch(int i_inactiveTouch);

  /** @copydoc CATIVisOnScreenView#GetCursorPosRelativeToView*/
  void GetCursorPosRelativeToView(int &o_x, int &o_y);

  /** @copydoc CATIVisOnScreenView#SetMousePosition*/
  virtual void SetMousePosition(int i_x, int i_y);

  /** @copydoc CATIVisOnScreenView#SetWndFocus*/
  void SetWndFocus ();

  /** @copydoc CATIVisOnScreenView#SetReplayMousePosition*/
  void SetReplayMousePosition(int i_x, int i_y);

  /** @copydoc CATIVisOnScreenView#RequestTranslatedContextualMenuEx*/
  void RequestTranslatedContextualMenuEx();

  /** @copydoc CATIVisOnScreenView#GetStrechtedFactor*/
  void GetStrechtedFactor(float& o_widthFactor, float& o_heightFactor);

  /** @copydoc CATIVisOnScreenView#GetMousePosition*/
  void GetMousePosition(int &o_x, int &o_y);

  /** @copydoc CATIVisOnScreenView#GetMainViewer*/
  virtual  CATViewer* GetMainViewer();

  /** @copydoc CATIVisOnScreenView#GetMainVizViewer*/
  virtual  CATVizViewer* GetMainVizViewer();

   /** @copydoc CATIVisOnScreenView#IsPointInsideWidget*/
  virtual  CATBoolean IsPointInsideWidget (int i_x, int i_y);

  /**
   * Specifies whether the viewer is limited to the immersive frame restricted area, or not.
   * By default this property is set to FALSE.
   */
  void SetUseRestrictedAreaFlag(CATBoolean i_useRestrictedAreaFlag);
  CATBoolean GetUseRestrictedAreaFlag() const;

  /**
  * Sets the margins used around the viewer.
  * By default, these margins are null.
  */
  void SetContentsMargins(const CATVidBorder& i_contentsMargins);

  /**
  * @return the margins used around the layout.
  */
  const CATVidBorder& GetContentsMargins() const;

  /**
  * Specifies whether the viewer dimension ratio is custom (cf SetCustomDimensionRatio method) or equal to the CATVidCtlViewer one.
  * By default this property is set to FALSE, i.e the viewer dimension ratio is the same as the CATVidCtlViewer one.
  */
  void SetUseCustomDimensionRatioFlag(CATBoolean i_useCustomDimensionRatioFlag);
  CATBoolean GetUseCustomDimensionRatioFlag() const;

  /**
  * Sets the viewer custom dimension ratio.
  * By default, the viewer dimension ratio is the same as the CATVidCtlViewer one.
  */
  void SetCustomDimensionRatio(float i_customDimensionRatio);

  /**
  * @return the viewer custom dimension ratio.
  */
  float GetCustomDimensionRatio() const;

protected:
  /**
  * Destructor
  */
  virtual ~CATVidCtlViewerBase ();
  /**
   * @copydoc CATVidWidget#TunnelInformation
   */
  virtual void TunnelInformation(const CATVidInformation& i_information);
  /**
   * @copydoc CATVidWidget#Update
   */
  virtual void Update();
  /** The method is called when the viewpoint is modified */
  virtual void ReactOnViewpointModified();
  /** The method is called when the graphic window has finished drawing */
  virtual void ReactOnGraphicWindowSwap();

  CATVidGPPolygon * GetViewerTexture() const;

  friend class l_CATVidCtlViewer;
  friend class CID_FRAME_CtlViewerTest;

private:
    void OnViewerCreateCB(CATCommand *, CATNotification *notification, CATCommandClientData);
    void ListenViewerCreate();

public:
  void ScreenManipulationCB  (const CATUnicodeString &i_eventName, const CATBaseUnknown_var &i_input, CATBaseUnknown_var &i_spArgs);
  /**@return the hidden viewer. Avoid to use this method, you could be asked to migrate later.*/
  CATViewer* GetHiddenViewer();

  /*
  * Sets the Drag and Drop behaviour : 
  * i_DnDOn3DContentFlag == TRUE allows forwarding of all DND events to the hidden viewer
  * by default the DND events are forwarded to the hidden viewer.
  */
  void SetDnDOn3DContentFlag(CATBoolean i_DnDOn3DContentFlag);
  CATBoolean GetDnDOn3DContentFlag() const;
  /*
  * Sets the Context behaviour: 
  * i_DnDOn3DContentFlag == TRUE allows forwarding of RMB (or context button click) events to the hidden viewer
  * by default the Content events are NOT forwarded to the hidden viewer.
  */
  void SetContextOn3DContent(CATBoolean i_DnDOn3DContentFlag);
  CATBoolean GetContextOn3DContent() const;
};
CATSYP_DECLARE_ENUMFACTORY(ExportedByCATVisImmersivePanel, CATVidCtlViewerBase__ViewpointEditionMode);
//-----------------------------------------------------------------------
#endif
