//===================================================================
// COPYRIGHT Microsoft 2012/10/22
//===================================================================
// CATIKweUIServices.cpp
// Header definition of class CATIKweUIServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/10/22 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIKweUIServices_H
#define CATIKweUIServices_H

#include "CATLifSpecs.h"
#include "CATEventSubscriber.h"
#include "CATBaseUnknown.h"


extern ExportedByCATLifSpecs  IID IID_CATIKweUIServices;

class CATCmdAccess;
class CATCmdContainer;
class CATString;
class CATICkeRelationExp_var;
class CATIGraphNode_var;
class CATINavigateObject_var;
class CATPathElement;
class CATOmbLifeCycleRootsBag;
class CATIPLMComponent_var;

#define KWECMD_NOFLAG 0
#define KWECMD_INSERT_UNDER 1
#define KWECMD_NO_NEW_SECTION 2

class ExportedByCATLifSpecs CATIKweUIServices : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  virtual HRESULT RedrawParameters() = 0;

  /**
  * Creates the following Knowledge Commands after the given Access :
  * Default section:  F(x), Design Table, Equivalent Dimensions, Create External Parameter, Check Analysis
  * Hidden section: URL & Comments, Law, Lock/Unlock
  * @param iPrev
  *    The CATCmdAccess after which the Knowledge Commands will be instantiated.
  * @param iInsert
  *    Indicates if the created Container should be inserted relatively to iPrev or not.
  * @param iOptionFlag
  *    KWECMD_NOFLAG standard behavior
  *    KWECMD_NO_NEW_SECTION no new section will be created
  */
  virtual CATCmdContainer* CreateGeneralKnowledgeCommands(CATCmdAccess* iPrev, CATBoolean iInsert, unsigned int iOptionFlag) = 0;

  /**
  * Creates the following Knowledge Commands after the given Access :
  * Report Generation
  * @param iPrevCmd
  *    The CATCmdAccess after (or under) which the Knowledge Commands will be instantiated.
  * @param iInsert
  *    Indicates if the created Container should be inserted relatively to iPrevCmd or not.
  * @param iOptionFlag
  *    KWECMD_NOFLAG standard behavior
  *    KWECMD_NO_NEW_SECTION no new section will be created
  */
  virtual CATCmdContainer* CreateShareKnowledgeCommands(CATCmdAccess* iPrevCmd, CATBoolean iInsert, unsigned int iOptionFlag) = 0;

  /**
  * Creates the headers of the knowledge shared commands
  * This checks the allowed packaging.
  * @param iOptions
  * not used currently, only to prepare future evolutions if needed
  */
  virtual void CreateGeneralKnowledgeCommandsHeaders(int iOptions = 0) = 0;

  /**
  * Creates the following Knowledge Commands (menu items) after the given Access :
  * Create Engineering Specifications Rep
  * @param iPrevCmd
  *    The CATCmdAccess after which the Knowledge Commands will be instantiated.
  * @param iInsert
  *    Indicates if the created Container should be inserted relatively to iPrevCmd or not.
  * @param iOptionFlag
  *    KWECMD_NOFLAG standard behavior
  *    KWECMD_NO_NEW_SECTION no new section will be created
  */
  virtual CATCmdContainer* CreateInsertKnowledgeCommands(CATCmdAccess* iPrevCmd, CATBoolean iInsert, unsigned int iOptionFlag) = 0;

  /**
  * Creates the following Knowledge Commands under the given container :
  * - Section 1 : Deploy Knowledge Application, Display Knowledge Dialog Boxes Dictionary, Trace Knowledge Dialog Boxes execution
  * - Section 2 : Knowledge Inspector, Knowledge Monitor Tool
  * @param iContainer
  *    The CATCmdContiner under which the Knowledge Commands will be instantiated.
  */
  virtual void CreateToolsKnowledgeCommands(CATCmdContainer* iContainer) = 0;


  virtual HRESULT GetHeaderAvailability(int iPdmVisibility,
    CATString iCommandName,
    CATBoolean& oHeaderAvailable, int iCreationCommand = 1) = 0;


  /**
  * Flushes the stack of visualization events
  */
  virtual HRESULT CommitVisualizationEvents(const CATBaseUnknown_var& iObject) = 0;


  /**
  * Locks undo/redo transactions
  */
  virtual HRESULT LockUndoRedoTransactions() = 0;

  /**
  * Unlocks undo/redo transactions
  */
  virtual HRESULT UnlockUndoRedoTransactions() = 0;



  /**
  * Launch Popup
  */
  virtual void GetPopup(const CATICkeRelationExp_var& iCheck) = 0;

  virtual HRESULT UnderlineIWO(const CATIGraphNode_var& iH_Node, const CATINavigateObject_var iH_NavObj) = 0;

  virtual CATPathElement* GetUIActiveObject() = 0;

  virtual void HighlightElement(const CATBaseUnknown_var& bu, int empty, int pso) = 0;

  // for parametric bridge
  // needs to synchro after refresh
  virtual void AddCallbackOnRefresh(CATBaseUnknown* subscriber, CATSubscriberMethod method) = 0;
  virtual void RemoveCallbackOnRefresh(CATBaseUnknown* subscriber) = 0;
  virtual HRESULT RedrawObject(const CATBaseUnknown_var& iObject, CATBoolean iRedrawParent) = 0;

  virtual void SetDPCBag(CATOmbLifeCycleRootsBag* pDPCBag) = 0;
  virtual CATOmbLifeCycleRootsBag* GetDPCBag() = 0;

  // not proud of this, quickly need to access CATISpecObject::GetFather 
  // from CATExpressionEngine
  virtual CATBaseUnknown_var GetFather(const CATBaseUnknown_var& iObj) = 0;

  // Bridge to LiteralsEditor in order to know if we should display a Link&Rel in EKL
  virtual CATBoolean IsDisplayableInLinksIntrospection(const CATIPLMComponent_var spPLMClickedObject) = 0;
};

//-----------------------------------------------------------------------
CATDeclareHandler(CATIKweUIServices, CATBaseUnknown);

#endif
