// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Mar 2005  Creation: Code generated by the CAA wizard  phb
//===================================================================
#ifndef CATIOmbRepRefLoadingStatus_H
#define CATIOmbRepRefLoadingStatus_H

/**
* @level  Private
* @usage   U3
*/

#include "CATOmbStreamDescriptorFormat.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATCollec.h"
#include "CATErrorDef.h"

class CATIOmbStreamDescriptor_var;
class CATOmbStreamDescriptorDefinitionQualifiers;
class CATOmbStreamDescriptorObjectQualifiers;
class CATLISTV(CATOmbStreamDescriptorDefinitionQualifiers);
class CATLISTV(CATOmbStreamDescriptorObjectQualifiers);
class CATOmbLoadableDataUniqueKey;
class CATOmbLinkTablePLMTrader;
class CATUuid;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbSelectiveLoading IID IID_CATIOmbRepRefLoadingStatus;
#else
extern "C" const IID IID_CATIOmbRepRefLoadingStatus ;
#endif

/**
* Interface representing the Loading Status of a Representation Reference.
* !!!
* !!! USAGE OF THIS INTERFACE IS RESTRICTED TO OMB TEAM MEMBERS.
* !!! 
* !!! IF YOU ARE NOT MEMBER OF OMB TEAM YOU MUST ASK THE RIGHT TO USE THIS INTERFACE TO OMB TEAM.
* !!! 
* !!! VIOLATORS WILL BE PROSECUTED.
* !!! 
*/
class ExportedByCATOmbSelectiveLoading CATIOmbRepRefLoadingStatus: public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /**
  * Retrieves the authoring stream descriptor.
  *
  * @param oStreamDesc
  * The main stream descriptor of the Representation Reference.
  * <br>(its other stream descriptors are generated from it)
  */
  virtual HRESULT GetAuthoringStreamDescriptor( CATIOmbStreamDescriptor_var& oStreamDesc ) = 0;

  /**
  * Retrieves the list of stream descriptors that may be loaded.
  *
  * @param oLstStreamDescs
  * The list of stream descriptors for the Representation Reference.
  * <br>(That list may be incremented during the session)
  */
  //BESDebug To Be Removed
  virtual HRESULT GetLoadableStreamDescriptors( CATLISTV(CATBaseUnknown_var)& oLstStreamDescs ) = 0;

  /**
  * Retrieves the list of stream descriptors that may be loaded.
  *
  * @param iKey
  * The format for the only stream descriptor with that key in the Representation Reference.
  *
  * @param oStreamDesc
  * The stream descriptor for the Representation Reference.
  */
  virtual HRESULT GetStreamDescriptorByKey ( const CATOmbLoadableDataUniqueKey& iKey, CATIOmbStreamDescriptor_var& oStreamDesc ) = 0;

  
  /**
  * Retrieves the list of stream descriptors that may be loaded.
  *
  * @param iFormat
  * The format for the only stream descriptor of that format in the Representation Reference.
  *
  * @param oStreamDesc
  * The stream descriptor for the Representation Reference.
  */
  //BESDebug To Be Removed
  virtual HRESULT GetStreamDescriptorByFormat ( const CATOmbStreamDescriptorFormat& iFormat, CATIOmbStreamDescriptor_var& oStreamDesc ) = 0;
  
   /**
  * Retrieves the list of stream descriptors that may be loaded.
  *
  * @param iFormat
  * The format for the stream descriptor.
  *
  * @param iRole
  * The role for the stream descriptor.
  *
  * @param oStreamDesc
  * The stream descriptor for the Representation Reference.
  */
  virtual HRESULT GetStreamDescriptorByFormatAndRole ( const CATOmbStreamDescriptorFormat& iFormat, const CATUnicodeString& iRole, CATIOmbStreamDescriptor_var& oStreamDesc ) = 0;

  /**
  * Retrieves the list of units that may be loaded.
  *
  * @param oLstUnits
  * The list of stream descriptors for the Representation Reference.
  * <br>(That list may be incremented during the session)  
  */
  virtual HRESULT GetLoadableUnits( CATLISTV(CATBaseUnknown_var)& oLstUnits ) = 0;



  /** 
  * Generates the secondary format stream descriptors.<br>
  * <br><b>Role</b>: This method updates SDs of a RepRef. 
  * It adds new SDs to a RepRef (if they do not already exist)in this case : 
  * - if a sd is synchronous to the authoring one 
  * - if a user request to generate a new SD (asynchronous to the authoring one)has been performed (@see RequestSecondaryFormatGeneration)
  * 
  * @param iGenerateAsynchronousSD [in]
  *   Specifies whether the asynchronous SD have to be generated. (They are not generated in unload context)
  *
  * @return
  *   <ul>
  *   <li><code>S_OK</code>: the secondary format stream descriptors are generated.</li>
  *   <li><code>S_FALSE</code>: the secondary format stream descriptors aren't generated because they didn't need to be.</li>
  *   <li>Otherwise, the error code.</li>
  *   </ul>
  */
  virtual HRESULT GenerateSecondaryFormats(CATBoolean iGenerateAsynchronousSD = TRUE) = 0;

  /**
  * Tests if some of the stream descriptors need to be saved
  * 
  * @returns:
  *		S_OK if at least one stream descriptor needs to be saved
  *		S_FALSE if no stream descriptor needs to be saved
  */
  virtual HRESULT HasStreamDescriptorsToSave() = 0;

  /**
  * Returns the late type of the main stream descriptor
  *
  * @param oLateType
  *	The document late type of the main stream descriptor.
  */
  virtual HRESULT GetMainStreamDescriptorType( CATUnicodeString &oLateType ) const = 0;

  /**
  * Returns a string dump of the data (for debug)
  */
  virtual CATUnicodeString ToUnicodeString() const = 0;

};

//------------------------------------------------------------------
CATDeclareHandler( CATIOmbRepRefLoadingStatus, CATBaseUnknown );

#endif
