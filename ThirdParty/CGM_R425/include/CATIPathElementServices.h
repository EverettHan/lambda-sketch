// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPathElementServices.h
// Define the CATIPathElementServices interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jul 2004  Creation: Code generated by the CAA wizard  tvq
//===================================================================
#ifndef CATIPathElementServices_H
#define CATIPathElementServices_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#include "CATBaseUnknown.h"
#include "CATLISTV_CATBaseUnknown.h"

class CATPathElement;
class CATListValCATIType_var;
class CATIInstance_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATIPathElementServices;
#else
extern "C" const IID IID_CATIPathElementServices ;
#endif

//------------------------------------------------------------------

/**
 * @nodoc
 */
class ExportedByKnowledgeItf CATIPathElementServices: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

	  /**
	  * @nodoc
	  */
	  virtual int FindProductListToPart(const CATBaseUnknown_var &prod, CATLISTV(CATBaseUnknown_var) &liste, const CATBaseUnknown_var &part, const CATBaseUnknown_var &thruInstance = NULL_var, int recomputeInstance = 1) = 0;
	  
	  /**
	  * @nodoc
	  */
	  virtual int FindProductListToProduct(const CATBaseUnknown_var &fromProduct, CATLISTV(CATBaseUnknown_var) &liste, const CATBaseUnknown_var &toProduct) = 0;
	  
	  /**
	  * @nodoc
	  */
	  virtual CATPathElement * BuildPathFromProductToPart(const CATBaseUnknown_var &product, const CATBaseUnknown_var &part, int withPart, const CATBaseUnknown_var &thruInstance = NULL_var) = 0;
	  
	  /**
	  * @nodoc
	  */
	  virtual CATPathElement * BuildPathFromProductToProduct(const CATBaseUnknown_var &fromproduct, const CATBaseUnknown_var &toproduct) = 0;
	  virtual CATPathElement *BuildPathFromProductToProduct(const CATBaseUnknown_var &fromproduct, const CATBaseUnknown_var &toproduct, const CATLISTV(CATBaseUnknown_var) &iThruInstances) = 0;

	  /**
	  * @nodoc
	  */
	  virtual CATPathElement * BuildPathFromProductToObjectInPart(const CATBaseUnknown_var &product, const CATBaseUnknown_var &object, const CATBaseUnknown_var &thruInstance = NULL_var) = 0;
	  virtual CATPathElement * BuildPathFromProductToObjectInPart(const CATBaseUnknown_var &product, const CATBaseUnknown_var &object, const CATLISTV(CATBaseUnknown_var) &iThruInstances) = 0;

     /**
     * Builds a path element containing a BRep of a required type.  
     * @param iPathElement
     *    A path element.
     * @param iTypes
     *    The BRep types to accept.
     *    If one type is CATVertex, BRep vertex are accepted. Same thing with CATEdge and CATFace. 
     *    If the list is void or contains the CATCell type, all BRep are accepted. 
     * @param oPathElement
     *    The built path element.
     *    It is the clone of iPathElement, if its leaf element is not a @href CATIBRepAccess.
     *    It is the clone of iPathElement less its leaf element, if this element is a CATIBRepAccess
     *    which type is not declared in iTypes.
     *    It is the clone of iPathElement where the leaf element is replaced by the Brep implementation 
     *    of @href CATIInstance, if this element is a CATIBRepAccess which type is declared in iTypes.
     * @param oBRepInstance
     *    The BRep implementation of CATIInstance.  
     *    It is null except if the leaf element of iPathElement is a BRep accepted by the types.
     * @return
     *    The return code
     */
     virtual HRESULT BuildBRepPathElement(CATPathElement* iPathElement, const CATListValCATIType_var& iTypes, CATPathElement*& oPathElement, CATIInstance_var& oBRepInstance) = 0;

	 virtual void ConvertToOccurrencesPath(CATPathElement*& ioPathToConvert)const = 0;

	 virtual CATBaseUnknown_var CreateInstanceFromBrepAccess(const CATBaseUnknown_var &iBrepAccess) = 0;

};
CATDeclareHandler(CATIPathElementServices, CATBaseUnknown);
//------------------------------------------------------------------

#endif
