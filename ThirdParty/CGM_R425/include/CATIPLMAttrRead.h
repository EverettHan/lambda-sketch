// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMAttrRead.h
// Define the CATIPLMAttrRead interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Dec 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U5
*/

#ifndef CATIPLMAttrRead_H
#define CATIPLMAttrRead_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMMask.h"
#include "CATVariant.h"
#include "CATBoolean.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMAttrRead;
#else
extern "C" const IID IID_CATIPLMAttrRead;
#endif

class CATPLMAttribute;
class CATPLMType;
class CATListPtrCATPLMAttribute;
class CATUnicodeString;
class CATListValCATUnicodeString;
class CATString;
class CATListValCATString;
class CATTime;
class CATMathTransformation;
class CATBinary;
class CATOmxAny;

/**
* Manage object attributes reading.
*/
class ExportedByCATPLMServicesItf CATIPLMAttrRead : public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if string is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringValue(CATPLMMask iMask,
    int iAttrIndex,
    CATUnicodeString** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param ipAttributeId
  *    the Attribute Id.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if string is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringValue(CATString* ipAttributeId,
    CATUnicodeString** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param iAttributeId
  *    the Attribute Id.
  * @param opValue [out,delete]
  *    the Attribute value. Desallocation of opValue is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code>if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if string is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringVal(const CATString& iAttributeId,
    CATUnicodeString*& opValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if string is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringVal(const CATString& iAttributeId,
    CATUnicodeString& oValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param ipAttribute
  *    the Attribute handler.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if string is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringValue(CATPLMAttribute* ipAttribute,
    CATUnicodeString** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue [out,delete]
  *    the Attribute value. Desallocation of opValue is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if string is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringVal(CATPLMAttribute* ipAttribute,
    CATUnicodeString*& opValue) = 0;

  /**
  * Get the value of an attribute as a CATUnicodeString .
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if string is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetStringVal(CATPLMAttribute* ipAttribute,
    CATUnicodeString& oValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param opValue
  *    the Attribute value. Allocation and Desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if double is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetDoubleValue(CATPLMMask iMask,
    int iAttrIndex,
    double* opValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param ipAttribute
  *    the Attribute Id.
  * @param opValue
  *    the Attribute value. Allocation and desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if double is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetDoubleValue(CATString* ipAttribute,
    double* opValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if double is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetDoubleVal(const CATString& iAttributeId,
    double& oValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue
  *    the Attribute value. Allocation and desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if double is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetDoubleValue(CATPLMAttribute* ipAttribute,
    double* opValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param iAttribute
  *    the Attribute handler.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if double is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetDoubleVal(CATPLMAttribute* iAttribute,
    double& oValue) = 0;

  /**
  * Get the value of an attribute as an Integer.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param opValue
  *    the Attribute value. Allocation and desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if int is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetIntValue(CATPLMMask iMask,
    int iAttrIndex,
    int* opValue) = 0;

  /**
  * Get the value of an attribute as an Integer.
  * @param ipAttributeId
  *    the Attribute Id.
  * @param opValue
  *    the Attribute value. Allocation and desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if int is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetIntValue(CATString* ipAttributeId,
    int* opValue) = 0;

  /**
  * Get the value of an attribute as an Integer.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if int is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetIntVal(const CATString& iAttributeId,
    int& oValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue
  *    the Attribute value. Allocation and desallocation is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if int is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetIntValue(CATPLMAttribute* ipAttribute,
    int* opValue) = 0;

  /**
  * Get the value of an attribute as a Double.
  * @param ipAttribute
  *    the Attribute handler.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if int is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetIntVal(CATPLMAttribute* ipAttribute,
    int& oValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller.
  *    the output date is between 1970 and 2038.
  *
  * POINTER oValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we do *oppValue=new CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeValue(CATPLMMask iMask,
    int iAttrIndex,
    CATTime** oppValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param ipAttributeId
  *    the Attribute Id.
  * @param oValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller.
  *    the output date is between 1970 and 2038.
  *
  * POINTER *oValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we do *oValue=new CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeValue(CATString* ipAttributeId,
    CATTime** oppValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param iAttributeId
  *    the Attribute Id.
  * @param opValue [out,delete]
  *    the Attribute value. Desallocation of opValue is done by the caller.
  *    the output date is between 1970 and 2038.
  *
  * POINTER opValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we do *oValue=new CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeVal(const CATString& iAttributeId,
    CATTime*& opValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  *    the output date is between 1970 and 2038.
  *
  * POINTER opValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we have CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. In such a case we have CATTime(0). Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeVal(const CATString& iAttributeId,
    CATTime& oValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param ipAttribute
  *    the Attribute handler.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation of *oValue is done by the caller.
  *    the output date is between 1970 and 2038.
  *
  * POINTER oValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we do *oValue=new CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeValue(CATPLMAttribute* ipAttribute,
    CATTime** oppValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue [out,delete]
  *    the Attribute value. Desallocation of opValue is done by the caller.
  *    the output date is between 1970 and 2038.
  *
  * POINTER opValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we do *oValue=new CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code> if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeVal(CATPLMAttribute* ipAttribute,
    CATTime*& opValue) = 0;

  /**
  * Get the value of an attribute as a Time.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue [out,delete]
  *    the Attribute value.
  *    the output date is between 1970 and 2038.
  *
  * POINTER opValue MUST BE DELETED AFTER USE.
  *
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>S_FALSE</code> if the date is unset. In such a case we have CATTime(0). (!CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>S_ATTR_NOT_SET</code> if the date is unset. In such a case we have CATTime(0). Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetTimeVal(CATPLMAttribute* ipAttribute,
    CATTime& oValue) = 0;

  /**
  * Get the value of an attribute as a Matrix3x4.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param oValue
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if *oValue!=NULL
  *   <code>S_ATTR_NOT_SET</code> Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetMathTransformationValue(CATPLMMask         iMask,
    int                iAttrIndex,
    CATMathTransformation     ** oValue) = 0;

  /**
  * Get the value of an attribute as a Matrix3x4.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if *oValue!=NULL
  *   <code>S_ATTR_NOT_SET</code> Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetMathTransformationValue(CATString        * iAttributeId,
    CATMathTransformation     ** oValue) = 0;

  /**
  * Get the value of an attribute as a Matrix3x4.
  * @param iAttribute
  *    the Attribute handler.
  * @param oValue
  *    the Attribute value. Desallocation of *oValue is done by the caller
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise...
  *   <code>E_FAIL</code> if an error has occurred
  *   <code>E_INVALIDARG</code>if *oValue!=NULL
  *   <code>S_ATTR_NOT_SET</code> Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetMathTransformationValue(CATPLMAttribute  * iAttribute,
    CATMathTransformation     ** oValue) = 0;

  /**
  * Method implemented on provider M1 and TST.
  * Please use CATPLMOmxHelpers to read iValue
  *
  * Get the value of an attribute as an any.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param oValue
  *    the Attribute value.
  * @return
  * <code>S_OK</code>
  * <code>E_FAIL</code>
  * <code>E_INVALIDARG</code>if *oValue!=NULL
  */
  virtual HRESULT GetAnyValue(CATPLMMask iMask,
    int iAttrIndex,
    CATOmxAny& oValue) = 0;

  /**
  * Method implemented on provider M1 and TST.
  * Please use CATPLMOmxHelpers to read iValue
  *
  * Get the value of an attribute as an any.
  * @param ipAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  * <code>S_OK</code>
  * <code>E_FAIL</code>
  * <code>E_INVALIDARG</code>if *oValue!=NULL
  */
  virtual HRESULT GetAnyValue(CATString* ipAttributeId,
    CATOmxAny& oValue) = 0;

  /**
  * Method implemented on provider M1 and TST.
  * Please use CATPLMOmxHelpers to read iValue
  *
  * Get the value of an attribute as an any.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  * <code>S_OK</code>
  * <code>E_FAIL</code>
  * <code>E_INVALIDARG</code>if *oValue!=NULL
  */
  virtual HRESULT GetAnyValue(const CATString& iAttributeId,
    CATOmxAny& oValue) = 0;

  /**
  * Method implemented on provider M1 and TST.
  * Please use CATPLMOmxHelpers to read iValue
  *
  * Get the value of an attribute as an any.
  * @param iAttribute
  *    the Attribute handler.
  * @param oValue
  *    the Attribute value.
  * @return
  * <code>S_OK</code>
  * <code>E_FAIL</code>
  * <code>E_INVALIDARG</code>if *oValue!=NULL
  */
  virtual HRESULT GetAnyValue(CATPLMAttribute* iAttribute,
    CATOmxAny& oValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryValue(CATPLMMask iMask,
    int iAttrIndex,
    CATBinary** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param ipAttributeId
  *    the Attribute Id.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryValue(CATString* ipAttributeId,
    CATBinary** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code>if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryVal(const CATString& iAttributeId,
    CATBinary*& opValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oppValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryVal(const CATString& iAttributeId,
    CATBinary& oValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param ipAttribute
  *    the Attribute handler.
  * @param oppValue [out,delete]
  *    the Attribute value. Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if *oppValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. *oppValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryValue(CATPLMAttribute* ipAttribute,
    CATBinary** oppValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue [out,delete]
  *    the Attribute value. Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if opValue != NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. opValue == NULL. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryVal(CATPLMAttribute* ipAttribute,
    CATBinary*& opValue) = 0;

  /**
  * Get the value of an attribute as a CATBinary.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue
  *    the Attribute value. 
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBinaryVal(CATPLMAttribute* ipAttribute,
    CATBinary& oValue) = 0;

  /**
  * Get the value of an attribute as a CATBoolean.
  * @param iMask
  *    the Attribute mask.
  * @param iAttrIndex
  *    the Attribute index in the mask iMask retrieved by ListAttributes.
  * @param opValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if boolean is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBooleanValue(CATPLMMask iMask,
    int iAttrIndex,
    CATBoolean* opValue) = 0;

  /**
  * Get the value of an attribute as a CATBoolean.
  * @param ipAttributeId
  *    the Attribute Id.
  * @param opValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBooleanValue(CATString* ipAttributeId,
    CATBoolean* opValue) = 0;

  /**
  * Get the value of an attribute as a CATBoolean.
  * @param iAttributeId
  *    the Attribute Id.
  * @param oValue
  *    the Attribute value.
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBooleanVal(const CATString& iAttributeId,
    CATBoolean& oValue) = 0;

  /**
  * Get the value of an attribute as a CATBoolean.
  * @param ipAttribute
  *    the Attribute handler.
  * @param opValue
  *    the Attribute value. Allocation and Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>E_INVALIDARG</code> if opValue == NULL
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBooleanValue(CATPLMAttribute*  ipAttribute,
    CATBoolean* opValue) = 0;

  /**
  * Get the value of an attribute as a CATBoolean.
  * @param ipAttribute
  *    the Attribute handler.
  * @param oValue
  *    the Attribute value. Allocation and Desallocation is done by the caller
  * @return
  *   <code>S_OK</code>
  *   <code>E_FAIL</code>
  *   <code>S_ATTR_NOT_SET</code> if binary is unset. Please include "CATPLMHRESULT.h" (CATOxDevActivation::IsAttrWithoutDfltOfDfltSupported())
  */
  virtual HRESULT GetBooleanVal(CATPLMAttribute* ipAttribute,
    CATBoolean& oVal) = 0;

  enum OrderOfAttributesMode { Default = 1, Specific = 2 };

  /**
  *
  * <br><b>Role</b>:
  * @param oOrder
  *  Default (order defined in mask is used)
  *  Specific (order different from the one defined in mask used. eg: Full Text Search)
  * @return
  *
  */
  virtual HRESULT GetOrderOfAttributes(OrderOfAttributesMode& oOrder) = 0;

  /**
  * Get list of attribute for a mask.
  * @param iMask
  *    attribute mask. if NULL returns ALL attributes.
  * @param oAttribute
  *    List of attribute.
  */
  virtual HRESULT ListAttributes(CATPLMMask  iMask, CATListPtrCATPLMAttribute ** oAttribute) = 0;

  /**
  * Get list of attribute for a mask.
  * @param iMask
  *    attribute mask. if NULL returns ALL attributes.
  * @param oAttribute
  *    List of attribute.
  */
  virtual HRESULT ListAttributes(CATPLMMask  iMask, CATListValCATString ** oAttributeIdList) = 0;

  /**
  * Get list of attribute for a mask.
  * @param iMask
  *    attribute mask. if NULL returns ALL attributes.
  * @param oAttribute
  *    List of attribute.
  */
  virtual HRESULT ListAttributes(CATPLMMask iMask, CATPLMAttributeList& oAttribute) = 0;

  /**
  * Get list of attribute for a mask.
  * @param iMask
  *    attribute mask. if NULL returns ALL attributes.
  * @param oAttribute
  *    List of attribute.
  */
  virtual HRESULT ListAttributes(CATPLMMask iMask, CATListValCATString& oAttributeIdList) = 0;

  /**
  *	Returns the number of attributes of the given mask.
  * @param iMask
  *    attribute mask. if NULL returns ALL attributes.
  * @param oAttrCount
  *    number of attributes.
  */
  virtual HRESULT AttributeCount(CATPLMMask iMask, int *oAttrCount) = 0;

  /**
  * Suppose you have retrieved from provider an Object with:
  * - Attributes on base type.
  * - Attributes on extension(s).
  * If CATIPLMAttrRead returns attributes of base type, then GetType returns base type.
  * If CATIPLMAttrRead returns attributes of extension type, then GetType returns extension type.
  *
  *@return
  * <dt> <code>Pointer different from NULL</code>     <dd> Success.
  * <dt> <code>NULL</code>     <dd> Failure.
  *
  * WARNING: Please do Release on pointer returned
  */
  virtual CATPLMType* GetType() = 0;

  /** @ Deprecated */
  /*Please use CATOmxAny*/
  virtual HRESULT GetVariantValue(CATPLMMask iMask,
    int iAttrIndex,
    CATVariant** oValue) = 0;

  /** @ Deprecated */
  /*Please use CATOmxAny*/
  virtual HRESULT GetVariantValue(CATString* iAttributeId,
    CATVariant** oValue) = 0;

  /** @ Deprecated */
  /*Please use CATOmxAny*/
  virtual HRESULT GetVariantVal(const CATString& iAttributeId,
    CATVariant& oValue) = 0;

  /** @ Deprecated */
  /*Please use CATOmxAny*/
  virtual HRESULT GetVariantValue(CATPLMAttribute  * iAttribute,
    CATVariant** oValue) = 0;

  /** @ Deprecated */
  /*Please use CATOmxAny*/
  virtual HRESULT GetVariantVal(CATPLMAttribute* iAttribute,
    CATVariant& oValue) = 0;

  virtual void SetDefMode(unsigned int idm) = 0;
};

#endif
