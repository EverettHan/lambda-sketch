// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIReplaceReference.h
// Define the PLMIReplaceReference interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2009  Creation: Code generated by the CAA wizard  VVG
//===================================================================
#ifndef PLMIReplaceReference_H
#define PLMIReplaceReference_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATPLMReplaceReferenceInterfaces.h"

// --- System framework
#include "CATBaseUnknown.h"

class CATListPtrCATIPLMNavInstance;
class CATIPLMNavReference;
class CATUFOServiceOutput;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMReplaceReferenceInterfaces IID IID_PLMIReplaceReference;
#else
extern "C" const IID IID_PLMIReplaceReference ;
#endif

//------------------------------------------------------------------

/**
 * Interface dedicated to ReplaceReference operation.
 *
 */
class ExportedByCATPLMReplaceReferenceInterfaces PLMIReplaceReference: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * @deprecated : use the new method with CATUFOServiceOutput parameter
  * Replace Reference of an Instance by another Reference
  *
  * @param iListOfInstanceToDuplicate
  *     List of pointer on Instance (Instance to be replaced).
  *
  * @param ipiReferenceToInstanciate
  *     Pointer on the Reference that will be instanciated.
  *
  * @param iListOfNewInstance
  *     List of pointer on Instance (New Instance).
  *
  * @return
  *    <li> S_OK new Instance(s) created
  *    <li> E_FAIL otherwise
  */

  virtual HRESULT ReplaceReference (CATListPtrCATIPLMNavInstance const & iListOfInstanceToDuplicate, CATIPLMNavReference* & ipiReferenceToInstanciate, CATListPtrCATIPLMNavInstance & oListOfNewInstance) = 0;

  /**
  * Replace Reference of an Instance by another Reference
  *
  * @param iListOfInstanceToDuplicate
  *     List of pointer on Instance (Instance to be replaced).
  *
  * @param ipiReferenceToInstanciate
  *     Pointer on the Reference that will be instanciated.
  *
  * @param iListOfNewInstance
  *     List of pointer on Instance (New Instance).
  *
  * @param opOutputParameters [out, IUnknown#Release]
  *   Output information for reroute
  *
  * @return
  *    <li> S_OK new Instance(s) created
  *    <li> E_FAIL otherwise
  */
  virtual HRESULT ReplaceReference (CATListPtrCATIPLMNavInstance const & iListOfInstanceToDuplicate, CATIPLMNavReference* & ipiReferenceToInstanciate, CATListPtrCATIPLMNavInstance & oListOfNewInstance, CATUFOServiceOutput *& opOutputParameters) = 0;

};

CATDeclareHandler(PLMIReplaceReference, CATBaseUnknown);

//------------------------------------------------------------------

#endif
