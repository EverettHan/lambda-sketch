// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATOmbTechnologicalStreamDescriptorService.h
// Header definition of CATOmbTechnologicalStreamDescriptorService
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jul 2006  Creation: Code generated by the CAA wizard  ycm
//===================================================================
#ifndef CATOmbTechnologicalStreamDescriptorService_H
#define CATOmbTechnologicalStreamDescriptorService_H

#include "CATOmbTechnologicalRep.h"
#include "CATOmbSessionService.h"

class CATIContainer;
class CATIOmbTechnologicalSet;
class CATOmbSessionContext;

/**
* @level Protected 
* @usage U1
*/

//-----------------------------------------------------------------------

/**   
* Technological Stream Descriptor session service. 
* <b>Role</b>: This session service provides public calls for Technological Stream Descriptor. <br>
* NOTE: <i>Always instanciate this service on the stack.</i>
*/
class ExportedByCATOmbTechnologicalRep CATOmbTechnologicalStreamDescriptorService: public CATOmbSessionService
{
public:

	// Standard constructors and destructors
	// -------------------------------------
	CATOmbTechnologicalStreamDescriptorService (CATOmbSessionContext *ipSessionContext);
	virtual ~CATOmbTechnologicalStreamDescriptorService ();

	/**
	* Tests if a container is included in a Technological Stream Descr.
	* <br><b>Role:</b>This method will return S_OK for any container included in Technological Stream Desc, 
	* wether it is corresponding to an applicative container or any other internal container.<br>
	*
	* @param ipContainer
	*		A non-null CATIContainer pointer to the container.
	*     
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>This container is included in a cluster.</dd>
	*     <dt>S_FALSE</dt>
	*     <dd>This is not a Stream Desc container</dd>
	*     <dt>E_FAIL</dt>
	*     <dd>Test error code with @href CATTestTechnologicalStreamDescError </dd>
	*   </dl>
	* @error CATTestTechnologicalStreamDescError Internal_InvalidContainerInput
	*     Provider container is invalid (it might not be completely initialized). 
	**/
	HRESULT IsATechnologicalContainer(const CATIContainer *ipContainer);

	/**
	* Retrieves the cont-based set corresponding to a given applicative container.
	* <br><b>Role:</b>This method is retrieving the set that is including the provided container.<br>
	* The method can be called with the root applicative container, or any of its sub-containers.<br>
	* It will fail if the container is not part of a Technological Stream Desc set.
	*
	* @param ipContainer
	*		A non-null CATIContainer pointer to the container.
	* @param opSet
	*		A pointer to the retrieved set.
	*     
	* @return
	*   <br><b>Legal values</b>:
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>The set corresponding to this container has been successfully retrieved.</dd>
	*     <dt>E_FAIL</dt>
	*     <dd>Test error code with @href CATTestTechnologicalStreamDescError </dd>
	*   </dl>
	* @error CATTestTechnologicalStreamDescError Internal_InvalidContainerInput
	*     Provider container is invalid (it might not be completely initialized). 
	* @error CATTestTechnologicalStreamDescError Internal_NotAClusterContainer
	*     Provider container is not included in a cluster. 
	* @error CATTestTechnologicalStreamDescError Internal_NotAnApplicativeContainer
	*     Provider container is not an applicative. 
	**/
	HRESULT GetSet(const CATIContainer *ipContainer, CATIOmbTechnologicalSet* &opSet);

private:
	// Copy constructor and equal operator
	// -----------------------------------
	CATOmbTechnologicalStreamDescriptorService (CATOmbTechnologicalStreamDescriptorService &);
	CATOmbTechnologicalStreamDescriptorService& operator=(CATOmbTechnologicalStreamDescriptorService&);

};

//-----------------------------------------------------------------------

#endif
