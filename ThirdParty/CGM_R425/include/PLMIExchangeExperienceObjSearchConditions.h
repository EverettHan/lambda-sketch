//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2015x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2014/02/07
//===================================================================
// PLMIExchangeExperienceObjSearchConditions.cpp
// Header definition of class PLMIExchangeExperienceObjSearchConditions
//===================================================================
//
// Usage notes: Class used to manipulate conditons which will be used
// when search for object.
//
//===================================================================
//  2014/02/07 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceObjSearchConditions_H
#define PLMIExchangeExperienceObjSearchConditions_H

#include "PLMExchangeInterfaces.h"
#include "PLMExchangeExperienceDictionary.h"       // PLMExchangeInterfaces      Definition header
#include "CATBaseUnknown.h"

class PLMIExchangeExperienceSessionObject;

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceObjSearchConditions ;

/**
* <b> PLMExchangeExperienceFunctionCondition</b>: Type for the callback on function condition.
* This type defined the function signature used by the AddFunctionCondition.
* AddFunctionCondition will allow to add a selection condition depending on the return result of a given function.
*
* @param ipSessionObject (in).
* input pointer on the session object that is being processed. 
*
* @param oResult (out)
* output integer corresponding to the result after processing the given session object.  
*
* @return
*    Legal values:  S_OK if the method succeeds        
*    Other,         E_FAIL .
*/ 
typedef HRESULT (CATBaseUnknown::*PLMExchangeExperienceFunctionCondition)(PLMIExchangeExperienceSessionObject * & ipSessionObject, int & oResult);

class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceObjSearchConditions: public CATBaseUnknown
{
CATDeclareInterface;

public:


   /**
   * <b> AddAttributeCondition</b>: Add a selection condition on the object attribute's value.
   * Added attribute conditions are by linked with an AND operator.
   * Calling this method multiple time will help you define conditions involving multiple attributes.
   * ie : Let consider the following scenario :  
   *      - AddAttributeCondition is called on AttributeA with value A.
   *      - AddAttributeCondition is called on AttributeB with value B,
   *      The condition will select object having :
   *         - the AttributeA == value A,
   *         - AND the AttributeB == value B.   
   *
   * @param iStrAttributeName (in).
   * input string corresponding to the name of attribute to test. 
   *
   * @param iValueType (in)
   * input type of the attribute value. 
   * <u>ValueType_Boolean</u> : CATBoolean. 
   * <u>ValueType_Integer</u> : int. 
   * <u>ValueType_Float</u> : double. 
   * <u>ValueType_String</u> : CATUnicodeString.
   * <u>ValueType_NLSKey</u> : CATString. 
   * <u>ValueType_Date</u> : CATTime.
   * <u>ValueType_FileName</u> : CATUnicodeString. 
   * <u>ValueType_FolderPath</u> : CATUnicodeString.    
   *
   * @param ipAttrValue   (in)
   * input void pointer on attribute value. The given pointer must be cast from the correct type.
   * It must NOT be NULL and must point a valid object.
   *
   * @param ibExpectedResult (in).
   * input boolean corresponding to the expected attribute condition result. 
   * i.e if ibExpectedResult = FALSE, then the objects on which the added attribute condition is not satified, will be selected by the criteria.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT AddAttributeCondition(const CATUnicodeString & iStrAttributeName, PLMExchangeExperienceValueType iValueType, void * & ipAttrValue , CATBoolean ibExpectedResult = TRUE) = 0;

   /**
   * <b> AddStatusCondition</b>: Add a selection condition on the object status's value.
   * The input ibValueToTest is to set whether or not we want to consider object having or not the given status.
   * Added status and attribute conditions are by linked with an AND operator.
   *
   * @param iStrStatusKey (in).
   * input string corresponding to the status key to test.  
   *
   * @param ibValueToTest (in).
   * input boolean which will be tested against the result of the given status condition. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT AddStatusCondition(const CATUnicodeString & iStrStatusKey, CATBoolean ibValueToTest) = 0;

   /**
   * <b> AddFunctionCondition</b>: Add a selection condition based on the result of the given function.
   *
   * @param iFunctionCondition (in).
   * input address on the function to call. Please refer the type definition for further information.  
   *
   * @param iListOfValueToTest (in).
   * input list of integer which will be tested against the result of the given function, to determine if the condition is met or not. 
   * If at least one of the value of the list is equal to the function return value then the condition is considered as satisfied.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT AddFunctionCondition( PLMExchangeExperienceFunctionCondition iFunctionCondition, CATListOfInt & iListOfValueToTest ) = 0;

   /**
   * <b> GetNbOfCondition</b>: Get the number of condition added for the current search condition object.
   * A call to AddAttributeCondition will count as 1.   
   * This method return the number of time the method AddAttributeCondition have been called.  
   *
   * @return
   *    integer corresponding to the number added conditions.  
   */ 
   virtual int GetNbOfCondition() = 0;

   /** Private use
   * Define the type of the condition : Whether is based on attribute comparison or based on condition functions.
   */
   enum PLMIExchangeExperienceObjSearchCondType
   {
      SearchConditionType_Attribute, // Condition is defined by the comparison of the object's attribute values.
      SearchConditionType_Function  // Condition is defined by the comparison of a function return value with a given one.
   };


   /**
   * <b> GetConditionType</b>: Get the condition type for the given position.
   *
   * @param iPos (in)
   * input integer corresponding to the condition to the retrieve the type from.
   *
   * @param oCondType (out)
   * output PLMIExchangeExperienceObjSearchCondType corresponding to the condition type for the given position.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   *
   */ 
   virtual HRESULT GetConditionType(int & iPos, PLMIExchangeExperienceObjSearchCondType & oCondType) = 0 ;

   /**
   * <b> RunFunctionCondition</b>: Run the function condition for the given position.
   * Be careful the given position must correspond to the postion of condition of type function.
   *
   * @param iPos (in).
   * input integer corresponding to the position of the condition to execute. 
   *
   * @param ipSessionObject (in).
   * input pointer on the PLMIExchangeExperienceSessionObject to test the condition against. 
   *
   * @param obCondResult (out)
   * output result corresponding to whether or not the condition was met.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds      
   *                   E_INVALIDARG if the given position does not correspond to an attribute type of condition.
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT RunFunctionCondition(int & iPos, PLMIExchangeExperienceSessionObject * ipSessionObject, CATBoolean & obCondResult) = 0;

   /**
   * <b> GetAttributeType</b>: Get the attibute type for the given condition position.
   *
   * @param iPos (in).
   * input integer corresponding to the position of the condition to retrieve the information from. 
   *
   * @param iStrAttributeName (out).
   * output string corresponding to the name of attribute. 
   *
   * @param oValueType (out)
   * output type of the attribute. 
   * <u>ValueType_Boolean</u> : CATBoolean. 
   * <u>ValueType_Integer</u> : int. 
   * <u>ValueType_Float</u> : double. 
   * <u>ValueType_String</u> : CATUnicodeString.
   * <u>ValueType_NLSKey</u> : CATString. 
   * <u>ValueType_Date</u> : CATTime.
   * <u>ValueType_FileName</u> : CATUnicodeString. 
   * <u>ValueType_FolderPath</u> : CATUnicodeString.
   *
   * @param opAttrValue   (in)
   * output void pointer on the attribute value. To use the value, the given pointer must be cast to the correct type.
   * Do not release the pointer.
   *
   * @param obExpectedResult (in).
   * output boolean corresponding to the expected attribute condition result. 
   * i.e if ibExpectedResult = FALSE, then the objects on which the added attribute condition is not satified, will be selected by the criteria.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds        
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT GetAttributeCondition(int & iPos, CATUnicodeString & oStrAttributeName,  PLMExchangeExperienceValueType & oValueType, void * & opAttrValue, CATBoolean & obExpectedResult  ) = 0 ;

};

//-----------------------------------------------------------------------

#endif

 
