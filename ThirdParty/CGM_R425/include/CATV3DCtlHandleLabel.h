//===================================================================
// COPYRIGHT Dassault Systeme 2012/09/20
//===================================================================
// CATV3DCtlHandleLabel.h
// Header definition of class CATV3DCtlHandleLabel
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/16/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATV3DCtlHandleLabel_H
#define CATV3DCtlHandleLabel_H

#include <VisuImmersive3D.h>
#include <CATV3DCtlHandle.h>
#include <CATVid.h>
#include <CATVidColor.h>
#include <CATV3DManipulatorParameters.h>
//-----------------------------------------------------------------------

class CATV3DAdjustment;

class ExportedByVisuImmersive3D CATV3DCtlHandleLabel : public CATV3DCtlHandle
{
  CATDeclareClass;

public:
  // Standard constructors and destructors
  // -------------------------------------
  CATV3DCtlHandleLabel ();
  virtual ~CATV3DCtlHandleLabel ();

  /**
   * @fn static CATV3DCtlHandleLabel * CATV3DCtlHandleLabel::CreateHandleLabel(CATViewpoint * i_pViewpoint = NULL);
   *
   * @brief Creates handle label.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param [in,out] i_pViewpoint (Optional) If non-null, (Optional) the top widhet viewpoint.
   *
   * @return null if it fails, else the new handle label.
   */
  static CATV3DCtlHandleLabel * CreateHandleLabel(CATViewpoint * i_pViewpoint = NULL);
  /**
   * Creates multiple CATV3DCtlHandleLabel
   */
  static void CreateHandlesLabel(CATViewpoint* i_pViewpoint, const CATSYPDynArray<CATV3DLay3DConstraints>& i_lConstraints, CATSYPDynArray<CATV3DCtlHandleLabel*>& oHandles);

  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the HandleTranslation when receiving
   * a drag event.
   *
   * This event is issued from the @ref Drag event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Translate();

  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the HandleTranslation when receiving
   * a drag event.
   *
   * This event is issued from the @ref Drag event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent * Rotate();

  /**
   * @fn void CATV3DCtlHandleLabel::SetText(const CATUnicodeString& i_text);
   *
   * @brief Sets the label text.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_text The text to set.
   */
  void SetText(const CATUnicodeString& i_text);

  /**
   * @fn const CATUnicodeString& CATV3DCtlHandleLabel::GetText() const;
   *
   * @brief Gets the text.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text.
   */
  const CATUnicodeString& GetText() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetUnderlineFlag(CATBoolean i_underlineFlag);
   *
   * @brief Sets the label underline flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_underlineFlag The label text underline flag.
   */
  void SetUnderlineFlag(CATBoolean i_underlineFlag);

  /**
   * @fn CATBoolean CATV3DCtlHandleLabel::GetUnderlineFlag() const;
   *
   * @brief Gets underline flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text underline flag.
   */
  CATBoolean GetUnderlineFlag() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetBoldFlag(CATBoolean i_boldFlag);
   *
   * @brief Sets bold flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_boldFlag The label text bold flag.
   */
  void SetBoldFlag(CATBoolean i_boldFlag);

  /**
   * @fn CATBoolean CATV3DCtlHandleLabel::GetBoldFlag() const;
   *
   * @brief Gets bold flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text bold flag.
   */
  CATBoolean GetBoldFlag() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetItalicFlag(CATBoolean i_italicFlag);
   *
   * @brief Sets italic flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_italicFlag The label text italic flag.
   */
  void SetItalicFlag(CATBoolean i_italicFlag);

  /**
   * @fn CATBoolean CATV3DCtlHandleLabel::GetItalicFlag() const;
   *
   * @brief Gets italic flag.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text italic flag.
   */
  CATBoolean GetItalicFlag() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetTextHeight(unsigned int i_textHeight);
   *
   * @brief Sets text height.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_textHeight Height of the label text.
   */
  void SetTextHeight(unsigned int i_textHeight);

  /**
   * @fn unsigned int CATV3DCtlHandleLabel::GetTextHeight();
   *
   * @brief Gets text height.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text height.
   */
  unsigned int GetTextHeight();

  /**
   * @fn void CATV3DCtlHandleLabel::SetTextColor(const CATVidColor& i_color);
   *
   * @brief Sets text color.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_color The label text color.
   */
  void SetTextColor(const CATVidColor& i_color);

  /**
   * @fn const CATVidColor& CATV3DCtlHandleLabel::GetTextColor() const;
   *
   * @brief Gets text color.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text color.
   */
  const CATVidColor& GetTextColor() const;
  
  /**
   * @fn void CATV3DCtlHandleLabel::SetBackgroundVisibleFlag(CATBoolean i_backgroundVisibleFlag);
   * @brief Sets background visible flag.
   * @param i_backgroundVisibleFlag The background visible flag.
   */
  void SetBackgroundVisibleFlag(const int i_backgroundVisibleFlag);

  /**
   * @fn CATBoolean CATV3DCtlHandleLabel::GetBackgroundVisibleFlag() const;
   * @brief Gets background visible flag.
   * @return The background visible flag.
   */
  int GetBackgroundVisibleFlag() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetBackgroundColor(const CATVidColor& i_color);
   * @brief Sets background color.
   * @param i_color The background square color.
   */
  void SetBackgroundColor(const CATVidColor& i_color);

  /**
   * @fn const CATVidColor& CATV3DCtlHandleLabel::GetBackgroundColor() const;
   * @brief Gets background color.
   * @return The background square color.
   */
  const CATVidColor& GetBackgroundColor() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetCropPolicy(CATVid::CropPolicy i_cropPolicy);
   *
   * @brief Sets crop policy.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_cropPolicy The label text crop policy.
   */
  void SetCropPolicy(CATVid::CropPolicy i_cropPolicy);

  /**
   * @fn CATVid::CropPolicy CATV3DCtlHandleLabel::GetCropPolicy() const;
   *
   * @brief Gets crop policy.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return The label text crop policy.
   */
  CATVid::CropPolicy GetCropPolicy() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetAdjustment(const CATV3DAdjustment &iAdjustment);
   *
   * @brief Sets the adjustment. Used to position the visual representation from its constraints origin.
   *
   * @param iAdjustment The adjustment to set.
   */
  void SetAdjustment(const CATV3DAdjustment& iAdjustment);

  /**
   * @fn CATV3DManipulatorParameters CATV3DCtlHandleLabel::GetAdjustment();
   *
   * @brief Gets handle adjustment.
   *
   * @return the adjustment set.
   */
  CATV3DAdjustment GetAdjustment() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetAdjustment(const CATV3DAdjustment &iAdjustment);
   *
   * @brief Sets the PickFlag. Specify if the handle can be picked.
   *
   * @param iPickFlag The PickFlag to set.
   */
  void SetPickFlag(const int iPickFlag);

  /**
   * @fn CATV3DManipulatorParameters CATV3DCtlHandleLabel::GetPickFlag();
   *
   * @brief Gets handle parameters PickFlag.
   *
   * @return the PickFlag.
   */
  int GetPickFlag() const;

  /**
   * @fn void CATV3DCtlHandleLabel::SetManipulatorParameters(const CATV3DManipulatorParameters& i_pConstraints);
   *
   * @brief Sets the parameters of the 3D manipulator associated to this graphic primitive.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @param i_pConstraints the manipulator type constraints.
   * @see CATV3DManipulatorParameters.
   */
  void SetManipulatorParameters(const CATV3DManipulatorParameters& i_pConstraints);

  /**
   * @fn CATV3DManipulatorParameters CATV3DCtlHandleLabel::GetManipulatorParameters() const;
   *
   * @brief Gets manipulator parameters.
   *
   * @author MF6
   * @date 9/12/2013
   *
   * @return the parameters of the 3D manipulator associated to this graphic primitive.
   */
  CATV3DManipulatorParameters GetManipulatorParameters() const;

  /**
   * @copydoc l_CATV3DCtl#TemplateDataUpdated
   *
   * Here are the mandatory "syp:named" objects :
   * @li GPManip [CATV3DGraphicPrimitive]
   */
  void TemplateDataUpdated();

  /**
   * Handle drag event of manipulator view. Should be private.
   */
  void HandleDrag(CATBaseUnknown * i_pSender, CATV3DManipulationEventArgs * i_pArgs);

private:
  CATUnicodeString _Text;
  CATBoolean _UnderlineFlag, _BoldFlag, _ItalicFlag;
  unsigned int _TextHeight;
  CATVidColor _TextColor;
  CATVid::CropPolicy _CropPolicy;
};

//-----------------------------------------------------------------------

#endif
