// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMFilterVolume.h
// Define the CATIPLMFilterVolume interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2004  Creation: Code generated by the CAA wizard  jsy
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMFilterVolume_H
#define CATIPLMFilterVolume_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFilterVolume;
#else
extern "C" const IID IID_CATIPLMFilterVolume ;
#endif

class CATListValCATUnicodeString;
class CATString;
class CATPLMID;
class CATUnicodeString;
class CATMathPoint;
class CATMathVector;
class CATIPLMFilterVolumeLine;
class CATIPLMFilterVolumeSphere;
class CATIPLMFilterVolumeCuboid;
class CATIPLMFilterVolumeProximity;
class CATIPLMFilterVolumeZone;

//------------------------------------------------------------------

/** Volume Filter Selection Mode */
enum FilterVolumeMode
{
  /** STANDARD*/
  MODE_STANDARD = 0, 
  /** FULLY IN*/
  MODE_FULLYIN = 1, 
  /** FULLY OUT*/
  MODE_FULLYOUT = 2, 
  /** PARTLY IN*/
  MODE_PARTLYIN = 3, 
  /** PARTLY OUT*/
  MODE_PARTLYOUT = 4
};

enum VolumeType
{	
	// Volume initialization
    NONE = 0,
	// Volume Line
    Pick = 1, 
	// Volume Sphere
    Sphere = 2, 
	// Volume Cuboid
    Cuboid = 3, 
	// Volume Proximity
    Proximity = 4,
	// Volume Zone
    Zone = 5
//OldVolumeGeneration = 100
};

/**
 * Describe the functionality of your interface here
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedByCATPLMServicesItf CATIPLMFilterVolume: public CATBaseUnknown
{
  CATDeclareInterface;

  public:
  
    /**	@deprecated R207
    * Sets the PartId (with matching Bounding Box).
    * @param iZoneId
    *     The ID of the Zone
    */
    virtual HRESULT SetZoneClause( const CATString iZoneId) = 0;
   
    /** @deprecated R207
    * Sets the ZoneId (with matching Bounding Box).
    * @param oZoneId
    *     The ID of the Zone
    */
    virtual HRESULT GetZoneClause( CATString * oZoneId) = 0;
    
    /** @deprecated R207
    * Sets the PartId (with matching Bounding Box).
    * @param iPartId
    *     The PLMID of the Part
    */
    virtual HRESULT SetPartClause( const CATPLMID & iPartId  ) = 0;
    
    /** @deprecated R207
    * Returns the PartId ( with matching Bounding Box).
    * @param iPartId
    *     The PLMID of the Part
    */
    virtual HRESULT GetPartClause( CATPLMID & oPartId ) = 0;
    
    /** @deprecated R207
    * Sets the matching Bounding Box.
    * @param iXMin
    *     The X coordinate value of the first point
    * @param iYMin
    *     The Y coordinate value of the first point
    * @param iZMin
    *     The Z coordinate value of the first point
    * @param iXMax
    *     The X coordinate value of the second point
    * @param iYMax
    *     The X coordinate value of the second point
    * @param iZMax
    *     The Z coordinate value of the second point
    */
    virtual HRESULT SetMatchingBB( double iXMin, double iYMin, double iZMin,
      double iXMax, double iYMax, double iZMax ) = 0;
    
    /** @deprecated R207
    * Returns the matching Bounding Box.
    * @param iXMin
    *     The X coordinate value of the first point
    * @param iYMin
    *     The Y coordinate value of the first point
    * @param iZMin
    *     The Z coordinate value of the first point
    * @param iXMax
    *     The X coordinate value of the second point
    * @param iYMax
    *     The X coordinate value of the second point
    * @param iZMax
    *     The Z coordinate value of the second point
    */
    virtual HRESULT GetMatchingBB( double * iXMin, double * iYMin, double * iZMin,
      double * iXMax, double * iYMax, double * iZMax ) = 0;
        
    /** @deprecated R207
    * Sets the matching Line.
    * @param iPoint
    *     cartesian point in dimension 3
		* @param iVector
    *     vector in dimension 3
    */
    virtual HRESULT SetLine( CATMathPoint * iPoint, CATMathVector * iVector ) = 0;

    /** @deprecated R207
    * Returns the matching Line.
    * @param oPoint
    *     cartesian point in dimension 3
		* @param oVector
    *     vector in dimension 3
    */
    virtual HRESULT GetLine( CATMathPoint ** oPoint, CATMathVector ** oVector ) = 0;
    
    /**
    * Sets the selection mode.
    * @param iMode [in]
    *     The selection mode.Either FULLYIN,FULLYOUT, PARTLYIN, PARTLYOUT
    */
    virtual HRESULT SetSelectionMode( FilterVolumeMode iMode ) = 0;
    
    /**
    * Sets the selection mode.
    * @param oMode [out]
    *     The selection mode.Either FULLYIN,FULLYOUT, PARTLYIN, PARTLYOUT
    */
    virtual HRESULT GetSelectionMode( FilterVolumeMode * oMode ) = 0;
    
    /** @deprecated R207
    * Sets the clearance.
    * @param iClearance [in]
    *     The iClearance
    */
    virtual HRESULT SetClearance( double iClearance ) = 0;
    
    /** @deprecated R207
    * Returns the clearance.
    * @param oClearance [out]
    *     The clearance
    */
    virtual HRESULT GetClearance( double * oClearance ) = 0;
    
    /** @deprecated R207
    * Sets the clearance.
    * @param iAccuracy [in]
    *     The Accuracy
    */
    virtual HRESULT SetAccuracy( short iAccuracy ) = 0;
    
    /** @deprecated R207
    * Returns the Accuracy.
    * @param oAccuracy [out]
    *     The Accuracy
    */
    virtual HRESULT GetAccuracy( short * oAccuracy ) = 0;

    /** @deprecated R207
    * Use 3DIndex Technology instead of Classic Techno to process this filter.
		* Only Available for Bounding box. 
		* @param iUse3DIndex [in]
    *     0 Use 3DIndex techno , 1 don't use 3DIndex techno 
    */
    virtual HRESULT SetTechno3DIndex(short iUse3DIndex) = 0;

    /** 
    * Sets the type of volume.
    *
    * <br><b>Role</b>: Create the geomtry sub object and release other.
	*	You have to call the method before all other operation to fill in the sub types by calling the corresponding Get nethods
    *
    * @param iType [in]
    *   The type of volume
    *
    * @return
    *   <code>S_OK</code> if everything ran ok, 
    *   <code>E_NOTIMPL</code> otherwise.
    *
    */
    virtual HRESULT SetVolumicType(VolumeType iType)=0;

    /** 
    * Gives the volumic type
    *
    * <br><b>Role</b>: returns the type of volume
    *
    * @param opType [out]
    *   The type of volume
    *
    * @return
    *   <code>S_OK</code> if everything ran ok,
    *   <code>E_FAIL</code> if no geometry is set,
    *
    */
    virtual HRESULT GetVolumicType(VolumeType& opType)=0;

    /** 
    * Retrieve the line geometry.
    *
    * <br><b>Role</b>: Gives a pointer on the pick geometry.
    *
    * @param oppLine [out]
    *   The line.
    *
    * @return
    *   <code>S_OK</code> if everything ran ok
    *   <code>E_FAIL</code> if the geometry is not a line
    *
    */
    virtual HRESULT GetLine(CATIPLMFilterVolumeLine ** oppiLine)=0;

    /** 
    * Retrieve the sphere geometry.
    *
    * <br><b>Role</b>: Gives a pointer on the sphere geometry.
    *
    * @param oppSphere [out]
    *   The sphere.
    *
    * @return
    *   <code>S_OK</code> if everything ran ok
    *   <code>E_FAIL</code> if the geometry is not a sphere
    *
    */
    virtual HRESULT GetSphere(CATIPLMFilterVolumeSphere ** oppiSphere)=0;

    /** 
    * retreive the Cuboid geometry.
    *
    * <br><b>Role</b>: Gives a pointer on the Cuboid geometry.
    *
    * @param oppCuboid [out]
    *   The Cuboid.
    *
    * @return
    *   <code>S_OK</code> if everything ran ok
    *   <code>E_FAIL</code> if the geometry is not a Cuboid
    *
    */
    virtual HRESULT GetCuboid(CATIPLMFilterVolumeCuboid ** oppiCuboid)=0;

    /** 
    * Retrieve the Proximity geometry.
    *
    * <br><b>Role</b>: Gives a pointer on the Proximity geometry.
    *
    * @param oppProximity [out]
    *   The Proximity.
    *
    * @return
    *   <code>S_OK</code> if everything ran ok
    *   <code>E_FAIL</code> if the geometry is not a Proximity
    *
    */
    virtual HRESULT GetProximity(CATIPLMFilterVolumeProximity ** oppiProximity)=0;

    /** 
    * Retrieve the Zone geometry.
    *
    * <br><b>Role</b>: Gives a pointer on the Zone geometry.
    *
    * @param oppZone [out]
    *   The Zone.
    *
    * @return
    *   <code>S_OK</code> if everything ran ok
    *   <code>E_FAIL</code> if the geometry is not a Zone
    *
    */
    virtual HRESULT GetZone(CATIPLMFilterVolumeZone ** oppiZone)=0;
  
}; 

//------------------------------------------------------------------

#endif
