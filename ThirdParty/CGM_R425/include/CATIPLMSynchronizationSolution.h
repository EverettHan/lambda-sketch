// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMSynchronizationSolution.h
// Define the CATIPLMSynchronizationSolution interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMSynchronizationSolution_H
#define CATIPLMSynchronizationSolution_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h"
#include "CATPLMSessionOperationType.h"
#include "CATLISTV_CATIPLMSessionOperation.h"

class CATComponentId;
class CATLISTV(CATComponentId);
class CATIPLMSynchronizationProposals;
class CATProxySpace;
class CATIAdpErrorMonitor;
class CATIPLMAsyncTask_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMSynchronizationSolution;
#else
extern "C" const IID IID_CATIPLMSynchronizationSolution ;
#endif

//------------------------------------------------------------------

/**
* The set of necessary operations for a session synchronization
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMSynchronizationSolution: public CATBaseUnknown
{
  CATDeclareInterface;

public:

   /**
   * Returns a stat on given operations
   * 
   * @param iOperationsMask
   *        Can be a single or several operations
   * @return
   *        The number of operations in accordance with the mask
   */
   virtual unsigned int GetCount(CATPLMSessionOperationType iOperationsMask) const = 0;

   /**
   * Access to operations for diplaying UI
   * 
   * @param ioOperations
   *        The list of operations
   * @return 
   *        S_OK if request succeeded.
   *        E_FAIL if request failed.
   */
   virtual HRESULT GetOperations(CATLISTV(CATIPLMSessionOperation_var) & ioOperations) const = 0;

   /**
   * Returns current error monitor
   * 
   * @param oErrorMonitor
   *        The error monitor
   * @return 
   *        S_OK if request succeeded.
   *        E_FAIL if request failed.
   */
   virtual HRESULT GetErrorMonitor(CATIAdpErrorMonitor *& oErrorMonitor) const = 0;

   /**
   * Synchronize the PLM session (Synchronous mode)
   *
   * @return 
   *        S_OK if request succeeded.
   *        E_FAIL if request failed.  
   */
   virtual HRESULT Synchronize () const = 0;

   /**
   * Synchronize the PLM session (Asynchronous mode)
   *
   * @return 
   *        Holder managing asynchronous request
   */
   virtual CATIPLMAsyncTask_var DeclareSynchronizationTask () const = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
