// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// CATAdpExtendedQueryServices.h
// Header definition of CATAdpExtendedQueryServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  August 2010  Creation: Code generated by the CAA wizard  ECN
//===================================================================
/**
* @level Protected
* @usage U1
*/
#ifndef CATAdpExtendedQueryServices_H
#define CATAdpExtendedQueryServices_H

#include "CATPLMIntegrationAccess.h"
#include "IUnknown.h"
#include "CATCollec.h"
class CATBaseUnknown;
class CATAdpQueryFilter;
class CATLISTP(CATAdpExtendedQueryResult);
class CATIAdpErrorMonitor;
class CATAdpComponentsInfos;
class CATAdpComponentReferences;
class CATLISTP(CATIAdpPLMIdentificator);
class CATLISTV(CATPLMID);
class CATPLMIDSet;
class CATAdpReferencesInstanciationData;
class CATPLMTypeH;


//-----------------------------------------------------------------------

/**
* Class to manage queries on PLM component in database.
*
* <br><b>Role</b>: Provides all basic functions to query PLM data.
*/
class ExportedByCATPLMIntegrationAccess CATAdpExtendedQueryServices
{

public:


 /**
  * @deprecated V6R422
  * @use CATAdpExtendedQueryServices#GetElementsFromQueryFilter
  * Do not use CATAdpExtendedQueryResult.
  */
  static HRESULT GetElementsFromQueryFilter(const CATAdpQueryFilter & iQueryFilter,
    CATLISTP(CATAdpExtendedQueryResult) & oQueryResults, CATIAdpErrorMonitor * iopErrorMonitor = NULL);
 
 /**
  * Retrieves in the current repository the objects corresponding to a set of attributes of any type.
  *
  * <br><b>Role</b>: This method retrieves in the current repository the objects matching the input defined criterion.
  * <ul>
  * <li> The input criterion is defined with a query filter  (see further on for more accurate description).</li>
  * <li> If no provider is currently connected, the query will result in an E_FAIL return.</li>
  * <li> If more than one provider is connected, the query will result in an E_FAIL return.</li>
  * <li> See @href CATAdpProtectedQueryFilterFactory to create basic filter.</li>
  * <li> Usage is for example : CATAdpExtendedQueryServices::GetElementsFromQueryFilter(CATAdpProtectedQueryFilterFactory::GetFilterFromStringValue(pRefType,sExternalId,uValue), r_Results).</li>
  * </ul>
  *
  * @param iQueryFilter [in]
  *   The Filter to adress a query with possible extension and supporting any kind of attributes.
  *   This filter owns a CATAdpQueryAttributeSet corresponding to the main type of object to be retrieved and a list of
  *   CATAdpQueryAttributeSet corresponding each to constraint on an extension.
  *   see (@href CATAdpQueryFilter )  for more informations.
  *   The attribute set that the searched object should match. It contains the names , values and operators ("EQ", "NOT_EQ",
  *   "GT" , "LTEQ", "LT" , "GTEQ" , "LIKE")  of the attributes which will be used during the search operation.
  *   It must not be empty for a set corresponding to an extension type.
  * <ul>
  * <li> Inside a attribute set, attribute constraint can be combined through a ‘AND’ condition or a 'OR' condition .</li>
  * <li> Between two attribute sets, the ‘AND’ condition is applied .</li>
  * <li> These attributes should be of only string, double, integer, time, binary , boolean types.</li>
  * <li> Multi valuated attributes are not supported.</li>
  * <li> Wildcard are supported as attribute values on string attribute type.</li>
  * <li> See @href CATAdpProtectedQueryFilterFactory to create basic filter.</li>
  * </ul>
  *   A set is invalid if :
  * <ul>
  * <li> The attribute set is empty and if its type corresponds to an extension.</li>
  * <li> The attribute set is empty and if its type corresponds to the main type and if there is no extension set defined and if the
  *      mode attribute completion with query mask is not set, see (@href CATAdpQueryFilter ) for more information.</li>
  * <li> Or, one of the attributes available in the set is not defined for such a @href CATIAdpType in the metadata.</li>
  * </ul>
  * @param oComponentsInfos [out]
  *   Returned Informations on the found components.
  * <ul>
  * <li> These components are not loaded in a session. </li>
  * <li> Components are identified through @href CATIAdpPLMIdentificator by using the @href CATAdpComponentsInfosIter#Key method.</li>
  * <li> The attributes obtained on the components are the one which were given as
  *      input in <tt>iAttributeSet</tt> with the exact values retrieved from the database or
  *      all attributes from the query mask are retrieved or no attribute according to @href CATAdpQueryFilter option. Be aware that this service
  *      returns only attributes belonging to the query mask (it is the same on extension). An attribute is filtered from output if
  *      it is not present in the query mask and a warning is generated in param iopErrorMonitor (if it is defined).</li>
  * @param iopErrorMonitor [inout]
  *   The ErrorMonitor dedicated to store and handle all PLM Errors raised during the execution of this service.
  * </ul>
  *
  * @return
  *   <ul>
  *   <li><code>S_OK</code> if a component was found in the database.</li>
  *   <li><code>S_FALSE</code> if no component matching the criterion was found in the database.</li>
  *   <li><code>E_FAIL</code> if an error occured. If a blocking error occured, it can be accessed through @href CATError#CATGetLastError method.</li>
  *   <li><code>E_INVALIDARG</code> if the provided <tt>iType</tt> or <tt>iQueryFilter</tt> is invalid.</li>
  *   </ul>
  *
  */
  static HRESULT GetElementsFromQueryFilter(const CATAdpQueryFilter & iQueryFilter,
    CATAdpComponentsInfos & oComponentsInfos, CATIAdpErrorMonitor * iopErrorMonitor = NULL);

  /**
  * Retrieve reference owner and aggragating reference from a list of instances.
  * <br><b>Role</b>: Given a @href CATIAdpPLMIdentificator , enables to retrieve the attributes information available in the set for this Component.
  *
  * @param iComponents [in]
  *   The list of components.
  * @param oResults [out]
  *   The queried result on which we find owner and aggregating reference for each input component.
  * @param iopErrorReviewer [inout]
  *   The ErrorMonitor dedicated to store and handle all PLM Errors raised during the execution of this service.
  *
  * @return
  * <ul>
  *   <li><code>S_OK</code> if the informations are available for the component.</li>
  *   <li><code>E_FAIL</code> if no infos are available for the given Component.</li>
  *   <li><code>E_INVALIDARG</code> if a component does not correspond to a instance.</li>
  * </ul>
  */
  static HRESULT GetReferencesFromComponents(const CATLISTP(CATIAdpPLMIdentificator) & iComponents, CATAdpComponentReferences & oResults, CATIAdpErrorMonitor * iopErrorMonitor = NULL);

  /**
  * Retrieve instanciation data for given References.
  * <br><b>Role</b>: Given a @href CATIAdpPLMIdentificator, enables to retrieve the Instanciation data in the database.
  *
  * @param iReferences [in]
  *   The list of References which the user wants to know where it is instanciated in the database.
  * <ul>
  * <li>If one of the given Components is neither a PLM Reference, nor a PLM RepReference, <code>E_INVALIDARG</code> is returned.</li>
  * <li>If one of the given Components have never been saved in the database, <code>E_INVALIDARG</code> is returned.</li>
  * </ul>
  *
  * @param oResults [out]
  *   An access to the different instanciation data found for the given References.
  * @param iopErrorReviewer [inout]
  *   The ErrorMonitor dedicated to store and handle all PLM Errors raised during the execution of this service.
  *
  * @return
  * <ul>
  *   <li><code>S_OK</code> if the informations are available for the components.</li>
  *   <li><code>E_FAIL</code> if no infos are available for the given Components.</li>
  *   <li><code>E_INVALIDARG</code> if input are invalid.</li>
  * </ul>
  */
  static HRESULT WhereInstanciated(const CATLISTP(CATIAdpPLMIdentificator) & iReferences, CATAdpReferencesInstanciationData & oResults, CATIAdpErrorMonitor * iopErrorMonitor = 0);

  static HRESULT WhereInstanciated(const CATLISTV(CATPLMID) & iReferences, CATAdpReferencesInstanciationData & oResults, CATIAdpErrorMonitor * iopErrorMonitor = 0);

  static HRESULT WhereInstanciated(const CATPLMIDSet & iReferences, CATAdpReferencesInstanciationData & oResults, CATIAdpErrorMonitor * iopErrorMonitor = 0);

  static HRESULT GetRepresentationsFromReference(CATBaseUnknown * iReference, CATPLMTypeH * ipRepTypeH, CATAdpComponentReferences & oRepresentations, CATAdpComponentsInfos & oComponentsInfos, CATIAdpErrorMonitor * iopErrorMonitor = 0);

  static int            m_counterExtendedQuery;
};
#endif
