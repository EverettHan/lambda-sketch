//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/11/30
//===================================================================
// Header definition of differents map classes
//===================================================================
//
// Usage notes:
// Associate a PLMID with another PLMID
//===================================================================
//  2010/11/30 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMIDCOLLECTIONS_H
#define CATPLMIDCOLLECTIONS_H

#include "CATPLMIdentificationAccess.h"
#include "CATUnicodeString.h"
#include "CATPLMID.h"
#include "CATOmxArray.h"
#include "CATOmxOMap.h"
#include "CATOmxMapIter.h"
#include "CATOmxCollecManager.h"
#include "CATOmxDefaultCollecManager.h"
#include "CATOmxOSet.h"
#include "CATOmxOrderedOSet.h"
#include "CATOmxOHMap.h"
#include "CATPLMIDMapIter.h"
#include "CATPLMIDMapAdpIter.h"
#include "CATPLMIDCollecManager.h"
#include "CATPLMIDMinorCollectManager.h"
#include "CATPLMRemoteRefreshStatus.h"
#include "CATPLMTypeH.h"

template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATOmxArray<CATPLMID> >::manager ();
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMIDMap>::manager ();
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager < CATPLMIDs >::manager ();
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager < CATOmxOHMap<CATPLMID, CATPLMIDs> >::manager ();


typedef CATOmxArray<CATPLMID, CATPLMIDMinorCollectManager::manager> CATPLMIDMinorInsensitiveArray;
typedef CATOmxOSet<CATPLMID, CATPLMIDMinorCollectManager::manager> CATPLMIDMinorInsensitiveSet;
typedef CATOmxOrderedOSet<CATPLMID, CATPLMIDMinorCollectManager::manager> CATPLMIDMinorInsensitiveOrderedSet;
typedef CATPLMIDMinorInsensitiveSet::IteratorType CATPLMIDMinorInsensitiveSetIter;
typedef CATOmxOHMap<CATPLMID, CATPLMID, CATPLMIDMinorCollectManager::manager, CATPLMIDMinorCollectManager::manager> CATPLMIDMinorInsensitiveMap;
typedef CATOmxMapIter<CATPLMID, CATPLMID> CATPLMIDMinorInsensitiveMapIter;

typedef CATOmxOHMap<int, CATPLMID> CATIntPLMIDMap;
typedef CATOmxOHMap<CATPLMID, int> CATPLMIDIntMap;
typedef CATOmxOHMap<CATUnicodeString, CATPLMID> CATStringPLMIDMap;
typedef CATOmxOHMap<CATPLMID, CATUnicodeString> CATPLMIDStringMap;
typedef CATOmxArray<CATPLMID> CATPLMIDArray;
typedef CATOmxOHMap<CATPLMID, CATPLMIDArray> CATPLMIDToArrayMap;
typedef CATOmxMapIter<CATPLMID, CATPLMIDArray> CATPLMIDToArrayMapIter;
typedef CATOmxOHMap<CATPLMID, CATPLMIDs> CATPLMIDToPLMIDs;
typedef CATOmxOHMap<int, CATPLMIDToPLMIDs> CATIntToPLMIDS;

typedef CATOmxOMap<CATPLMID, CATOmxArray<CATUnicodeString> > CATPLMIDToArrayUnicodeStringMap;
typedef CATOmxMapIter<CATPLMID, CATOmxArray<CATUnicodeString> > CATPLMIDToArrayUnicodeStringMapIter;
typedef CATOmxOMap<CATPLMID, CATOmxArray<CATOmxKeyString> > CATPLMIDToArrayKeyStringMap;
typedef CATOmxMapIter<CATPLMID, CATOmxArray<CATOmxKeyString> > CATPLMIDToArrayKeyStringMapIter;
typedef CATOmxOSet<CATPLMID> CATPLMIDOSet;
//class CATPLMIDOSet : public CATOmxOSet<CATPLMID>
//{
//  typedef CATOmxOSet<CATPLMID> thisSet;
//public:
//  using thisSet::thisSet;
//  //CATPLMIDOSet(CATOmxOSet<CATPLMID> &i) :CATOmxOSet<CATPLMID>(i) {}
//};
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMIDOSet>::manager ();

template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMRemoteRefreshStatus>::manager ();
typedef CATOmxOHMap<CATPLMID, CATPLMRemoteRefreshStatus> CATPLMIDToRemoteRefreshStatusMap;
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMIDToArrayMap>::manager ();
template <> ExportedByCATPLMIdentificationAccess CATOmxCollecManager & CATOmxDefaultCollecManager <CATOmxOrderedOSet<CATPLMTypeH> >::manager();
/*
* Cette map traite indifferemment des AdpId ou des PLMID avec les fonctions
* de conversion fournies par le PLMID
*/


class ExportedByCATPLMIdentificationAccess CATPLMIDMap
{
  typedef CATOmxOHMap<CATPLMID, CATPLMID> CATPLMIDPrivateMap;
  CATPLMIDPrivateMap _Map;

public:

  CATPLMIDMap();
  ~CATPLMIDMap();
  /**
  * if iKey is not present, corresponding node is created with default value (NULL plmid).
  * Returns writable reference on the value.
  */
  CATPLMID& operator[](const CATPLMID &iKey);

  CATIAdpPLMIdentificator* operator[](CATIAdpPLMIdentificator *iKey);

  /** Locate an item. */
  const CATPLMID* Locate(const CATPLMID& iKey) const;
  /** must be released if not null */
  CATIAdpPLMIdentificator* Locate(const CATIAdpPLMIdentificator * iKey) const;

  /**
   * if iKey is not present, returns NULL else returns a pointer on the corresponding value.
   */
  CATPLMID* LocateForWrite(const CATPLMID &iKey);

   /**
   * Inserts (iKey,iValue) in the map.
   * if iKey was yet inserted returns false and corresponding value is not overriden.
   */
  CATBoolean Insert(const CATPLMID& iKey, const CATPLMID& iValue);

  CATBoolean Insert(CATIAdpPLMIdentificator *iKey, CATIAdpPLMIdentificator *iValue);

  /**
   * Same as Insert but value is overriden if iKey is yet inserted.
   */
  CATBoolean Replace(const CATPLMID& iKey, const CATPLMID& iNewValue);

    /**
   * if iKey is not present, returns false.
   * else corresponding node is removed from the map.
   */
  CATBoolean Remove(const CATPLMID& iKey);

  CATBoolean Remove(CATIAdpPLMIdentificator* iKey);

  const CATPLMIDMapIter MapIterator() const;

  const CATPLMIDMapAdpIter AdpMapIterator() const;

  unsigned Size(void) const;

  CATBoolean Exists(const CATPLMID &iKey) const;

  CATBoolean Exists(CATIAdpPLMIdentificator *iKey) const;

};

//-----------------------------------------------------------------------

#endif
