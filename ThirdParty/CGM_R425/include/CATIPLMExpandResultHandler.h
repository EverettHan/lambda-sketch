// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMExpandResultHandler.h
// Define the CATIPLMExpandResultHandler interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Jan 2007  Creation: Code generated by the CAA wizard  jvm
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef CATIPLMExpandResultHandler_H
#define CATIPLMExpandResultHandler_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMExpandResultHandler;
#else
extern "C" const IID IID_CATIPLMExpandResultHandler;
#endif


class CATIPLMRecordRead;
class CATUnicodeString;
class CATIPLMError;

/**
 * CATIPLMExpandResultHandler is the Interface to receive notification of Expand result events.
 *
 * if the application needs to be informed of basic parsing events,
 * it implements this interface and registers an instance with the Expand/3DIndex service.
 * The 3DIndex service uses the instance to report basic document-related events like the start and end of Path.
 * The order of events in this interface is very important, and mirrors the order of information in the expand result itself.
 *
 * For example, all records will appear, in order, between ::StartPath event and the corresponding ::EndPath event.
*/
class ExportedByCATPLMServicesItf CATIPLMExpandResultHandler : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Receives notification of the beginning of a Result.
  *
  * <p>The Expand/3DIndex service will invoke this method only once, before any
  * other methods in this interface.</p>
  *
  * @param iVersion
  *   The version of the result
  */
  virtual HRESULT StartResult(int iVersion) = 0;

  /**
  * Receives notification of the end of the result.
  *
  * <p>The Expand/3DIndex service will invoke this method only once, and it will
  * be the last method invoked during the parse.</p>
  *
  * @param iElapseTime
  *   The elapse time to process the result on the PLM Server
  */
  virtual HRESULT EndResult(int iElapseTime) = 0;

  /**
  * Receives notification of the beginning of a Block.
  *
  * <p>The Expand/3DIndex service will invoke this method at the beginning of every
  * Block in the result; there will be a
  * corresponding @href #EndBlock event for every @href #StartBlock event (even when the
  * Block is empty).</p>
  * @see #EndBlock
  *
  * A block defines a scope of PATH that share the same list of PLMID.
  * Inside a block, a PLMID will be defined completly by a record only once.
  * &see #Record
  */
  virtual HRESULT StartBlock() = 0;

  /**
  * Receives notification of the end of a Block.
  *
  * <p>The Expand/3DIndex service will invoke this method at the end of every
   Block in the result; there will be a corresponding
  * @href #StartBlock event for every @href #EndBlock event (even when the
  * Block is empty).</p>
  *
  * @param iElapseTime
  *   The elapse time to process this block on the PLM Server
  */
  virtual HRESULT EndBlock(int iElapseTime) = 0;

  /**
  * Receives notification of the beginning of a Path.
  *
  * <p>The Expand/3DIndex service will invoke this method at the beginning of every
  * Path in the block; there will be a
  * corresponding @href #EndPath event for every @href #StartPath event (even when the
  * Path is empty).</p>
  *
  * @param iRank
  *   The rank of this path.
  */
  virtual HRESULT StartPath(int iRank) = 0;

  /**
  * Receives notification of the end of a Path.
  *
  * <p>The Expand/3DIndex service will invoke this method at the end of every
  * Path in the block; there will be a corresponding
  * @href #StartPath event for every @href #EndPath event (even when the
  * Path is empty).</p>
  */
  virtual HRESULT EndPath() = 0;

  /**
  * Receives notification of Record data.
  *
  * <p>The Expand/3DIndex service will invoke this method for every
  * Record in the Path. All of the Records will be
  * reported, in order, before the @href #EndPath event.</p>
  * The Record can be reused by the Expand service implement. Don't keep iRecord.
  *
  * @param iRecord
  * the CATIPLMRecordRead interface.
  * @param iAlreadyVisited
  * TRUE : The record has been already seen within a BLOCK - so the record may be incomplete.
  *        The only revelant information is the PLMID
  * FALSE : The record is complete because it is seen for the first time in a BLOCK.
  */
  virtual HRESULT Record(CATIPLMRecordRead * iRecord, CATBoolean iAlreadyVisited) = 0;

  /**
  * Receives the report of the incident that occurs on the recordSet. NULL if the recordSet is successfully which means All contained records are ok
  * @param  iError
  *     The error description.
  */
  virtual HRESULT GlobalReport(CATIPLMError * iError) = 0;
};

#endif
