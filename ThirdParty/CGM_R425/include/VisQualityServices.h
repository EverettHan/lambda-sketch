//===================================================================
// COPYRIGHT Dassault Systemes 2016-02-23
//===================================================================
// VisQualityServices.cpp
// Header definition of class VisQualityServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016-02-23 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisQualityServices_H
#define VisQualityServices_H

#include "SGInfra.h"
#include "VisQualityData.h"
#include "CATBooleanDef.h"
#include "CATUnicodeChar.h"
#include "CATListOfCATUnicodeString.h"

class CATVizViewer;
class VisQualityManagementCtl;
class VisNewQualityManagementCtl;
class VisQualityTools;
class CATFrmWindow;
class CATPerfoToolsEditor;
class CATVizViewer;
class VisQualityManagementBehavior;
class VisCoreWindow;
class TestVisQualityServicesVRModeTest;
class DSGlobeApplication;
class CATMePrefSyncPerfoRepoUpdate;

class ExportedBySGInfra VisQualityServices
{
  friend class VisQualityManagementCtl;
	friend class VisNewQualityManagementCtl;
  friend class VisNewQualityEditorFrame;
  friend class VisQualityTools;
  friend class CATFrmWindow;
  friend class CATPerfoToolsEditor;
  friend class CATVizViewer;
  friend class VisQualityManagementBehavior;
  friend class VisCoreWindow;
  friend class VisTestAppQualityInit;
  friend class TestVisQualityServicesVRModeTest;
  friend class DSGlobeApplication;
  friend class CATMePrefSyncPerfoRepoUpdate;
  friend class EVisuBasicTests;

public:
  // Standard constructors and destructors
  // -------------------------------------
  VisQualityServices ();
  virtual ~VisQualityServices ();

  static void      PushQualityMode(const CATString &iMode, CATVizViewer* pViewer);
  static CATString PopQualityMode (CATVizViewer* pViewer);
  static CATString GetQualityMode (CATVizViewer* pViewer);

  static void StartVirtualRealityMode(CATVizViewer* pViewer);
  static void StopVirtualRealityMode(CATVizViewer* pViewer);
  static CATBoolean IsInVirtualRealityMode(CATVizViewer* piViewer);

  static VisQuality::PresetID GetCurrentQuality(CATVizViewer* pViewer, VisQuality::RenderMode iMode, VisQualityData& oData); 
  static VisQualityData GetCustomQuality(CATVizViewer* pViewer, VisQuality::RenderMode iMode); 

  static int GetQualityData(VisQuality::PresetID iID, VisQuality::RenderMode iMode, const CATString &iOverride, VisQualityData &oData); 
  
  //static CATString GetPresetInfoInStream  (CATVizViewer* ipViewer);
  //static void      SetPresetInfoFromStream(CATVizViewer* ipViewer, const CATString &iDataStream);

//-----------------------------------------------------------------------
// Below APIs are for internal use only. They might change without intimation. 
//-----------------------------------------------------------------------
  static CATUnicodeString GetParamNLSValue(const CATUnicodeString &iParam, const CATUnicodeString &iValue);
  static CATUnicodeString GetParamValue(const CATUnicodeString &iParam, const CATUnicodeString &iNLSValue);
  static void AddEnumParamValues(const CATUnicodeString &iParam, const CATUnicodeString &iRange);
  
  // helper function to parse strings to get some info
  static CATListOfCATUnicodeString GetListFromString(const CATUnicodeString &csvString, const CATUnicodeChar iDelimiter=';');
  static void GetMinMax(const CATUnicodeString &iVal, double &oMin, double &oMax);
  static void GetMinMax(const CATUnicodeString &iVal, int &oMin, int &oMax);

private: // accessed by friends only

  // Initialize viewer depending on iID
  // iID=VisQuality::Invalid, initialize parameters with Default (except AA, for compatibility reasons)
  // iID=VisQualityLast, 
  static void InitViewer(CATVizViewer* pViewer, VisQuality::PresetID iID=VisQuality::Invalid);

  // Call this function to update visualization quality applied to provided viewer 
  // if a preset is applied to viewer, it is reapplied by querying value and considering override
  // if no preset is applied, only override is applied
  static void UpdateQuality(CATVizViewer* pViewer, VisQuality::RenderMode iMode=VisQuality::NoMode);

  static void SetPresetLinked(CATVizViewer* pViewer, CATBoolean iIsLinked, VisQuality::RenderMode iRenderMode = VisQuality::Static);
  static CATBoolean IsPresetLinked(CATVizViewer* pViewer, VisQuality::RenderMode iRenderMode = VisQuality::Static);

  static void SetVRQuality(CATVizViewer* pViewer, VisQuality::PresetID iID);
  static void SetVRQuality(CATVizViewer* pViewer, VisQualityData& oCustomData); 

private:
  // Copy constructor and equal operator
  // -----------------------------------
  VisQualityServices (VisQualityServices &);
  VisQualityServices& operator=(VisQualityServices&);

  static void InitViewerForRenderMode(CATVizViewer* pViewer, VisQuality::RenderMode iMode, VisQuality::PresetID iID);

  static CATListOfCATUnicodeString _keyList;
  static CATListOfCATUnicodeString _valueList;
};

//-----------------------------------------------------------------------

#endif
