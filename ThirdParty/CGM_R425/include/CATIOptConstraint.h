// COPYRIGHT DASSAULT SYSTEMES 2000
//===================================================================
//
// CATIOptConstraint.h
// Define the CATIOptConstraint interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2000  Creation: Code generated by the CAA wizard  TVQ
//===================================================================
/** 
 * @CAA2Level L1
 * @CAA2Usage U3
 */

/*  CAA2Reviewed by FRH  */

#ifndef CATIOptConstraint_H
#define CATIOptConstraint_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"
#include "CATICkeRelationForwards.h"


class CATICkeMagnitude_var;
class CATICkeParm_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATIOptConstraint ;
#else
extern "C" const IID IID_CATIOptConstraint ;
#endif

//------------------------------------------------------------------

/**
* Interface encapsulating an optimization constraint.
* <p>
* An optimization constraint belongs to an optimization feature (see Product Engineering Optimizer).
* A constraint is a Knowledge expressionnal relation (answers to CATICkeRelationExp) that expresses a simple condition.
* <p>
* This interface is mono implemented.
*/
class ExportedByKnowledgeItf CATIOptConstraint: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	
	/**
	* Constraint type (equality, greater than, greater or equal, less than, less or equal, non equal).  
	*/
    enum ConstraintType { UNKNOWN,EQ,GT,GE,LT,LE,NE };

	/**
	* Returns the constraint type.
	* @return
	*	a Constraint Type
	*/
	virtual CATIOptConstraint::ConstraintType GetConstraintType() const = 0;

	/**
	* Indicates if the constraint is respected.
	* @return
	* 1 if the constraint is respected, 0 else (see SetPrecision and GetPrecision)
	*/
	virtual int IsRespected() const = 0;

	/**
	* Returns the necessary distance to respect the constraint.
	* @return
	* the distance to constraint respect (for example x > 7mm with x = 3mm. The method returns 0.004 (4mm in mks))
	*/
	virtual double GetDistance() const = 0;


	/**
	* Returns the parameter valuated with the necessary distance to respect the constraint.
	* @return
	* a parameter aggregated to the constraint containing the distance value
	*/
	virtual CATICkeParm_var GetDistanceParameter() = 0;

	/**
	* Returns the left hand side value of the constraint.
	* @return
	* the value of the left hand side of the constraint (for example x + y > 7 The method returns 11 if x = 1 and y = 10;
	*/
	virtual double GetLHSValue() const = 0;


	/**
	* Returns the right hand side value of the constraint.
	* @return
	* the right side member of the constraint (for example x + y > 7mm. The method returns 0.007 (7mm in mks))
	*/
	virtual double GetBound() const = 0;


	/**
	* Sets the precision for equality constraints.
	* The method IsRespected will return 1 if the distance to constraint respect is less than the precision
	* @param mksPrecision precision
    * @return classic HRESULT
	*/
	virtual HRESULT SetPrecision(double mksPrecision) = 0;

	/**
	* Gets the precision for equality constraints.
	* the method IsRespected will return 1 if the distance to constraint respect is less than the precision
    * @return the precision
	*/
	virtual double GetPrecision() const = 0;

	/**
	* Sets the priority of the constraint.
	* @param iPriority of the constraint
	* The priority is used to give more/less importance to the constraint during
	* the optimization results classification (results exploitation).
	* The priority is an integer number.
    * @return classic HRESULT
	*/
	virtual HRESULT SetPriority(int  iPriority) = 0;

	/**
	* Returns the priority of the constraint.
    * @return priority of the constraint.
	*/
	virtual unsigned int GetPriority() const = 0;

	/**
	* Sets the weight of the constraint.
	* @param iWeight weight of the constraint
	* The weight is used to give more/less importance to the constraint during
	* the optimization computations (algorithms run).
	* The weight is a double number.
    * @return classic HRESULT
	*/
	virtual HRESULT SetWeight(double  iWeight) = 0;

	/**
	* Returns the weight of the constraint.
    * @return weight of the constraint.
	*/
	virtual double GetWeight() const = 0;

	/**
	* Returns the magnitude of the constraint.
	* @return the magnitude of the constraint.
	*/
	virtual CATICkeMagnitude_var GetMagnitude() const = 0;

	/**
	* @nodoc
	*/
	virtual HRESULT GetAllParameters(CATCkeListOfParm ioParmList) const = 0;
	
};

//------------------------------------------------------------------

CATDeclareHandler( CATIOptConstraint, CATBaseUnknown );

#endif
