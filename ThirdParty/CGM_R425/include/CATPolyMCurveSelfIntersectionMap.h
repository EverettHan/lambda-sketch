// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPolyMCurveSelfIntersectionMap.h
// Header definition of CATPolyMCurveSelfIntersectionMap
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  March 2005  Creation: Code generated by the CAA wizard  rxu
//===================================================================
#ifndef CATPolyMCurveSelfIntersectionMap_H
#define CATPolyMCurveSelfIntersectionMap_H

#include "CATPolyMCurveAnalyzeOperators.h"
#include "CATPolyMCurveAnalyzeOper.h"

#include "CATListOfInt.h"
#include "CATListPV.h"
#include "CATBoolean.h"

//-----------------------------------------------------------------------

class ExportedByCATPolyMCurveAnalyzeOperators CATPolyMCurveSelfIntersectionMap: public CATPolyMCurveAnalyzeOper
{

public:

   // Standard constructors and destructors
   // -------------------------------------
   CATPolyMCurveSelfIntersectionMap ();
   virtual ~CATPolyMCurveSelfIntersectionMap ();

   void SetCurveSize (const int iNumberOfCurvePoints);
 
  /**
   * Add an intersection point
   * @param iMPoint1
   *   the first point in the first curve
   * @param iMPoint2
   *   the second point in the second curve
   * @return
   * S_OK: success;  E_FAIL otherwise.
   */
   HRESULT AddIntersection
   (
      const int      iPoint1,
      const int      iPoint2
   );


  /**
   * returns the number of intersection points
   * @return
   *  The number of intersections
   */
   int GetNumberOfIntersections () const;

  /**
   * returns the intersected points from intersection index
   * @param iIntersectionIndex
   *   the intersection index
   * @param oIntersectPointIndices
   *   the intersected points
   * @return
   *     TRUE:  The intersectiion is found and the points intersected are returned.
   *     FALSE: Otherwise
   */
   CATBoolean GetIntersectionsFromIndex
   (
      const int      iIntersectionIndex,
      CATListOfInt   &oIntersectPointIndices
   ) const;

  /**
   * returns the intersected points from curve point
   * @param iPoint
   *   the point
   * @param oIntersectPointIndices
   *   the intersected points
   * @return
   *     > 0:  The intersectiion index.
   *       0:  There is no intersection at the point 
   */
  int GetIntersectionsFromPoint
   (
      const int      iPoint,
      CATListOfInt   &oIntersectPointIndices
   ) const;

  /**
   * returns the intersection index of a point
   * @param iPoint
   *   the point
   * @return
   *     > 0:  The intersectiion index.
   *       0:  There is no intersection at the point 
   */
   int GetIntersectionIndex
   (
      const int      iPoint
   ) const;

private:

   CATListPV      _IntersectionMap;
   CATListOfInt   _PointIntersectionMap;

   void Init ();
};

//-----------------------------------------------------------------------


#endif
