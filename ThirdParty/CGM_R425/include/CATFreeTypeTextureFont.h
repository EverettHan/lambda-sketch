//===================================================================
// COPYRIGHT DS SolidWorks Corporation 2011/10/18
//===================================================================
// CATFreeTypeTextureFont.cpp
// Header definition of class CATFreeTypeTextureFont
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/10/18 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATFreeTypeTextureFont_H
#define CATFreeTypeTextureFont_H

#include "CATFreeType.h"


#include "CATBoolean.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeChar.h"
#include "CATUnicodeString.h"
#include "vector.h"
#include <algorithm>
#include <CATSGSYPArray.h>

class CATFreeTypeFace;
class CATFreeTypeTextFormat;
class CATFreeTypeTextureAtlas;
class CATTexturePixelImage;
class l_CATVisuVIDBuffer;
class CATMathPoint2Df;
class l_CATVisuVIDDrawState;
class l_CATVisuVIDTransformation;
//-----------------------------------------------------------------------

class ExportedBySGInfra CATFreeTypeTextureFont : public CATBaseUnknown
{
  CATDeclareClass;
public:
	struct EffectParams {
		unsigned int	outline : 1;
		unsigned int	shadow  : 1;
		float outlineColor[4];
		int outlineRadius;
		float shadowColor[4];
		float shadowOffset[3];
	};

public:
	//! build a texture font from a freetype face and atlas
	CATFreeTypeTextureFont(CATFreeTypeTextureAtlas* iAtlas, CATFreeTypeFace* iFace);

	//! build a texture font from a text format and atlas
	CATFreeTypeTextureFont(CATFreeTypeTextureAtlas* iAtlas, CATFreeTypeTextFormat const* iFormat);

	virtual ~CATFreeTypeTextureFont();

	//! The backing texture image
	CATTexturePixelImage* GetTexturePixelImage();

	unsigned int GetAtlasTextureId() const;
	unsigned int GetAtlasTextureToken() const;

	HRESULT TesselateString2D
	(
		CATUnicodeString const& i_string, 
		float iXpos, 
		float iYpos, 
		CATFreeType::PenPoint const* iPoints,
		CATBoolean bInvert,
		EffectParams* iEffect,
		unsigned int& oNumVertices,
		float**	oPosition,
		float**	oTexCoord
	);

	// This method will return the Image texture coordinate, scaled width and height(from atlas) and final width and height on screen.
	HRESULT TesselateString2DBasic
	(
		CATUnicodeString const& i_string,
		float iXpos,
		float iYpos,
		CATFreeType::PenPoint const* iPoints,
		CATBoolean bInvert,
		EffectParams* iEffect,
		unsigned int& oNumVertices,
		float** oPosition,
		float** oTexCoord,
		int& oScaledWidth,
		int& oScaledHeight,
		int& oWidth,
		int& oHeight
	);

	//! Precache resources to render all characters in a string
	HRESULT CacheString(CATUnicodeString const& iString);

	//! Purge the cache
	void ClearCache();

	//! Can we draw text for this format ?
	CATBoolean IsFormatCompatible(CATFreeTypeTextFormat const* iFormat);

	//! Set the face for this font
	void SetFace(CATFreeTypeFace* iFace);
	CATFreeTypeFace const* GetFace();

private:
	struct Image {
		// unicode char
		CATUC2Bytes charcode;

		// texture mapping
		unsigned int textureID;
		float texcoords[4];

		// bitmap metrics
		CATFreeType::ImageMetrics metrics;

		inline Image() : textureID(0), charcode(0) {} 
	};
	struct ImageCmp {
		// comparison for the binary search
		inline CATBoolean operator()(Image const& lhs, CATUC2Bytes const& c)
		{
			return lhs.charcode < c;
		}
		inline CATBoolean operator()(CATUC2Bytes const& c, Image const& lhs)
		{
			return  c < lhs.charcode;
		}
		inline CATBoolean operator()(Image const& lhs, Image const& rhs)
		{
			return lhs.charcode < rhs.charcode;
		}
	};

	typedef vector<Image> Images;
	typedef Images::iterator ImageIterator;
	typedef Images::const_iterator ConstImageIterator;

	CATFreeTypeTextureFont (CATFreeTypeTextureFont &);

	CATFreeTypeTextureFont& operator=(CATFreeTypeTextureFont&);

	void ReserveBuffer(unsigned int iSize);

	ImageIterator FindImage(CATUC2Bytes const& c);

	HRESULT FindTexture(ImageIterator it);

	CATBoolean Cached(CATUnicodeString const& iString);

	void SnapSubpixelQuadToPixels(
		int subpixels,
		int& pos,
		int& len,
		float dtex,
		float& texoffset0,
		float& texoffset1
		);

	CATFreeTypeTextureFont* GetOutlineFont(int iRadius);

	typedef vector<CATFreeTypeTextureFont*> FontList;

	void GetFaceData();

	//! apply a distance transform to the glyph alpha mask
	void ApplyDistanceTransform(Image& im);

	CATFreeTypeTextureFont* CreateOutlineFont(CATFreeTypeTextureAtlas* iAtlas, CATFreeTypeFace* iFace);

private:
	CATFreeTypeTextureAtlas*		_atlas;			
	CATFreeTypeFace*				_face;			
	unsigned char*		_buffer;
	unsigned int		_bufferSize;
	Images				_images;
	CATUnicodeString	_fontFamily;
	CATFreeType::FontWeight	_fontWeight;
	CATFreeType::FontStyle	_fontStyle;
	CATFreeType::RenderMode	_renderMode;
	CATFreeType::GlobalMetrics _metrics;
	CATFreeType::FormatHint	_formatHint;
	FontList	_outlineFonts;
};


//-----------------------------------------------------------------------

#endif // CATFreeTypeTextureFont_H
