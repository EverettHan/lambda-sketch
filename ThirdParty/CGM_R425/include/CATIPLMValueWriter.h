// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMValueWriter.h
// Define the CATIPLMValueWriter interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIPLMValueWriter_H
#define CATIPLMValueWriter_H


/**
 * @level Protected
 * @usage U3
 */



#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATListOfInt.h"
#include "CATListOfDouble.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListOfCATBoolean.h"
class CATUnicodeString;
class CATTime;
class CATBinary;
class CATOmxAny;


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMValueWriter;
#else
extern "C" const IID IID_CATIPLMValueWriter;
#endif

//------------------------------------------------------------------

/**
 * Interface that gives a write access to a PLM attribute value.
 * see @href CATIPLMValueReader for the read access.
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMValueWriter : public CATBaseUnknown
{
  CATDeclareInterface;

public:

// Each of these methods can be called only once


/**
 * Sets the value with integer_val type and valuates it with iValue
 * @param iValue [in] the integer value
 * @return S_OK if success
 *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
 */
  virtual HRESULT SetValue(const int iValue) = 0;

  /**
   * Sets the value with a multivaluated integer_val type and valuates it with iValue
   * @param iValue [in] the list of integer value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATListOfInt &iValue) = 0;

  /**
   * Sets the value with double_val type and valuates it with iValue
   * @param iValue [in] the double value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const double iValue) = 0;

  /**
   * Sets the value with a multivaluated double_val type and valuates it with iValue
   * @param iValue [in] the list of double value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATListOfDouble &iValue) = 0;

  /**
   * Sets the value with string_val type and valuates it with iValue
   * @param iValue [in] the string value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATUnicodeString & iValue) = 0;

  /**
   * Sets the value with a multivaluated string_val type and valuates it with iValue
   * @param iValue [in] the list of string value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATListOfCATUnicodeString &iValue) = 0;

  /**
   * Sets the value with time_val type and valuates it with iValue
   * @param iValue [in] the time value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATTime &iValue) = 0;

  /**
   * Sets the value with binary_val type and valuates it with iValue
   * @param iValue [in] the binary value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATBinary &iValue) = 0;

  /**
   * Sets the value with boolean_val type and valuates it with iValue
   * @param iValue [in] the boolean value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATBoolean &iValue) = 0;

  /**
   * Sets the value with a multivaluated boolean_val type and valuates it with iValue
   * @param iValue [in] the list of boolean value
   * @return S_OK if success
   *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
   */
  virtual HRESULT SetValue(const CATListOfCATBoolean &iValue) = 0;

  /**
  * Sets the value with a multivaluated or not CATOmxAny
  * @param iValue [in] the catomxany
  * @return S_OK if success
  *         E_FAIL if one of the method SetValue has already been called on this value or if an internal error occured
  */

  virtual HRESULT SetOmxAny(const CATOmxAny &iValue) = 0;

};
CATDeclareHandler(CATIPLMValueWriter, CATBaseUnknown);

//------------------------------------------------------------------

#endif
