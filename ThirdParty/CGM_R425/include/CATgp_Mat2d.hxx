// File generated by CPPExt (Storable)
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
/*
#ifndef _CATgp_Mat2d_HeaderFile
#define _CATgp_Mat2d_HeaderFile

#ifndef _CATStandard_Real_HeaderFile
#include "CATStandard_Real.hxx"
#endif
#ifndef _CATStandard_Storable_HeaderFile
#include "CATStandard_Storable.hxx"
#endif
#ifndef _CATStandard_Integer_HeaderFile
#include "CATStandard_Integer.hxx"
#endif
#ifndef _CATStandard_Boolean_HeaderFile
#include "CATStandard_Boolean.hxx"
#endif
#ifndef _CATStandard_PrimitiveTypes_HeaderFile
#include "CATStandard_PrimitiveTypes.hxx"
#endif
class CATStandard_ConstructionError;
class CATStandard_OutOfRange;
class CATgp_Trsf2d;
class CATgp_GTrsf2d;
class CATgp_XY;


#ifndef _CATStandard_Macro_HeaderFile
#include "CATStandard_Macro.hxx"
#endif

#include "SysCascade.h"

ExportedBySysCascade  Handle_CATStandard_Type& CATgp_Mat2d_Type_();

class CATgp_Mat2d  {

public:

 // Methods PUBLIC
 // 
ExportedBySysCascade inline CATgp_Mat2d();
ExportedBySysCascade  CATgp_Mat2d(const CATgp_XY& Col1,const CATgp_XY& Col2);
ExportedBySysCascade    void SetCol(const CATStandard_Integer Col,const CATgp_XY& Value) ;
ExportedBySysCascade    void SetCols(const CATgp_XY& Col1,const CATgp_XY& Col2) ;
ExportedBySysCascade inline   void SetDiagonal(const CATStandard_Real X1,const CATStandard_Real X2) ;
ExportedBySysCascade inline   void SetIdentity() ;
ExportedBySysCascade inline   void SetRotation(const CATStandard_Real Ang) ;
ExportedBySysCascade    void SetRow(const CATStandard_Integer Row,const CATgp_XY& Value) ;
ExportedBySysCascade    void SetRows(const CATgp_XY& Row1,const CATgp_XY& Row2) ;
ExportedBySysCascade inline   void SetScale(const CATStandard_Real S) ;
ExportedBySysCascade inline   void SetValue(const CATStandard_Integer Row,const CATStandard_Integer Col,const CATStandard_Real Value) ;
ExportedBySysCascade    CATgp_XY Column(const CATStandard_Integer Col) const;
ExportedBySysCascade inline   CATStandard_Real Determinant() const;
ExportedBySysCascade    CATgp_XY Diagonal() const;
ExportedBySysCascade    CATgp_XY Row(const CATStandard_Integer Row) const;
ExportedBySysCascade inline  const CATStandard_Real& Value(const CATStandard_Integer Row,const CATStandard_Integer Col) const;
ExportedBySysCascade inline  const CATStandard_Real& operator()(const CATStandard_Integer Row,const CATStandard_Integer Col) const
{
  return Value(Row,Col);
}

ExportedBySysCascade inline   CATStandard_Real& ChangeValue(const CATStandard_Integer Row,const CATStandard_Integer Col) ;
ExportedBySysCascade inline   CATStandard_Real& operator()(const CATStandard_Integer Row,const CATStandard_Integer Col) 
{
  return ChangeValue(Row,Col);
}

ExportedBySysCascade inline   CATStandard_Boolean IsSingular() const;
ExportedBySysCascade inline   void Add(const CATgp_Mat2d& Other) ;
ExportedBySysCascade inline   void operator +=(const CATgp_Mat2d& Other) 
{
  Add(Other);
}

ExportedBySysCascade inline   CATgp_Mat2d Added(const CATgp_Mat2d& Other) const;
ExportedBySysCascade inline   CATgp_Mat2d operator +(const CATgp_Mat2d& Other) const
{
  return Added(Other);
}

ExportedBySysCascade inline   void Divide(const CATStandard_Real Scalar) ;
ExportedBySysCascade inline   void operator /=(const CATStandard_Real Scalar) 
{
  Divide(Scalar);
}

ExportedBySysCascade inline   CATgp_Mat2d Divided(const CATStandard_Real Scalar) const;
ExportedBySysCascade inline   CATgp_Mat2d operator /(const CATStandard_Real Scalar) const
{
  return Divided(Scalar);
}

ExportedBySysCascade    void Invert() ;
ExportedBySysCascade inline   CATgp_Mat2d Inverted() const;
ExportedBySysCascade inline   CATgp_Mat2d Multiplied(const CATgp_Mat2d& Other) const;
ExportedBySysCascade inline   CATgp_Mat2d operator *(const CATgp_Mat2d& Other) const
{
  return Multiplied(Other);
}

ExportedBySysCascade inline   void Multiply(const CATgp_Mat2d& Other) ;
ExportedBySysCascade inline   void operator *=(const CATgp_Mat2d& Other) 
{
  Multiply(Other);
}

ExportedBySysCascade inline   void PreMultiply(const CATgp_Mat2d& Other) ;
ExportedBySysCascade inline   CATgp_Mat2d Multiplied(const CATStandard_Real Scalar) const;
ExportedBySysCascade inline   CATgp_Mat2d operator *(const CATStandard_Real Scalar) const
{
  return Multiplied(Scalar);
}

ExportedBySysCascade inline   void Multiply(const CATStandard_Real Scalar) ;
ExportedBySysCascade inline   void operator *=(const CATStandard_Real Scalar) 
{
  Multiply(Scalar);
}

ExportedBySysCascade    void Power(const CATStandard_Integer N) ;
ExportedBySysCascade inline   CATgp_Mat2d Powered(const CATStandard_Integer N) const;
ExportedBySysCascade inline   void Subtract(const CATgp_Mat2d& Other) ;
ExportedBySysCascade inline   void operator -=(const CATgp_Mat2d& Other) 
{
  Subtract(Other);
}

ExportedBySysCascade inline   CATgp_Mat2d Subtracted(const CATgp_Mat2d& Other) const;
ExportedBySysCascade inline   CATgp_Mat2d operator -(const CATgp_Mat2d& Other) const
{
  return Subtracted(Other);
}

ExportedBySysCascade inline   void Transpose() ;
ExportedBySysCascade inline   CATgp_Mat2d Transposed() const;
    CATStandard_Real& _CSFDB_GetCATgp_Mat2dmatrix(const CATStandard_Integer i1,const CATStandard_Integer i2) { return matrix[i1][i2]; }


friend class CATgp_Trsf2d;
friend class CATgp_GTrsf2d;
friend class CATgp_XY;


 // Type management
 //
 ExportedBySysCascade  friend Handle_CATStandard_Type& CATgp_Mat2d_Type_();

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
CATStandard_Real matrix[2][2];


};


#include "CATgp_Mat2d.lxx"



// other ExportedBySysCascade inline functions and methods (like "C++: function call" methods)
//


#endif
*/
