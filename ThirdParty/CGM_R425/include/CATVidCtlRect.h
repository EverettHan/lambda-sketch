// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlRect.h
// Header definition of CATVidCtlRect
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlRect_H
#define CATVidCtlRect_H

#include <VisuDialog.h>
#include <CATVidCtlStateWidget.h>
#include <CATBoolean.h>
#include <CATUnicodeString.h>
#include <CATVidEnum.h>
#include <CATVidColor.h>
#include <CATVidCursor.h>

class CATVidGPLabel;
class CATVidGPSquare;
//-----------------------------------------------------------------------
/**
 * Deprecated class.
 * @deprecated use CATVidCtlButton instead, by using CreateButton or CreateThumbnail for example
 */
class ExportedByVisuDialog CATVidCtlRect: public CATVidCtlStateWidget
{
  CATDeclareClass;

public:

  // Standard constructors and destructors
  // -------------------------------------
  CATVidCtlRect (CATCommand *i_pParent, const CATString & i_pIdentifier, const CATBoolean& i_useManipulatorFlag = TRUE);

  // Set/Get color
  // -------------
  void SetColor(const unsigned char i_r, const unsigned char i_g, const unsigned char i_b, const unsigned char i_a, CATVidState i_state = CATVidStateOff);
  void SetColor(const CATVidColor& i_color, CATVidState i_state = CATVidStateOff);
  void GetColor(CATVidColor& o_color, CATVidState i_state) const;

  // Set/Get 4 color (one for each corner)
  // -------------------------------------
  void Set4Color(const CATVidColor& i_color1, const CATVidColor& i_color2, const CATVidColor& i_color3, const CATVidColor& i_color4, CATVidState i_state = CATVidStateOff);
  void Get4Color(CATVidColor& o_color1, CATVidColor& o_color2, CATVidColor& o_color3, CATVidColor& o_color4, CATVidState i_state) const;
  // Set texture
  // -----------
  void SetTexture(const CATUnicodeString& i_name, CATVidState i_state = CATVidStateOff);
  // Set texture
  // -----------
  void SetTexture(CATPixelImage* i_pImage, CATVidState i_state = CATVidStateOff);
  // Set texture alpha
  // -----------------
  void SetTextureAlpha(unsigned char i_textureAlpha, CATVidState i_state = CATVidStateOff); 

  void SetInsertedIcon(const CATUnicodeString& i_name){SetIcon(i_name);};
  void SetText(const CATUnicodeString& i_text){SetLabel(i_text);};
  void SetTextHeight(unsigned int i_textHeight){SetFontHeight(i_textHeight);};

  // Set text color
  // --------------
  void SetTextColor(const unsigned char i_r, const unsigned char i_g, const unsigned char i_b, const unsigned char i_a, CATVidState i_state = CATVidStateOff);
  void SetTextColor(const CATVidColor& i_color, CATVidState i_state = CATVidStateOff);


  void SetTextAlignment(const CATVidHAlignment& i_hAlign = CATVidHAlignCenter, const CATVidVAlignment& i_vAlign = CATVidVAlignCenter);
  void GetTextAlignment(CATVidHAlignment& o_hAlign, CATVidVAlignment& o_vAlign) const;

  void SetTextMargin(unsigned int i_verticalMargin, unsigned int i_horizontalMargin);
  void GetTextMargin(unsigned int& o_verticalMargin, unsigned int& o_horizontalMargin) const;

  void SetTextFont(unsigned int i_textFont);//0:MessageFont; 1:CaptionFont

  // Set outline flag on text
  // ------------------------
  void SetOutlineFlag(const  CATBoolean i_outlineOnFlag, CATVidState i_state = CATVidStateOff);
  // Set border color
  // ----------------
  void SetBorderColor(const CATVidColor& i_color, CATVidState i_state = CATVidStateOff);

  // Change a color present inside a texture with another color
  // ----------------------------------------------------------
  void ColorizeTexture(const CATVidColor& i_color, float i_fromR, float i_fromG, float i_fromB);
  // Reset the list of colorized colors
  // ----------------------------------
  void ResetColorize();

  virtual void Update();

protected:
  virtual ~CATVidCtlRect ();

  virtual void UpdateStateView();

  void SetUseOnState(const CATBoolean i_useOnState){_useOnState = i_useOnState;};
  CATBoolean GetUseOnState(){return _useOnState;};
  void SetUseOverState(const CATBoolean i_useOverState){_useOverState = i_useOverState;};
  CATBoolean GetUseOverState(){return _useOverState;};
  void SetUseOverOnState(const CATBoolean i_useOverOnState){_useOverOnState = i_useOverOnState;};
  CATBoolean GetUseOverOnState(){return _useOverOnState;};

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlRect (CATVidCtlRect &);
  CATVidCtlRect& operator=(CATVidCtlRect& original);

  CATBoolean SetInternalColor(const unsigned char i_r, const unsigned char i_g, const unsigned char i_b, const unsigned char i_a, 
                              unsigned char& io_r, unsigned char& io_g, unsigned char& io_b, unsigned char& io_a);

private:
  void UpdateTextConstraints();

private:
  CATBoolean _useOnState;
  CATBoolean _useOverState;
  CATBoolean _useOverOnState;

  CATVidGPSquare* _pOffSquare;
  CATVidGPSquare* _pOffIconSquare;
  CATVidGPLabel*  _pOffLabel;

  CATVidGPSquare* _pDisableSquare;
  CATVidGPSquare* _pDisableIconSquare;
  CATVidGPLabel*  _pDisableLabel;

  CATVidGPSquare* _pOnSquare;
  CATVidGPSquare* _pOnIconSquare;
  CATVidGPLabel*  _pOnLabel;

  CATVidGPSquare* _pOverSquare;
  CATVidGPSquare* _pOverIconSquare;
  CATVidGPLabel*  _pOverLabel;

  CATVidGPSquare* _pOverOnSquare;
  CATVidGPSquare* _pOverOnIconSquare;
  CATVidGPLabel*  _pOverOnLabel;
};

//-----------------------------------------------------------------------

#endif
