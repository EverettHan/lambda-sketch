// COPYRIGHT Dassault Systemes 2011
//===================================================================
//
// CATCldResCharacteristicPoints.h
// Header definition of CATCldResCharacteristicPoints
// Analyse the input mesh to find the peaks, troughs and saddle points.
// The method used is :
// for each vertex which normal direction is quasi vertical :
//   - Find a ring limiting points.
//   - for all these points evaluate the slope and use the limite slope
//     value to determine if it is UP, DOWN or NULL.
//     if the slopes all around the ring are :
//     (all UP)                      => this vertex is  qualified as a trough.
//     (all DOWN)                    => this vertex is  qualified as a peak.
//     (nb UP >= 2 and nb DOWN >= 2) => this vertex is  qualified as a saddle.
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Mar. 2011  Creation: Code generated by the CAA wizard  DNR
//===================================================================
//
#ifndef CATCldResCharacteristicPoints_H
#define CATCldResCharacteristicPoints_H

#include "ExportedByCATCloudBasicResources.h"
#include "CATBoolean.h"

class ExportedByCATCloudBasicResources CATCldResCharacteristicPoints
{

  public:

    class T_Mesh {
    public:
        /*
        * GetNbPoints : Get the number of points of the mesh.
        */
        virtual int GetNbPoints () const = 0 ;
        /*
        * GetCoords : Get the coordinates of iNoPoint 'th' point of the mesh.
        */
        virtual void GetCoords (const int iNoPoint, double    oCoords[3]) const = 0 ;
        /*
        * IsAVertexToBeTreated : Returns 1 if the iNoVertex 'th' vertex is to be treated.
        */
        virtual int IsAVertexToBeTreated (const int     iNoVertex) const = 0;
        /*
        * GetNbTriangles : Get the number of triangles of the mesh.
        */
        virtual int GetNbTriangles () const = 0 ;
        /*
        * GetTriangle : Get the description of the iNoTriangle 'th' triangle of the mesh.
        * oParameters : - oNoVertices[3] the indices the 3 vertices of the triangle.  
        *               - oNoConnexes[3] the 3 neighbour triangles of the iNoTriangle 'th' triangle. 
        */
        virtual void GetTriangle (const int iNoTriangle,
                                  int       oNoVertices[3],
                                  int       oNoConnexes[3]) const = 0 ;
        /*
        * GetNeighbours : Get the neighbour triangles of the iNoVertex 'th' vertex.
        * returns the number of the triangles.  
        * oParameters   : oNoTriangles the triangles indices.
        *                 oNoTriangles must be deleted by the caller.
        */
        virtual int GetNeighbours ( const int     iNoVertex,
                                    int*&         oNoTriangles) const = 0;

        /*
        * GetBoundingBox : Get the bounding min max coordinates values of the mesh.
        * oParameters   : oXmin,oYmin,oZmin : minimum coordinates.
        *                 oXmax,oYmax,oZmax : maximum coordinates.
        */
        virtual void GetBoundingBox ( double& oXmin,double& oYmin,double& oZmin,
                                      double& oXmax,double& oYmax,double& oZmax) const = 0 ;


    };

    CATCldResCharacteristicPoints ();
    virtual ~CATCldResCharacteristicPoints ();
    //
    // Load the mesh
    //
    void LoadMesh (T_Mesh* iMesh);
    //
    // Evaluation of characteristic points the Mesh.
    //
    CATBoolean Run();
    //
    // SetSlopeValue
    // Set the  limite slope value used to evaluate
    // if the slope is up or down. By default is set
    // 0.1 (=> 10%).
    //
    void SetSlopeValue(const double iSlopeValue);
    //
    // Set ring radius.
    // Set the value of the ring radius.
    // By default it is 1/200 the diagonal of the bounding
    // box of the input mesh.
    //
    void SetRingRadius (const double iRadiusValue);
    //
    // GetPeaks.
    // Return the number of peaks detected.
    // The peaks are  vertices numbers or XYZ coordinates returned
    // in oPeakPoints array.
    // oPeakPoints is allocated in the method, it have to be
    // deleted by the calling method.
    //
    int GetPeaks(int *& oPeakPoints);
    int GetPeaks(double *& oPeakPoints);
    //
    // GetTroughs.
    // Return the number of troughs detected.
    // The troughs are vertices numbers or XYZ coordinates returned
    // in oTroughPoints array.
    // oTroughPoints is allocated in the method, it have to be
    // deleted by the calling method.
    //
    int GetTroughs(int *& oTroughPoints);
    int GetTroughs(double *& oTroughPoints);
    //
    // GetSaddles.
    // Return the number of Saddles detected.
    // The Saddles are vertices numbers or XYZ coordinates returned 
    // in oSaddlePoints array,.
    // oSaddlePoints is allocated in the method, it have to be
    // deleted by the calling method.
    //
    int GetSaddles(int *& oSaddlePoints);
    int GetSaddles(double *& oSaddlePoints);

  private:
    //
    // Methods
    //
    CATBoolean isInSphere( double P0[3], 
                           double P1[3], 
                           double iCentre[3],
                           double iSqRadius,
                           int& oNbIntersection, 
                           double oPoints[6]);
    //
    CATBoolean FindPointsOnRing( const int iVertex, 
                                 const double iSqRadius, 
                                 int& oNbPoints, 
                                 double*&oTabpoints );
    //
    void ComputeVertexNormal ( const int iNoVertex, 
                               double  oNormal[3]) const;
    //
    void ComputeTriangleNormal ( const int iNoTriangle, 
                               double  oNormal[3]) const;
    //
    void GetNeighbours ( const int iNoVertex,
                         const int ilevel,
                         int *& olevels,
                         int *& oVertices) const;

    //
    // Datas
    //
    int            _nbpeaks;
    int            _nbtroughs;
    int            _nbsaddles;
    int*           _peaks;
    int*           _troughs;
    int*           _saddles;
    double         _LimitSlopeValue;
    double         _RindRadius;
    T_Mesh*        _Mesh;
    //
};

//-----------------------------------------------------------------------

#endif
