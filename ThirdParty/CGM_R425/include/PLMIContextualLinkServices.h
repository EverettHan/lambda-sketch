// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIContextualLinkServices.h
// Define the PLMIContextualLinkServices interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2009  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIContextualLinkServices_H
#define PLMIContextualLinkServices_H

/**
 * @level Protected
 * @usage U3
 */

#include "PLMModelerContextualLinkItf.h"
#include "CATBaseUnknown.h"
#include "PLMOccurrenceContextualProperty.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMModelerContextualLinkItf IID IID_PLMIContextualLinkServices;
#else
extern "C" const IID IID_PLMIContextualLinkServices ;
#endif

// --- Forward declaration
class PLMContextualLinkConsumer;
class PLMIOmbVirtualObjectDescriptor_var;
class CATOmbVOUpdateFlavour;
class CATIOmbFunction ;
class CATIOmbProxySpecifications ;

#define ContextualLinkServicesComponent "PLMContextualLinkServices"

//------------------------------------------------------------------

/**
 * Interface providing the main services to manage contextual links & retrieve information on them.
 *
 * @example
 *  PLMIContextualLinkServices *pContextualLinkServices = NULL;
 *  HRESULT Hr = ::CATInstantiateComponent(ContextualLinkServicesComponent, IID_PLMIContextualLinkServices, (void **)&pContextualLinkServices);
 */
class ExportedByPLMModelerContextualLinkItf PLMIContextualLinkServices: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
   * This enumeration represents the kind of links that can be created.
   *
   * @param None
   *     Undefined link type.
   * @param DirectIntraComponent
   *     Direct link inside a component.
   * @param DirectInterComponent
   *     Direct link between two components pointing a reference.
   * @param ContextualInterComponent
   *     Contextual link between two components.
   * @param DirectInterComponentOnOCccurrence
   *     Direct link between two components pointing an occurrence.
   */
  enum LinkType {
    None,
    DirectIntraComponent,
    DirectInterComponent,
    ContextualInterComponent, 
    DirectInterComponentOnOccurrence
  };

  /**
   *  Returns the contextual property of a contextual component.
   *
   *  @param ispOccurrenceOfContextualComponent
   *      A virtual object descriptor corresponding to an occurrence of a contextual component. <br>
   *      Input Parameter. <br>
   *      This parameter MUST NOT be provided by caller as NULL_var. This method returns an error otherwise.
   *  @param  oContextualProperty
   *      Current contextual property of the given occurrence of contextual component. <br>
   *      Output parameter.
   *  @return
   *      <code>S_OK</code> if the method succeeds. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetContextualProperty(PLMIOmbVirtualObjectDescriptor_var &ispOccurrenceOfContextualComponent, PLMOccurrenceContextualProperty::ContextualProperty &oContextualProperty) = 0;

  /**
   * Computes the kind of link to create, and computes information to enable its creation. <br>
   * If the link type (oLinkTypeToCreate) is:
   *  - DirectIntraComponent    : ospComputedInputDescForCtxLinkCreation is valuated and corresponds to ispUserDescOfInput. other outputs are not valuated.
   *  - DirectInterComponent    : ospComputedInputDescForCtxLinkCreation is valuated and corresponds to ispUserDescOfInput. other outputs are not valuated.
   *  - ContextualInterComponent: ospComputedInputDescForCtxLinkCreation and ospComputedContextDescForCtxLinkCreation will correspond to the minimum context that can be used to
   *                              create the contextual link (taken into account the other contextual links of the contextual component if they exist.)
   *                  			      In case of ispUserDescOfContext being a sub-occurrence of existing context, instances will be added to both Input and context until
   *							                ospComputedInputDescForCtxLinkCreation is equivalent to existing context.
   *                              Note 1: This context extension can be unexpected from a user point of view, therefore the application might want to refuse the link creation or 
   *                              at least to warn the user of the context change
   *							                Note 2: This context extension can cause a change of the relative position matrix in some case of flexibility.
   *                              This case can also be unexpected from a user point of view, therefore the application might also want to refuse the link creation or at least to
   *                              warn the user of the context change implying a position modification.
   *  							              if the exisisting context is neither loaded nor compatible with ispUserDescOfContext, method returns E_FAIL and  oChangeContextIsNeeded = TRUE
   *                              oChangeContextIsNeeded will be set to TRUE if the existing context has to be changed.
   *                              <b>Note</b>: ospComputedInputDescForCtxLinkCreation will be computed using available publications shortcuts _except_ if
   *                              iDisableComputeOnPubShortcuts is set to TRUE.
   *
   *  @param  ispUserDescOfInput
   *      Target of the link to create. <br>
   *      Input Parameter. <br>
   *      This parameter MUST NOT be provided by caller as NULL_var. This method returns an error otherwise.
   *  @param  ispUserDescOfContext
   *      The object that will be pointing ispUserDescOfInput described by a VODescriptor, or the occurrence of a contextual component
   *      where the (contextual) link could be created. <br>
   *      Input Parameter. <br>
   *      This parameter MUST NOT be provided by caller as NULL_var. This method returns an error otherwise.
   *  @param  oLinkTypeToCreate
   *      The link type to create.
   *      Output parameter. <br>
   *  @param  ospComputedInputDescForCtxLinkCreation
   *      This is the Input of the contextual link to create, using @ref CreateContextualLink. <br>
   *      It is valuated only when link type is ContextualInterComponent.
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL_var. This method returns an error otherwise. <br>
   *  @param  ospComputedContextDescForCtxLinkCreation
   *      This is the Context of the contextual link to create, using @href CreateContextualLink. <br>
   *      It is valuated only when link type is ContextualInterComponent.
   *      Output parameter. <br>
   *      This parameter MUST be provided by caller as NULL_var. This method returns an error otherwise. <br>
   *  @param  oExtendCurrentContextIsNeeded
   *      Specify if the link type is ContextualInterComponent that context of existing contextual links must be changed(extanded) or not.
   *      Output parameter. <br>
   *  @param  iDisableComputeOnPubShortcuts
   *      Disable or enable the publication shortcut computation if the link type is ContextualInterComponent. FALSE by default. <br>
   *      Input Parameter. <br>
   *  @param  iManageFlexibility
   *      Disable or enable the management of flexibility in the input paths. Result would be minimum flexible context if activated and rigid minimum if not.
   *      note that Flexible rigid context path size is always greater or equal to minimum rigid context path's size
   *      TRUE by default. <br>
   *      Input Parameter. <br>
   *  @return
   *      <code>S_OK</code> if the method succeeds. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT GetInfoForContextualLinkCreation(PLMIOmbVirtualObjectDescriptor_var &ispUserDescOfInput,
                                                   PLMIOmbVirtualObjectDescriptor_var &ispUserDescOfContext,
                                                   LinkType &oLinkTypeToCreate,
                                                   PLMIOmbVirtualObjectDescriptor_var &ospComputedInputDescForCtxLinkCreation,
                                                   PLMIOmbVirtualObjectDescriptor_var &ospComputedContextDescForCtxLinkCreation,
                                                   CATBoolean &oExtendCurrentContextIsNeeded,
                                                   CATBoolean iDisableComputeOnPubShortcuts = FALSE,
												                           CATBoolean iManageFlexibility = TRUE )=0;

  /**
   * Creates a contextual link. <br>
   * If a context is already defined on the contextual component, the given context (ispContext) must be the same than the current context,
   * except if iChangeContextIfNeeded is set to TRUE. <br>
   * If the context has to be changed it can only be changed to a <u>higher</u> level.
   *
   *  @param  iConsumer
   *      The object that will consume the created contextual link. <br>
   *      Input Parameter.
   *  @param  ispInput
   *      The virtual object descriptor that describe the Input of the contextual link.
   *      Input Parameter. <br>
   *      This parameter MUST NOT be provided by caller as NULL_var. This method returns an error otherwise.
   *  @param  ispContext
   *      The virtual object descriptor that describe the Context of the contextual link. <br>
   *      Input Parameter. <br>
   *      This parameter MUST NOT be provided by caller as NULL_var. This method returns an error otherwise.
   *  @param  iChangeContextIfNeeded
   *      Induce a context change, if needed, to insert the new contextual link. <br>
   *      In this case, the context change will be performed before creation of new Link. <br>
   *      FALSE by default. <br>
   *      Input Parameter.
   *  @param  ipUpdateContract
   *      An update contract. <br>
   *      NULL by default, meaning that the being created contextual link will be sensitive to PathAndLast. <br>
   *      Input Parameter.
   *  @param  ipFunction
   *      A function specification. <br>
   *      NULL by default. <br>
   *      Input Parameter.
   *  @param  ipProxySpecs
   *      The proxy specfications. <br>
   *      NULL by default. <br>
   *      Input Parameter.
   *  @return
   *      <code>S_OK</code> if the method succeeds and the contextual link has been created. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT CreateContextualLink(PLMContextualLinkConsumer &iConsumer, PLMIOmbVirtualObjectDescriptor_var &ispInput, 
                                       PLMIOmbVirtualObjectDescriptor_var &ispContext, CATBoolean iChangeContextIfNeeded = FALSE,
                                       CATOmbVOUpdateFlavour *ipUpdateContract = NULL, 
                                       CATIOmbFunction * ipFunction = NULL, CATIOmbProxySpecifications * ipProxySpecs = NULL) = 0;

  /**
   * Removes a contextual link.
   *
   *  @param iConsumer
   *      The object consuming the contextual link.
   *  @param  ibRemovePositionInListConsumerKey
   *      If set to TRUE (default value) and if consumer attribute is a list, position will be removed in the list. That is to say that the size of the list will decrease by one.<br>
   *      If set to FALSE or if consumer attribute is not a list, consumer attribute will be unset, that is to say that it will be set to NULL.<br>
   *      Input Parameter. <br>
   *  @return
   *      <code>S_OK</code> if the method succeeds and the contextual link has been removed. <br>
   *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
   *      <code>E_FAIL</code> otherwise. <br>
   */
  virtual HRESULT RemoveContextualLink(PLMContextualLinkConsumer &iConsumer, CATBoolean ibRemovePositionInListConsumerKey = TRUE) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIContextualLinkServices, CATBaseUnknown);

//------------------------------------------------------------------

#endif
