// COPYRIGHT Dassault Systemes 2002
//===================================================================
//
// CATILoadModeListener.h
//   listener associated to CATILoadMode
//
//===================================================================
//
// Usage notes:
//   Interface defining a listener to changes in load mode
//
//===================================================================
//
//  Jul 2002  Creation: Code generated by the CAA wizard  
//===================================================================
#ifndef CATILoadModeListener_H
#define CATILoadModeListener_H

/**
 * @level Private
 * @usage U3
 */

#include "AD0XXBAS.h"
#include "CATBaseUnknown.h"
class CATIContainer;
class CATUnicodeString;
class CATDocument;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByAD0XXBAS IID IID_CATILoadModeListener;
#else
extern "C" const IID IID_CATILoadModeListener ;
#endif

//------------------------------------------------------------------

/**
 * Describe the functionality of your interface here
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedByAD0XXBAS CATILoadModeListener: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * inform a container has just been loaded
     * @param iDoc
     *        document
     * @param iContainer
     *        container which is loaded
     * @return
     *        S_OK, E_FAIL if not available
    */
    virtual HRESULT  ContainerLoaded(CATIContainer* iCont)=0;// to be deleted
    virtual HRESULT  ContainerLoaded(CATDocument* iDoc,CATIContainer* iCont)=0;

    /**
     * inform a container is going to be unloaded
     * @param iDoc
     *        document
     * @param iContainer
     *        container which is unloaded
     * @return
     *        S_OK, E_FAIL if not available
    */
    virtual HRESULT  ContainerUnloaded(CATDocument* iDoc,CATIContainer* iCont)=0;

    /**
     * inform loadmode is changed
     * @param iDoc
     *        document
     * @param iInitialMode
     * @param iFinalMode
     * @return
     *        S_OK, E_FAIL if not available
    */
    virtual HRESULT  ModeChanged(CATDocument* iDoc,const CATUnicodeString& iInitialMode,const CATUnicodeString& iFinalMode)=0;

    /**
     * inform document is going to be removed
     * @param iDoc
     *        document
     * @return
     *        S_OK, E_FAIL if not available
    */
    virtual HRESULT  DocumentRemoved(CATDocument* iDoc)=0;

    /**
     * inform a specific change occurred in the container
     * @param iDoc
     *        document
     * @param iContainer
     *        container
     * @param iCode
     *        code specific to this container and this kind of change (user-defined)
     * @return
     *        S_OK, E_FAIL if not available
    */
    virtual HRESULT  SpecificChange(CATDocument* iDoc,CATIContainer* icont, const char* iCode)=0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
