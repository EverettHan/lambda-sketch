// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMCompStatement.h
// Define the CATIPLMCompStatement interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Oct 2003  Creation: jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompStatement_H
#define CATIPLMCompStatement_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATUnicodeString.h"
#include "CATPLMCompletionSuggestionOutput.h"
#include "CATPLMQueryFilterEnum.h"
#include "CATPLMRepositoryName.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompStatement;
#else
extern "C" const IID IID_CATIPLMCompStatement ;
#endif

class CATIPLMQueryFilter;
class CATString;
class CATUnicodeString;
class CATIPLMCompRecordReadSet;
class CATPLMValidityResult;
class CATLISTV(CATPLMValidityResult);

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
 *
 * Provides basic methods for executing statements and retrieving results.

 * Only one RecordSet per Statement can be open at any point in time. 
 * Therefore, if the reading of one RecordSet is interleaved with the reading of another, each must have been generated by different Statements.
 *
 * Many Providers support Fetch Query. The query Result returned is only subsets of results and Fetch Query provides a sequence of multiple results. 
 * User can access specific page of results, (a specific RecordReadSet) from this sequence.
 */
class ExportedByCATPLMServicesItf CATIPLMCompStatement: public CATBaseUnknown
{
  CATDeclareInterface;
  
public: 
  
  /**
  * Returns the name of the object. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param oName
  *   The name
  */
  virtual HRESULT GetName ( CATUnicodeString **oName) = 0;

  /** 
  * @param oFilter [out, CATBaseUnknown#Release]
  *    a CATIPLMQueryFilter interface provides access to the query filter
  *
  * @return
  *    Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Query is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *   </dl>
  */
  virtual HRESULT GetQueryFilter (CATIPLMQueryFilter** oFilter, CATPLMQueryFilterEnum::QueryMode iQueryMode) = 0; 
  
  // @deprecated
  virtual HRESULT GetQueryFilter (CATIPLMQueryFilter** oFilter) = 0;
  // @deprecated
  virtual HRESULT GetQueryFilter (CATIPLMQueryFilter** oFilter, QueryMode iQueryMode) = 0; 
  
  /**
  * Execute a query.
  *
  * OPEN_QUERY: 
  * Suppose you do on CATIPLMQueryFilter AddObjectToTreat(plmidRef_1),...,AddObjectToTreat(plmidRef_N)
  * By default, order is not kept in answer on CATIPLMCompRecordReadSet. By default, you receive CATIPLMRecordRead (plmidRefXXX),..., CATIPLMRecordRead (plmidRefYYY).
  * To keep order, please use CATIPLMQueryFilter::AddOrderBy(...), CATIPLMQueryFilter::AddExtensionOrderBy(...).
  *
  * @param oRecordSet [out, CATBaseUnknown#Release]
  *    a CATIPLMCompRecordReadSet interface provides access to the result . 
  * @return
  *    Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Query is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the query. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Query( CATIPLMCompRecordReadSet      ** oRecordSet) = 0; 
  
  /**
  * Returns the current result as an interface providing access to the result .. 
  * @param oRecordSet [out, CATBaseUnknown#Release]
  *    The Record set. NULL if no query has been executed.
  */
  virtual HRESULT GetRecordSet( CATIPLMCompRecordReadSet      ** oRecordSet) =0;

  /** 
  * Returns the number of RecordSet matching the Query Criteria. 
  * @param oRecordSetCount
  *    the number of RecordSet matching the Criteria.
  *  <dl>
  *     <dt>0</dt><dd>If we can’t process the number of RecordSet. In That Case, Access the various RecordSet sequentially by incrementing MoreRecordSet As far as there is no more recordSet.</dd>
  *     <dt>1</dt><dd>if no Page size has been specified or If Targeted Connection doesn’t support Fetch Query </dd>
  *     <dt>>1</dt><dd>Use MoreRecordSet method to access RecordSet.</dd>
  *  </dl>
  * @return 
  *    E_FAIL if ::Query Method hasn’t been called before
  */
  virtual HRESULT RecordSetCount(int * oRecordSetCount) = 0;

  /** 
  * Moves to the Statement's result at the given index. Query Method has to be called before.
  * This method also implicitly closes the current RecordSet obtained with GetRecordSet.
  * iIndex max can be got by calling RecordReadSetCount ( 0< iIndex )
  * @param iIndex
  *    the index. IIndex starts to 1.
  * @param oRecordSet [out, CATBaseUnknown#Release]
  *    The Record set. NULL if no query has been executed or if S_FALSE
  * @return
  *    Error code of function :
  *   <dl>
  *     <dt>S_OK</dt><dd>Query is successfully.</dd>
  *     <dt>S_FALSE</dt>
            <dd>if there are no more result</dd>
            <dd>if Targeted Connection doesn’t support Fetch Query.</dd>
            <dd>if no Page size has been specified.</dd>
            <dd>if Query Method hasn’t been called before</dd>
  *     <dt>E_FAIL</dt><dd>A problem occurs during the query. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT MoreRecordSet(int iIndex, CATIPLMCompRecordReadSet ** oRecordSet) = 0;

  /**
  * Releases this Statement object's resources immediately. When a Statement is closed, its current RecordSet, if one exists, is also closed 
  */
  virtual HRESULT Close() =0;

  /**
  * Returns the number of total results of the current query. 
  * @param oNumberOfResults
  *    The number of results.
  * @return
  *    S_OK : The number is the official number of results.
  *    S_FALSE : The number is considered as the maximum number of result (the true value may be lower).
  *    E_FAIL  : A problem occurs.
  */
  virtual HRESULT QueryCount( int * oNumberOfResults ) =0;

  /**  
  * Request the list of Taxon Categories available/usable for this Query.
  * <br><b>Role:</b>This method allows to get the list of Taxon Categories.
  * @param oTaxonCategoriesList 
  *    The list of Taxon Categories which can be used by this Query (in SEARCH mode). 
  */
  virtual HRESULT GetDefaultTaxonCategories( CATListOfCATUnicodeString & oTaxonCategoriesList ) = 0;

  /**
  * Launches a validity query.
  * @param oResult
  *    The list of validity result.
  * @return
  *    S_OK : The list has no error.
  *    S_FALSE : At least one element of the list contains an error.
  *    E_FAIL  : A problem occurs during the query.
  */
  virtual HRESULT QueryValidity( CATLISTV(CATPLMValidityResult) &oResult ) =0;

  /**
  * Gets a suggestion of completion for a given string.
  * @param iStr
  *    The string to be completed.
  * @param oOutput
  *    The Completion Suggestion result.
  * @return
  *    S_OK : The list has no error.
  *    E_INVALIDARG : iStr is empty or oOutput is not empty.
  *    S_FALSE  : There has been an error during the suggestions recovery.
  *    E_FAIL  : A problem occurs during the query.
  */
  virtual HRESULT GetCompletionSuggestion( CATUnicodeString iStr, CATPLMCompletionSuggestionOutput &oOutput ) =0;

  virtual CATPLMRepositoryName GetRepositoryName() const = 0;
};

#endif


