//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/10/13
//===================================================================
// CATAdpDWSLogStatus.cpp
// Header definition of class CATAdpDWSLogStatus
//===================================================================
//
// Usage notes:
//	Class dedicated to define Designer Workspace logging status.
//
//===================================================================
//  2010/10/13 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1
*/ 
#ifndef CATAdpDWSLogStatus_H
#define CATAdpDWSLogStatus_H

#include "CATPLMIntegrationAccessRestrictedDWSUse.h"

//----System fwk
#include "CATCollec.h"										//JSOGROUP.m
#include "CATErrorDef.h"									//JS0GROUP.m

class CATIAdpPLMIdentificator;
class CATIAdpPLMIdentificator_var;
class CATError;
class CATPLMIDHashTable;
class CATLISTP(CATIAdpPLMIdentificator);

//-----------------------------------------------------------------------

/**
* Class dedicated to define Designer Workspace logging status.
* <br><b>Role</b>: It is a iterator which associates a Designer Workspace component to a logging status.
*/
class ExportedByCATPLMIntegrationAccessRestrictedDWSUse CATAdpDWSLogStatus
{
public:

	// Standard constructors and destructors
	// -------------------------------------
	CATAdpDWSLogStatus ();
	virtual ~CATAdpDWSLogStatus ();

	/**
	* Definition of the possible values of objects to log into a Designer Workspace.
	* <tt> Possible status:</tt>
	* <dl>
	* @param <tt>CATPLMWorkspaceUnknown</tt>   <dd>No definition is available for the object.
	* @param <tt>CATPLMWorkspaceNew</tt>       <dd>Object must be logged as created in Designer Workspace.
	* @param <tt>CATPLMWorkspaceModified</tt>  <dd>Object must be logged as modified in Designer Workspace.
	* @param <tt>CATPLMWorkspaceDeleted</tt>   <dd>Object must be logged as deleted in Designer Workspace.
	* @param <tt>CATPLMWorkspaceNewVersion</tt><dd>Object and its children must be logged as created in Designer Workspace.
	* </dl>
	*/
	enum CATPLMWorkspaceLogStatus 
	{
		CATPLMWorkspaceUnknown		=  0,
		CATPLMWorkspaceNew			=  1,
		CATPLMWorkspaceModified		=  2,
		CATPLMWorkspaceDeleted		=  3,
		CATPLMWorkspaceNewVersion	=  4
	};

	/**
	* Start the enumeration of the log status.
	* <br><b>Role:</b>This method enables to initialize the enumeration of the log status.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*  </ul>
	*/
	HRESULT dwsStartLogStatusEnumeration();

	/**
	* Enumerates the log status available.
	* <br><b>Role:</b>This method enables to enumerate the set of log status.
	*
	* @param ospIAdpId [out]
	* The identifier of the component.
	* @param oStatus [out]
	* The log status of the component.
	* @param opError [out, IUnknown#Release]
	* The logging error of the components if exists.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>S_FALSE</code> if no more result is available. All the status of the set were parsed.</li>
	*   <li><code>E_UNEXPECTED</code> if the iteration was not started.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*  </ul>
	*/
	HRESULT dwsNextLogStatus(CATIAdpPLMIdentificator_var& ospIAdpId, CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus& oStatus, CATError*& opError);

	/**
	* Add a new component status to the scope.
	* <br><b>Role:</b>This method enables to add a new component status to the scope.
	*
	* @param ipIAdpId [in]
	* The indentifier to add.
	* @param iStatus [in]
	* The status to add.
	* @param ipError [in]
	* The error to add. Can be NULL.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>E_INVALIDARG</code> if the given @href CATIAdpPLMIdentificator is invalid.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*  </ul>
	*/
	HRESULT dwsAddLogStatus(CATIAdpPLMIdentificator* ipIAdpId, const CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus& iStatus, CATError* ipError = NULL);
	HRESULT dwsAddLogStatusList(const CATLISTP(CATIAdpPLMIdentificator)& ipIAdpIdsList, const CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus& iStatus);

	/**
	* Determine the number of identifiers in the log status list.
	* <br><b>Role:</b>This method enables to determine the number of identifiers in the log status list.
	*
	* @param oStatusSize [out]
	* The size of list of indentifiers in the scope.
	*
	* @return
	*   <ul>
	*   <li><code>S_OK</code> if everything ran ok.</li>
	*   <li><code>E_FAIL</code> if a fatal error occured during the operation. Nothing was done during the operation.</li>
	*  </ul>
	*/
	HRESULT dwsComputeLogStatusSize(int& oStatusSize);

private:

	// Copy constructor and equal operator
	// -----------------------------------
	CATAdpDWSLogStatus (CATAdpDWSLogStatus &);
	CATAdpDWSLogStatus& operator=(CATAdpDWSLogStatus&);

	CATPLMIDHashTable* _LogStatus;
	unsigned int _LogStatusEnumerationIndex;
};

//-----------------------------------------------------------------------

class CATAdpDWSLogValues
{
public:
	CATAdpDWSLogValues(CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus iStatus, CATError* ipError);
	virtual ~CATAdpDWSLogValues(void);

 /**
  * dwsGetErrorValue.
  * @param opError [out, IUnknown#Release]
  */
	HRESULT dwsGetErrorValue(CATError*& opError);

	HRESULT dwsGetLogStatusValue(CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus& oStatus);

private:
	CATError* _pError;
	CATAdpDWSLogStatus::CATPLMWorkspaceLogStatus _bStatus;
};

//-----------------------------------------------------------------------

#endif
