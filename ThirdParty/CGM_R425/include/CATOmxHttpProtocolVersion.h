//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/17
//===================================================================
// CATOmxHttpProtocolVersion.cpp
// Header definition of class CATOmxHttpProtocolVersion
//===================================================================
//
// Usage notes:
// Represents a protocol version. The "major.minor" numbering scheme is used to indicate versions of the protocol.
// This class defines a protocol version as a combination of protocol name, major version number, and minor version number.
//
// Adapted from apache http: http://hc.apache.org/httpcomponents-core-ga/httpcore/apidocs/org/apache/http/ProtocolVersion.html?is-external=true
//
//===================================================================
//  2018/05/17 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATOmxHttpProtocolVersion_H
#define CATOmxHttpProtocolVersion_H

#include "CATOmxHttp.h"
#include "CATOmxKeyString.h"
#include "CATUnicodeString.h"
#include "CATOmxCollecManager.h"

class ExportedByCATOmxHttp CATOmxHttpProtocolVersion
{
public:
  /*
  * Create a protocol version designator.
  *
  * @parameters
  *   iProtocol - the name of the protocol, for example "HTTP"
  *   iMajor - the major version number of the protocol
  *   iMinor - the minor version number of the protocol
  */
  CATOmxHttpProtocolVersion();
  CATOmxHttpProtocolVersion(const CATOmxKeyString& iProtocol, int iMajor, int iMinor);
  CATOmxHttpProtocolVersion(const CATOmxHttpProtocolVersion& iOther);
  CATOmxHttpProtocolVersion& operator=(const CATOmxHttpProtocolVersion& iOther);
  virtual ~CATOmxHttpProtocolVersion();

  /*
  * Returns the name of the protocol.
  */
  CATOmxKeyString GetProtocol() const;

  /*
  * Returns the major version number of the protocol.
  */
  int GetMajor() const;

  /*
  * Returns the minor version number of the HTTP protocol.
  */
  int GetMinor() const;

  /*
  * Returns true if the procotol version is null.
  *
  * @return
  *   true if the protocol version is null, false otherwise.
  */
  bool IsNull() const;

  /*
  * Converts this protocol version to a string.
  * A protocol version string, like "HTTP/1.1"
  */
  CATUnicodeString ToString() const;

  /**
  * Compares both protocol versions.
  * @return
  *   -1 : The current procotol version is before the compared one.
  *   0  : The current procotol version is equal to the compared one.
  *   +1 : The current procotol version is after the compared one.
  */
  int Compare(const CATOmxHttpProtocolVersion& iOther) const;

  /**
  * ComputeHashKey
  */
  unsigned int ComputeHashKey() const;

private:
  CATOmxKeyString _Protocol;
  int _Major;
  int _Minor;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATOmxHttpProtocolVersion>::manager();

#endif
