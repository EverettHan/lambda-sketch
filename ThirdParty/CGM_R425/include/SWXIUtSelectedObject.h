//===================================================================
// COPYRIGHT Dassault 2010/09/02
//===================================================================
// SWXIUtSelectedObject.cpp
// Header definition of class SWXIUtSelectedObject
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/09/02 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef SWXIUtSelectedObject_H
#define SWXIUtSelectedObject_H

#include "SWXUtBasePacket.h"
#include "CATBaseUnknown.h"
#include "CATMathTransformation.h"
#include "SWXIUtSelectable.h"

class CATListValCATBaseUnknown_var;
class CATMathDirection;
class CATMathPlane;
class CATMathPoint;
class CATMathPoint2D;
class CATMathTransformation;
class CATUnicodeString;
class SWXUtOperationContext;

extern ExportedBySWXUtBasePacket  IID IID_SWXIUtSelectedObject ;

// Don't change this interface without review by HFS, please.

class ExportedBySWXUtBasePacket SWXIUtSelectedObject : public CATBaseUnknown
{
	CATDeclareInterface;

public:
	virtual HRESULT InitializeFromSerialization(const SWXUtOperationContext* iOpContext, const CATUnicodeString& iSerialization) = 0;
	virtual HRESULT Serialize(const SWXUtOperationContext* iOpContext, CATUnicodeString& oSerialization) = 0;

	virtual void InitializeWithObject(const SWXIUtSelectable_var& iSelectedObject) = 0;
	virtual void InitializeWithObjectIn3D(const SWXIUtSelectable_var& iSelectedObject, const CATMathPoint& iSelectionPoint) = 0;
	virtual void InitializeWithObjectOnPlane(const SWXIUtSelectable_var& iSelectedObject, const CATMathPoint2D& iSelectionPoint, const CATMathPlane& iPlane) = 0;
	virtual void InitializeWithPointOnPlane(const CATMathPoint2D& iSelectionPoint, const CATMathPlane& iPlane) = 0;

	virtual void SetViewOfSelection(const CATBaseUnknown_var iView) = 0;
	virtual void SetOriginalLeafObject(const SWXIUtSelectable_var& iSelectedObject) = 0;
	
	virtual HRESULT GetPickPointNormal(CATMathDirection& iSelectionPoint) const = 0;
	virtual void SetPickPointNormal(const CATMathDirection& iSelectionPoint) = 0;
	
	virtual bool IsSelectionSeed() const = 0;
	virtual void SetIsSelectionSeed(const bool ibSeed = true) = 0;

	virtual HRESULT Get2DPointAndPlane(CATMathPoint2D& oPoint, CATMathPlane& oPlane) const = 0;
	virtual SWXIUtSelectable_var GetObject() const = 0;
	virtual SWXIUtSelectable_var GetUnimportedObject() const = 0;
	virtual SWXIUtSelectable_var GetOriginalLeafObject() const = 0;
	virtual CATBaseUnknown_var GetOriginalContextOccurrence() const = 0;

	virtual HRESULT Get3DPoint(CATMathPoint& oPoint) const = 0;
	virtual void Set3DPoint(const CATMathPoint& iPickPoint) = 0;
	virtual HRESULT Get3DPoint(CATMathPoint& oPoint, CATMathTransformation& iXf) const = 0;
	virtual CATBaseUnknown_var GetViewOfSelection() const = 0;

	virtual HRESULT GetOrEstimate3DAttachmentPoint( CATMathPoint& oPoint, const CATMathTransformation& iActiveComponentToProductTransform ) const = 0;

	// This is a reconstructed path - don't be tempted to use it to get information
	// about the selection.
	virtual CATListValCATBaseUnknown_var ReconstructPath() = 0;

	virtual void SetObjectSerialization(const CATUnicodeString& iSerialization) = 0;
	
	virtual CATMathTransformation GetXformToActiveContext() const = 0;
	virtual void SetXformToActiveContext(const CATMathTransformation& iXform) = 0;

	// N13: save the import object flag in here for now
	virtual bool GetImportFlag() const = 0;
	virtual void SetImportFlag(bool iF) = 0;
	virtual int GetKeepLinkFlag() const = 0;
	virtual void SetKeepLinkFlag(int iF) = 0;
	virtual bool IsImported() const = 0;

	virtual bool GetAutoResolveFlag() const = 0;
	virtual void SetAutoResolveFlag(bool iF) = 0;

	virtual bool IsOutOfContext() const = 0; //To check if a selection is out of context.
	virtual bool IsSynthesisObject() const = 0; //To check if a selection is mechanism synthesis object
};

CATDeclareHandler( SWXIUtSelectedObject, CATBaseUnknown );

#endif
