#ifndef CATSoftwareModification_h
#define CATSoftwareModification_h

// COPYRIGHT DASSAULT SYSTEMES 2006 
/**
* @CAA2Level L1
* @CAA2Usage U1
*/ 

#include "ExportedByCATMathStream.h"
#include "CATBaseUnknown.h"
#include "CATCGMNewArray.h"

class CATSoftwareConfiguration;

#ifdef _CAT_ANSI_STREAMS
#include <iosfwd.h>
#else
class ostream;
#endif
class CATMathStream;
class CATCGMOutput;
class CATSoftwareModificationDebug;

/**
* Class defining a software modification.
* The CATSoftwareConfiguration and CATSoftwareModification classes allow you to modify the code of a 
* topological operator while keeping the upwards compatibility of the data generated by the operator.
* If you create and save a feature with a certain code level, any attempt to modify this feature later on with
* a new algorithm will apply the level of code used prior to saving the feature. This guarantees no regression
* in the operator behaviour.
* By using the versioning mechanism, you can store the code level which is used to create a feature and
* manage the code levels to be used for future calls. 
* <p>
* <b>Example</b>
*    <pre>
*    IID ModifId = { 0xa3208510, 0xe070, 0x11d3,{0xb0, 0xa8, 0x4c, 0x54, 0x01, 0x00, 0x00, 0x00}};
*    CATSoftwareModification Modif(ModifId,2);
*    ...
*    my_operator::Run()
*    CATSoftwareConfiguration* Config;
*    Config = GetConfig();  
*    Config = AddModification(Modif);
*    int Level = Config->GetModificationLevel(Modif);
*    switch(Level)
*    {
*       case 0 : // initial version
*            {
*               ...
*               break;
*             }
*       case 1 : // version 1
*             {
*               ...
*               break;
*             }
*       case 2 :  // version 2
*             {
*                ... 
*                break;
*              }
*       default :
*              {
*                ... 
*                break;
*              }
*      }
*    </pre>
*/
class ExportedByCATMathStream CATSoftwareModification
{
   friend class CATSoftwareModificationDebug;
public:
    
    /**
    * Retrieves a CATSoftwareModification from its IID.
    * @param iModificationID
    * The given (code) modification identified by its IID.
    * @return
     * The modification (a NULL pointer if the CATSoftwareModificationis not found).
    */
    static CATSoftwareModification* GetModification( const IID &iModificationID);

    /**
    * Constructs a CATSoftwareModification.
    * @param iModificationID
    * The CATSoftwareModification identifier.
    * @param iLevel
    * The current level of the modification. The initial level should be 0. 
    **/
                  CATSoftwareModification( const IID &ModificationId, short iLevel);

    /**
    * @nodoc
    * NOT TO BE USED
    **/
                 ~CATSoftwareModification();
    
     /**
    * Retrieves the IID of a mofification.
    * @return
     * The identifier of the modification.
    */
    const IID   * GetModificationId() const;

    /**
    * Retrieves the current level of a mofification.
    * @return
     * The level of the modification.
    */
          short   GetCurrentLevel() const;
    
    /**
    * Modifies the current level of a mofification.
    * @param iLevel
     * The new level of the modification.
    */
          void    SetCurrentLevel(short iLevel);

    /**
    * Dumps the content of a CATSoftwareModification;
    * @param os
     * The stream where the CATSoftwareModification is to be dumped.
    */
          void    Dump(ostream & os);

    /**
    * @nodoc
    **/
          void    Dump(CATCGMOutput & cgm);
    /**
    * @nodoc
    **/
    CATCGMNewClassArrayDeclare;

private :
    static CATSoftwareModification* _RootModification;

           CATSoftwareModification* _TopModification;
           CATSoftwareModification* _LeftModification;
           CATSoftwareModification* _RightModification;
           IID                      _ModificationId;
           short                    _CurrentLevel;
};
#endif
