//===================================================================

//===================================================================
// SWXUtUserSettings.cpp
// Header definition of class SWXUtUserSettings
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/06/07 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtUserSettings_H
#define SWXUtUserSettings_H

#include "SWXUtGeneral.h"
#include "CATUnicodeString.h"
class CATSysSettingRepository;

//--------------------------------------------------------------------------
// Read/Write values in a CATSettings file
//
// Usage:   Use the static methods ReadOneSetting or WriteOneSettings for 
//          small numbers of settings, or instantiate the class to read/write 
//			a larger number of values.  Settings are serialized when the
//			class destructs.
// 
//--------------------------------------------------------------------------

class ExportedBySWXUtGeneral SWXUtUserSettings
{
public:
	// Standard constructors and destructors
	// -------------------------------------
	SWXUtUserSettings(const CATUnicodeString &iCategoryName);
	virtual ~SWXUtUserSettings();

	// Read a single value.  Returns false if the setting is not found
	static bool ReadOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, CATUnicodeString &oSettingValue);
	static bool ReadOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, bool &oSettingValue);
	static bool ReadOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, int &oSettingValue);
	static bool ReadOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, double &oSettingValue);

	// Write a single value.  Returns false on failure.  Serialize on success.
	static bool WriteOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, const CATUnicodeString &iSettingValue);
	static bool WriteOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, const bool &iSettingValue);
	static bool WriteOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, const int &iSettingValue);
	static bool WriteOneSetting(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName, const double &iSettingValue);

	// Read a value.  Returns false if the setting is not found
	bool GetSetting(const CATUnicodeString &iSettingName, CATUnicodeString &oSettingValue);
	bool GetSetting(const CATUnicodeString &iSettingName, bool &oSettingValue);
	bool GetSetting(const CATUnicodeString &iSettingName, int &oSettingValue);
	bool GetSetting(const CATUnicodeString &iSettingName, double &oSettingValue);

	// Write a value.  Returns false on failure
	bool SetSetting(const CATUnicodeString &iSettingName, const CATUnicodeString &iSettingValue);
	bool SetSetting(const CATUnicodeString &iSettingName, const bool &iSettingValue);
	bool SetSetting(const CATUnicodeString &iSettingName, const int &iSettingValue);
	bool SetSetting(const CATUnicodeString &iSettingName, const double &iSettingValue);

private:
	static bool ValidateInput(const CATUnicodeString &iCategoryName, const CATUnicodeString &iSettingName);
	static bool ValidateInput(const CATUnicodeString &iSettingName);
	void SetDirty() { mDirty = true; }

	bool mDirty;
	CATSysSettingRepository *mSettingsRepository;
};

//-----------------------------------------------------------------------

#endif
