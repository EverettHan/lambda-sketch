/*
@fullreview  LCS2 CME4 18/02/06 Creation of the class for PPrime From/To Cache
*/
//===================================================================
// COPYRIGHT Dassault Systemes 2018/02/02
//===================================================================
// CATPLMPPrimeFromToService.cpp
// Header definition of class CATPLMPPrimeFromToService
//===================================================================
//
// Usage notes:
//  This class is a memory cache where the From/To instance PLMID retrieved 
//  during the expand Query are stored
//  The Getter and Setter needs a physical ID as Map Key
//===================================================================
//  2018/02/02 Creation: Code generated by the 3DS wizard
//===================================================================
#include "CATPLMID.h"
#include "CATPLMServicesPPrime.h"
#include "CATOmxOHMap.h"
#include "CATPLMObserver.h"


#ifndef CATPLMPPrimeFromToService_H
#define CATPLMPPrimeFromToService_H


//-----------------------------------------------------------------------

class ExportedByCATPLMServicesPPrime CATPLMPPrimeFromToService : public CATPLMObserver
{
public:
  // Standard constructors and destructors
  // -------------------------------------

  virtual ~CATPLMPPrimeFromToService();

  // Singleton
  static CATPLMPPrimeFromToService& s();


  /**
  *
  * <br><b>Getter to the PLMId associated to a physicalId Key in the physicalID/PLMID hashMap for 'from' instance relation</b>:
  * @param iPhysicalId [in] : The Physical ID of the object we want to retrieve the PLMId of the relation from (PLMID --from--> PhyID)
  *
  * @param oPLMId [out] :  The PLMID associated to the relation from.
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> If the PLMId is correctly retrieved from the map<dd>
  * <dt><code>E_FAIL</code>If the PLMId hasn't been retrieved from the map, probably because the physicalID doesn't belong to the map<dd>
  * </dl>
  */
  HRESULT GetPLMIdFrom(const CATUuid & iPhysicalId, CATPLMID & oPLMId);
  /**
  *
  * <br><b>Getter to the PLMId associated to a physicalId Key in the physicalID/PLMID hashMap for 'to' instance relation</b>:
  * @param iPhysicalId [in]: The Physical ID of the object we want to retrieve the PLMId of the relation to (PhyID--to-->PLMID)
  *
  * @param oPLMId [out]:  The PLMID associated to the relation 'to'.
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> If the PLMId is correctly retrieved from the map<dd>
  * <dt><code>E_FAIL</code>If the PLMId hasn't been retrieved from the map, probably because the physicalID doesn't belong to the map<dd>
  * </dl>
  */
  HRESULT GetPLMIdTo(const CATUuid & iPhysicalId, CATPLMID & oPLMId);

  /**
  *
  * <br><b>Setter to the PLMId associated to a physicalId Key in the physicalID/PLMID hashMap for 'from' instance relation</b>:
  * @param iPhysicalId [in] : The Physical ID of the object we want to set the PLMId of the relation 'from' (PLMID --from--> PhyID)
  *
  * @param iPLMId [in] : The PLMID associated to the relation 'from'.
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> If the PLMId is correctly inserted  <dd>
  * <dt><code>S_FALSE</code>If (iPhysicalId, iPLMId) is already in the cache <dd>
  * </dl>
  */
  HRESULT SetPLMIdFrom(const CATUuid & iPhysicalId, const CATPLMID & iPLMId);

  /**
  *
  * <br><b>Setter to the PLMId associated to a physicalId Key in the physicalID/PLMID hashMap for 'to' instance relation</b>:
  * @param iPhysicalId [in] : The Physical ID of the object we want to set the PLMId of the relation 'to' (PhyID--to-->PLMID)
  *
  * @param iPLMId [in] : The PLMID associated to the relation 'to'.
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> If the PLMId is correctly inserted  <dd>
  * <dt><code>S_FALSE</code>If (iPhysicalId, iPLMId) is already in the cache <dd>
  * </dl>
  */
  HRESULT SetPLMIdTo(const CATUuid & iPhysicalId, const CATPLMID & iPLMId);


  /*
  * Implementation of Observer Pattern from parent class CATPLMObserver
  */
  HRESULT Refresh();

  /*
  * Boolean to check if the cache is empty
  * @return
  * TRUE if the To/From cache are empty
  * FALSE otherwise
  */
  CATBoolean IsEmpty() { return _FromMap.IsEmpty() && _ToMap.IsEmpty(); }

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATPLMPPrimeFromToService(CATPLMPPrimeFromToService &);
  CATPLMPPrimeFromToService& operator=(CATPLMPPrimeFromToService&);
  CATPLMPPrimeFromToService();

  CATOmxOHMap<CATUuid, CATPLMID> _FromMap;
  CATOmxOHMap<CATUuid, CATPLMID> _ToMap;

  static CATPLMPPrimeFromToService  _Inst;
};

//-----------------------------------------------------------------------

#endif
