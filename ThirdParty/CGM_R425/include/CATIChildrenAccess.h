// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATIChildrenAccess.h
// Any V5 object may have components (aggregated object)
// The goal of this interface is to provide access to those components
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Aug 2006  Creation: Code generated by the CAA wizard  FRH
//===================================================================
#ifndef CATIChildrenAccess_H
#define CATIChildrenAccess_H

#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATBooleanDef.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATIChildrenAccess;
#else
extern "C" const IID IID_CATIChildrenAccess ;
#endif

// forwards
class CATIVisitor;
class CATICkeObject_var;

/**
* Interface representing an object that holds components/children.
*/
class ExportedByCATLifSpecs CATIChildrenAccess: public CATBaseUnknown
{
  CATDeclareInterface;

  public:
  /** 
  * This method is a way to access recursively or not the components of the object
  */
  virtual HRESULT VisitComponents(CATIVisitor* iVisitor, const int recur = 0) = 0;
	  
/**
 * Appends components under the object.
 * @param iKBwareObject knowledgeware object to be appended
 * @return E_FAIL if the object does not accept this kind of object.
 */
  virtual HRESULT AddComponent      (const CATICkeObject_var & iKBwareObject )  = 0    ;

/**
 * Removes components under the object.
 * @param iKBwareObject knowledgeware object to be removed.
 * @return E_FAIL if the remove operation has failed.
 */
  virtual HRESULT RemoveComponent   (const CATICkeObject_var & iKBwareObject ) = 0    ;

/**
 * Indicates if this object allows the use of AddComponent (and RemoveComponent) method.
 * It is mostly used to prevent those operations if the object implementing the
 * interface isn't able to manage it.
 * @return <b>Legal values</b>:
 * <tt>TRUE</tt> Append and Remove of objects are authorized
 * <tt>FALSE</tt> Append and Remove of objects are not authorized.
 */
  virtual boolean AllowAppend ( ) const =0;

};

//------------------------------------------------------------------

CATDeclareHandler(CATIChildrenAccess,CATBaseUnknown);

#endif
