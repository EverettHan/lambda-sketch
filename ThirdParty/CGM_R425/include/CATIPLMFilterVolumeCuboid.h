// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMFilterVolumeCuboid.h
// Define the CATIPLMFilterVolumeCuboid interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2008  Creation: Code generated by the CAA wizard  DST
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMFilterVolumeCuboid_H
#define CATIPLMFilterVolumeCuboid_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

class CATMathTransformation;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFilterVolumeCuboid;
#else
extern "C" const IID IID_CATIPLMFilterVolumeCuboid ;
#endif

//------------------------------------------------------------------

/**
* Interface representing CATIPLMFilterVolumeCuboid.
*
*/
class ExportedByCATPLMServicesItf CATIPLMFilterVolumeCuboid: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
    * Set the Point1 of the Cuboid.
    * @param iX1
    *     The X coordinate value
    * @param iY1
    *     The Y coordinate value
    * @param iZ1
    *     The Z coordinate value
    */
    virtual HRESULT SetPoint1( double iX1, double iY1, double iZ1 )=0;

    /**
    * Set the Point2 of the Cuboid.
    * @param iX2
    *     The X coordinate value
    * @param iY2
    *     The Y coordinate value
    * @param iZ2
    *     The Z coordinate value
    */
	virtual HRESULT SetPoint2( double iX2, double iY2, double iZ2 )=0;

    /**
    * Set the Rotate Matrix and the translation vector of the Cuboid, After the positionning of the Point1 and Point2.
	* @param iMathTransformation
    *     The transformation matrix with the translation vector
    */
	virtual HRESULT SetMatrix(	CATMathTransformation &iMathTransformation )=0;

    /**
    * Get the Point1 of the Cuboid.
    * @param oX1
    *     The X coordinate value
    * @param oY1
    *     The Y coordinate value
    * @param oZ1
    *     The Z coordinate value
    */
    virtual HRESULT GetPoint1( double& oX1, double& oY1, double& oZ1 )=0;

    /**
    * Get the Point2 of the Cuboid.
    * @param oX2
    *     The X coordinate value
    * @param oY2
    *     The Y coordinate value
    * @param oZ2
    *     The Z coordinate value
    */
	virtual HRESULT GetPoint2( double& oX2, double& oY2, double& oZ2 )=0;

    /**
    * Get the Rotate Matrix and the translation vector of the Cuboid, After the positionning of the Point1 and Point2.
	* @param oMathTransformation
    *     The transformation matrix with the translation vector
    */
	virtual HRESULT GetMatrix(	CATMathTransformation &oMathTransformation )=0;

};

//------------------------------------------------------------------

#endif
