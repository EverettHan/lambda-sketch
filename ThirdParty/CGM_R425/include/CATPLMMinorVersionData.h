//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/03
//===================================================================
// CATPLMMinorVersionData.cpp
// Header definition of class CATPLMMinorVersionData
//===================================================================
//
// Usage notes:
// Contains the minor versioning related data.
//
//===================================================================
//  2018/05/03 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMMinorVersionData_H
#define CATPLMMinorVersionData_H

#include "CATPLMServicesItf.h"
#include "CATOmxSharable.h"
#include "CATUuid.h"
#include "CATUnicodeString.h"
#include "CATOmxCollecManager.h"

class ExportedByCATPLMServicesItf CATPLMMinorVersionData : public CATOmxSharable
{
public:
  CATPLMMinorVersionData(const CATUuid& iMajorId, const CATUnicodeString& iMinorRevision, int iMinorOrder, CATBoolean iIsBSF, CATBoolean iIsPublished, CATBoolean iIsBaseMajor, CATBoolean iIsBaseMinor);
  CATPLMMinorVersionData(const CATUuid& iMajorId, const CATUnicodeString& iMinorRevision, int iMinorOrder, CATBoolean iIsBSF, CATBoolean iIsPublished, CATBoolean iIsBaseMajor, CATBoolean iIsBaseMinor, CATBoolean iIsLast);
  virtual ~CATPLMMinorVersionData();

  /**
  * Returns if this minor is the best so far or not.
  * A BSF is always published.
  */
  CATBoolean IsBSFMinor() const;

  /**
  * Returns if this minor is published or not.
  */
  CATBoolean IsPublishedMinor() const;

  /**
  * Returns if this minor is the last one in the major family.
  * It is not linked to V_isLastMinorVersion attribute, it is based on the minororder attribute.
  * It is set to TRUE if minororder=max(minororder) locally in the database.
  * So we can compute this value only if all elements of the major family are returned from the query.
  * @result
  *   S_OK   : the oResult contains if the minor version is the last one locally in the major family in the database or not.
  *   E_FAIL : we can't know if this is the last minor version from the requested query.
  */
  HRESULT IsLastMinor(CATBoolean &oIsLastMinor) const;

  CATBoolean IsLastMinor() const;
  CATBoolean IsLastMinorComputed() const;

  /**
  * Returns if this minor is the element from which a new major version will be created.
  * There is only one element inside the whole family of minor AND major that can have this flag.
  * In SRM scenario, it might be possible that this flag can't be found.
  */
  CATBoolean IsBaseElementForNewMajorVersion() const;

  /**
  * Returns if this minor is the element from which a new minor version will be created.
  * So requesting a new minor version can be OK inside this family.
  * There is only one element inside the minor family that can have this flag.
  * In SRM scenario, it might be possible that this flag can't be found.
  */
  CATBoolean IsBaseElementForNewMinorVersion() const;

  /*
  * Returns the major id as uuid.
  */
  CATUuid GetMajorId() const;

  /**
  *  Returns the versioning string value of the minor version.
  *  Example: '000' or '001'
  */
  CATUnicodeString GetMinorRevision() const;

  /**
  * Checks if the minor information is from the same minor family.
  * @return
  *   TRUE  : minor information are from the same family.
  *   FALSE : if not.
  */
  CATBoolean CheckFamily(const CATPLMMinorVersionData& iComparedMinorVersion) const;

  /**
  * Returns a value based on the order in the minor information.
  * @return
  *   -1 : The current minor is before the compared one.
  *   0  : The current minor is equal to the compared one.
  *   +1 : The current minor is after the compared one.
  */
  int Compare(const CATPLMMinorVersionData& iComparedMinorVersion) const;
  int Compare(const CATPLMMinorVersionData* ipComparedMinorVersion) const;

  /**
  * ComputeHashKey
  */
  unsigned int ComputeHashKey() const;

protected:
  /**
  * Sets the flag _IsLast if query request allows it.
  */
  void SetIsLastMinor(CATBoolean iIsLast);

private:
  CATPLMMinorVersionData(CATPLMMinorVersionData &);
  CATPLMMinorVersionData& operator=(CATPLMMinorVersionData&);

  // Attributes
  CATUuid _MajorId; // M1 attribute: majorId
  CATUnicodeString _MinorRevision; // M1 attribute: minorrevision
  int _MinorOrder; // M1 attribute: minororder
  CATBoolean _IsBSF; // M1 attribute: isBestSoFar
  CATBoolean _IsLast; // Computed locally (last version returned)
  CATBoolean _IsLastComputed;
  CATBoolean _IsPublished; // M1 attribute: ispublished
  CATBoolean _IsBaseMajor; // M1 attribute: V_isLastVersion
  CATBoolean _IsBaseMinor; // M1 attribute: V_isLastMinorVersion

  friend class CATPLMCompVersioningService;
  friend class CATPLMCompVersioningLegacyService;
  friend class CATPLMxVersioningNLVService;
  friend class CATPLMVersioningConvertion;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATPLMMinorVersionData*>::manager();

#endif
