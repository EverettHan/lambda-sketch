/* -*-c++-*- */
// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMSaveFactory.h
// Define the CATIPLMSaveFactory interface
//
//===================================================================
//
// Usage notes:
// This interface is to be implemented by "Safe Factory"
// A Safe Factory should generate the information necessary to create / modify / delete a CATIA entity in the PDM 
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  ldy
//===================================================================
/**
* @level Protected
* @usage U3
*/

#ifndef CATIPLMSaveFactory_H
#define CATIPLMSaveFactory_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATUnicodeString.h"


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMSaveFactory;
#else
extern "C" const IID IID_CATIPLMSaveFactory ;
#endif

//------------------------------------------------------------------

class CATIPLMIntegRecordWrite;
class CATIPLMIntegRecordRead;
class CATIPLMLogState;
class CATIPLMEngineErrorReporter;
class CATUuid;
class CATIPLMSpecializationSaver;
class CATIPLMError;

// To remove when everyone will have migrated (LogicalStructureModeler)
class CATIPLMSaveEngineMediator;


/*     =======================================================================
 *
 *         This interface has an ASSOCIATED ADAPT0R :  CATPLMSaveFactoryAdaptor
 *
 *     =======================================================================
*/





/**
 * This interface describes how the responsable of the objects are called by the Save Engine to serialize this objects.
 * <br><b>Role</b>:
 * The save factory is called by the SaveEngine. Its mission is to :
 *<br> - describe the objects it has in charge in the save message. 
 *<br> - analyse the severity of a non succeeded save in server. If necessary, update the session after the server save action.
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMSaveFactory: public CATBaseUnknown
{
  CATDeclareInterface;

  public:


    /**
    * Declares and describes the passed in PLM component in the save message.
    *   @param iLogObject 
    *        The object to save as described in the LOG
    *   @param ipRecordWrite 
    *        Protocol for recording update information in the save message
    *   @param ipSpecSaver 
    *        Services provided by the Save Engine to manage specialization PLM extension, ie to make the metadata description written in the save message
    *   @param iTransId 
    *        This transaction id caracterizes a save transaction. It is the same that is useed for CATOmyCuteIOTransactionsManager.
	*        The first time WriteMetadata is called on a given factory instance with a given iTransId value corresponds to the begining of a new save transaction.
    *        It may be usefull for a save factory to manage a transaction between WriteMetadata and ExploitReturnMsg.
	*        But a particular save factory may use or not the notion of transaction.
    *   @param iopiErrorReporter 
    *        In case of runtime incident (different from system incident!), a client PLM error is to pill up in iopiErrorReporter
    *        <br>The declaration of a severe PLM client in the error reporter implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    * @return 
    * <br><b>Legal values</b>
    *   <dt>E_FAIL</dt>  
    *   <dd>System problem. No error is sent to the Error Reporter.   
    *       <br>This E_FAIL return code implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    *   </dd>
    *   <dt>S_OK</dt>  
    *   <dd>The task has been successfully performed, or a client PLM error has been posted in the Error Reporter to explain the scenario error.
    *   </dd>   
    * <br>Please refer to ErrorManagement.doc PES for details on error management  
    */
      virtual HRESULT WriteMetadata( CATIPLMLogState * iLogObject, 
                              CATIPLMIntegRecordWrite* iRecordWrite, 
                              CATIPLMSpecializationSaver * ipSpecSaver, 
                              const CATUuid & iTransId ,
                              CATIPLMEngineErrorReporter * iopiErrorReporter) = 0 ;




   /**
    * Analyzes the save result and update the session.
    * <br><b>Role</b>:
    *   <br>Once the Save Engine has constructed the save message by using the factories's SavetoPDM methods, it sends this message to the server. The Save Engine get back a return message.
    *   <br>The Save Engine call back the save factories on the AnalyzeSaveResults method to :
    *       <br>  - read the save message block associated to an object they have in charge
    *       <br>  - update, if needed (no severe error), the client session
    *       <br>  - call, if needed, the corresponding specialization saver's method
    *   <br> During this method execution the factory doesn't try to access to error already declared in the record.
    *   <br> The factory may declare in the reporter only errors that the factory generates itself.
    *   @param iRecRead 
    *          Record to analyze
    *   @param ipSpecSaver 
    *          Services provided by the Save Engine to manage specialization PLM extension
    *   @param iTransId 
    *        This transaction id caracterizes a save transaction. It is the same that is useed for CATOmyCuteIOTransactionsManager.
	*        The first time WriteMetadata is called on a given factory instance with a given iTransId value corresponds to the begining of a new save transaction.
    *        It may be usefull for a save factory to manage a transaction between WriteMetadata and ExploitReturnMsg.
	*        But a particular save factory may use or not the notion of transaction.
    *   @param iopiErrorReporter 
    *          The Error reporter in which the Save Factory logs an error, if needed.
    *        <br>The declaration of a severe PLM client in the error reporter implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    * @return 
    * <br><b>Legal values</b>
    *   <dt>E_FAIL</dt>  
    *   <dd>System problem. No error is sent to the Error Reporter.   
    *       <br>This E_FAIL return code implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    *   </dd>
    *   <dt>S_OK</dt>  
    *   <dd>The task has been successfully performed, or a client PLM error has been posted in the Error Reporter to explain the scenario error.
    *   </dd>   
    * <br>Please refer to ErrorManagement.doc PES for details on error management  
   */
       virtual HRESULT ExploitReturnMsg(CATIPLMIntegRecordRead * iRecRead,
                                       CATIPLMSpecializationSaver * ipSpecSaver, 
                                       const CATUuid & iTransId ,
                                       CATIPLMEngineErrorReporter * iopiErrorReporter) =0 ;

   



   /**
    * Ends a save transaction.
    * <br><b>Role</b>:
	*   <br>Ends the save transaction, commits it or cancel it.
	*   <br>This methods is always called once for each save transaction:
	*   <br>Successfull save process: EndSaveTransaction is called at the end of the save process. In this case EndSaveTransaction participates to the session save commit.
	*   <br>Save process failure    : EndSaveTransaction is called as soon as the engine decides to cancel the save process. In this case EndSaveTransaction perform a memory clean or participates to the session save rollback.
	*   @param iTransId 
	*        This transaction id caracterizes a save transaction. It is the same that is useed for CATOmyCuteIOTransactionsManager.
	*        The first time WriteMetadata is called on a given factory instance with a given iTransId value corresponds to the begining of a new save transaction.
    *        It may be usefull for a save factory to manage a transaction between WriteMetadata and ExploitReturnMsg.
	*        But a particular save factory may use or not the notion of transaction.
    *   @param iSuccess 
    *          TRUE 
	*          <br>
    *   <dt>TRUE</dt>  
	*   <dd>If the whole save process is successfull. 
	*   <br>In this case, all the session modifications the factory has performed during the save transaction are to keep.
	*       The factory can also apply its session modifications during EndSaveTransaction's execution.
	*   </dd>
	*   <dt>FALSE</dt>  
	*   <dd>If the save engine cancel the save process. 
	*   <br>In this case, the action of the factory on the session during the save transaction must be null:
	*   <br>If session modifications/updates have been performed before, the factory must cancel them during EndSaveTransaction's execution. 
	*   </dd>
    *   @param iopiErrorReporter 
    *          The Error reporter in which the Save Factory logs an error, if needed.
    *        <br>The declaration of a severe PLM client in the error reporter implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    * @return 
    * <br><b>Legal values</b>
    *   <dt>E_FAIL</dt>  
    *   <dd>System problem. No error is sent to the Error Reporter.   
    *   <br>This E_FAIL return code implies a cancel of the save process.
    *   </dd>
    *   <dt>S_OK</dt>  
    *   <dd>The task has been successfully performed, or a client PLM error has been posted in the Error Reporter to explain the scenario error.
    *   </dd>   
    * <br>Please refer to ErrorManagement.doc PES for details on error management  
   */
       virtual HRESULT EndSaveTransaction( const CATUuid & iTransId , CATBoolean iSuccess, CATIPLMEngineErrorReporter * iopiErrorReporter) =0 ;



    /**
    * Analyzes the associated already declared by server error, if existing.
    * <br><b>Role</b>:
    *   <br>The Save Factory tries to access to the error associated to the record.
    *   <br>If this error belongs to the list of PLM error the factory has in charge to treat, the factory interprets this error.
    *   <br>Else the factory does nothing and return S_OK;  
    *   <br>Error interpretation : cf PLM Error Management PES :
    *   <br>  - A PLM error is traduced into a client PLM error, and flags it as AlreadyInterpreted.
    *   <br>  - The client PLM error is declared in the client side in .CATNls file belongin to the factory. 
    *   <br>  - The error emission is done by the factory via the error reporter.
    *   @param CATIPLMError 
    *          PLM Error to analyze
    *   @param iopiErrorReporter 
    *          The Error reporter in which the Save Factory logs an error, if needed.   
    *        <br>The declaration of a severe PLM client in the error reporter implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    * <br>Please refer to ErrorManagement.doc PES for details on error management 
    * @return 
    * <br><b>Legal values</b>
    *   <dt>S_OK</dt>  
    *   <dd>The error given in input was to interpret by the factory. The factory did it successfully</dd>
    *   <dt>S_FALSE</dt>  
    *   <dd>The error given in input was not to interpret by the factory. The factory did anything.</dd>  
    *   <dt>E_FAIL</dt>  
    *   <dd>System problem.
    *       <br>This E_FAIL return code implies the exclusion from save of the PLM component. --> Currently: total rollback and save cancel. Later: total rollback and partial save - Not implemented as yet.
    *   </dd>
    * <br>Please refer to ErrorManagement.doc PES for details on error management  
   */
     virtual HRESULT TryInterpretation(CATIPLMError * iPLMErrorToInterpret,
                                         CATIPLMEngineErrorReporter * iopiErrorReporter) =0 ;

   



     /**
      * @nodoc
      */

     enum EndSaveStatus{SaveSuccess, SaveFailed};

     virtual HRESULT EndLocalSaveTransaction( const CATUuid & iTransId , EndSaveStatus iSaveStatus, CATIPLMEngineErrorReporter * iopiErrorReporter) =0 ;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler( CATIPLMSaveFactory, CATBaseUnknown );
#endif
