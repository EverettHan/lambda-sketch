// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATPolyBodySweptVolumeOper.h
// Header definition of CATPolyBodySweptVolumeOper
//
//===================================================================
//
// Usage notes: 
//       Use this class to compute low-level swept volume based on
//       CATIPolyMesh CGM Model
//
//===================================================================
//
//  Jul 2006  Creation: Code generated by the CAA wizard  TTJ
//===================================================================
#ifndef CATPolyBodySweptVolumeOper_H
#define CATPolyBodySweptVolumeOper_H

#include "PolyBodySweptAndThickness.h"

#include "CATPolyBodyVOCOper.h"
#include "CATPolyBuildMeshOper.h"

#include "CATBoolean.h"

class CATIPolyMesh;
class CATMathTransformation;
class CATMathPoint;
class CATProgressCallback;

/**
 * Class representing Swept Volumes.
 *
 * <br><b>Role</b>: Class used to compute Swept Volume based on CATIPolyMesh CGM model
 * <p>
 * Do not use the @href CATPolyBodySweptVolumeOper constructor to
 * do such and such but instead...
 *
 */
class ExportedByPolyBodySweptAndThickness CATPolyBodySweptVolumeOper : public CATPolyBodyVOCOper
{
    public:

        // Standard constructors and destructors
        // -------------------------------------
        CATPolyBodySweptVolumeOper();
        virtual ~CATPolyBodySweptVolumeOper();

        /**
        *  Set the Positions for the computation.
        *  This can be called several times. Each time previous positions are deleted.
        *  @Param iNbPos
        *       Nb of Positions 
        *  @Param iPositions
        *       Array of Positions. Will be re-allocated in the method, hence must be freed after the call.
        *  @return  
        *       S_OK if allocation ran successfully, E_FAIL otherwise.
        */
        HRESULT SetPositions(int iNbPos, CATMathTransformation * iPositions);

        /**
        *  Gets the Positions
        *  @Param oNbPos
        *       Number of Positions.
        *  @Param oPositions
        *       Array of oNbPos Positions. Is allocated by the method and must be [] deleted after use. 
        *  @return  
        *       E_FAIL if oPositions is not NULL, S_OK otherwise.
        */
        HRESULT GetPositions(int & oNbPos, CATMathTransformation * & oPositions);

        /**
        *  Gets the Number Positions
        */
        int GetNbPositions();

        /**
        *  Computes the SweptVolume 
        *  @return  
        *       S_OK if the operator runs successfully and E_FAIL otherwise.
        */  
        HRESULT Run();


        /**
         * Treat the input as surfaces, and not volumes.
         * Result may contain much more triangles
         * Default is FALSE.
         */
        void SetInputAsSurfaces(CATBoolean iInputAsSurfaces = TRUE);

        /**
         * Returns whether the input are treated as surfaces, or volumes.
         * Default is FALSE.
         */
        CATBoolean GetInputAsSurfaces();

        /** Set the progress and interruption callback */
        void SetProgressCallback(CATProgressCallback * iProgress);


        /**
         * Get operator name
         */
        virtual const char * GetOperatorName();

        /**
         * Returns a rough estimated number of triangles and vertices in the result,
         * based on the number of positions and triangles in the input.
         * Call this method before Run.
         */
        HRESULT GetEstimatedNumberOfTrianglesAndVertices(unsigned int & oNbTrangles, unsigned int & oNbVertices);

private:
        /**
        *  Computes the Elbows
        *
        */   
        HRESULT ComputeElbows();

        /**
        *  Computes the Interpolations
        * 
        */   
        HRESULT ComputeInterpolations();

        /**
        *  Add Triangles from a bar in Interpolation Computation
        *  @Param 
        *       iN : triangle index
        *       iM  : triangle's neighbor index 
        */
        //HRESULT AddTriangleFromBar(int iN, int iM, int Position);


        // Positions :
        int _nbPositions;
        CATMathTransformation * _Positions;
        CATBoolean m_InputAsSurfaces;

        CATProgressCallback * m_bar;
        int m_halfnbtot;
        int m_step;
        int m_current;
        CATBoolean m_break;
        CATBoolean m_UseFlippedTriangles;
};

//-----------------------------------------------------------------------

#endif
