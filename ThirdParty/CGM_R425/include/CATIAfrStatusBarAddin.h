// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIAfrStatusBarAddin.h
// Define the CATIAfrStatusBarAddin interface
//
//===================================================================
//
// Usage notes:
//   Interface used to add PLM commands in the CATIA V5 status bar.
//   Your implementation will be taken into account only if authorized. Contact ApplicationFrame responsible
//
//===================================================================
//
//  Jul 2004  Creation: Code generated by the CAA wizard  ers
//===================================================================
#ifndef CATIAfrStatusBarAddin_H
#define CATIAfrStatusBarAddin_H

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATAfrItf IID IID_CATIAfrStatusBarAddin;
#else
extern "C" const IID IID_CATIAfrStatusBarAddin ;
#endif

class CATCmdAccess;
//------------------------------------------------------------------

/**
 * Interface used to add PLM commands in the CATIA V5 status bar
 */
class ExportedByCATAfrItf CATIAfrStatusBarAddin: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**
  * Instantiates the command headers.  
  * <br><b>Role</b>: Each command you want to make available must have a command header.
  * The command header holds the necessary 
  * information to load the command, such as the name of the 
  * shared library in which the command's executable code is located, the name of the 
  * command class, and the data to pass to the command's code when this command 
  * becomes the current one. The command header has resources for each command to display 
  * such as the command name shown to the end user, its ToolTip displayed in a balloon, 
  * its help message, and its icon.
  * <br>Each instance of header is deleted by CATIA.
  * @see CATCommandHeader
  */
  virtual void          CreateCommands () = 0;

  /**
  * Creates toolbar components.
  * <br><b>Role</b>: Creates toolbar components with the @href NewAccess macro,
  * and chains these components (with @href SetAccessNext macro).
  * @return
  *    The first component of the chain.
  */
  virtual CATCmdAccess * CreateToolbarComponents () = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
