//===================================================================

//===================================================================
// CATDE2BaseTarget.cpp
// Header definition of class CATDE2BaseTarget
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013-02-18 Creation by Q62: Code generated by the 3DS wizard
//===================================================================

#ifndef CATDE2BaseTarget_H
#define CATDE2BaseTarget_H

#include "CATDialogEngine.h"
#include "CATEventSubscriber.h"
#include "CATUnicodeString.h"
#include "CATString.h"
#include "CATDE2Manager.h"

class CATDE2TargetPrivateImplementation;

class CATCommand;
class CATNotification;
class CATEditTranslateHeader;
class CATSYPTemplateData;

class CATIDE2AbstractView;
class CATDialogAgent;
class CATDE2EnterStateAction;
class CATDE2LeaveStateAction;
class CATDE2Condition;
class CATDE2CompositeCondition;
class CATDE2ReceivedEventCondition;

//-----------------------------------------------------------------------

class ExportedByCATDialogEngine CATDE2BaseTarget: public CATEventSubscriber
{
  CATDeclareClass;

  public:
    // Standard constructors and destructors
    // -------------------------------------
    CATDE2BaseTarget ();
    virtual ~CATDE2BaseTarget ();

    // Getters & Setters
    // -------------------------------------
    CATBaseUnknown_var      GetItems();
    virtual void            SetName (const CATString & );
    const CATString &       GetName() const;

    // CATISYPTemplate
    // -----------------------------------
    void                    SetTemplateName(const CATUnicodeString& );
    const CATUnicodeString& GetTemplateName() const;
    void                    SetVariationName(const CATUnicodeString& );
    const CATUnicodeString& GetVariationName() const;
    void                    SetTemplatedView(CATBaseUnknown_var& , CATSYPTemplateData* );
    CATSYPTemplateData*     GetTemplateData() const{return NULL;};

    // CATISYPPresenter
    // -----------------------------------
    virtual void                SetChild( CATBaseUnknown_var);
    virtual CATBaseUnknown_var  GetChild();

    //-----------------------------------------------------------------------------
    // CATDE2BaseTarget: Methods to reimplement in your own DE2 xml target in order to add behavior in the CATStateCommand life Cycle
    //-----------------------------------------------------------------------------

    /**
    *Reimplement in your own DE2 xml target if you want to add code for the state command after the build graph part
    */
    virtual void init(const CATListValCATBaseUnknown_var& iArgsList = CATListValCATBaseUnknown_var()){}

    /**
    *Reimplement in your own DE2 xml target if you want to add your code for the state command destructor (called at the destructor beginning)
    */
    virtual void CleanStateCmd(){}
    
    /**
    * Reimplement in your own DE2 xml target if you want to add your code for the command first activation 
    */
    virtual CATStatusChangeRC beginExecute(CATCommand * iFromClient, CATNotification * iNotification){return (CATStatusChangeRCCompleted) ;}

    /**
    *Reimplement in your own DE2 xml target if you want to add your code for the state command activations excepthe first one
    */
    virtual CATStatusChangeRC resumeExecute(CATCommand * iFromClient, CATNotification * iNotification){return (CATStatusChangeRCCompleted) ;}

    /**
    *Reimplement in your own DE2 xml target if you want to add your code for all the state command activation
    */
    virtual CATStatusChangeRC activateCmd(CATCommand * iFromClient, CATNotification * iNotification){return (CATStatusChangeRCCompleted) ;}

    /**
    *Reimplement in your own DE2 xml target if you want to add your code for the state command deactivations
    */
    virtual CATStatusChangeRC pauseExecute(CATCommand * iFromClient, CATNotification * iNotification){return (CATStatusChangeRCCompleted) ;}

    /**
    *Reimplement in your own DE2 xml target if you want to add your code for the state command end. (ex. cancel)
    */
    virtual CATStatusChangeRC endExecute(CATCommand * iFromClient, CATNotification * iNotification){return (CATStatusChangeRCCompleted) ;}

    /**
    *Reimplement in your own DE2 xml target if you want to add a global undo method to your state command
    */
    virtual CATCommandGlobalUndo* GetGlobalUndo(){return NULL;}

  protected:
    /**
    *The command to say it can be ended
    */
    virtual CATBoolean RequestDelayedDestruction();

    /**
    *If Undo will be called at the end of the command
    */
    CATBoolean         ExecuteUndoAtEnd();

    // Methods to acces the command execution context !!!DO NOT REIMPLEMENT THEM!!!
    // ----------------------------------
    /**
    *Get the view controlled in DE² by their name.
    *@return The view as a CATIDE2AbstractView* if the view was found and NULL otherwise.
    */
    CATIDE2AbstractView* GetViewById(CATUnicodeString iViewId);

    //Methods to access/control the dialog agents
    /**
    *Sets the value of property on a specific agent.
    *Use boxing to pass the right argument for he propertyiAgentId
    *@param iAgentId the Id of the agent on which we want to set the property value
    *@param iPropertyId the Id of the property to set
    *@param ispPropValue property value (<a href="http://wikitechno/wiki/index.php/Using_Dialog_Boxes_with_DE%C2%B2" >See the detailed documentation</a>)
    *@return The view as a CATIDE2AbstractView* if the view was found and NULL otherwise.
    */
    CATBoolean          SetAgentProperty(CATUnicodeString iAgentId, CATUnicodeString iPropertyId, CATBaseUnknown_var ispPropValue = NULL_var, 
                                                                                                  CATBaseUnknown_var ispPropValue2 = NULL_var,
                                                                                                  CATBaseUnknown_var ispPropValue3 = NULL_var);
    /**
    *Get a property value on a specific agent.
    *Use boxing to pass the right argument for he propertyiAgentId
    *@param iAgentId the Id of the agent on which we want to get the property value
    *@param iPropertyId the Id of the property
    *@param ispPropOptionalParam option parameter for some properties (<a href="http://wikitechno/wiki/index.php/Using_Dialog_Boxes_with_DE%C2%B2" >See the detailed documentation</a>)
    *@return The view as a CATIDE2AbstractView* if the view was found and NULL otherwise.
    */
    CATBaseUnknown_var  GetAgentProperty(CATUnicodeString iAgentId, CATUnicodeString iPropertyId, CATBaseUnknown_var ispPropOptionalParam = NULL_var);

    // Display a given web page in a CATICAfrUrlViewer element
    // ----------------------------------
    //@param iPage: The web to display
    //@param iViewID: the Id of the view containing the CATCAfrUrlViewer where the script will executed
    //@param iCAfrUrlViewerComponentPath: Path of the CATCAfrUrlViewer in the view (e.g. "iViewID.myCAfrUrlViewerID")
    //@param ilocalPage: if the web is locally stored on disk or not
    //Reutrn E_FAIL is something went wrong, S_OK otherwise
    HRESULT SetCAfrUrlViewerWebPage(CATUnicodeString iPage, CATUnicodeString iViewID, CATUnicodeString iCAfrUrlViewerComponentPath, CATBoolean ilocalPage = FALSE);

    //Excute a script in a given CATICAfrUrlViewer element
    // ----------------------------------
    //@param iScript: The JavaScript to run
    //@param iViewID: The Id of the view containing the CATCAfrUrlViewer where the script will executed
    //@param iCAfrUrlViewerComponentPath: Path of the CATCAfrUrlViewer in the view (e.g. "iViewID.myCAfrUrlViewerID")
    //Reutrn E_FAIL is something went wrong, S_OK otherwise
    HRESULT ExecuteJavascript(CATUnicodeString iScript, CATUnicodeString iViewID, CATUnicodeString iCAfrUrlViewerComponentPath);

    //CATStateCommand corresponding instance methods
    CATBoolean           RequestLocalUndo();
    HRESULT              GetCommandInterface(const IID &iIID, void **oPPV);
    CATCallback          AddAnalyseNotificationCB(CATCommand* iEmetteur, CATNotification* iTypeOfEvent, CATUnicodeString iMethodName);
    CATCallback          AddAnalyseNotificationCB(CATCommand* iEmetteur, const char * iTypeOfEvent, CATUnicodeString iMethodName);
    CATBoolean           RemoveAnalyseNotificationCB(CATCommand* iEmetteur, CATNotification* iTypeOfEvent);
    CATBoolean           SetHeaderSelectCommand(CATEditTranslateHeader* iHdr);

    //Methods to access/control the dialog state
    /**
    *Get the Id of the current active state in the state command
    */
    CATUnicodeString     GetCurrentStateID();
    /**
    *Check if a state exists
    *@return true if a state exists with this ID, false otherwise
    */
    CATBoolean           IsExistingState(const CATUnicodeString& iStateId);
    /**
    *Check if a state is active
    *@param iStateId Id of the state to check
    *@return true if the state with Id iStateId is active, false otherwise
    */
    CATBoolean           IsStateActivated(const CATUnicodeString& iStateId);
    /**
    *Sets a message on a specific state
    *@param iStateId Id of the state on which to set the message
    *@param iMsg the message to set
    *@return true if succeeded, false otherwise
    */
    CATBoolean           SetStateMessage(const CATUnicodeString& iStateId, const CATUnicodeString& iMsg);

    // Methods to add/modify dynamically graph element. Use with caution
    // ----------------------------------
    //Add graph elements from a DE2 XML
    /**
    *Add graph element to the command
    @param iXmlId the Xml containing the graph elements to add to the state command
    *@return true if succeeded, false otherwise
    */
    CATBoolean AddElementsFromXml(CATUnicodeString iXmlId);

    /**
    *Create a new state in the command.
    *@param iStateId the state ID
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean CreateState(const CATUnicodeString& iStateId); 

    /**
    * Create a new agent in the command.
    *@param iAgentID the Id of the agent
    *@param iDE2AgentType the agent type
    *@param iCustomType the class name of the agent (if custom agent) - OPTIONAL 
    *@param iCustomTypeDll the dll of containing iCustomType class(if custom agent) - OPTIONAL 
    *@param iFilterId the Id of the filter on the agent - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean CreateAgent          ( const CATUnicodeString& iAgentID, 
                                      const CATUnicodeString& iDE2AgentType, 
                                      const CATUnicodeString& iCustomType = "", 
                                      const CATUnicodeString& iCustomTypeDll = "",
                                      const CATUnicodeString& iFilterId = "");

    /**
    *Create Filter that can be added to an agent. 
    *@param iFilterId the filter ID
    *@param iFilterMethodName the name of the method checking the filter condition (declared in the state command target sypintro)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateFilter        (const CATUnicodeString& iFilterId, 
                                     const CATUnicodeString& iFilterMethodName);

    /**
    *Create a Composite Filter that can be added to an agent.
    *@param iFilterId the filter ID
    *@param iFilterId1 Id of the fist filter to check in the composite filter
    *@param iFilterId2 Id of the second filter to check in the composite filter
    *@param iFilterType the composite filter type (AND/OR/NOT)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateCompositeFilter(const CATUnicodeString& iFilterId,
                                      const CATUnicodeString& iFilterId1,
                                      const CATUnicodeString& iFilterId2,  
                                      CATDE2Utilities::DE2BooleanOperationType iBoleanOp = CATDE2Utilities::UNKNOWN);

    /*
    *Create a Composite Filter that can be added to an agent.
    *@param iFilterId the filter ID
    *@param iFiltersNamesList list of the filters to check in the composite filter
    *@param iFilterType the composite filter type (AND/OR/NOT)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateCompositeFilter(const CATUnicodeString& iFilterId, 
                                      const CATListOfCATUnicodeString& iFiltersNamesList,
                                      CATDE2Utilities::DE2BooleanOperationType iBoleanOp = CATDE2Utilities::UNKNOWN);

    /**
    *Create a new transition in the command.
    *@param iId the If of the transition
    *@param iSourceStateID the Id of the inital state for the transition
    *@param iTargetStateID the Id of the target state for the transition
    *@param iConditionId the Id of the condition to triger the transition
    *@param iAction the name of the method to execute when triggering the tranistion(declared in the state command target sypintro)
    *@param iUndo   the name of the method to execute when triggering the tranistion(declared in the state command target sypintro) - OPTIONAL 
    *@param iRedo   the name of the method to execute when triggering the tranistion(declared in the state command target sypintro) - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean CreateTransition     (const CATUnicodeString& iId, 
                                    const CATUnicodeString& iSourceStateID, 
                                    const CATUnicodeString& iTargetStateID, 
                                    const CATUnicodeString& iConditionId, 
                                    const CATUnicodeString& iAction, 
                                    const CATUnicodeString& iUndo = "", 
                                    const CATUnicodeString& iRedo = "");

    /**
    *Create a new transition in the command. 
    *@param iId the If of the transition
    *@param iSourceStateID the Id of the inital state for the transition
    *@param iTargetStateID the Id of the target state for the transition
    *@param iConditionId the Id of the condition to triger the transition
    *@param iActionsNamesList List of the actions associated to this tranisition
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean CreateTransition     ( const CATUnicodeString& iId, 
                                      const CATUnicodeString& iSourceStateID, 
                                      const CATUnicodeString& iTargetStateID, 
                                      const CATUnicodeString& iConditionId,
                                      const CATListOfCATUnicodeString& iActionsNamesList); 

    /**
    *Create condition that can be added to a transition or to a leave state condition 
    *@param iConditionId the condition ID
    *@param iConditionMethodName the name of the method checking the condition (declared in the state command target sypintro)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateCondition     ( const CATUnicodeString& iConditionId, 
                                      const CATUnicodeString& iConditionMethodName);

    
    /**
    *Create condition on an agent that can be added to a transition or to a leave state condition 
    *@param iConditionId the condition ID
    *@param iAgentId the agent on which the condition is created
    *@param iType the type of condition (IsOutputSet or IsLastModifiedAgent)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateCondition     ( const CATUnicodeString& iConditionId, 
                                      const CATUnicodeString& iAgentId, 
                                      CATDE2Utilities::DE2AgentConditionType iType);

    
    /**
    *Create condition listenning to an event that can be added to a transition or to a leave state condition 
    *@param iConditionId the condition ID
    *@param iSender the sender of the event listenned (NULL, the condition true is the event is sent from anyone)
    *@param iEvent the event to listen to
    *@param iConditionType (IsOutputSet -default value- or IsLastModifiedAgent) - OPTIONAL 
    *@param iAgentId the Id of the created agent fot the condition - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateReceivedEventCondition( const CATUnicodeString& iConditionId,
                                              const CATUnicodeString& iSender,
                                              const CATUnicodeString& iEvent,
                                              CATDE2Utilities::DE2AgentConditionType iConditionType = CATDE2Utilities::IsOutputSet,
                                              const CATUnicodeString& iAgentId = "");

    /**
    *Create condition that can be added to a transition or to a leave state condition 
    *@param iConditionId the filter ID
    *@param iConditionId1 Id of the fist filter to check in the composite filter
    *@param iConditionId2 Id of the second filter to check in the composite filter
    *@param iBoleanOp the composite filter type (AND/OR/NOT)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */
    CATBoolean  CreateCompositeCondition( const CATUnicodeString& iConditionId,
                                          const CATUnicodeString& iConditionId1,
                                          const CATUnicodeString& iConditionId2,  
                                          CATDE2Utilities::DE2BooleanOperationType iBoleanOp = CATDE2Utilities::UNKNOWN);

    
    /**
    *Create condition that can be added to a transition or to a leave state condition 
    *@param iConditionId the condition ID
    *@param iConditionsNamesList list of the conditions to check in the composite condition
    *@param iBoleanOp the composite condition type (AND/OR/NOT)
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  CreateCompositeCondition( const CATUnicodeString& iConditionId, 
                                          const CATListOfCATUnicodeString& iConditionsNamesList,
                                          CATDE2Utilities::DE2BooleanOperationType iBoleanOp = CATDE2Utilities::UNKNOWN);

    /**
    *Create an action that can be added to a transition or to a enter/leave state action
    *@param iActionID the action Id
    *@param iAction the name of the method to execute when triggering the tranistion it's associated to (declared in the state command target sypintro)
    *@param iUndo the name of the method to execute when undoing the tranistion it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@param iRedo the name of the method to execute when redoing the tranistion it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  CreateAction            ( const CATUnicodeString& iActionID, 
                                          const CATUnicodeString& iAction, 
                                          const CATUnicodeString& iUndo = "", 
                                          const CATUnicodeString& iRedo = "");

    /**
    *Add an enter action to a state of the command. 
    *@param iStateId the Id of the state on which to add the enter action 
    *@param iEnterAction the name of the method to execute when entering the state it's associated to (declared in the state command target sypintro)
    *@param iUndo the name of the method to execute when undoing the state entrance it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@param iRedo the name of the method to execute when redoing the state entrance it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  AddStateEnterAction     ( const CATUnicodeString& iStateId, 
                                          const CATUnicodeString& iEnterAction, 
                                          const CATUnicodeString& iUndo = "", 
                                          const CATUnicodeString& iRedo = "");

    /**
    *Add an enter action to a state of the command. 
    *@param iStateId the Id of the state on which to add the enter action 
    *@param iEnterActionId the Id of the action to add
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  AddStateEnterAction     ( const CATUnicodeString& iStateId, 
                                          const CATUnicodeString& iEnterActionId); 

    /**
    *Add an leave action to a state of the command. 
    *@param iStateId the Id of the state on which to add the leave action 
    *@param iEnterAction the name of the method to execute when exiting the state it's associated to (declared in the state command target sypintro)
    *@param iUndo the name of the method to execute when undoing the state exit it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@param iRedo the name of the method to execute when redoing the state exit it's associated to (declared in the state command target sypintro) - OPTIONAL 
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  AddStateLeaveAction     ( const CATUnicodeString& iStateId, 
                                          const CATUnicodeString& iLeaveAction,
                                          const CATUnicodeString& iUndo = "", 
                                          const CATUnicodeString& iRedo = ""); 

    /**
    *Add an leave action to a state of the command. 
    *@param iStateId the Id of the state on which to add the leave action 
    *@param iEnterActionId the Id of the action to add
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  AddStateLeaveAction     ( const CATUnicodeString& iStateId, 
                                          const CATUnicodeString& iLeaveActionId);

    /**
    *Add leave state condition to a state of the command. 
    *@param iStateId the Id of the state on which to add the leave condition (the command can't leave the state if the conidiotn is false)
    *@param iConditionId the Id of the condition to add
    *@param iBoleanOp if some condition already set, indicates how to compose this new condition with the existing one- OPTIONAL
    *@return TRUE if the creation was successful, FALSE otherwise.
    */ 
    CATBoolean  AddStateLeaveCondition  ( const CATUnicodeString& iStateId, 
                                          const CATUnicodeString& iConditionId, 
                                          CATDE2Utilities::DE2BooleanOperationType iBoleanOp = CATDE2Utilities::UNKNOWN);
    
  private:
    // Copy constructor and equal operator
    // -----------------------------------
    CATDE2BaseTarget (CATDE2BaseTarget &);
    CATDE2BaseTarget& operator=(CATDE2BaseTarget&);

    // Private Data Members
    // -----------------------------------
    CATString           _Name;
    CATUnicodeString    _TemplateName;
    CATUnicodeString    _VariationName;
    CATBaseUnknown_var  _spChild;
    CATSYPTemplateData* _pTemplateData;

    CATDE2TargetPrivateImplementation* _privateImplementation;

  friend class CATDE2Manager;
};
//-----------------------------------------------------------------------

#endif
