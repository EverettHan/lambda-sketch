//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2018/10/25
//===================================================================
// CATIAfrActionBarServices.h
// Header definition of class CATIAfrActionBarServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/10/25 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATIAfrActionBarServices__H
#define CATIAfrActionBarServices__H

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
#include "CATEventSubscriberTypedefs.h"

class CATISYPIntrospectable_var;

extern ExportedByCATAfrItf  IID IID_CATIAfrActionBarServices;

/**
 * Interface to call services on the ActionBar view.
 */
class ExportedByCATAfrItf CATIAfrActionBarServices : public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /**
   * Show or hide the ActionBar.
   *
   * @param i_showOrHide true to display the ActionBar, false to hide it.
   *
   * @note For ActionBar V2, the ActionBar is collapsed when it is hidden.
   * For ActionBar V3, the ActionBar is set invisible when hidden.
   */
  virtual void ShowActionBar(bool i_showOrHide) = 0;

  /**
   * Returns whether the ActionBar is expanded or collapsed.
   *
   * @return 1 when the ActionBar is expanded, 0 otherwise.
   *
   * @note Deprecated since R421. Use instead CATAfrIsActionBarDisplayed.
   */
  virtual int IsActionBarExpanded() =  0;

  /**
   * Returns whether the ActionBar is displayed or hidden.
   *
   * @return 1 when the ActionBar is visible, 0 otherwise.
   *
   * @note Since ActionBar V3 activation (R421), prefer using this function
   * instead of CATAfrIsActionBarExpanded.
   * For ActionBar V3 this is different from IsActionBarExpanded as some
   * sections can be floating (i.e. extracted from the ActionBar main component).
   * In that case, when IsActionBarDisplayed returns 1, that means all the
   * sections are hidden.
   * For ActionBar V2, this is equivalent to call IsActionBarExpanded.
   */
  virtual int IsActionBarDisplayed() = 0;

  /**
   * Register a callback to the event dispatched when the ActionBar is expanded
   * or collapsed.
   *
   * @note For ActionBar V2, the event is dispatched when the ActionBar state
   * changes from expanded to collapse (or vice versa).
   * For ActionBar V3, the event is dispatched when the ActionBar state changes
   * from visible to hidden (and vice versa).
   *
   * @param i_pEventSubscriber object that subscribes to the event
   * @param i_methodToCall member function to call when the event will be
   * dispatched
   * @param i_clientData data to associate
   */
  virtual CATCallback RegisterToActionBarExpandStateChanged(CATBaseUnknown * i_pEventSubscriber,
                                                            CATSubscriberMethod i_methodToCall,
                                                            CATSubscriberData i_clientData = NULL) = 0;

  /**
   * Unregister a previously registered callback to the event dispatched when
   * the ActionBar is expanded or collapsed.
   *
   * @see RegisterToActionBarExpandStateChanged
   *
   * @param i_pEventSubscriber object that subscribed to the event
   * @param i_callback identifier of the callback to remove.
   */
  virtual void UnregisterToActionBarExpandStateChanged(CATBaseUnknown * i_pEventSubscriber,
                                                       CATCallback i_callback) = 0;

private:
  /**
   * Get the view of the ActionBar.
   * Only used by AfrWindowManagerVIDMDI in order to layout it in CID Frame.
   *
   * @return the view of the ActionBar.
   */
  virtual CATISYPIntrospectable_var GetActionBarCtl() = 0;
  friend class CATAfrFrameLayoutServices;

};

#endif
