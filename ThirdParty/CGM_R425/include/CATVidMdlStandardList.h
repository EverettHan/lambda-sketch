//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/06/07
//===================================================================
// CATVidMdlStandardList.h
// Header definition of class CATVidMdlStandardList
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/07 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlStandardList_H
#define CATVidMdlStandardList_H

#include <VisuDialog.h>
#include <CATVidMdlListAdapter.h>
#include <CATSYPArray.h>
#include <CATLISTV_CATBaseUnknown.h>


/** @ingroup groupVidModelViewModel
 * Basic implementation of a list based model provided by CID.
 *
 * This model stores elements as CATBaseUnknown_var instances. However, to be
 * able to build the view of an item, this item must be instrospectable
 * (because the view is data binded to the data item).
 *
 * This model can be associated to the CATVidCtlListView component to display
 * its content.
 *
 * Adding an element to this model can be easily done using the Append member
 * function. Then, the model takes the ownership of the given data item.
 *
 *
 * The following code snippet shows how a CATVidMdlStandardList can be used:
 * @code
 * // Build the model
 * CATVidMdlStandardList * pModelList = new CATVidMdlStandardList;
 * if (pModelList)
 * {
 *    pModelList->Append(new DataItem("Object number 1"));
 *    pModelList->Append(new DataItem("Object number 2"));
 *    pModelList->Append(new DataItem("Object number 3"));
 *    pModelList->Append(new DataItem("Object number 4"));
 *    pModelList->Append(new DataItem("Object number 5"));
 *    pModelList->Append(new DataItem("Object number 6"));
 * 
 *
 *    // Retrieve a CATVidMdlIndex on the first element
 *    CATVidMdlIndex firstIdx = pModelList->CreateIndex(0, 0, CATVidMdlIndex());
 *    // firstIdx points to the data element identified by the string
 *    // "Object Number 1"
 *
 *    // Retrieve a CATVidMdlIndex on the third element
 *    CATVidMdlIndex thirdIdx = pModelList->CreateIndex(2, 0, CATVidMdlIndex());
 *    // thirdIdx points to the data element identified by the string
 *    // "Object Number 3"
 * }
 * @endcode
 *
 */

class ExportedByVisuDialog CATVidMdlStandardList : public CATVidMdlListAdapter
{
CATDeclareClass;
public:
  /**
   * Default Constructor
   */
  CATVidMdlStandardList();
  /**
   * Destructor
   */
  virtual ~CATVidMdlStandardList();
  /**
   * @copydoc CATIVidMdl#CreateIndex
   *
   * For list based models, CreateIndex asserts like HasIndex.
   */
  virtual CATVidMdlIndex CreateIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetRowCount
   */
  virtual int GetRowCount(const CATVidMdlIndex & i_index);
  /**
  * @copydoc CATIVidMdl#GetColumnCount
  */
  virtual int GetColumnCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#InsertRow
   *
   * InsertRow asserts when the i_row parameter doesn't correspond to a valid
   * row index.
   */
  virtual CATBoolean InsertRow(int i_row, const CATVidMdlIndex & i_parent);

  /**
  * @copydoc CATIVidMdl#InsertColumn
  *
  * InsertColumn asserts when the i_column parameter doesn't correspond to a valid
  * column index.
  */
  virtual CATBoolean InsertColumn(int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#RemoveRow
   *
   * InsertRow asserts when the i_row parameter doesn't correspond to a valid
   * row index.
   */
  virtual CATBoolean RemoveRow(int i_row, const CATVidMdlIndex & i_parent);
  /**
  * @copydoc CATIVidMdl#RemoveColumn
  *
  * RemoveColumn asserts when the i_column parameter doesn't correspond to a valid
  * row index.
  */
  virtual CATBoolean RemoveColumn(int i_column, const CATVidMdlIndex & i_parent);

  /**
   * @copydoc CATIVidMdl#RemoveList
   */
  virtual CATBoolean RemoveList(const CATSYPDynArray<CATVidMdlIndex> & i_listOfIndexes, CATBoolean i_updateAfterInsertion = TRUE);
  /**
   * @copydoc CATIVidMdl#SetElement
   *
   * SetElement asserts when i_index is not a valid index and the i_index._row
   * data member doesn't correspond to a valid row index.
   */
  virtual CATBoolean SetElement(const CATVidMdlIndex & i_index, const CATBaseUnknown_var & i_value);
  /**
   * @copydoc CATIVidMdl#GetElement
   *
   * GetElement asserts when i_index is not a valid index and the i_index._row
   * data member doesn't correspond to a valid row index.
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#Reset
   */
  virtual void Reset();
  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();
  /**
   * @copydoc CATIVidMdl#AppendList
   */
  virtual CATBoolean AppendList(const CATSYPDynArray<CATBaseUnknown_var> & i_listOfItems, const CATVidMdlIndex & i_parent);
  /**
   * Append an element to the end of the list model.
   *
   * @param i_spElement the element to append in the model.
   */
  void Append(const CATBaseUnknown_var & i_spElement);
  /**
   * Insert an item into the model.
   *
   * @param i_spElement the element to insert in the model
   */
  void Insert(int i_row, const CATBaseUnknown_var & i_spElement);
  /**
   * @copydoc CATIVidMdl#InsertItem
   */
  virtual CATBoolean InsertItem(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItem
   */
  virtual CATBoolean AppendItem(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
    /**
   * @copydoc CATIVidMdl#InsertItemClone
   */
  virtual CATBoolean InsertItemClone(int i_row, const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
   * @copydoc CATIVidMdl#AppendItemClone
   */
  virtual CATBoolean AppendItemClone(const CATVidMdlIndex & i_toIndex, const CATVidMdlIndex & i_fromIndex, CATVidMdlIndex * o_pResultingIndex = NULL);
  /**
  * @copydoc CATIVidMdl#InsertListOfRowsAt
  */
  virtual CATBoolean InsertListOfRowsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfRows, const CATVidMdlIndex & i_parent, int i_row=-1, CATBoolean i_updateAfterInsertion = TRUE);
  /**
  * @copydoc CATIVidMdl#InsertListofColumnsAt
  */
  virtual CATBoolean InsertListofColumnsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfColumns, const CATVidMdlIndex & i_parent, int i_column=-1, CATBoolean i_updateAfterInsertion = TRUE);

protected:
  /**
   * @copydoc CATIVidMdl#GetViewportDropLocation
   */
  virtual void GetViewportDropLocation(CATVidMdlIndex & o_index, CATVidDnD::DropLocation & o_location);

  
  //This array is used to keep temporary in memory the model items.(whereas they are dereferenced by the model).
  //If we do not force this memory keeping, CATVidMdlAdapter::Reset() call lead to "dispose" the view.
  //Particularly, it consists in remove some event handlers which can have been instanciated from a data block of a DB factory.
  //The remove of these handlers cannot be done if model item (datablock) has been removed.
  //So just during the method duration, we keep the model items in this array.
  virtual CATSYPDynArray<CATBaseUnknown_var> KeepItemsTemporaryInMemory();

private:

  /** The underlying list of list in which the items of the model are stored. */
  CATLISTV(CATBaseUnknown_var) _items;
  CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > _itemsList;

  // Copy constructor and equal operator
  // -----------------------------------
  CATVidMdlStandardList (CATVidMdlStandardList &);
  CATVidMdlStandardList& operator=(CATVidMdlStandardList&);

  int GetCurrentRow(const CATVidMdlIndex & i_fromIndex);

  friend class CATVidTstCATVidMdlStandardListEvents;
};

//-----------------------------------------------------------------------

#endif
