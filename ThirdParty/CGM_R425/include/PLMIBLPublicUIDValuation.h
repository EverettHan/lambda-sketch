//===================================================================
// COPYRIGHT [!output company] 2010/05/17
//===================================================================
// PLMIBLPublicUIDValuation.cpp
// Header definition of class PLMIBLPublicUIDValuation
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/05/17 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef PLMIBLPublicUIDValuation_H
#define PLMIBLPublicUIDValuation_H 

#include "PLMBusinessLogicInterfaces.h"
#include "CATBaseUnknown.h"

class CATListValCATIInstance_var;
class CATUnicodeString;

extern ExportedByPLMBusinessLogicInterfaces  IID IID_PLMIBLPublicUIDValuation ;


class ExportedByPLMBusinessLogicInterfaces PLMIBLPublicUIDValuation: public CATBaseUnknown
{
CATDeclareInterface;

public:

	 /** List of supported operation Id.*/
    enum OperationId {
		Coexistence = 0
    };

/**
    * Allows to valuate attributes which  takes part in Public Unique Identifier. 
	* This ones identifie an object during Multiple PDM transfer. 
    *
    * @param iOperationId
    *   Operation Id to differentiate the contextual usage. Authorized values are:
    *   <ul>
	*		<li> PLMIBLAttributesMapping::Coexistence (for PLM Coexistence scenario) </li>
    *   </ul>
    * @param iPLMContextList
    *   List of contextual objects and parameters. Each context may either be NULL or hold the following information:
    *   <ul>
    *       <li> SourceObject (object): parameter valuated when OperationId="Coexistence". This is a proxy object of the original PLM entity to transfer. Reading this PLM entity, the BL can retrieve its type and original attributes values.</li>
    *   </ul>
    * @param iPLMComponentList
    *   List of component proxies on which will be applied the custo type mapping.
	*
	* @param oCustoType
    *   The output customization type computed by the rule.
    *
    * @return
    *   <ul>
    *       <li> S_OK     if the business logic is successfully integrated </li>
    *       <li> S_FALSE  if their is no business logic to integrate for at least one component </li>
    *       <li> E_FAIL   if an error occurs. The following error classes and error identifiers can be associated with:
    *           <ul>
    *               <li>  @error PLMBLCustoTypeMappingError PLMBLCustoTypeMappingError::RunMapping::InternalError
    *                     The business logic access service failed
    *               </li>
    *               <li>  @error PLMBLCustoTypeMappingError PLMBLCustoTypeMappingError::RunMapping::ExecutionError
    *                     The business logic definition execution failed
    *               </li>
    *           </ul>
    *       </li>
    *   </ul>
    */
    virtual HRESULT RunPublicUIDValuation(PLMIBLPublicUIDValuation::OperationId iOperationId,
                               CATListValCATIInstance_var & iPLMContextList,
                               CATListValCATIInstance_var & ioPLMComponentList) = 0;

	/**
    * Provides the name of the source and target providers to give a context to the mapping. 
    *
    * @param iSource
    *   The name of the source provider to differentiate the contextual usage.
	*
	* @param iTarget
    *   The name of the target provider to differentiate the contextual usage.
	*
    */
	virtual void SetSourceAndTarget(CATUnicodeString& iSource, CATUnicodeString& iTarget) = 0;

	/**
    * Provides the name of the source obect type. 
    *
    * @param iSourceTypeName
    *   The name of the source obect type.
	*
    */
	virtual void SetSourceTypeName(CATUnicodeString& iSourceTypeName) = 0;

};

//-----------------------------------------------------------------------
CATDeclareHandler( PLMIBLPublicUIDValuation, CATBaseUnknown );

#endif
