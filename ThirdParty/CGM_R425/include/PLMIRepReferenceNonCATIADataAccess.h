// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// PLMIRepReferenceNonCATIADataAccess.h
// Define the PLMIRepReferenceNonCATIADataAccess interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2008  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIRepReferenceNonCATIADataAccess_H
#define PLMIRepReferenceNonCATIADataAccess_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATPLMModelerRepInterfaces.h"

// --- System framework
#include "CATBaseUnknown.h"

// --- Forward declaration
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerRepInterfaces IID IID_PLMIRepReferenceNonCATIADataAccess;
#else
extern "C" const IID IID_PLMIRepReferenceNonCATIADataAccess ;
#endif

//------------------------------------------------------------------

/**
 * Interface dedicated to manage non CATIA data of the representation reference.
 *
 * <br><b>Role</b>: This interface allows you to access and change the non CATIA document associated to the representation reference.
 */
class ExportedByCATPLMModelerRepInterfaces PLMIRepReferenceNonCATIADataAccess: public CATBaseUnknown
{
  CATDeclareInterface;

public:

    /**
     * Projects the content (who is a non CATIA document) of the representation reference on the filesystem. <br>
     * The 'Projection' operation means that every modification done on the projected file (if saved) will be taken
     * into account at Propagate.
     *
     *  @param  oDocumentPath
     *      The path corresponding to the non CATIA document projected on the file system. <br>
     *      Output parameter. <br>
     *      This parameter is valuated if method succeeds.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT ProjectContent (CATUnicodeString &oDocumentPath) = 0;

    /**
     * Gets the content (who is a non CATIA document) of the representation reference by extracting it on the filesystem. <br>
     * It corresponds to a CheckOut mechanism.
     *
     *  @param  iDocumentPath
     *      The path corresponding to the non CATIA document that will be extracted on the file system. <br>
     *      The extension of the filename has to be the same than the type defined at the creation of the non CATIA content representation. <br>
     *      Input parameter.
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT GetContent (CATUnicodeString &iDocumentPath) = 0;

    /**
     * Updates the non CATIA document associated to the representation reference. <br>
     * It corresponds to a CheckIn mechanism.
     *
     *  @param  iDocumentPath
     *      The file path of the existing non CATIA V5 document. <br>
     *      Input parameter.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT SetContent (const CATUnicodeString &iDocumentPath) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIRepReferenceNonCATIADataAccess, CATBaseUnknown);

//------------------------------------------------------------------

#endif
