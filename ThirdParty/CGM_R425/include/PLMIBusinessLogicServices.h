// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// PLMIBusinessLogicServices.h
// Define the PLMIBusinessLogicServices interface
//
//===================================================================
// Jun 2007  Creation: Code generated by the CAA wizard DOV
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef PLMIBusinessLogicServices_H
#define PLMIBusinessLogicServices_H

// Export
#include "PLMBusinessLogicInterfaces.h"

// Inheritance
#include "CATBaseUnknown.h"

class CATIInstance_var;
class CATIType_var;
class CATListValCATAttributeInfos;
class CATListValCATBaseUnknown_var;
class CATUnicodeString;


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMBusinessLogicInterfaces IID IID_PLMIBusinessLogicServices;
#else
extern "C" const IID IID_PLMIBusinessLogicServices;
#endif

/**
* Interface that provides services for the business logic access.
*/
class ExportedByPLMBusinessLogicInterfaces PLMIBusinessLogicServices: public CATBaseUnknown
{
    CATDeclareInterface;

public:

    /**
    * This method creates a volatile object that implements CATIInstance from a type definition.
    * All attributes available on provided type are available on created instance, with proper properties (read only state, manipulator).
    * The attributes are initially unset.
    *
    * @param ispType
    *   The type.
    * @param ospInstance
    *   The volatile instance which holds the input type.
    *
    * @return
    *   <ul>
    *       <li>S_OK            if successful </li>
    *       <li>E_INVALIDARG    if input type is NULL </li>
    *       <li>E_FAIL          if an internal error occurs </li>
    *   </ul>
    */
    virtual HRESULT CreateVolatileInstanceFromType(const CATIType_var & ispType, CATIInstance_var & ospInstance) = 0;

   /**
    * This method creates a volatile object that implements CATIInstance from a instance / type definition.
    * All attributes available on provided type are available on created instance, with proper properties (read only state, manipulator).
    * The attributes are initially unset.
    *
    * @param iInstance
    *   instance to copy from
    * @param iType
    *   The type.
    * @param oInstance
    *   The volatile instance which holds the input type.
    * @param iCopyAlsoExtensions
    *   Copying extension or not.
    *
    * @return
    *   <ul>
    *       <li>S_OK            if successful </li>
    *       <li>E_INVALIDARG    if input type is NULL </li>
    *       <li>E_FAIL          if an internal error occurs </li>
    *   </ul>
    */
    virtual HRESULT CreateVolatileInstanceFromInstance(const CATIInstance_var &iInstance, const CATIType_var &iType, CATIInstance_var &oInstance,CATBoolean iCopyAlsoExtensions) = 0;

    /**
    * This method encapsulates the retrieval of the public PLM attributes from an instance by filtering the inherited Knowledge attributes.
    *
    * @param ispInstance
    *   The instance from which to retrieve the PLM attributes.
    * @param ioInfosList
    *   The list of PLM attributes meta-information.
    * @param ioAttributesList
    *   The list of PLM attributes values.
    * @param iSetOnly
    *   Flag that controls whether the rerieval of set only or unset / set (the default) PLM attributes.
    *
    * @return
    *   <ul>
    *       <li>S_OK            if successful </li>
    *       <li>E_INVALIDARG    for one of the following reasons:
    *           <ul>
    *                           <li> if the input instance is NULL </li>
    *                           <li> if the input instance does not inherit from PLMEntity (which means this is not a PLM component) </li>
    *           </ul>
    *       </li>
    *       <li>E_FAIL          if an internal error occurs </li>
    *   </ul>
    */
    virtual HRESULT GetPLMAttributesFromInstance(CATIInstance_var & ispInstance,
        CATListValCATAttributeInfos & ioInfosList,
        CATListValCATBaseUnknown_var & ioAttributesList,
        CATBoolean iSetOnly = FALSE) = 0;


};

#endif
