// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATICATBack.h
// Define the CATICATBack interface
//
//===================================================================
//
// Usage notes:
//   New interface: This interface offers CATBack services
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  bhg
//===================================================================

/**
 * @level Private
 * @usage U3
 */

#ifndef CATICATBack_H
#define CATICATBack_H

#include "AC0XXLNK.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATIAV5Level.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByAC0XXLNK IID IID_CATICATBack;
#else
extern "C" const IID IID_CATICATBack ;
#endif

//------------------------------------------------------------------
class CATIProperty;
class CATUnicodeString;
class CATIDocId;
/**
 * This interface offers CATBack services
 */
class ExportedByAC0XXLNK CATICATBack: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * Save Properties about CATBack information in a document.
     * @param iProperty [in]
     *  The given property where CATBack information will be added.
     * @return
     *  <UL>
     *    <LI>S_OK, if everything goes well.</LI>
     *    <LI>S_FALSE, if CATBack environment is not defined.</LI>
     *    <LI>E_FAIL, if an error happened.</LI>
     *  </UL>
     */
    virtual HRESULT CATBackSaveProperties(CATIProperty*&  iProperty) = 0;
    /**
     * Checks if CATBack informations must be marshalled.
     *  @param iCurrenVersion [in]
     *    The version compared with current CATBack information.
     *  @param oStatus [out]
     *    This method compares iCurrentVersion with current CATBack information.
     *    oStatus is the result of this comparison. If oStatus > 0, current CATBack must be
     *    marshalled.
     *  @return
     *  <UL>
     *    <LI>S_OK, the information about the CATBackVersion and CATBackPath must be marshalled.</LI>
     *    <LI>S_FALSE, the information about the CATBackVersion and CATBackPath must not be marshalled.</LI>
     *    <LI>E_FAIL, if an error happened.</LI>
     *  </UL>
     */
    virtual HRESULT CATBackMarshalling(CATUnicodeString& iCurrentVersion) = 0;


	 /**
     * Checks if a document is the result of a V6->V5 conversion
     *  @param iDocId [in]
     *    The document to check.
     *  @param oIsCATBackedfromV6 [out] status on the document:<UL>
     *    <LI>TRUE: document is the result of a V6->V5 conversion
     *    <LI>FALSE: document isn't a V6->V5 conversion
     * </UL>
     *  @return
     *  <UL>
     *    <LI>S_OK, information successfully retrieved
     *    <LI>E_FAIL, if an error happened. <DD>Mainly invalid or Null input iDocId</LI>
     *  </UL>
     */
  
     virtual HRESULT IsCATBackedFromV6(CATIDocId * iDocId , CATBoolean & oIsCATBackedFromV6) = 0;

	 /**
     * Checks if a CATBack transaction is opened
     *  @param oIsCATBack [out] status on the CATBack transaction:<UL>
     *    <LI>TRUE: a CATBACK transaction is currently opened
     *    <LI>FALSE: no CATBACK transaction 
     * </UL>
     *  @return
     *  <UL>
     *    <LI>S_OK, 
     *  </UL>
     */
     virtual HRESULT IsCATBack(CATBoolean & oIsCATBack) = 0;

   /**
   * Returns last Targeted Version set by DownwardCompatibility application.
   * <BR>When no DownwardCompatibility process is running, the TargetedVersion is set to the CurrentVersion.
   * @return
   *		Last Targeted Version.
   */
  virtual CATUnicodeString GetTargetedVersion (void)  = 0;    

  /**
  * Sets the CATDWC transaction status.
  * @param iCatBack
  *			 CATDWC transaction status value.
  * <br><b>Legal values:</b><UL>
  * <LI>0: Current process is not in a CATDWC transaction </LI>
  * <LI>1: Current process is a V6-V5 CATDWC transaction </LI>
  * <LI>2: Current process is a V6-V6 CATDWC transaction </LI>
  * </UL>
  */
  virtual void SetCatback(int iCatBack) = 0;


  /**
  * Sets latest Targeted Version.
  * <BR>Set teh targeted version in case of a DownwardCompatibility application.
  * @param iLatestTargetedVersion
  *			Internal name of the targeted Version (CATIAV5Rxx).
  * @return
  *		Success status.
  * <br><b>Legal values:</b><br>
  * <tt>0</tt>	 Success.<br>
  * <tt>1997</tt> iLatestTargetedVersion is not supported.<br>
  */
  virtual int PutTargetedVersion(CATUnicodeString iLatestTargetedVersion) = 0;

};
//------------------------------------------------------------------

#endif
