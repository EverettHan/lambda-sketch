//===================================================================
// COPYRIGHT Dassault Systeme 2012/09/20
//===================================================================
// CATV3DCtlHandlePlaneTranslation.h
// Header definition of class CATV3DCtlHandlePlaneTranslation
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/09/20 Creation: Code generated by the 3DS wizard MF6
//===================================================================

#ifndef CATV3DCtlHandlePlaneTranslation_H
#define CATV3DCtlHandlePlaneTranslation_H

#include <VisuImmersive3D.h>
#include <CATV3DCtlHandle.h>

class CATMathPoint;

//-----------------------------------------------------------------------------
/**
 * This widget provides a standard styled plane translation manipulator.
 *
 * @par Role
 * A plane translation handle is used to manipulate object along a plane.
 * It send a translation event when manipulated and automaticaly handle his 
 * position when draging.
 * <br>
 *
 * @par Handle Position
 * Orient Handle using axis defined in @c CATV3DLay3D.Constraints
 * @see CATV3DLay3DConstraints#SetAxis
 * @see CATV3DTopWidget#SetLay3DConstraints
 *
 * @par Translation plane
 * The translation plane is always defined by the origin and third direction of the constraining axis.
 * Axis origin          -> Plane origin
 * Axis third direction -> Plane normal
 * @see CATV3DLay3DConstraints#SetAxis
 *
 * @par Templates
 * Available template names : Sector
 *
 * @par Creation
 * @code
 * CATV3DCtlHandlePlaneTranslation* pHandle = CATV3DCtlHandlePlaneTranslation::CreateHandlePlaneTranslation();
 * @endcode
 * @ingroup V3DControls
 */
class ExportedByVisuImmersive3D CATV3DCtlHandlePlaneTranslation : public CATV3DCtlHandle
{
  CATDeclareClass;
public:
  /** Constructor*/
  CATV3DCtlHandlePlaneTranslation ();
  /** Destructor*/
  virtual ~CATV3DCtlHandlePlaneTranslation ();

  /**
   * Constructs a CATV3DCtlHandlePlaneTranslation with standard style.
   */
  static CATV3DCtlHandlePlaneTranslation* CreateHandlePlaneTranslation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs a CATV3DCtlHandlePlaneTranslation with point style.
   */
  static CATV3DCtlHandlePlaneTranslation* CreateHandlePointPlaneTranslation(CATViewpoint* i_pViewpoint=NULL);

  /**
   * Constructs multiple CATV3DCtlHandlePlaneTranslation.
   */
  static void CreateHandlesPlaneTranslation(CATViewpoint* i_pViewpoint, const CATSYPDynArray<CATV3DLay3DConstraints>& i_lConstraints, const CATUnicodeString& i_type, CATSYPDynArray<CATV3DCtlHandlePlaneTranslation*>& oHandles);


  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the HandlePlaneTranslation when receiving
   * a drag event.
   *
   * This event is issued from the @ref Drag event @ref
   * CATV3DGraphicPrimitive#Drag.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Translate();

  /**
   * Sets the handle position to a new position on the plane.
   * @param iPt The position that will be projected on the plane.
   */
  void SetCurrentPoint(const CATMathPoint &iPt);
  /**
   * @return the imposed position on plane. It is not modified when the end-user manipulates the handle.
   * @see SetCurrentPoint
   */
  CATMathPoint GetCurrentPoint() const;

  /**
   * Handle drag event of manipulator view. Should be private.
   */
  void HandleDrag(CATBaseUnknown *i_pSender, CATV3DManipulationEventArgs *i_pArgs);

  /**
   * @copydoc l_CATV3DCtl#TemplateDataUpdated
   *
   * Here are the mandatory "syp:named" objects : 
   * @li GPManip [CATV3DGraphicPrimitive]
   */
  void TemplateDataUpdated();

private:
  CATV3DCtlHandlePlaneTranslation (CATV3DCtlHandlePlaneTranslation &);
  CATV3DCtlHandlePlaneTranslation& operator=(CATV3DCtlHandlePlaneTranslation&);
};

#endif
