//===================================================================
// COPYRIGHT Dassault Systemes 2014/05/15
//===================================================================
// CATPLMItgFLCompletionLog.cpp
// Header definition of class CATPLMItgFLCompletionLog
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2014/05/15 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMItgFLCompletionLog_H
#define CATPLMItgFLCompletionLog_H

#include "CATPLMIntegrationAccess.h"
#include "CATPLMIDCollections.h"
#include "CATBaseUnknown.h"

// Forward declaration
class CATPLMID;
class CATPLMItgFLCompletionLogCleaner;

//-----------------------------------------------------------------------
/**
 * This class is a log related to fl completion.<br>
 * This listener is fulfilled by the dedicated fl completion action and its content consumed by a listener called at the end of open step.
 */
class ExportedByCATPLMIntegrationAccess CATPLMItgFLCompletionLog
{
public:
  ~CATPLMItgFLCompletionLog();

  /**
   * Factory.<br>
   * Do not delete the Log.
   *
   *  @return
   *      The CATPLMItgFLCompletionLog singleton.
   */
  static CATPLMItgFLCompletionLog *getLog();

  /**
   *  The loading state of a fl reference.
   *
   *  @param  Full
   *    Coming from the standard completion.
   *  @param  Implementation
   *    Coming from the fl specific completion.<br>
   *    The reference in its implementative state with fl types loading partially.
   *  @param  InterfaceOnly
   *    Coming from the fl specific completion.<br>
   *    The reference in its interface state with fl types loading partially.
   */
  enum SystemLoadingState { Full, Implementation, InterfaceOnly };

  /**
   *  Returns the loading state of the provided FL Reference.
   *
   *  @param  ipFLReference
   *      A FL Reference.
   *  @param  oLoadingState
   *      A loading state 
   *  @return
   *
   */
  HRESULT GetSystemLoadingState(CATBaseUnknown *ipFLReference, SystemLoadingState &oLoadingState);

  /**
   * Returns the query filter used to load the logged Systems.
   *
   *  @param  opFLReference [CATBaseUnknown#Release]
   *      A fl reference.
   *  @param  opQueryFilter [CATBaseUnknown#Release]
   *      A query filter.
   *  @return 
   *
   */
  HRESULT GetQueryFilter(CATBaseUnknown *&opFLReference, CATBaseUnknown *&opQueryFilter);

  /**
   * Flush th log.
   */
  void Flush();

private:
  // Default constructor is private
  CATPLMItgFLCompletionLog ();

  friend class CATPLMFLCompletionAction;

  /**
   * Adds a loading state on the log.<br>
   * Can only be called by the FL Completion Action (see friend class).
   */
  void AddSystemLoadingState(const CATPLMID &iPLMID, SystemLoadingState iLoadingState);

  /**
   * Add the query filter used to load the logged fl data.<br>
   * Can only be called by the FL Completion Action (see friend class).
   */
  void SetQueryFilter(const CATPLMID &iRootPLMID, CATBaseUnknown *ipQueryFilter);

private:
  CATPLMIDIntMap m_plmidToloadingStateMap;
  CATBoolean m_flDedicatedCompletion;

  CATBaseUnknown *m_pQueryFilter;
  CATPLMID m_RootPlmid;


private:
  friend class CATPLMItgFLCompletionLogCleaner;

  static CATPLMItgFLCompletionLog *m_singleton;
  static CATPLMItgFLCompletionLogCleaner m_cleaner;
};

class CATPLMItgFLCompletionLogCleaner
{
public :
  CATPLMItgFLCompletionLogCleaner() {}
  ~CATPLMItgFLCompletionLogCleaner();
};

//-----------------------------------------------------------------------

#endif
