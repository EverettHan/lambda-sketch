// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATVVSObserver.h
// Header definition of CATVVSObserver
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2009  Creation: Code generated by the CAA wizard  BES
//===================================================================
#ifndef CATVVSObserver_H
#define CATVVSObserver_H
/**
* @level Private
* @usage U1
*/

#include "CATVVSNetBase.h"
#include "CATListOfCATVVSUrl.h"
#include "CATBoolean.h"
#include "CATDataType.h"
#include "IUnknown.h"

#include "CATVVSWatcher.h"

//-----------------------------------------------------------------------
/**
* This object is created by the Cache Layer and provided to the VVS Implementation of CATIMassiveCopy2/CATIMassiveSend2
* It allows the Cache Layer to be follow the download/upload process and provide this details to higher leverl code such as GUI
* to help the end user understanding how data are transfered on the network. 
*/

class ExportedByVVSNetBase CATVVSObserver : public CATVVSWatcher
{
  
  friend class CATVVSObserverServices;
  public:

  
  virtual ~CATVVSObserver ();
    
  
  /** 
  * VVS Impl informs the Cache Layer with the URLs that will be effectively uploaded
  *
  * <br><b>Role</b>: Only for CATIMassiveSend2 Implementation. 
  * This method must be called with all URLs once during the CATIMassiveSend2::Send method. 
  *
  * @param iURLsToBeSent [in]
  *   List of URLs that needs to be uploaded
  *
  * @return (No need for the VVS Impl to check the return code)
  *   <code>S_OK</code> 
  *   <code>E_INVALIDARG</code> method has been called twice by 
  *   <code>E_*</code> Unexpected errors. 
  *
  */
  virtual HRESULT SetURLsToBeSent(const CATListOfCATVVSUrl &iURLsToBeSent);  
  
  
  /** 
  * Inform the Cache Layer that download/upload is started for a given subset of URLs provided. 
  *
  *
  * @param iURLsToBeSent [in]
  *   List of URLs to be sent
  *
  * @return (No need for the VVS Impl to check the return code)
  *   <code>S_OK</code>
  *   <code>E_INVALIDARG</code> StartTransfert has been called several times with no matching EndTransfert. 
  *   <code>E_*</code> Unexpected errors. 
  *
  */
  virtual HRESULT StartTransfert(CATListOfCATVVSUrl &iURLsToBeSent);
  
  /** 
  * Inform the Cache Layer that download/upload is done for a given subset of URLs provided by StartTransfert. 
  *
  *
  * @param iSuccess [in]
  *   Subset has been uploaded/downloaded with success or failure
  *
  * @return (No need for the VVS Impl to check the return code)
  *   <code>S_OK</code>
  *   <code>E_INVALIDARG</code> EndTransfert has been called while StartTransfert has not been called  
  *   <code>E_*</code> Unexpected errors. 
  *
  */
  virtual HRESULT EndTransfert(CATBoolean iSuccess);
  
  /** 
  * Inform the Cache Layer with the progress in Ko of download/upload for the subset of URLs provided by StartTransfert. (Zip case) 
  *
  *
  * @param iSizeToSend [in]
  *   Ko remaining to be sent
  * @param iSizeSent [in]
  *   Ko already sent
  *
  * @return (No need for the VVS Impl to check the return code)
  *   <code>S_OK</code>
  *   <code>E_INVALIDARG</code> Update has been called while StartTransfert has not been called  
  *   <code>E_*</code> Unexpected errors. 
  *
  */
  virtual HRESULT UpdateTransfert(CATULONG32 iSizeToSend, CATULONG32 iSizeSent);
  
  /** 
  * Inform the Cache Layer with the progress in Ko of download/upload for the subset of URLs provided by StartTransfert. (URL by URL case) 
  *
  *
  * @param iURLsRemainingToBeSent [in]
  *  List of URLs remaining to be sent
  * 
  *
  * @return (No need for the VVS Impl to check the return code)
  *   <code>S_OK</code>
  *   <code>E_INVALIDARG</code> Update has been called while StartTransfert has not been called  
  *   <code>E_*</code> Unexpected errors. 
  *
  */  
  virtual HRESULT UpdateTransfert(CATListOfCATVVSUrl &iURLsRemainingToBeSent);
  
  CATVVSObserver ();

  private:
  // Only Cache Layer can instantiate this object through a dedicated service
  
  // Copy constructor and equal operator
  // -----------------------------------
  CATVVSObserver (CATVVSObserver &);
  CATVVSObserver& operator=(CATVVSObserver&);

};

//-----------------------------------------------------------------------

#endif
