
//===================================================================
// COPYRIGHT Microsoft 2011/03/10
//===================================================================
// CATAfrAdapterPLMCompass.cpp
// Header definition of class CATAfrAdapterPLMCompass
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/03/10 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAfrAdapterPLMCompass_H
#define CATAfrAdapterPLMCompass_H

#include "CATAfrItf.h"
#include "CATCommand.h"
#include "CATPLMCompassMode.h"
#include "CATIAfrPLMCompass.h"


//-----------------------------------------------------------------------

class ExportedByCATAfrItf CATAfrAdapterPLMCompass: public CATCommand

{
CATDeclareClass;

public:

// Standard constructors and destructors
// -------------------------------------
CATAfrAdapterPLMCompass ();
virtual ~CATAfrAdapterPLMCompass ();

 virtual HRESULT CreateVIDCompass(CATVizViewer * iViewer, const CATString &iName, CATCSO *iCSO = NULL, const CATBaseUnknown_var & iFilter = NULL_var, int iStyle=0);

   /**
  * Change parent. Implementation calls CATCommand::SetParent.
  **/
  virtual void Reparent(CATCommand * i_pParent);
  /**
  * Change current mode
  **/
  virtual void SetMode(const CATPLMCompassMode &iMode);
  /**
  * Get current mode
  **/
  virtual const CATPLMCompassMode & GetMode() const;
	/**
	 * Change current LiveShape mode
	 **/
	virtual void SetModeDesign( const CATPLMCompassMode &iMode ) ;
  /**
  *
  * <br><b>Role</b>: Return the associated viewer
  * @return the viewer
  * 
  */
  virtual CATVizViewer * GetViewer() const;

  /**
  * Change in PlayOnly Mode
  **/
  virtual void SetPlayerOnlyDesign()  ;
  /**
  * Get PlayerOnly mode
  **/
  virtual const CATBoolean GetPlayerOnlyDesign()  ;

  /**
  * Set player position and play mode
  * iPosition is between 0.0 and 1.0
  * iPlay is 0 for pause, 1 for play
  **/
  virtual void SetPlayer(  const float &  iPosition,  const int &  iPlay )  ;
  /**
  * Get player position and play mode
  **/
  virtual void GetPlayer( float &oPosition, int &oPlay ) const ;
  /**
  * Set plm compass visibility 
  **/
  virtual void SetCompassVisibility( const int & iVisibility )  ;
  /**
  * Get plm compass visibility
  **/
  virtual int GetCompassVisibility( void ) const ;
  /**
  * Set toolbar visibility (toolbar will show only if enabled)
  **/
  virtual void SetToolbarVisibility(  const int & iVisibility )  ;
  /**
  * Get toolbar visibility
  **/
  virtual int GetToolbarVisibility( void ) const ;
  /**
  * Make toolbar visible
  **/
  virtual void MakeToolbarVisible()  ;

  /**
   * Set refinement panel visibility
   **/
  void SetRefinementPanelVisibility(  const CATBoolean & iVisibility ) ;
  /**
   * Get refinement panel visibility
   **/
  CATBoolean GetRefinementPanelVisibility( void ) const;

  //-----------------------------********************---------------------------
  // Développement TPC 
  //-----------------------------********************---------------------------

  /**
  * Attach the compass to a 3D point.
  * iPath is the rep path that will be used to compute transformation to apply to iPoint
  * iPoint is the 3D point coordinate in the axis system defined by the transformation matrix
  * computed by CATRepPath. Most commonly the bounding sphere center of the rep of the object
  * to which the compass is attached to.
  * Sample:
  *
  CATPLMCompass *compass= CATPLMCompass::GetCompass( CAT3DNFrmWindow::GetCurrentWindow() )  ;
  if( compass && iPathElement )
  {
  CATRepPath rp;
  for( int i; i<iPathElement->GetSize()  ; i++ )
  {
  CATI3DGeoVisu_var visu( (*iPathElement)[i] )  ;
  if( !!visu )
  {
  CATRep *rep= visu->GetRep()  ;
  if( rep )
  {
  rp.AddRep( *rep )  ;
  }
  }
  }
  compass->SetAnchor( rp, CATMathPointf() )  ;
  compass->SetPosition( CATPLMCompass::Anchored )  ;
  }
  *
  **/
  virtual HRESULT SetAnchor( const CATRepPath &iPath, const CATMathPointf &iPoint )  ;
  /**
  * Detach the compass from 3D point, and put it back to its normal position
  **/
  virtual HRESULT UnsetAnchor( void )  ;

  /**
  * Select anchored of docked mode (SetAnchor must be called first before using the Anchor mode)
  **/
  virtual void SetPosition( const CATIAfrPLMCompass::Position &iPosition )  ;

  //-----------------------------********************---------------------------
  // Développement TPC 
  //-----------------------------********************---------------------------

  /**
  * Get/Set to know if the compass is painted grey
  **/
  // Every compasses will be greyed
  virtual void SetCompassGrey(bool isGreyed = true)  ;

  // Only this compass will be greyed
  virtual void SetThisCompassGrey(bool isGreyed = true)  ;

  // Return true if this compass is greyed (or if every compass is greyed)
  virtual bool IsCompassGrey()  ;


  /**
  * Set state of the animation
  **/
  virtual void SetPlayerState(CATAfrPLMCompassAnimState iStyle, CATBoolean iNotify)  ;

  /**
  * Attach to an object
  **/
  virtual void Attach( CATBaseUnknown *iObject ) ;
  /**
  * Detach from an object
  **/
  virtual void Detach( CATBaseUnknown *iObject ) ;

  /**
  * Adds a callback when PLM Compass mode change published by a given command.
  *
  * N.B : So as to avoid problems using the interface as data member in the scope 
  * of the method, you have to give as iUsefulData (the second parameter) this pointer casted.
  * ex : ... ->AddModeChangeNotificationCB( (CATCommandMethod)&MyClass::MyMethodCalledOnCB.., 
  (CATCommandClientData*)this)  ;
  *
  * Then in the method MyMethodCalledOnCB, you need to do for retrieving the pointer _piCompass
  * on CATIAfrVIDCompass  to do : 
  *
  * ex : 
  * MyClass * pMyClassptr = (MyClass *) iUsefulData
  * if (pMyClassptr)
  * { 
  *   CATIAfrVIDCompass * piCompass = pMyClassptr -> _piCompass; // or for CATFrmWindow type use GetCompassPtrItf() to retrieve the compass
  *   if (piCompass)
  *   {
  *    // Finally , I can now do my treatment by using the class pointer.
  *
  * @param iMethodToExecute
  *   The method to execute 
  * @param iUsefulData
  *   Data to pass to <tt>iMethodToExecute</tt> and that can be useful
  *   to this method
  * @return
  *   The added callback
  */
  virtual CATCallback AddModeChangeNotificationCB(CATCommandMethod iMethodToExecute, CATCommandClientData iUsefulData) ;

  /**
  * Sets the model
  **/
  virtual HRESULT SetModel( CATIAfrPLMCompassModel* ipiModel )  ;

    /**
  * Sets the model
  **/
  virtual HRESULT SetCompassModel( CATAfrCompassModel * ipModel ) ;

  /**
  * Sets the model anchored
  **/
  virtual HRESULT SetCompassModelAnchored( CATAfrCompassModel * ipModel );


  /**
  * Sets the label view
  **/
  virtual HRESULT SetLabelView( CATIAfrCompassLabelView* ipiModel )  ;

protected:
	/**
	 * Current mode
	 **/
	CATPLMCompassMode _Mode;
	/**
	 * Current LiveShape mode
	 **/
	CATPLMCompassMode _ModeDesign;
private:
// Copy constructor and equal operator
// -----------------------------------
CATAfrAdapterPLMCompass (CATAfrAdapterPLMCompass &);
CATAfrAdapterPLMCompass& operator=(CATAfrAdapterPLMCompass&);
};

//-----------------------------------------------------------------------

#endif

