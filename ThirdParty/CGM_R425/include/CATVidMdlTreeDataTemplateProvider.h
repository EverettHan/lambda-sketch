//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/02/13
//===================================================================
// CATVidMdlTreeDataTemplateProvider.h
// Header definition of class CATVidMdlTreeDataTemplateProvider
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/02/13 Creation: Code generated by the 3DS wizard  JV8
//===================================================================

#ifndef CATVidMdlTreeDataTemplateProvider_H
#define CATVidMdlTreeDataTemplateProvider_H

#include <VisuDialog.h>
#include <CATBaseUnknown.h>
#include <CATSYPHashMap.h>
#include <CATSYPArray.h>
#include <CATUnicodeString.h>
#include <CATSetOfCATUnicodeString.h>

class CATVidMdlIndex;
class CATVidCtlAbstractItemsView;

/**
 * CATVidMdlTreeDataTemplateProvider implements the CATIVidDataTemplateProvider
 * interface to allow the selection of a particular data template depending
 * on some conditions.
 *
 * Basically, data templates registered into this provider can be used depending
 * on two conditions: the type of object on which the data template is applied and
 * its state. So, you can associate a data template to a type of object and all objects
 * of this type will use this data template to build their views. The same
 * mechanism applies for the state of an item. The state of an item is defined by the
 * control responsible to display the item as children. For example, this is the expanded
 * or collapsed state of an item displayed into a tree.
 *
 * The order used to determine which data template must be used given an item and its
 * state is the following:
 * if there is no state, this provider assumes that the item is in its default state.
 * So first, the data template associated to the type of the item is retrieved. Then,
 * if this type of item has a data template associated to the current state of the item,
 * this one is returned.
 * If the type of the given item isn't associated to a data template, its state is used
 * to determine which data template must be returned. Finally, the default template is
 * returned when no others data templates have been found.
 */
class ExportedByVisuDialog CATVidMdlTreeDataTemplateProvider : public CATBaseUnknown
{
  CATDeclareClass;
public:
  /** Default constructor */
  CATVidMdlTreeDataTemplateProvider ();

  /** Destructor */
  virtual ~CATVidMdlTreeDataTemplateProvider ();

  /** 
   * @copydoc CATIVidMdlDataTemplateProvider#SelectDataTemplate
   */
  virtual int SelectDataTemplate(const CATVidMdlIndex & i_index, const CATBaseUnknown_var & i_spItem, const CATVidCtlAbstractItemsView * i_pView, CATUnicodeString & o_styleSheet, CATUnicodeString & o_dataTemplate);

private:

  /** The default data template name to use to build the view of a data item */
  CATUnicodeString _defaultDataTemplate;
  /** The default stylesheet in which the default data template is looked for */
  CATUnicodeString _defaultStyleSheet;

};

#endif
