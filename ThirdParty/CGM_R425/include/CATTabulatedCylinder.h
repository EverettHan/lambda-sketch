#ifndef CATTabulatedCylinder_h
#define CATTabulatedCylinder_h

// COPYRIGHT DASSAULT SYSTEMES  1999

/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */ 
#include "CATSurface.h"
#include "CATMathDef.h"
#include "CATIACGMLevel.h"
class CATCurve ;
class CATCrvLimits ;
class CATMathDirection ;
#include "ExportedByCATGMGeometricInterfaces.h"
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATGMGeometricInterfaces IID IID_CATTabulatedCylinder ;
#else
extern "C" const IID IID_CATTabulatedCylinder ;
#endif

/**
 * Interface representing an tabulated cylinder.
 *<br> The CATTabulatedCylinder is created by the <tt>CreateTabulatedCylinder</tt>
 * method of the <tt>CATGeoFactory</tt> interface and deleted with the <tt>Remove</tt> method. 
 *<br>A CATTabulatedCylinder is the surface generated by the translation of a
 * generative curve.
 *<table>
 * <tr><td>CATCurve</td><td><tt> Profile </tt></td>
 *                <td> The curve to translate </td></tr>
 * <tr><td>CATMathDirection</td><td><tt> Dir </tt></td>
 *                <td> The translation direction </td></tr>
 * <tr><td>double</td><td><tt> Start </tt></td>
 *                <td> The low limitation of the surface on the translation
 * direction</td></tr>
 * <tr><td>double</td><td><tt> End </tt></td>
 *                <td> The high limitation of the surface on the translation
 * direction</td></tr>
 *</table>
 * A CATTabulatedCylinder can be trimmed by the curve limitations in one
 * direction and by a <tt>Start</tt> and <tt>End</tt> lengths 
 * in the other direction.
 */
class ExportedByCATGMGeometricInterfaces CATTabulatedCylinder : public CATSurface
{
  CATDeclareInterface;

public :
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //            C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/**
 * Returns a pointer to the generating curve of <tt>this</tt> CATTabulatedCylinder.
 * @return
 * The pointer to the generating curve.
 */
  virtual CATCurve* GetProfile()  const = 0  ;

  /**
 * Returns a pointer to the generating curve of <tt>this</tt> CATTabulatedCylinder.
 * @param ioProfileLimits
 * The limits of the returned generating curve
 * @return
 * The pointer to the generating curve.
 */
  virtual CATCurve* GetProfile(CATCrvLimits & ioProfileLimits )  const = 0  ;

/**
 * @nodoc
 * @deprecated V5R18 Use CATCurve* GetProfile(CATCrvLimits & ioProfileLimits )
 * Returns the limitations of <tt>this</tt> CATTabulatedCylinder along its profile.
 * @param ioProfileLimits
 * The limitations of the profile.
 */
  virtual void GetProfileLimits( CATCrvLimits & ioProfileLimits ) const = 0 ;

/**
 * Returns the direction of translation of <tt>this</tt> CATTabulatedCylinder.
 * @param ioDirection
 * The direction of translation.
 */
  virtual void GetDirection(CATMathDirection & ioDirection)  const = 0 ;

/**
 * Returns the low limitation of the length on the rule direction
 * of <tt>this</tt> CATTabulatedCylinder .
 * @return
 * The length low limitation.
 */
  virtual double GetStart()  const = 0 ;

/**
 * Returns the high limitation of the length on the rule direction
 * of <tt>this</tt> CATTabulatedCylinder .
 * @return
 * The length high limitation.
 */  
  virtual double GetEnd()  const = 0 ;

/**
 * Modifies <tt>this</tt> TabulatedCylinder.
 * @param iProfile
 * A pointer to the new generating curve.
 * @param iProfileLimits
 * The new limitations of the profile.
 * @param iDirection
 * The new direction of translation.
 * @param iStart
 * The length new low limitation.
 * @param iEnd
  * The length new high limitation.
 */  
  virtual void Set( CATCurve*               iProfile,
                    const CATCrvLimits     &iProfileLimits,
	                const CATMathDirection &iDirection,
	                const double         iStart,
	                const double         iEnd     ) = 0; 


  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //               N O N - C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/**
 * @nodoc
 * Updates CATTabulatedCylinder Data for Extrapolation
 */
  virtual void Extrapolation( const CATLONG32  &iOldNumberOfArcs, const CATLONG32 &iRelativOffset) =0;

/** @nodoc */
  virtual void SetProfile ( CATCurve* iNewProfile )  = 0;
	/** @nodoc */
  virtual void SetDirection( const CATMathDirection &iNewDirection ) = 0;

	/** @nodoc */
  virtual void SetStart ( const double iNewStart ) = 0 ;
	/** @nodoc */
  virtual void SetEnd ( const double iNewEnd ) = 0 ;
	/** @nodoc */
  virtual CATMathDirection GetDirection()  const = 0 ;


};
  CATDeclareHandler(CATTabulatedCylinder,CATSurface);

#endif
