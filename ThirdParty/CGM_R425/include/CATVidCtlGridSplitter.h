// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlGridSplitter.h
// Header definition of CATVidCtlGridSplitter
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlGridSplitter_H
#define CATVidCtlGridSplitter_H

#include <VisuDialog.h>
#include <CATVidCtl.h>
#include <CATVidColor.h>
#include <CATMathPointf.h>
#include <CAT4x4Matrix.h>
#include <CATVidLaySideAttachConstraints.h>
#include <CATVid.h>

#include <CATUnicodeString.h>

class CATMathVector2Df;
class CATVidLaySideAttach;
class CATMathDirection2Df;
class CATVidLayGrid;
class CATVidLayGridIterator;
class CATVidMouseEventArgs;

//-----------------------------------------------------------------------

/**
 * Use this component in a grid, to resize it.
 * 
 * @par How to use it
 * This class is a widget, that must be layouted inside a CATVidCtlGrid.
 *   - Place it in a cell.
 *   - Specify its orientation (with #SetOrientation).
 *   - Span it on the entire length of the column.
 *   - Give it a RequestedMinimumDimension (for example (5,5)).
 *   - Give more weight to other columns (or rows) of the grid (see CATVidLayGrid::SetConstraints).
 * 
 * @see CATVidLayGrid
 * @see CATVidLayGridWeight
 * @ingroup VIDControls
 */
class ExportedByVisuDialog CATVidCtlGridSplitter: public CATVidCtl
{
  CATDeclareClass;
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATVidCtlGridSplitter ();
  static CATVidCtlGridSplitter* CreateGridSplitter(CATCommand *i_pParent, const CATString & i_pIdentifier);

  void SetOrientation(CATVid::Orientation i_orientation);
  CATVid::Orientation GetOrientation() const;

  /**
  * Sets the color to be used
  * @param i_color
  * The color to set.
  */
  void SetColor(const CATVidColor &i_color);
  /**
  * @return the color used
  */
  const CATVidColor &GetColor(void) const;

  void ResizeCB(CATBaseUnknown *i_pSender, CATVidMouseEventArgs *i_pArgs);
  /**
  * Get the @c GridSplitterDrag event.
  * 
  * The @c GridSplitterDrag is emitted when the grid splitter is dragged.
  * 
  * @par EventProperties
  *   - Name: @c "GridSplitterDrag"
  *   - Type of propagation: @c NoPropagation
  *   - Type of argument: @ref CATSYPGridSplitterDragEventArgs
  * 
  * @return the event instance. @c AddRef has NOT been called on
  * the returned pointer.
  */
  static CATSYPEvent* GridSplitterDrag();

protected:
  virtual ~CATVidCtlGridSplitter ();

private:
  void GetGroupInfo(unsigned int i_index, CATVidLayGrid* i_pLayGrid, CATVidLayGridIterator* i_pGridIterator, float& o_minSize, float& o_size, float& o_weight);

  // Copy constructor and equal operator
  CATVidCtlGridSplitter (CATVidCtlGridSplitter &);
  CATVidCtlGridSplitter& operator=(CATVidCtlGridSplitter& original);

  void Drag(float i_dragValue);

  void StartUseIterator();

  void StopUseIterator();

private:

  CATVid::Orientation _orientation;
  CATVidLayGridIterator* _pGridIterator;
  CATVidColor _color;

  friend class l_CATVidCtlGridSplitter;
};

#endif
