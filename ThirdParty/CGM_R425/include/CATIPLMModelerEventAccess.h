// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMModelerEventAccess.h
// Define the CATIPLMModelerEventAccess interface
//
//===================================================================
//
// Usage notes:
//   This interface allows applications to acceede to listened 
//   modeler events.
//
//===================================================================
//
//  Mar 2007  Creation: Code generated by the CAA wizard  xlu
//===================================================================
//
#ifndef CATIPLMModelerEventAccess_H
#define CATIPLMModelerEventAccess_H

/**
 * @level Protected
 * @usage U1
 */

#include "CATPLMModelerBaseInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATPLMModelerEventDef.h"
#include "CATSysMacros.h"
#include "CATOmxSR.h"
#include "CATPLMModelerMessage.h"
#include "CATOmxStaticAssert.h"

class CATListValCATBaseUnknown_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerBaseInterfaces IID IID_CATIPLMModelerEventAccess;
#else
extern "C" const IID IID_CATIPLMModelerEventAccess;
#endif

/**
 * event class
 * you will receive a list of those events in your implementation of CATIPLMModelerEventListener::ProcessEvent
 */
class ExportedByCATPLMModelerBaseInterfaces CATIPLMModelerEventAccess : public CATBaseUnknown
{
  CATDeclareInterface;
public:
  /**
   * the context, it is the root occurrence for occurrences events
   * Always returns S_OK
   */
  virtual HRESULT GetContext(CATBaseUnknown_var& ospContext) = 0;
  CATBaseUnknown_var GetContext() const
  {
    CATBaseUnknown_var context;
    (void)const_cast<CATIPLMModelerEventAccess*>(this)->GetContext(context);
    return context;
  }

  /**
   * list of involved objects
   * Always returns S_OK
   */
  virtual HRESULT GetObjects(CATListValCATBaseUnknown_var& oObjects) = 0;

  /**
   * Always returns S_OK
   */
  virtual HRESULT GetEntityType(CATPLMModelerEventEntityType &oEntityType) = 0;
  CATPLMModelerEventEntityType GetEntityType() const
  {
    CATPLMModelerEventEntityType type;
    (void)const_cast<CATIPLMModelerEventAccess*>(this)->GetEntityType(type);
    return type;
  }

  /**
   * Always returns S_OK
   */
  virtual HRESULT GetActionType(CATPLMModelerEventActionType &oActionType) = 0;
  CATPLMModelerEventActionType GetActionType() const
  {
    CATPLMModelerEventActionType type;
    (void)const_cast<CATIPLMModelerEventAccess*>(this)->GetActionType(type);
    return type;
  }

  /**
   * same as GetObjects but oObjects respects occurrences creation order contrarily to GetObjects
   */
  virtual void GetObjects2(CATListValCATBaseUnknown_var& oObjects) = 0;

  /**
   * retrieve modeler message
   * valid if and only if GetActionType() == PLM_ModelerMessage
   *
   * @usage
   * class MyMessage: public CATPLMModelerMessage { CATDeclareClass; };
   *
   * CATOmxSR<MyMessage> msg = event.GetModelerMessage<MyMessage>();
   *
   * do not use GetModelerMessage<CATBaseUnknown>()
   */
  template<class ModelerMessageType>
  CATOmxSR<ModelerMessageType> GetModelerMessage() const
  {
    OMX_STATIC_ASSERT(std::is_base_of<CATPLMModelerMessage, ModelerMessageType>::value, "template type must inherit CATPLMModelerMessage");
    return CAT_DYNAMIC_CAST(ModelerMessageType, _GetModelerMessage());
  }
private:
  virtual CATPLMModelerMessage* _GetModelerMessage() const = 0;
};

CATDeclareHandler(CATIPLMModelerEventAccess, CATBaseUnknown);

#endif
