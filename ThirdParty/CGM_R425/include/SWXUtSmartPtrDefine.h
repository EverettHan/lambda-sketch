//===================================================================
// COPYRIGHT DS SolidWorks 2010/07/19
//===================================================================
// SWXUtSmartPtr.h
// Header definition of class SWXUtSmartPtr
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/07/19 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtSmartPtrDefine_H
#define SWXUtSmartPtrDefine_H
#include <SWXUtSmartBase.h>
#include <SWXUtSwap.h>


#define SWXUtSmartPtrDefineNoConst(TYPE)                                    \
    TYPE##_Ptr::TYPE##_Ptr() : mPtr(NULL) {}                                \
    TYPE##_Ptr::TYPE##_Ptr(TYPE *iPtr) : mPtr(iPtr){                        \
        SWXUtSmartBase *checkBase = iPtr;                                   \
        SWXUtIntrusivePtrAddRef(mPtr);                                      \
   }                                                                        \
   TYPE##_Ptr::TYPE##_Ptr(const TYPE##_Ptr &iPtr) : mPtr(iPtr.mPtr){        \
        SWXUtSmartBase *checkBase = mPtr;                                   \
        SWXUtIntrusivePtrAddRef(mPtr);                                      \
   }                                                                        \
   TYPE##_Ptr::~TYPE##_Ptr(){                                               \
        SWXUtIntrusivePtrRelease(mPtr);                                     \
   }                                                                        \
   TYPE##_Ptr::operator TYPE *() const {                                    \
       return mPtr;                                                         \
   }                                                                        \
   TYPE * TYPE##_Ptr::Ptr() const {                                         \
       return mPtr;                                                         \
   }                                                                        \
   void TYPE##_Ptr::Reset() {                                               \
        SWXUtIntrusivePtrRelease(mPtr);                                     \
        mPtr = NULL;                                                        \
   }                                                                        \
   void TYPE##_Ptr::swap(TYPE##_Ptr &other) {                               \
        SWXUtSwapMac(TYPE*, mPtr, other.mPtr);                              \
   }                                                                        \
   TYPE *TYPE##_Ptr::operator->() const { return mPtr;}                     \
   TYPE &TYPE##_Ptr::operator*() const { return *mPtr;}                     \
   TYPE##_Ptr &TYPE##_Ptr::operator=(const TYPE##_Ptr &other) {             \
         TYPE##_Ptr(other).swap(*this);                                     \
        return *this;                                                       \
   }                                                                        \
   TYPE##_Ptr &TYPE##_Ptr::operator=(TYPE *other) {                         \
        TYPE##_Ptr(other).swap(*this);                                      \
        return *this;                                                       \
   }                                                                        \
   bool TYPE##_Ptr::operator<(const TYPE##_Ptr &other) const {              \
        return (mPtr < other.mPtr);                                         \
   }                                                                        \
   bool TYPE##_Ptr::operator==(const TYPE##_Ptr &other) const {             \
        return (mPtr == other.mPtr);                                        \
   }                                                                        \
   bool TYPE##_Ptr::operator!=(const TYPE##_Ptr &other) const {             \
        return (mPtr != other.mPtr);                                        \
   }                                                                        \
   bool TYPE##_Ptr::operator==(TYPE * other) const {                        \
        return (mPtr == other);                                             \
   } 


#define SWXUtSmartPtrDefineConst(TYPE)                                      \
    TYPE##_ConstPtr::TYPE##_ConstPtr() : mPtr(NULL) {}                      \
    TYPE##_ConstPtr::TYPE##_ConstPtr(TYPE const *iPtr) : mPtr(iPtr){        \
        SWXUtSmartBase const *checkBase = iPtr;                             \
        SWXUtIntrusivePtrAddRef(mPtr);                                      \
   }                                                                        \
   TYPE##_ConstPtr::TYPE##_ConstPtr(const TYPE##_Ptr &iPtr)                 \
        : mPtr((TYPE *)iPtr){                                               \
        SWXUtSmartBase const *checkBase = mPtr;                             \
        SWXUtIntrusivePtrAddRef(mPtr);                                      \
   }                                                                        \
   TYPE##_ConstPtr::TYPE##_ConstPtr(const TYPE##_ConstPtr &iPtr)            \
        : mPtr(iPtr.mPtr){                                                  \
        SWXUtSmartBase const *checkBase = mPtr;                             \
        SWXUtIntrusivePtrAddRef(mPtr);                                      \
   }                                                                        \
   TYPE##_ConstPtr::~TYPE##_ConstPtr(){                                     \
        SWXUtIntrusivePtrRelease(mPtr);                                     \
   }                                                                        \
   TYPE##_ConstPtr::operator TYPE const *() const {                         \
       return mPtr;                                                         \
   }                                                                        \
   TYPE const * TYPE##_ConstPtr::Ptr() const {                              \
       return mPtr;                                                         \
   }                                                                        \
   void TYPE##_ConstPtr::Reset() {                                          \
        SWXUtIntrusivePtrRelease(mPtr);                                     \
        mPtr = NULL;                                                        \
   }                                                                        \
   void TYPE##_ConstPtr::swap(TYPE##_ConstPtr &other) {                     \
        SWXUtSwapMac(TYPE const *, mPtr, other.mPtr);                       \
   }                                                                        \
   TYPE const *TYPE##_ConstPtr::operator->() const { return mPtr;}          \
   TYPE const &TYPE##_ConstPtr::operator*() const { return *mPtr;}          \
   TYPE##_ConstPtr &TYPE##_ConstPtr::operator=(const TYPE##_Ptr &other) {   \
         TYPE##_ConstPtr(other).swap(*this);                                \
        return *this;                                                       \
   }    \
   TYPE##_ConstPtr &TYPE##_ConstPtr::operator=(const TYPE##_ConstPtr &other) {   \
         TYPE##_ConstPtr(other).swap(*this);                                \
        return *this;                                                       \
   }    \
   TYPE##_ConstPtr &TYPE##_ConstPtr::operator=(TYPE const *other) {         \
        TYPE##_ConstPtr(other).swap(*this);                                 \
        return *this;                                                       \
   }                                                                        \
   bool TYPE##_ConstPtr::operator<(const TYPE##_ConstPtr &other) const {    \
        return (mPtr < other.mPtr);                                         \
   }                                                                        \
   bool TYPE##_ConstPtr::operator==(const TYPE##_ConstPtr &other) const {   \
        return (mPtr == other.mPtr);                                        \
   }                                                                        \
   bool TYPE##_ConstPtr::operator!=(const TYPE##_ConstPtr &other) const {   \
        return (mPtr != other.mPtr);                                        \
   }                                                                        \
   bool TYPE##_ConstPtr::operator==(TYPE * other) const {                   \
        return (mPtr == other);                                             \
   }

#define SWXUtSmartPtrDefine(TYPE) \
    SWXUtSmartPtrDefineNoConst(TYPE) \
    SWXUtSmartPtrDefineConst(TYPE)
#endif //SWXUtSmartPtrDefine_H

