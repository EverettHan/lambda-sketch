// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMAttributesReader.h
// Define the CATIPLMAttributesReader interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIPLMAttributesReader_H
#define CATIPLMAttributesReader_H

/**
 * @level Protected
 * @usage U3
 */


#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"

class CATString;
class CATIPLMValueReader;


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMAttributesReader;
#else
extern "C" const IID IID_CATIPLMAttributesReader ;
#endif

//------------------------------------------------------------------

/**
 * This CATIPLMAttributesReader contains the attribute part of the message destinated to a PLMComponent
 * It gives access to a set of Key/values
 *
 * This interface is used in the refresh process between the engines and the PLMComponents,
 * it is the vector of the message from the server
 *
 * @see CATIPLMValueReader
 *
 * @example
 * class::method(CATIPLMAttributesReader * ipAttRead)
 * {
 *   unsigned int nbAtt=ipAttRead->Size();
 *   for (int it=1; it<=nbAtt; it++)
 *   {
 *     CATString AttributeId;
 *     CATIPLMValueReader * pReader=NULL;
 *     if(SUCCEEDED(piReader->GetAttribute(it, AttributeId, pReader) ) && pReader)
 *     {
 *       // do some work
 *       CATSysReleasePtr(pReader);
 *     }
 *     else CATSysLogAbend(); // error
 *   }
 * }
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMAttributesReader: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  /**
   * Gives the number of attributes available in this set
   */
  virtual unsigned int Size() = 0;

  /**
   * Gives the couple attribute / value of a given index
   * @param index [in] the index is between 1 and the size given by #Size
   * @param oAttributeKey [out] the AttributeId
   * @param oValue [out,CATBaseUnknown#Release] the value 
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured
   */
  virtual HRESULT GetAttribute(const unsigned int index, CATString & oAttributeKey, CATIPLMValueReader *& oValue) =0;

};

//------------------------------------------------------------------

#endif
