// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIAdpPLMIdentificator.h
// Define the CATIAdpPLMIdentificator interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2005  Creation: Code generated by the CAA wizard  PMM
//===================================================================
/**
* @CAA2Level L1
* @CAA2Usage U3  
*/
#ifndef CATIAdpPLMIdentificator_H
#define CATIAdpPLMIdentificator_H

#include "CATPLMIdentificationAccess.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIdentificationAccess IID IID_CATIAdpPLMIdentificator;
#else
extern "C" const IID IID_CATIAdpPLMIdentificator ;
#endif

class CATIAdpType;

//------------------------------------------------------------------

/**
* Interface representing identificator of PLM components.
*
*  <b>Role</b> Components that implement this interface are 
*  session objects carrying information to uniquely identify PLM Components in the database.
*/
class ExportedByCATPLMIdentificationAccess CATIAdpPLMIdentificator: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------

/** 
 * PLM Component comparison operator.
 *
 * <br><b>Role</b>: Checks equality between two Identificators.
 *
 * @param iToCompare [in]
 *   The identificator to compare.
 * @param oIsEqual [out]
 *   Equality result.
 *
 * @return
 *   <code>S_OK</code> if the test could be performed.<br>
 *   <code>E_FAIL</code> if the test could not be performed.
 *
 */
  virtual HRESULT IsEqual( CATIAdpPLMIdentificator * iToCompare, CATBoolean & oIsEqual ) = 0;

  /** 
  * ComputeHashKey.
  * <br><b>Role</b>: Get Distribution Key.
  *
  * @param oDistributionKey [out]
  *   Distribution Key result.
  *
  * @return
  *   <code>S_OK</code>    if DistributionKey could be provided.<br>
  *   <code>E_FAIL</code>  if the test could not be performed.
  *
  */
  virtual unsigned int ComputeHashKey() const = 0;

  /**
  * Returns the PLM Component identificator validity.
  *    <br><b>Role</b>:
  *    A PLM Component identificator is always valid to make PLM Component comparison ( @href #IsEqual ) or 
  *     to retrieve an hash table key (@href #ComputeHashKey ). But if the PLM Component has never been saved in
  *     database (repository), remote (short transactions) operations like Query/Open/Expand/versioning 
  *     are not possible.
  *    <p>Once the PLM Component is saved, you must retrieve a new PLM Component identificator pointer 
  *    (using @href CATIPLMComponent#GetAdpID or using Query services) to handle a new and valid 
  *    interface pointer. </p>
  * @param oValidForRemoteUsage
  *      The validity flag.
  *      <ul>
  *      <li><tt>TRUE</tt>  if Identificator is complete and valid in repository
  *            meaning : it has been handle after a Query/Open/Expand/Save<li>
  *
  *      <li><tt>FALSE</tt> if Identificator is partially defined and not valid in repository
  *            meaning : it has been handle from a newly created object not yet saved once<li>
  *      </ul>
  * @return
  * <dt> <code>S_OK</code>            <dd> Success
  * <dt> <code>E_FAIL</code>          <dd> Failure
  */
  virtual HRESULT IsValidForRemoteUsage(CATBoolean & oValidForRemoteUsage) const = 0;

  /**
  * Returns the PLM Class type.
  * 
  * @param oAdpType [out, CATBaseUnknown#Release]
  *   The returned type (to be released)
  * @return
  * <dt> <code>S_OK</code>     <dd> Success
  * <dt> <code>E_FAIL</code>   <dd> Failure
  *
  */
  virtual HRESULT GetAdpType(CATIAdpType *& oAdpType) = 0;
};

CATDeclareHandler( CATIAdpPLMIdentificator, CATBaseUnknown );
//------------------------------------------------------------------

#endif
