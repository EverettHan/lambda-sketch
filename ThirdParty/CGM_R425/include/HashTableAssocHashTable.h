#ifndef HashTableAssocHashTable_h
#define HashTableAssocHashTable_h

//**********************************************************************************************************************
// class HashTableAssocHashTable
//---------------------------------------------------------------------------------------------------------------------
// Class implementing an hash table associating each element to an hash table.
// In this way you can add a link A->B between 2 elements A and B.
// We say that A "generates" B and B "is generated by" A.
// Let's call N the total number of generating elements,
//  and M the average number of generated elements for each generating one.
//
// Creation:
//    HashTableAssocHashTable * Table = new HashTableAssocHashTable(int iAllocatedSize);
//
// Deletion:
//    delete Table;
//    Table = NULL;
//
// Add a link: (cost 1)
//    Table->AddLink(A, B, EstimatedNumberOfAssocForA);
// or
//    Table->AddLink(A, B);
//
// Remove a link: (cost 1)
//    Table->RemoveLink(A, B);
//
// Test the existence of a link A->B: (cost 1)
//    CATBoolean LinkExists = Table->LocateLink(A, B);
//
// Test if there is something generated by A: (cost 1)
//    CATBoolean ItemExists = Table->Contains(A);
//
// Get number of elements generating something: (cost 1)
//    int NbItems = Table->Size();
//
// Get number of elements generated by A: (cost 1)
//    int NbGeneratedByA = Table->GetNbAssoc(A);
//
// Scan all links inside the table:
//    HashTableAssocHashTable_Begin(*Table, CurrentItem, CastedItemType, CurrentAssoc, CastedAssocType)
//    {
//       CurrentItem->CastedItemType::...
//       CurrentAssoc->CastedAssocType::...
//    } HashTableAssocHashTable_End;
//
// Scan all elements generated by A:
//    HashTableAssocHashTable_ItemBegin(*Table, A, CurrentAssoc, CastedAssocType)
//    {
//       CurrentAssoc->CastedAssocType::...
//    } HashTableAssocHashTable_ItemEnd;
//---------------------------------------------------------------------------------------------------------------------
// 2011 WEEK 16      Creation                                                                                      LD2
//**********************************************************************************************************************

#define HTAHT_InheritFromCAHT

#include "ExportedByCATTopologicalObjects.h"
#include "CATBoolean.h"
#include "CATMathInline.h"

class CATCGMHashTable;

#include "CATAdaptiveHashTable.h"

class ExportedByCATTopologicalObjects HashTableAssocHashTable : public CATAdaptiveHashTable
{
public:
  /**
  * Constructor
  *
  * @param iAllocatedSize
  * The estimated number of elements in the table.
  */
  HashTableAssocHashTable(int iAllocatedSize);

  /**
  * Destructor
  */
  virtual ~HashTableAssocHashTable();

  /**
  * Adds element iFrom to the table (if it is not yet inside).
  * Adds element iTo to the table associated to iFrom (if it is not yet inside).
  * Cost: 1
  */
  void AddLink(void * iFrom, void * iTo, int iEstimatedNumberOfAssoc = 0);

  /**
  * Returns the number of elements contained in the table associated to iItem.
  * Cost: 1
  */
  int GetNbAssoc(void * iItem);

  /**
  * Returns the table associated to iItem.
  * Cost: 1
  */
  CATCGMHashTable * GetDrawer(void * iItem);

  /**
  * Returns the internal table at a given position.
  * Cost: 1
  */
  CATCGMHashTable * GetDrawer(int iPos);

protected:
  virtual void Reallocate();
  virtual void CreateEmptyTables();
  virtual void ResetTables();
  virtual void ReplaceByLastElement(int iPos);

private:
  CATCGMHashTable ** _HashTables;
};

#define HashTableAssocHashTable_ItemBegin(TABLE, ITEM, ASSOC, ASSOCTYPE)                     \
CATCGMHashTable * __##ASSOC##Iterator = (TABLE).GetDrawer(ITEM);          \
if (__##ASSOC##Iterator)                                                                     \
{                                                                                            \
  int __##ASSOC##i, __##ASSOC##n(__##ASSOC##Iterator->Size());                               \
  for (__##ASSOC##i = 0; __##ASSOC##i < __##ASSOC##n; __##ASSOC##i++)                        \
  {                                                                                          \
    ASSOCTYPE ASSOC = (ASSOCTYPE)__##ASSOC##Iterator->Get(__##ASSOC##i);                     \
    if (ASSOC)                                                                               \
    {

#define HashTableAssocHashTable_ItemEnd           \
    }                                             \
  }                                               \
}

#define HashTableAssocHashTable_Begin(TABLE, ITEM, ITEMTYPE, ASSOC, ASSOCTYPE)      \
int __##ITEM##i, __##ITEM##n((TABLE).Size());                                 \
for (__##ITEM##i = 0; __##ITEM##i < __##ITEM##n; __##ITEM##i++)                     \
{                                                                                   \
  ITEMTYPE ITEM = (ITEMTYPE)(TABLE).GetItem(__##ITEM##i);                           \
  HashTableAssocHashTable_ItemBegin(TABLE, ITEM, ASSOC, ASSOCTYPE)                  \
  {

#define HashTableAssocHashTable_End        \
  } HashTableAssocHashTable_ItemEnd;       \
}

#endif
