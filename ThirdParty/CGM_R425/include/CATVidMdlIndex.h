//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/06/07
//===================================================================
// CATVidMdlIndex.h
// Header definition of class CATVidMdlIndex
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/07 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlIndex_H
#define CATVidMdlIndex_H

// Local framework
#include <VisuDialog.h>

// UIVCoreTools framework
#include <UIVCoreToolsInline.h>

// System framework
#include <CATBaseUnknown.h>
#include <CATSysWeakRef.h>

class CATIVidMdl;

/** @ingroup groupVidModelViewModel
 * An object that references an item stored inside a CID data model (which
 * implements the CATIVidModel interface).
 *
 * A CATVidMdlIndex object is associated to an item of a CID model through:
 *   - a row number
 *   - a column number
 *   - a pointer on a model
 *   - a pointer on the item referenced by the index
 *
 * Note: When an element is inserted into or deleted from the model or even
 * modified, all CATVidMdlIndex instances may be invalidated. So using a
 * previously acquired CATVidMdlIndex object can lead to undefined behavior.
 * Thus, it's not advised to store CATVidMdlIndex.
 *
 *
 * Note: this class is copy-constructible and assignable using the default
 * generated corresponding methods.
 */
class ExportedByVisuDialog CATVidMdlIndex
{
public:
  /**
   * Default constructor
   * Initialize an invalid CATVidMdlIndex object.
   */
  CATVidMdlIndex();
  /**
   * Constructor
   * @param i_row the row number of the index.
   * @param i_column the column of the index.
   * @param i_pModel A pointer on the model associated to this index.
   *
   * @note 
   * Use CATIVidMdl::CreateIndex instead of the index constructor
   * in order to make sure to work with consistant indexes.
   */
  CATVidMdlIndex(int i_row, int i_column, CATIVidMdl * i_pModel, CATBaseUnknown * i_pValue = NULL);
  /**
   * Copy constructor.
   *
   * @param i_toCopy the object to copy.
   */
  CATVidMdlIndex(const CATVidMdlIndex & i_toCopy);
  /**
   * Destructor
   */
  ~CATVidMdlIndex();
  /**
   * Assignement operator.
   *
   * @param i_toCopy the object to copy.
   */
  CATVidMdlIndex & operator=(const CATVidMdlIndex & i_toCopy);
  /**
   * Returns the row number.
   *
   * @return the row number.
   */
  INLINE int GetRow() const { return _row; }
  /**
   * Returns the column number.
   *
   * @return the column number.
   */
  INLINE int GetColumn() const { return _column; }
  /**
   * Returns the depth of the index in the model structure.
   *
   * @return the depth of the index.
   *
   * @note 
   * For a list based model, all indexes depth are equal to 0.
   * For a tree based model, only the root index has a depth equal to 0.
   */
  int GetDepth() const;
  /**
   * Returns whether this index is above the given index.
   *
   * @return 1 if this index is above the given i_index, 0 otherwise.
   */
  int IsAbove(CATVidMdlIndex & i_index) const;
  /**
   * Returns whether this index is a leaf of the model.
   *
   * @return 1 if this index is a leaf, 0 otherwise.
   */
  int IsLeaf() const;
  /**
   * @param i_index any valid index.
   *
   * @return 1 if the input index is a (strict) parent of the index, 0 
   * otherwise. Return 0 if input index is not in the same model.
   */
  int IsParentOf(const CATVidMdlIndex & i_index) const;
  /**
   * @param i_index any valid index.
   *
   * @return 1 if the input index is a (strict) child of the index, 0 
   * otherwise. Return 0 if input index is not in the same model.
   */
  int IsChildOf(const CATVidMdlIndex & i_index) const;
  /**
   * Retrieves the parent of the item referenced by this index.
   *
   * @return the parent of the item referenced by this index if this index is
   * associated to a model.
   */
  CATVidMdlIndex GetParent() const;
  /**
   * Retrieves an index on the sibling located at i_row and i_column position of
   * the current element referenced by this index.
   *
   * @param i_row the row number of the requested sibling.
   * @param i_column the column number of the requested sibling.
   * @return if it exists, a model index on the item located at i_row and
   * i_column or otherwise an invalid CATVidMdlIndex.
   */
  CATVidMdlIndex GetSibling(int i_row, int i_column) const;
  /**
   * Retrieves a model index on the child item located at i_row and i_column.
   *
   * @param i_row the row number of the wanted child.
   * @param i_column the column number of the wanted child.
   * @return a model index on the retrieved child, or if it does not exist
   * an invalid index.
   */
  CATVidMdlIndex GetChild(int i_row, int i_column) const;
  /**
   * Retrieves the model associated to this index.
   *
   * @return the model associated to this index.
   */
   CATIVidMdl * GetModel() const;
  /**
   * Determines whether the index is valid or not.
   * A valid index references an existing item into the model, i.e. those criteria are fullfiled:
   *  - _row > 0
   *  - _column > 0
   *  - _model is not NULL
   *
   * @return 1 if the index is valid, otherwise 0.
   */
  INLINE int IsValid() const { return (_row >= 0 && _column >= 0 && _modelInterfaceWR != NULL && _modelInterfaceWR->GiveComponent() != NULL) ? 1 : 0; };
  /**
   * Retrieves the element referenced by this CATVidMdlIndex.
   * If the index is not related to a model, NULL_var is returned.
   *
   * @return the element referenced by this CATVidMdlIndex.
   */
  CATBaseUnknown_var GetElement() const;
  /**
   * Retrieves the item from the model that encapsulates the value stored.
   *
   * @return the item that encapsulates the value stored, or NULL_var.
   */
  INLINE CATBaseUnknown * GetStoredItem() const { return _pValue ? _pValue->GiveComponent() : NULL; };

	/*
	* Set the capacity of node to expand only parts of its children.
	* WARNING, This feature only works with CATVidMdlCacheTreeAdapter inherited models.
	* Assertion will occur if model is from another type.
	*/
	void SetPartialExpandFlag(int i_flag);

	/*
	* Get the capacity of node to expand only parts of its children.
	*/
	int GetPartialExpandFlag();

  /**
   * Operator== declaration.
   *
   * @param i_left the left element uses into the comparison.
   * @param i_right the right element uses into the comparison.
   * @return 1 if the two elements are equal, otherwise 0.
   *
   * @note only compares _model and _pValue in order to work with non-persistant indexes.
   */
  friend ExportedByVisuDialog int operator== (const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);
  /**
   * Operator!= declaration.
   *
   * @param i_left the left element uses into the comparison.
   * @param i_right the right element uses into the comparison.
   * @return 0 if the two elements are different, otherwise 1.
   */
  friend ExportedByVisuDialog int operator!= (const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);
  /**
   * Operator< declaration.
   *
   * @param i_left the left element uses into the comparison.
   * @param i_right the right element uses into the comparison.
   * @return 1 if the i_left model index is smaller than the i_right model index, otherwise 0.
   */
  friend ExportedByVisuDialog int operator< (const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);
  /**
   * Operator> declaration.
   *
   * @param i_left the left element uses into the comparison.
   * @param i_right the right element uses into the comparison.
   * @return 0 if the i_left model index is smaller than the i_right model index, otherwise 1.
   */
  friend ExportedByVisuDialog int operator> (const CATVidMdlIndex & i_left, const CATVidMdlIndex & i_right);
private:
  /** Row number of the element referenced by the model index */
  int _row;
  /** Column number of the element referenced by the model index */
  int _column;
  /**
   * Item referenced by the index (for list based model that inherits
   * CATVidMdlListAdapter, _spValue == NULL_var)
   */
  CATSysWeakRef * _pValue;
  /** Pointer on the model to which the model index is associated */
  CATSysWeakRef * _modelInterfaceWR;
  CATIVidMdl* _pUnprotectedModelInterface;
};

//-----------------------------------------------------------------------

#endif
