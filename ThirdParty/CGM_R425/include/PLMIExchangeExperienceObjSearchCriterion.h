//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2014x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2013/12/09
//===================================================================
// PLMIExchangeExperienceObjSearchCriterion.cpp
// Header definition of class PLMIExchangeExperienceObjSearchCriterion
//===================================================================
//
// Usage notes: Object used to define criteria to search for objects in the session.
//
//===================================================================
//  2013/12/09 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceObjSearchCriterion_H
#define PLMIExchangeExperienceObjSearchCriterion_H

#include "PLMExchangeInterfaces.h"
#include "PLMExchangeExperienceDictionary.h"
#include "CATBaseUnknown.h"
#include "CATListOfInt.h"

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceObjSearchCriterion ;

class PLMIExchangeExperienceObjSearchCriteria;

class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceObjSearchCriterion: public CATBaseUnknown
{
CATDeclareInterface;

public:

   /**
   * <b> AddCriteria :</b> Add a search criteria for the session object.
   * Added criterion are separated with the OR operator.
   * Please use the returned criteria to set info such as : 
   * - TypeMask 
   *        The mask is build from PLMExchangeExperienceObjectType (defined in PLMExchangeExperienceDictionary.h) and is there to specify which object to consider. 
   *        PLMType_None -> There's no mask set, all the type will be taken into account.
   *        ie : TypeMask = (PLMType_Reference | PLMType_Instance), means that only reference and instance are considered. 
   *
   * - Search Level
   *        The level corresponds to the search tree level for the given mask. The level is relative to the type set in the mask.                 
   *        Level = 0 -> no limit. The whole tree will be searched. 
   *
   *  - List of level to ignore
   *        Correspond to the levels on which the object will be ignored and thus not returned.  
   *        - If IgnoreLevel is empty, then all the encountered object will be returned accordingly to the set search tree level.                  
   *        - If IgnoreLevel has been appended with 0, then all the object of the set search tree level will be returned.   
   *        ie : Level 3 and IgnoreLevel is empty, then objects of level 1 ,2 and 3 will be returned.
   *        ie : Level 3 and IgnoreLevel is appended with 0,  then only the objects of level 3 will be returned.
   *        ie : Level = 4 and IgnoreLevel is appended with 2 and 3 -> Object of level 1 and 4 will be returned.
   *
   * @param opCreatedObjSearchItf [out, CATBaseUnknown#Release]
   * output pointer on the created criteria.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL
   */ 
   virtual HRESULT AddCriteria(PLMIExchangeExperienceObjSearchCriteria * & opCreatedObjSearchItf) = 0 ;

   /**
   * <b> Reset :</b> Reset the object and remove all the added crieterion.
   */ 
   virtual void Reset() = 0 ;

   /**
   * <b> GetSize :</b> Return the number of added criteria.
   */ 
   virtual int GetSize() = 0;
   
   /**
   * <b> GetNbOfActiveCriteria :</b> Return the number of criteria that can activated for all the possible types.
   * It will check for each type, how many criterion are applicables. These values are then sum up together.
   * A criteria can be counted more than once if it can apply to multiple types.      
   *
   * @param oNbOfActiveCriteria (out)
   * Number of active criteria. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL
   */ 
   virtual HRESULT GetNbOfActiveCriteria(int & oNbOfActiveCriteria) = 0;

   /**
   * <b> GetCriterionForType :</b> Get the criteria applicable for a given type.       
   *
   * @param iObjectType (in)
   * input object type on which returned criterion will be applicable. 
   *
   * @param oListOfCriteriaPos (out)
   * output list of position for each criteria matching the given search object type. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL
   */ 
   virtual HRESULT GetCriterionForType(unsigned int iObjectType , CATListOfInt & oListOfCriteriaPos) =0;

   /**
   * <b> GetCriteria :</b> Get the criteria set for the given position.
   *
   * @param iPosition (in)
   * The position of the criteria. Value must be between 1 and size of current SearchCriterion object.
   *
   * @param opCriteriaItf [out, CATBaseUnknown#Release]
   * output pointer on the created criteria.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *                   E_FAIL
   */    
   virtual HRESULT GetCriteria( int iPosition ,  PLMIExchangeExperienceObjSearchCriteria * & opCriteriaItf) = 0;
};

//-----------------------------------------------------------------------

#endif
 
