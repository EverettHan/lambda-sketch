//===================================================================
// COPYRIGHT Dassault Systemes 2017/01/19
//===================================================================
// CATVidCtlActionBarV3FlyOut.h
// Header definition of class CATVidCtlActionBarV3FlyOut
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/01/19 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATVidCtlActionBarV3FlyOut__H
#define CATVidCtlActionBarV3FlyOut__H

#include <VisuDialogEx.h>
#include <CATVidCtl.h>
#include <CATISYPIntrospectable.h>
#include <CATSYPArray.h>
#include <CATSYPDataBlockFactory.h>

class CATSysWeakRef;

/**
 * ActionBar V3 FlyOut.
 */
class ExportedByVisuDialogEx CATVidCtlActionBarV3FlyOut : public CATVidCtl
{
  CATDeclareClass;

public:
  /** Default constructor */
  CATVidCtlActionBarV3FlyOut();
  /**
   * Constructor
   *
   * @param i_pParent the parent CATCommand of this new instance
   * @param i_identifier the CATCommand identifier to set to this new instance
   */
  CATVidCtlActionBarV3FlyOut(CATCommand * i_pParent, const CATString & i_identifier);
  /** Destructor */
  virtual ~CATVidCtlActionBarV3FlyOut();
  /**
   * Create a standard FlyOut.
   *
   * @param i_pParent the parent CATCommand of this new instance
   * @param i_identifier the CATCommand identifier to set to this new instance
   *
   * @return the created FlyOut or NULL in case of failure.
   */
  static CATVidCtlActionBarV3FlyOut * CreateStandardFlyOut(CATCommand * i_pParent, const CATString & i_identifier);
  /**
   * Create an icon box FlyOut.
   *
   * @param i_pParent the parent CATCommand of this new instance
   * @param i_identifier the CATCommand identifier to set to this new instance
   * @param i_iconName the name of the icon to display in the topline
   *
   * @return the created FlyOut or NULL in case of failure.
   */
  static CATVidCtlActionBarV3FlyOut * CreateIconBoxFlyOut(CATCommand * i_pParent, const CATString & i_identifier, const CATUnicodeString i_iconName);

  /**
   * Append an item to the FlyOut.
   *
   * @param i_spData the data to append.
   */
  void AddItem(CATISYPIntrospectable_var i_spData);
  /**
   * Clear the element located at the given index from the FlyOut.
   *
   * @param i_index the index corresponding to the item to clear.
   */
  void ClearLine(int i_index);

  /**
   * Select the item corresponding to the given index.
   *
   * @param i_index the index of the item to select.
   * @param i_dispatchEvent flag to dispatch or not the event.
   */
  void SetSelectedIndex(int i_index, bool i_dispatchEvent = true);
  /**
   * Get the index of the selected item.
   *
   * @return the index of the selected item.
   */
  int GetSelectedIndex();

  /**
   * Get the @c Click event.
   *
   * The @c Click event is dispatched on the FlyOut when an item within it has
   * been clicked.
   *
   * @par EventProperties
   *   - Name: @c "Click"
   *   - Type of propagation: @c NoPropagation
   *   - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Click();

  /**
   * Get the @c Click event.
   *
   * The @c Click event is dispatched on the FlyOut when an item within it has
   * been double clicked.
   *
   * @par EventProperties
   *   - Name: @c "Click"
   *   - Type of propagation: @c NoPropagation
   *   - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *DoubleClick();

  /**
   * Visually activate the item corresponding to the given index.
   *
   * @note No command is started when calling this member function.
   *
   * @param i_index the index corresponding to the item to activate.
   */
  void ActivateButton(int i_index);
  /**
   * Visually deactivate the item corresponding to the given index.
   *
   * @note No command is started when calling this member function.
   *
   * @param i_index the index corresponding to the item to deactivate.
   */
  void DeactivateButton(int i_index);

  /**
   * Get the number of elements contained inside the fly out.
   *
   * @return the number of elements contained inside the fly out.
   */
  int GetCount();
  /**
   * Get the data item located at the given index.
   *
   * @param i_index the index of the item to retrieve.
   *
   * @return the data item located at the given index or NULL_var in case of
   * error.
   */
  CATISYPIntrospectable_var GetDataItem(int i_index);

  /**
   * Set the value of the DisplayLabelFlag.
   *
   * @param i_value the new value of the DisplayLabelFlag.
   */
  void SetDisplayLabelFlag(int i_value);
  /**
   * Get the value of the DisplayLabelFlag.
   *
   * @return the value of the DisplayLabelFlag.
   */
  int GetDisplayLabelFlag() const;

  /**
   * Set the customization flag value.
   *
   * @param i_custoFlag true when the customization of the ActionBar is set,
   * false otherwise.
   */
  void SetCustomizationFlag(bool i_custoFlag);
  /**
   * Get the value of the customization flag.
   *
   * @return the value of the customization flag.
   */
  bool GetCustomizationFlag() const;
  /**
   * Event handler for the ComboSelect event dispatched by the internal combo.
   *
   * @param i_pSender the combo that sent this event
   * @param i_pArgs the argument associated to this event.
   */
  void HandleComboSelectEvent(CATBaseUnknown* i_pSender, CATSYPEventArgs* i_pArgs);

protected:
  /**
   * Initialization of the object after the template has been applied.
   */
  virtual void TemplateDataUpdated();

private:
  // Not implemented
  CATVidCtlActionBarV3FlyOut(const CATVidCtlActionBarV3FlyOut &);
  CATVidCtlActionBarV3FlyOut& operator= (const CATVidCtlActionBarV3FlyOut &);

  /**
   * Set the IconBox style for this FlyOut.
   */
  void SetIconBoxStyle();
  /**
   * Set the standard style for this FlyOut.
   */
  void SetStandardStyle();

  /**
   * Select the given data item.
   *
   * @param i_spData the data item to select.
   */
  void SelectData(CATISYPIntrospectable_var i_spData);
  /**
   * Dispatch the DoubleClick event for the given data item.
   *
   * @param i_spData the data item correpsonding to the view that has been
   * double clicked.
   */
  void DispatchDoubleClick(CATISYPIntrospectable_var i_spData);

  /** Lock the execution of items
   *  Internally, it increments the _executionLockCounter variable.
   */
  void LockExecution();

  /** Unlock the execution of items
   *  Internally, it decrements the _executionLockCounter variable.
   */
  void UnlockExecution();

  // Weak reference on the combo that made the view of the FlyOut
  CATSysWeakRef * _pComboWR;
  // List of data item displayed by this FlyOut
  CATSYPDynArray<CATISYPIntrospectable_var> _items;
  // Icon to display for icon box style
  CATUnicodeString _iconName;
  // DataBlockFactory to create the data that contains the tooltip information
  CATSYPDataBlockFactory _tooltipDataFactory;
  // Flag indicating whether or not the label of command should be
  // displayed in the top line
  // 1 means label is displayed
  // 0 means label is hidden
  int _displayLabelFlag;
  // Customization flag
  // true when the customization is set on the ActionBar, false otherwise.
  bool _customizationFlag;

  // Use to avoid executing the selected item when SetSelectedItem is called
  // with false as second parameter (i_dispatchEvent).
  int _executionLockCounter;

  friend class CATVidFlyOutDataItem;
  friend class CATVidCtlABV3FlyOutTester;

};

#endif
