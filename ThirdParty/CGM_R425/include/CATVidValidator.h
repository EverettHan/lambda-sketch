// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidValidator.h
// Header definition of CATVidValidator
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2010  Creation: Code generated by the CAA wizard  TUV
//===================================================================
#ifndef CATVidValidator_H
#define CATVidValidator_H

#include <CATBaseUnknown.h>
#include <CATVidInformation.h>
#include <CATDataType.h>
#include <CATUnicodeString.h>
#include <VisuDialog.h>

/**
 * @ingroup VIDCore
 */
/**
 * Class providing validation of input text.
 * The class itself is abstract. Two subclasses, CATVidIntValidator and CATVidDoubleValidator, 
 * provide basic numeric-range checking.
 * If these validators aren't sufficient, you can subclass CATVidValidator.
 * @see CATVidIntValidator
 * @see CATVidDoubleValidator
 */
class ExportedByVisuDialog CATVidValidator : public CATBaseUnknown
{
  CATDeclareClass;

public:
  CATVidValidator();
  virtual ~CATVidValidator();

  /**
   * Returns TXT_INVALID if input is invalid according to the validator's rules, 
   * TXT_INTERMEDIATE if it is likely that a little more editing will make the input acceptable (e.g. the user 
   * types "4" into a widget which accepts integers between 10 and 99), and TXT_VALID if the input is valid.
   * This virtual function must be overriden.
   */
  virtual CATVidTextValidationState Validate(const CATUnicodeString& i_strInputString) const = 0;

  /**
   * Returns TXT_INVALID if the input char code is invalid according to the validator's rules, 
   * TXT_INTERMEDIATE if it is likely that a little more editing will make the input acceptable (e.g. the user 
   * types "4" into a widget which accepts integers between 10 and 99), and TXT_VALID if the input char is valid.
   * This virtual function must be overriden.
   */
  virtual CATVidTextValidationState ValidateKeyStroke(const CATUINT32 i_charCode) const {return TXT_VALID;}

  /**
   * This function can optionnaly change the input string to be valid according to the validator's rules. 
   * It need not result in a valid string: callers of this function must re-test afterwards; 
   * the default implementation does nothing.
   * @param i_strInputString
   * The input string to fix
   * @param o_strCorrectedString
   * The retrieved corrected string
   * @return
   * TXT_INVALID if input is invalid, TXT_INTERMEDIATE if it is likely that a little more editing will make the input acceptable, 
   * and TXT_VALID if the input is valid.
   */
  virtual CATVidTextValidationState FixUp(
    const CATUnicodeString& i_strInputString,
    CATUnicodeString& o_strCorrectedString) const;

  CATINT32 GetType() const;
protected:
  CATINT32 _type; // 0: Integer 1: Double
};

/**
 * @ingroup VIDCore
 */
/**
 * Class providing a validator that ensures a string contains a valid integer within a specified range.
 */
class NumericalValidatorInput;

class ExportedByVisuDialog CATVidIntValidator : public CATVidValidator
{
  CATDeclareClass;

public:
  CATVidIntValidator();
  virtual ~CATVidIntValidator();

  /**
   * Reimplemented from CATVidValidator::validate().
   * Returns TXT_VALID if the input is an integer within the valid range, TXT_INTERMEDIATE if the input is a prefix of an integer 
   * in the valid range, and TXT_INVALID otherwise.
   */
  CATVidTextValidationState Validate(const CATUnicodeString& i_strInputString) const;

  /**
   * Reimplemented from CATVidValidator::ValidateKeyStroke().
   */
  CATVidTextValidationState ValidateKeyStroke(const CATUINT32 i_charCode) const;
  
  /**
   * Sets the range of the validator to only accept integers between bottom and top inclusive.
   */
  void SetRange ( CATINT32 i_bottom, CATINT32 i_top );

  virtual CATINT32 GetIntegerFromText(const CATUnicodeString& i_text, const NumericalValidatorInput& i_input);
  virtual CATUnicodeString GetTextFromInteger(CATINT32 i_value, const NumericalValidatorInput& i_input);

private:
  CATINT32 _bottom;
  CATINT32 _top;
  
};


class NumericalValidatorInput {
public:
  NumericalValidatorInput(int i_nbDecimals,
    double i_highExponentProperty,
    double i_lowExponentProperty,
    int i_showTrailingZeros,
    double i_lastValidValue)
  {
    _nbDecimals = i_nbDecimals;
    _highExponentProperty = i_highExponentProperty;
    _lowExponentProperty = i_lowExponentProperty;
    _showTrailingZeros = i_showTrailingZeros;
    _lastValidValue = i_lastValidValue;
  }

  int _nbDecimals;
  double _highExponentProperty;
  double _lowExponentProperty;
  int _showTrailingZeros;
  double _lastValidValue;
};

/**
 * @ingroup VIDCore
 */
/**
 * Class providing a validator that ensures a string contains a valid real within a specified range.
 */
class ExportedByVisuDialog CATVidDoubleValidator : public CATVidValidator
{
  CATDeclareClass;

public:

  CATVidDoubleValidator();
  virtual ~CATVidDoubleValidator();

  /**
   * Reimplemented from CATVidValidator::validate().
   * Returns TXT_VALID if the string input contains a double that is within the valid range and is in the correct format.
   * Returns TXT_INTERMEDIATE if input contains a double that is outside the range or is in the wrong format ; e.g. with 
   * too many digits after the decimal point or is empty.
   * Returns TXT_INVALID if the input is not a double.
   */
  CATVidTextValidationState Validate(const CATUnicodeString& i_strInputString) const;

  virtual CATUnicodeString GetTextFromDouble(double i_value, const NumericalValidatorInput& i_input);
  virtual double      GetDoubleFromText(const CATUnicodeString& i_text, const NumericalValidatorInput& i_input);
  /**@deprecated*/
  void SetRange(double i_minimum, double i_maximum, CATINT32 i_decimals = 0);

private:
  void ComputeTolerance();
  double _GetEntirePart(double i_value);
  int _RelativeCompare(double d1, double d2, double epsilon);
  CATUnicodeString DoubleToString(double i_value, const NumericalValidatorInput& i_input);
  void CATVidChangeDecimalPointToLocal(CATUnicodeString& strNum) const;
  void CATVidChangeLocalPointToDecimal(CATUnicodeString& i_string) const;
  CATINT32 _decimals;
  
  friend class CATVidTstSpinBox;
};

#endif

