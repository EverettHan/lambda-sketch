//===================================================================
// COPYRIGHT Dassault Systemes 2013/07/19
//===================================================================
// PLMIExchangeExperienceDefinition.cpp
// Header definition of class PLMIExchangeExperienceDefinition
//===================================================================
//
// Usage notes: Define the possible interaction with the definition object
// to correctly define the customization experience objects.
//
//===================================================================
//  2013/07/19 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceDefinition_H
#define PLMIExchangeExperienceDefinition_H

#include "PLMExchangeInterfaces.h"
#include "PLMIExchangeExperienceStatus.h"
#include "PLMIExchangeExperienceDesignInfo.h"
#include "PLMIExchangeExperienceOption.h"
#include "PLMIExchangeExperienceOperation.h"

#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceDefinition ;


class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceDefinition: public CATBaseUnknown
{
   CATDeclareInterface;

public:

   /**
   * <b> AddStatus</b> : Add a new status and create associated objects :
   *   -  a pointer on the created status is returned : Use this pointer to set information regarding the status behavior. 
   *   -  a pointer on the design info linked to the status is returned : Use this pointer to set information regarding the status displayed information.   
   * Please release these pointers after use.
   *
   * @param iStrStatusKey (in)
   * input string corresponding status string key (must be unique) (tips: you can use the NLS path of your status name).
   *
   * @param opCreatedStatus [out, PLMIExchangeExperienceStatus#Release] 
   * output PLMIExchangeExperienceStatus corresponding to the created status.
   *
   * @param opCreatedDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created status.
   * An automatic filling of the design info will be attempted based on the given status string key and the design property associated NLS key. 
   * ie. - The status key is : MyCatalogName.Status1   
   *     - For a status object, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the name having an associated NLS key equal to ".Name" .   
   *     For this name property, the automatic mechanism will therefore look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Status1.Name" .
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL if the given status key already exists.
   */ 
   virtual HRESULT AddStatus(const CATUnicodeString & iStrStatusKey, PLMIExchangeExperienceStatus * & opCreatedStatus , PLMIExchangeExperienceDesignInfo * & opCreatedDesignInfo) = 0;
   
   /**
   * <b> AddStatus</b> : Add an existing status define in other customization.
   * Please note that the given status id must have being already added into the definition object.
   *
   * @param iStrStatusKey (in)
   * input string corresponding to an existing status string key.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL if the given status key doesn't refer to an existing status (maybe the status was not yet added).
   */ 
   virtual HRESULT AddStatus(const CATUnicodeString & iStrExistingStatusKey) = 0;
   
   /**
   * <b> AddGroup</b> : Create and add a group. Group can hold another group, options and metric.
   * To affect an option to the created option group, use the same group key when creating option through the method : AddOption.
   * The given key string must be a concatenation of catalog name and the same nls key as those use to create NLS message.
   * Therefore it should have 3 fields : 'CatalogName' + '.' + 'MessageKey'
   * i.e : "Catalog1.OptionGroupName1"
   * The string key will also be used to retrieve the NLS name of the option group. 
   *
   * @param iStrGroupKey (in)
   * input NLS path string corresponding to the NLS name of the group. This NLS path will also be the identification key string for the created group.
   * i.e : "CatalogName.GroupName1"
   *
   * @param opCreatedDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created option group. Use this pointer to set information regarding the option group displayed information. 
   * An automatic filling of the design info will be attempted based on the given group string key and the design property associated NLS key. 
   * ie. - The status key is : MyCatalogName.Group1   
   *     - For a group object, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the short help tooltip  having an associated NLS key equal to ".ShortHelp" .   
   *     For this property, the automatic mechanism will therefore look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Group1.ShortHelp" .
   *
   * @param ipStrFatherGroupKey (in)
   * input pointer on the father group key. The created group will be set as a child of the given father group key.
   * By default, there's no father group. (= NULL)
   *
   * @param bIsShared (in)   
   * input boolean on whether or not the group will be shared.
   * By default a shared group is a group which will be available and visible to all custo implementation.
   * To restraint the visibility to a smaller scope of custo implementation, the input list iListOfSharedLateType has to be used.
   * In other word, not shared group is a group that will only be visible by your custo implementation.     
   * By default the group is not shared.
   *
   * @param ipListOfSharedCusto (in)   
   * input ptr on a list of Customization latetype which will have access to the group if it has been defined as shared.
   *  - If bIsShared == FALSE, then iListOfSharedLateType will not be used.
   *  - If bIsShared == TRUE, then iListOfSharedLateType will be analyzed and processed :
   *        - If iListOfSharedLateType is NULL or empty, then all the custo implementation will have access to the added group.
   *        - If iListOfSharedLateType is not NULL and empty, then only the custo implementation set in the list will have access to the added group.
   * By default the pointer is set to Null.
   *
   *
   * @return
   *    Legal values:  S_OK if the method succeeds    
                       S_FALSE if the added group already exists with the same father.
   *    Other,         E_FAIL if the added group already exists but has a different father.
   */ 
   virtual HRESULT AddGroup(const CATUnicodeString & iStrGroupKey,  PLMIExchangeExperienceDesignInfo * & opCreatedDesignInfo, CATUnicodeString * ipStrFatherGroupKey = NULL, CATBoolean ibIsShared = FALSE, CATListOfCATString * ipListOfSharedCusto = NULL, int iPrivate = 0) = 0;

   /**
   * <b> AddOption</b> : Create and add an option. The option will be affected to the given group.
   * If the given option group does not exist, it will be created as "not shared".
   * A pointer on the created option is then returned. Please use it to set the option's properties. 
   * The pointer needs to be released after use.
   *
   * The given key string must be a concatenation of catalog name and the same nls key as those use to create NLS message.
   * Therefore it should have 3 fields : 'CatalogName' + '.' + 'MessageKey'
   * i.e : "Catalog1.OptionName1"
   * The string key will also be used to retrieve the NLS name of the option. 
   *
   * @param iStrOptionKey (in)
   * input NLS path string corresponding to the NLS name of the option. This NLS path will be the identification key string for the created option.
   * i.e : "CatalogNameX.OptionName1"
   *
   * @param iStrOptionGroupKey (in)
   * input NLS path string corresponding to the NLS name of the option group. 
   * If the group does not exist, then it will be created as "not shared" and this NLS path will be used as its identification key string.
   * i.e : "CatalogNameY.OptionGroupName1"
   *
   * @param opCreatedOption [out, PLMIExchangeExperienceOption#Release] 
   * output pointer on the created option : PLMIExchangeExperienceOption. It is used to set the option's properties.
   *
   * @param opCreatedDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created option. Use this pointer to set information regarding the option displayed information. 
   * An automatic filling of the design info will be attempted based on the given option string key and the design property associated NLS key. 
   * ie. - The status key is : MyCatalogName.Option   
   *     - For an option object, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the short help tooltip  having an associated NLS key equal to ".ShortHelp" .   
   *     For this property, the automatic mechanism will therefore look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Option.ShortHelp" .
   *
   * @param ibIsShared (in)
   * input boolean on whether or not the option will be shared. 
   * By default, a shared option is an option which will be available and visible to all custo implementation (if option is under a shared group).
   * To restraint the visibility to a smaller scope of custo implementation, the input list iListOfSharedLateType has to be used.
   * In other word, not shared option is an option that will only be visible by your custo implementation.   
   * If a shared option is set under a 'not shared' group, then the option will consider as  a private option.
   * By default an option is  not shared.
   *
   * @param ipStrSetAfterOptionKey (in)
   * input pointer a CATUnicodeString corresponding to valid option key. The option mentionned here must have been already added (defined). It must come from the same group.
   * If the given option doesn't follow the given direction, then E_FAIL is returned.  
   * This is to specify, after which option we will add this created option.
   * If multiple options are set to becreated after a same option, then the options will appears in the reverse order under which they have been added.
   * In example : 
   *        - Add Option1 as after OptionGeneral.
   *        - Add Option2 as after OptionGeneral.
   *        The result will be : OptionGeneral followed by Option2 and then Option1.
   * By default, pointer is set to NULL, and the option appears in the same order under which there were added or defined. (within a same group).
   *
   * @param ipListOfSharedCusto (in)   
   * input  ptr on the list of Customization latetype which will have access to the option if it has been defined as shared.
   *  - If bIsShared == FALSE, then iListOfSharedLateType will not be used.
   *  - If bIsShared == TRUE, then iListOfSharedLateType will be analyzed and processed :
   *        - If iListOfSharedLateType is NULL or empty, then the added option will only be shared with the customizations which have access to the option group iStrOptionGroupKey.   
   *        - If iListOfSharedLateType is not NULL or empty, then the added option will only be shared with customizations answering the following conditions : 
   *              -  Customization is set in the list iListOfSharedLateType.
   *              -  Customization has accessed to the created option group.
   * By default, pointer is NULL.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL if the given option key already exists.
   */ 
   virtual HRESULT AddOption(const CATUnicodeString & iStrOptionKey, 
                                 const CATUnicodeString & iStrOptionGroupKey, 
                                      PLMIExchangeExperienceOption * & opCreatedOption, 
                                          PLMIExchangeExperienceDesignInfo * & opCreatedDesignInfo,                                               
                                              CATBoolean ibIsShared = FALSE, 
                                                 CATUnicodeString * ipStrSetAfterOptionKey = NULL,
                                                     CATListOfCATString * ipListOfSharedCusto = NULL) = 0;


  /**
   * <b> AddOperation</b> : Create and add an operation.    
   * A pointer on the created operation is then returned. Please use it to set the operation's properties. 
   * The pointer needs to be released after use.
   *
   * @param iStrOperationKey (in)
   * input string key used to identify the created operation. It must be unique.
   *
   * @param opCreatedOperation [out, PLMIExchangeExperienceOperation#Release] 
   * output pointer on the created operation : PLMIExchangeExperienceOperation. It is used to set the operation's properties.
   *
   * @param opCreatedDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created operation. Use this pointer to set information regarding the operation enabled state. 
   * An automatic filling of the design info will be attempted based on the operation string id given and the added state NLS key. 
   * ie. - The operation key is : MyCatalogName.Operation1
   *     - The design info concerns the operation state key. Its associated NLS key is = ".Enabled" (as define in the definition of the enum OperationState in PLMIExchangeExperienceOperation.h).
   *     - For an operation state, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the name having an associated NLS key equal to ".Name" .   
   *     For this name property, the automatic mechanism will therefore look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Operation.Enabled.Name" .
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL if the given operation key already exists.
   */ 
   virtual HRESULT AddOperation(const CATUnicodeString & iStrOperationKey, PLMIExchangeExperienceOperation * & opCreatedOperation, PLMIExchangeExperienceDesignInfo * & opCreatedDesignInfo) = 0;

   /**
   * <b> AddExecution</b> : Add an execution. 
   * Please note that the given string id must be unique.
   * The given key string must be a concatenation of catalog name and the same nls(rsc) key as those use to create NLS(rsc) message.
   * Therefore it should have 3 fields : 'CatalogName' + '.' + 'MessageKey'
   * i.e : "Catalog1.Execution"
   * The given string key will be used to retrieve the NLS name of the execution. 
   *
   * If your customization definition is part of an existing exchange operation (i.e export) , then please note that some executions might have automatically been added.
   * (rf to corresponding exchange operation design header)
   *
   * @param iStrExecutionId (in)
   * input string corresponding to the identification of the execution to add.
   *
   * @param opDesignInfoItf [out, CATBaseUnknown#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created execution. Use this pointer to set information regarding the execution displayed information. 
   * An automatic filling of the design info will be attempted based on the execution string id given. 
   * ie. - The execution key is : MyCatalogName.Execution   
   *     - For an execution object, as defined in the PLMExchangeExperienceDesignProperties.h, one design property to set is the "name". This property has an associated NLS key equal to ".Name" .   
   *       For this property, the automatic mechanism will look for a value in the NLS catalog file name : "MyCatalogName", having the NLS key = "Execution.Name" .
   *
   * @return
   *    Legal values:  S_OK if the method succeeds   
   *                   S_FALSE if the execution has already being added.
   *    Other,         E_FAIL.
   */ 
   virtual HRESULT AddExecution(const CATUnicodeString & iStrExecutionId, PLMIExchangeExperienceDesignInfo * & opDesignInfoItf) = 0;

   /**
   * <b> GetDesignInfo</b> : Get the design info related to the experience definition.
   * This is where you will define the general design info for your customization.
   * The pointer needs to be released after use.
   *
   * @param opCreatedDesignInfo [out, PLMIExchangeExperienceDesignInfo#Release] 
   * output PLMIExchangeExperienceDesignInfo corresponding to the design info linked to the created option. Use this pointer to set information regarding the option displayed information. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL.
   */ 
   virtual HRESULT GetDesignInfo( PLMIExchangeExperienceDesignInfo * & opCreatedDesignInfo) = 0;

   /**
   * <b> IgnoreExperienceObjects</b> : Set the list of experience objects to ignore.
   * An experience object is any object which can be defined through this definition object except for the option. (i.e status, or operation).   
   * Option and group type objects can be deactivated directly through their corresponding itfs (i.e PLMIExperienceExchangeOption retrieved through PLMIExchangeExperienceSessionHandler).
   * The exchange experience of a customization "A" is defined by : 
   *   - 1) the experience objects directly added through this interface by the customization "A" itself.
   *   - 2) the experience objects added by another customization "X" but for which they have been set as sharable to customization "A".
   *   - 3) inherited experience objects, if custo "A" integrates another customization.
   *
   * This method can be used to refuse some of the experience objects inherited through either 2) or 3).
   * The experience object ids to give must be the same as the one used when it was defined and added to the experience definition.
   * Please refer to the different customization definition header (i.e for unified export custo : PLMExchangeExportExperienceDesign).
   *
   * @param iListOfExpObjIdsToIgnore [in] 
   * input list of experience object ids to ignore for the current customization. 
   * The associated experience objects will not appear in the currrent customization exchange experience.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds     
   *    Other,         E_FAIL .
   */ 
   virtual HRESULT IgnoreExperienceObjects(CATListOfCATUnicodeString & iListOfExpObjIdsToIgnore) = 0;
};

//-----------------------------------------------------------------------

#endif
