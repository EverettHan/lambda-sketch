// COPYRIGHT Dassault Systemes 2003

//===================================================================
//
// CATILieLanguageSheetSettingAtt.h
// Define the CATILieLanguageSheetSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  sob
//===================================================================
#ifndef CATILieLanguageSheetSettingAtt_H
#define CATILieLanguageSheetSettingAtt_H

#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATILieLanguageSheetSettingAtt;
#else
extern "C" const IID IID_CATILieLanguageSheetSettingAtt ;
#endif

class CATSettingInfo;
class CATUnicodeString;

//------------------------------------------------------------------

/**
* The interface to access a CATILieLanguageSheetSettingAtt.
* This interface may be used to read or modify in the CATIA\Tools\Option the settings values
* of Units sheet.
 */
class ExportedByCATLifSpecs CATILieLanguageSheetSettingAtt: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the LoadExtendedLanguageLib attribute.
	 * <br><b>Role</b>:Return the LoadExtendedLanguageLib parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param ioLoadExtendedLanguageLib
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not use extended libraries
	 * 	<br><tt>1 :</tt>   to use extended libraries.
     */
     virtual HRESULT GetLoadExtendedLanguageLib( int* ioLoadExtendedLanguageLib) = 0;
     
    /**
     * Sets the LoadExtendedLanguageLib attribute.
	 * <br><b>Role</b>:Set the LoadExtendedLanguageLib parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLoadExtendedLanguageLib
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not use extended libraries
	 * 	<br><tt>1 :</tt>   to use extended libraries.
     */
     virtual HRESULT SetLoadExtendedLanguageLib( int* iLoadExtendedLanguageLib) = 0;

	 /** 
	 * Retrieves information about the LoadExtendedLanguageLib setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */ 
     virtual HRESULT GetLoadExtendedLanguageLibInfo( CATSettingInfo*    oInfo ) = 0;

	 /** 
	 * Locks or unlocks the LoadExtendedLanguageLib setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */
	 virtual HRESULT SetLoadExtendedLanguageLibLock( unsigned char      iLocked ) = 0;

	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the LoadAllPackages attribute.
	 * <br><b>Role</b>:Return the LoadAllPackages parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param ioLoadAllPackages
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not load all packages
	 * 	<br><tt>1 :</tt>   to load all packages.
     */
     virtual HRESULT GetLoadAllPackages( int* ioLoadAllPackages) = 0;
     
    /**
     * Sets the LoadAllPackages attribute.
	 * <br><b>Role</b>:Set the LoadAllPackages parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLoadAllPackages
	 *	<b>Legal values</b>:
	 *	<br><tt>0 :</tt>   to not load all packages
	 * 	<br><tt>1 :</tt>   to load all packages.
     */
     virtual HRESULT SetLoadAllPackages( int* iLoadAllPackages) = 0;

	 /** 
	 * Retrieves information about the LoadAllPackages setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */ 
     virtual HRESULT GetLoadAllPackagesInfo( CATSettingInfo*    oInfo ) = 0;

	 /** 
	 * Locks or unlocks the LoadAllPackages setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */
     virtual HRESULT SetLoadAllPackagesLock( unsigned char      iLocked ) = 0;


	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the ListOfPackagesToLoad attribute.
	 * <br><b>Role</b>:Return the ListOfPackagesToLoad parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param ioListOfPackagesToLoad
	 * The list of packages to load.
     */
     virtual HRESULT GetListOfPackagesToLoad( CATUnicodeString&  ioListOfPackagesToLoad ) = 0;
    
    /**
     * Sets the ListOfPackagesToLoad attribute.
	 * <br><b>Role</b>:Set the ListOfPackagesToLoad parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iListOfPackagesToLoad
	 * The list of packages to load.
     */
     virtual HRESULT SetListOfPackagesToLoad( CATUnicodeString&    iListOfPackagesToLoad ) = 0;
     
	 /** 
	 * Retrieves information about the ListOfPackagesToLoad setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */ 
     virtual HRESULT GetListOfPackagesToLoadInfo( CATSettingInfo*    oInfo ) = 0;

	 /** 
	 * Locks or unlocks the ListOfPackagesToLoad setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */
     virtual HRESULT SetListOfPackagesToLoadLock( unsigned char      iLocked ) = 0;

	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
     * Retrieves the ReferenceDirectoryForTypes attribute.
	 * <br><b>Role</b>:Return the ReferenceDirectoryForTypes parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param ioReferenceDirectoryForTypes
	 * The reference directory for types.
     */
     virtual HRESULT GetReferenceDirectoryForTypes( CATUnicodeString&  ioReferenceDirectoryForTypes ) = 0;
    
    /**
     * Sets the ReferenceDirectoryForTypes attribute.
	 * <br><b>Role</b>:Set the ReferenceDirectoryForTypes parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iReferenceDirectoryForTypes
	 * The reference directory for types.
     */
     virtual HRESULT SetReferenceDirectoryForTypes( CATUnicodeString&    iReferenceDirectoryForTypes ) = 0;
     
	 /** 
	 * Retrieves information about the ReferenceDirectoryForTypes setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */ 
	 virtual HRESULT GetReferenceDirectoryForTypesInfo( CATSettingInfo*    oInfo ) = 0;

	 /** 
	 * Locks or unlocks the ReferenceDirectoryForTypes setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */
     virtual HRESULT SetReferenceDirectoryForTypesLock( unsigned char      iLocked ) = 0;




	 //***********************************************************************
	 // Ensure consistency with the IDL interface that will delegate its work
	 // Check allowed signatures in System.CATSysSettingController
	 //***********************************************************************
	 /**
	 * Retrieves the CATKnowledgeBuildPath setting parameter.
	 * <br><b>Role</b>:Return the CATKnowledgeBuildPath parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param ioKnowledgeBuildPathDirectory
	 * The knowledge build path directory: the path where all the resources are located.
	 */
	 virtual HRESULT GetKnowledgeBuildPathDirectory( CATUnicodeString&  ioKnowledgeBuildPathDirectory ) = 0;

	 /**
	 * Sets the CATKnowledgeBuildPath setting parameter.
	 * <br><b>Role</b>:Set the CATKnowledgeBuildPath parameter if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iKnowledgeBuildPathDirectory
	 * The knowledge build path directory: the path where all the resources are located.
	 */
	 virtual HRESULT SetKnowledgeBuildPathDirectory( CATUnicodeString&    iKnowledgeBuildPathDirectory ) = 0;

	 /** 
	 * Retrieves information about the CATKnowledgeBuildPath setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */ 
	 virtual HRESULT GetKnowledgeBuildPathDirectoryInfo( CATSettingInfo*    oInfo ) = 0;

	 /** 
	 * Locks or unlocks the CATKnowledgeBuildPath setting parameter.
	 * <br>Refer to @href CATIASettingController for a detailed description.
	 */
	 virtual HRESULT SetKnowledgeBuildPathDirectoryLock( unsigned char      iLocked ) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
