
//===================================================================
// COPYRIGHT Microsoft 2011/02/08
//===================================================================
// CATAdapterPLMCompassLegendSelector.cpp
// Header definition of class CATAdapterPLMCompassLegendSelector
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/02/08 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAdapterPLMCompassLegendSelector_H
#define CATAdapterPLMCompassLegendSelector_H

#include "CATAfrItf.h"
#include "CATIAfrPLMCompassLegendSelector.h"

//-----------------------------------------------------------------------
 
class ExportedByCATAfrItf CATAdapterPLMCompassLegendSelector: public CATIAfrPLMCompassLegendSelector
{
  CATDeclareClass;

  public:

    // Standard constructors and destructors
    // -------------------------------------
    CATAdapterPLMCompassLegendSelector ();
    virtual ~CATAdapterPLMCompassLegendSelector ();

   /**
    * Get current attribute set
    **/
    virtual HRESULT GetCurrentAttributeSet( CATPLMCompass *iCompass, CATUnicodeString &oAttributeSet );
   /**
    * Get list of available attribute sets
    **/
    virtual HRESULT GetAttributeSetList( CATPLMCompass *iCompass, CATListOfCATUnicodeString &oAttributeSetList );
   /**
    * User request change of attribute set
    **/
    virtual HRESULT OnCurrentAttributeSet( CATPLMCompass *iCompass, const CATUnicodeString &iAttributeSet );

  /**
   * StartFacetComputation request endinges to compute their facet
   * if return E_NOTIMPL then GetFacetList will be called right after
   * otherwise GetFacetList will be called after receiving notification CATAfrFacetEventManagerServices::SendAfrUpdateFacetNotification(NULL, 3);
   */
    virtual HRESULT StartFacetComputation();

  /**
	 * Get list of available facet (deprecated)
	 **/
	virtual HRESULT GetFacetList( CATIAfrVIDCompass_var ispCompass, CATListPtrCATBaseUnknown &oFacetList );

  /**
   * Get list of available facets for a given quadrant
   * iUsageContext allows the implementation to optimize their facet computation
   * ForListOfFacet means that we need the facet names (for compass combo for example)
   * ForCompass means that we need the facet for the display in the compass
   * ForRefinement means that we need the facet for the display in the refinement panel
   */
  virtual HRESULT GetFacetList( CATIAfrVIDCompass_var ispCompass, CATLegendFacetUsageContext iUsageContext, CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList );

  /**
   * Get complete list of available facets
   * iUsageContext allows the implementation to optimize their facet computation
   * ForListOfFacet means that we need the facet names (for compass combo for example)
   * ForCompass means that we need the facet for the display in the compass
   * ForRefinement means that we need the facet for the display in the refinement panel
   */
  virtual HRESULT GetFacetList( CATLegendFacetUsageContext iUsageContext, CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList );

  virtual HRESULT GetFacetListForImmersiveBrowser( CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList );

	/**
	 * Get current attribute set
	 **/
	virtual HRESULT GetCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, CATUnicodeString &oAttributeSet ) ;
	/**
	 * Get list of available attribute sets
	 **/
	virtual HRESULT GetAttributeSetList( CATIAfrVIDCompass_var ispCompass, CATListOfCATUnicodeString &oAttributeSetList ) ;
	/**
	 * User request change of attribute set
	 **/
	virtual HRESULT OnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATUnicodeString &iAttributeSet ) ;
	/**
	 * User request change of attribute set
	 **/
	virtual HRESULT OnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATUnicodeString &iAttributeSet, CATSysWeakRef *ipFacetWeakRef ) ;

   /**
    * OnCurrentAttributeSet
    * new method to use with new UX, no more compass, attribute name can be retrieved from Facet...
    */
    virtual HRESULT OnCurrentAttributeSet( CATSysWeakRef *ipFacetWeakRef );

    /**
     * OnCurrentAttributeSet
     * new method to use with new UX, no more compass, attribute name can be retrieved from Facet...
     * ipFacetWeakRef can be NULL, and iFacetName valuated (case of COMPASS_CHECKER for exemple or facet group for refinement)
     * if ipFacetWeakRef is not NULL then facet name will be retrieved from the facet and not from iFacetName
     */
    virtual HRESULT OnCurrentAttributeSet( CATSysWeakRef *ipFacetWeakRef, const CATUnicodeString &iFacetName);

  	/**
	 * Get check state on the current attribute set
	 **/
    virtual HRESULT GetCheckStateOnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, CATBoolean & oCheckState ) ;

  	/**
	 * The user click on the check button associated to the current attribute set
	 **/
    virtual HRESULT OnUserCheckOnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATBoolean & iCheckState ) ;

  /**
   * GetAuthorizedDisplayMode
   * returns the CATRefinementDisplayMode supported by the current window:
   * BothMode means that refinement facets can be displayed in compact or refinement panel
   * RefinementModeOnly  means that refinement facets can be displayed in refinement panel only
   * CompactModeOnly  means that refinement facets can be displayed in compact panel only
   */
    virtual HRESULT GetAuthorizedDisplayMode(CATRefinementDisplayMode &oDisplayMode);

   /**
    * oDisplayMode = 0 => standard eastcompass should be displayed
    * oDisplayMode = 1 => refinement panel should be displayed
    **/
  virtual HRESULT GetDisplayMode ( CATIAfrVIDCompass_var ispCompass, int &oDisplayMode);

   /**
    * oDisplayMode = 0 => standard eastcompass is displayed
    * oDisplayMode = 1 => refinement panel is displayed
    **/
  virtual HRESULT SetDisplayMode ( CATIAfrVIDCompass_var ispCompass, int iDisplayMode);

    virtual HRESULT IsRefineAuthorized (CATBoolean &oRefineAuthorized);

    virtual HRESULT IsFacetFavorite (const CATIAfrVIDCompass_var &ispCompass, const CATUnicodeString &iAttributeSet, CATBoolean &oFacetFavorite);
    virtual HRESULT SetFacetFavorite (const CATIAfrVIDCompass_var &ispCompass, const CATUnicodeString &iAttributeSet, CATBoolean iFacetFavorite);

    /**
     * To know if we must display refinement panel when no quadrant is activated on the compass
     */
    virtual HRESULT DisplayRefinementPanelWithoutCompassActivated(CATBoolean &oDisplayRefinement);

    virtual HRESULT GetFacetActive(CATBaseUnknown_var & spFacet);
    virtual HRESULT SetFacetActive(const CATBaseUnknown_var & spFacet);

    /**
     * used to know if the tagger should be displayed in edition mode (selection exists) or refinement mode
     */
    virtual HRESULT GetEditModeFlag(CATBoolean &obEditMode);

    // Compass Checker management
    virtual HRESULT GetCompassCheckerNLS(CATUnicodeString &ousCompassCheckerNLS);
    virtual HRESULT IsCompassCheckerAvailable(CATBoolean &obIsAvailable);

    virtual HRESULT ResetAllCriteria();

  private:

    // Copy constructor and equal operator
    // -----------------------------------
    CATAdapterPLMCompassLegendSelector (CATAdapterPLMCompassLegendSelector &);
    CATAdapterPLMCompassLegendSelector& operator=(CATAdapterPLMCompassLegendSelector&);
};

//-----------------------------------------------------------------------

#endif

