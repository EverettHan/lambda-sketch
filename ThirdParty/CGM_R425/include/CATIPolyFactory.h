// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPolyFactory.h
// Define the CATIPolyFactory interface
//
//===================================================================
//
// Usage notes:
//   CATIPolyFactory: dedicated to create polyhedral objects
//
//===================================================================
//
//  Jun 2004  Creation: Code generated by the CAA wizard  chu
//===================================================================
#ifndef CATIPolyFactory_H
#define CATIPolyFactory_H

#include "PolyhedralModel.h"
#include "CATPolyDeprecated.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPolyhedralModel IID IID_CATIPolyFactory;
#else
extern "C" const IID IID_CATIPolyFactory ;
#endif

class CATIPolyBody;
class CATIPolyMesh;


// Do not use.  Obsolete.
class ExportedByPolyhedralModel CATIPolyFactory : public CATBaseUnknown
{
  CATDeclareInterface;

public:
     
  virtual HRESULT DoCreateMeshWithVertexNormals(CATBoolean iFlag) = 0;
  virtual HRESULT DoCreateMeshWithVertexUVs(CATBoolean iFlag) = 0;
  virtual HRESULT DoCreateMeshWithVertexCell(CATBoolean iFlag) = 0;

  POLY_DEPRECATED("Do not use. Use CATPolyMeshImpl::New instead.", virtual CATIPolyMesh * CreateEmptyPolyMesh (CATIPolyBody * iAssociatedBody = 0) = 0;);
  POLY_DEPRECATED("Do not use. Use CATPolyMeshImpl::New instead.", virtual CATIPolyMesh *CreateTriMesh () = 0;);

  /**
   * Remove a PolyMesh
   *   @param iMeshToRemove
   *     PolyMesh to be removed
   *   @return
   *     S_OK if the PolyMesh has been removed
   *     E_FAIL if the PolyMesh is locked by pending references (missing calls to Release())
   */ 
  POLY_DEPRECATED("Do not use. Use Release instead.", virtual HRESULT RemovePolyMesh (CATIPolyMesh * iMeshToRemove) = 0;);

};

#endif
