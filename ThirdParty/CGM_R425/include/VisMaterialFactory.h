//===================================================================
// COPYRIGHT Dassault Systemes 2017-02-16
//===================================================================
// VisMaterialFactory.cpp
// Header definition of class VisMaterialFactory
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017-02-16 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisMaterialFactory_H
#define VisMaterialFactory_H

#include "SGInfra.h"
#include "VisMaterialModel.h"
#include "CATListOfCATUnicodeString.h"

class VisMaterial;
class VisMaterialModel;
class VisMaterialPropertiesHelper;
class CATGraphicMaterial;
class CATRmaMaterialConnectionRenderingExt;
class CATRmaOCAVisuServices;

//-----------------------------------------------------------------------
// This class is used to instanciate material model and material classes
// For list of supported material models, please refer to..
//  .\SGInfra\SGInfra.m\src\VisMaterialModelParameterInfo.md
//-----------------------------------------------------------------------

class ExportedBySGInfra VisMaterialFactory
{
  friend CATRmaMaterialConnectionRenderingExt;
  friend CATRmaOCAVisuServices;
  friend VisMaterialPropertiesHelper;

public:
  // Standard constructors and destructors
  // -------------------------------------
  VisMaterialFactory ();
  virtual ~VisMaterialFactory ();

  //=======================================================================
  // MATERIAL MODEL                                          
  //=======================================================================
  /**
  * Get list of material models. 
  */
  const CATListOfCATUnicodeString& GetMaterialModelNames();

  /**
  * Get basic material model. 
  */
  const VisMaterialModel* GetBasicMaterialModel();

  [[deprecated("\n\n\t DEPRECATED method, PKO1, Jan.2021\n\t Use GetSpecularGlossinessModel_Versioned(VisMaterialModelVersion::Release::R2019X) instead\n")]]
  const VisMaterialModel* GetSpecularGlossinessModel();
  
  /**
  * Avoid using this method. If possible, try to migrate to DSPBR visualization material model.
  * SpecularGlossiness will soon be discuntinued.
  * Returns SpecularGlossiness of specific version or nullptr if such version is not supported.
  * All supported versions are available in VisMaterialModelVersion::TypeDesc::supportedMaterialModelVersions
  */
  const VisMaterialModel* GetSpecularGlossinessModel_Versioned(const VisMaterialModelVersion::Release& iVersion);

  /**
  * Get the 20x EVisuPBR material model.
  */
  [[deprecated("\n\n\t DEPRECATED method, PKO1, Jan.2020\n\t Use GetDSPBRModel_Versioned(VisMaterialModelVersion::Release::R2019X) instead\n")]]
  const VisMaterialModel* GetEVisuPBRModel();

  /**
  * Get the most up to date version of DS PBR material model.
  * The parameters list of the returned material model may vary across releases
  */
  const VisMaterialModel* GetDSPBRModel_Latest() const ;

  /**
  * Get a DS PBR material model of specific release. Supported arguments:
  * Release::R2019X - corresponds to the original EVisuPBR material
  * Release::R2021X - planned for the 2021X FD01
  */
  const VisMaterialModel* GetDSPBRModel_Versioned(const VisMaterialModelVersion::Release& iVersion) const;

  //=======================================================================
  // VIS MATERIAL                                            
  //=======================================================================
  /**
  * Create material from standard model. The model is shared among all materials.
  * Factory populates material with default parameter values.
  */
  VisMaterial* CreateMaterial(const VisMaterialModel* ipModel) const;

  //=======================================================================
  // VIS MATERIAL                                            
  //=======================================================================
  /**
  * Create material from REPhysicalMaterial model
  * Factory populates material with default parameter values.
  */
  VisMaterial* CreateMaterialFromREPhysicalMaterial(const VisMaterialModel* ipModel) const;

  /**
  * Create a material from a shader. The shader can define a <INHERITANCE> tag
  * containing either None, Basic or EVisuPBR.
  * This allows to have access to all parameters from the inherited model as
  * well as the shader's own parameters.
  */
  VisMaterial* CreateMaterialShader(CATUnicodeString iShaderName);

  //=======================================================================
  // CLASSIC MATERIAL API INTEGRATION
  //=======================================================================
  /**
  * Create graphic material from new vis material. 
  * This is a wrapper CATGraphicMaterial type object for simplicity while putting material on scene graph
  * Lifecycle rule: AddReference is done on returned pointer. Caller needs to do SubReference and Destroy 
  *                 when material is not needed anymore. Failing to do that will result in memory leak.
  */
  CATGraphicMaterial* CreateGraphicMaterialWrapper(VisMaterial* ipMat) const;

  /**
  * Modify existing graphic material wrapper by replacing existing vis material by new one.
  * @param ipWrapper
  *   This is a wrapper CATGraphicMaterial type object created using CreateGraphicMaterialWrapper
  * @param ipVisMat
  *   New VisMaterial to be set on existing wrapper. Can not be null.
  * @return
  *   Legal values
  *     S_OK: Success. Existing VisMaterial is replaced by new one.
  *     S_FALSE: Success. New material is same as old one.
  *     E_INVALIDARG: ipWrapper or ipVisMat is null
  *     E_FAIL: ipWrapper is not of the type REVisMaterial (It may not be the one created with CreateGraphicMaterialWrapper)
  */
  HRESULT SetVisMaterialOnWrapper(CATGraphicMaterial* ipWrapper, VisMaterial* ipVisMat) const;

  /**
  * Get vis material from CATGraphicMaterial wrapper
  * If provided object is not a VisMatrial wrapper this function returns NULL
  * This function will return valid VisMatrial only in case of Visu.Basic and Visu.EVisuPBR models
  * NOTE: AddRef is done on returned pointer 
  */
  VisMaterial* GetVisMaterialFromWrapper(const CATGraphicMaterial* ipMat) const;

protected:
  /**
  * Get any material model: Not to use by everyone
  */
  [[deprecated("\n\n\tDEPRECATED method:\n\tPKO1, Jan.2020: Use GetMaterialModel(const VisMaterialModelVersion::TypeDesc iTypeDesc) instead\n")]]
  const VisMaterialModel* GetMaterialModel(const CATUnicodeString& iType);

  /**
  * Get any material model: Not to use by everyone
  */
  const VisMaterialModel* GetMaterialModel(const VisMaterialModelVersion::TypeDesc& iTypeDesc) const;

private:

  virtual CATBoolean IsAllowedToReturnAnyModel() const { return false; };

  // Copy constructor and equal operator
  // -----------------------------------
  VisMaterialFactory (VisMaterialFactory &);
  VisMaterialFactory& operator=(VisMaterialFactory&);

  static CATListOfCATUnicodeString m_MaterialModelNames; //get rig of it when GetMaterialModelNames is removed
};

//-----------------------------------------------------------------------

#endif
