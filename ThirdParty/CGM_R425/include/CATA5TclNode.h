//===================================================================
// COPYRIGHT Dassault Systemes 2017/09/26
//===================================================================
// CATA5TclNode.cpp
// Header definition of class CATA5TclNode
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/09/26 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATA5TclNode_H
#define CATA5TclNode_H

#include "CATA5ParserExport.h"
#include "CATOmxUTF8String.h"
#include "CATOmxKeyString.h"
#include "CATOmxTextStream.h"

namespace CATA5
{
  const int NODE_CONTAINS_ONLY_SPACE = 0x1;
  const int NODE_IS_SHARP_PREFIXED = 0x2;

  /**
  * Internal TCL nodes.
  */
  struct ExportedByCATA5Parser TclNode
  {
    TclNode* subnode; // TCL sub node     Ex: {nodeA {nodeB} }            -> nodeB is nodeA's subnode
    TclNode* sibling; // TCL brother node Ex: {nodeA {nodeB} {nodeC} }    -> nodeC is nodeB's sibling

    /*
    * TclNode text is splitted into 38 char packets. These packets are linked using textchunk ptr (linkedlist).
    * TextchunkTail is the end of the chain.
    */
    TclNode* textchunk; // TclNode's next text chunk (38 char) -> linkedlist
    TclNode* textchunkTail; // TclNode's tail text chunk (used for quick access, instead of looping over the linkedlist)

    char flags;
    char count;
    char data[38];

    TclNode();
    ~TclNode();
    inline bool isFlat() const { return textchunk == NULL && count != sizeof(data); }
    CATOmxUTF8String flatten() const;
    CATOmxKeyString flattenAsKey() const;
    void dump(CATOmxTextStream &oStream) const;
    void addChar(int c);
    bool isSpace() const { return flags & NODE_CONTAINS_ONLY_SPACE; }
    void *operator new(size_t iSize);
    void operator delete(void *iAddr);

  private:
    const TclNode & operator=(const TclNode&);
    TclNode(const TclNode&);
  };
}

#endif
