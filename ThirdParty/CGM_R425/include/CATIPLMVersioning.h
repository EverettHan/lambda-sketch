// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMVersioning.h
// Define the CATIPLMVersioning interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2007  Creation: Code generated by the CAA wizard  jvm
//===================================================================
#ifndef CATIPLMVersioning_H
#define CATIPLMVersioning_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMVersioning;
#else
extern "C" const IID IID_CATIPLMVersioning ;
#endif

//------------------------------------------------------------------

/**
 * @level Protected
 * @usage U3
 */

//------------------------------------------------------------------
#include "CATIPLMCompVersioningService.h"
#include "CATCollec.h"
#include "CATTime.h"
class CATPLMID;
class CATLISTV(CATPLMID);
class CATIPLMRecordReadSet;

/**
* Interface to retrieve a unique name from a server. Interface belonging to the Component services.<br>
* To retrieve a valid pointer on this interface, use the static method 
* @href CATPLMComponentServices#GetVersioningService .<br>
*
*/
class ExportedByCATPLMServicesItf CATIPLMVersioning: public CATBaseUnknown
{
  CATDeclareInterface;

public:
 /** 
 * Get the available versions of a component.
 *
 * <br><b>Role</b>: Retrieves in the database all the available versions of a component.
 * try to call provider services first if return E_NOTIMPL use our own implementation.
 * No order is guaranteed in return.
 *
 * @param iInputList [in]
 *   list of components which versions are required.
 * @param iQueryMode [in]
 *   {First, Previous, Next, Last, AllPrevious, AllNext, All};
 * @param iStabilityMode [in]
 *   {Any, StableVersion, FrozenVersion};
 * @param iOrderingMode [in]
 *   { None, OlderFirst, NewerFirst};
 * @param oResultsVersion [out]
 *   The result of the query in the database.
 *
 * @return
 *   <code>S_OK</code> If every inputs have returned a correct output, S_OK will be returned.
 *   <code>S_FALSE</code> All input specific error will be found in the CATIPLMCompResultVersion class and S_FALSE will be returned for the method itself.
 *   <code>E_FAIL</code> If a problem occurs (for example: communication with the provider), the RetrieveVersions method will return FAIL. 
 *
 */
  virtual HRESULT RetrieveVersions (const CATLISTV(CATPLMID) &iInputList, CATIPLMCompVersioningService::QueryMode iQueryMode, CATIPLMCompVersioningService::StabilityMode iStabilityMode, CATIPLMCompVersioningService::OrderingMode iOrderingMode, CATLISTP (CATIPLMCompResultVersion)& oResultsVersion) = 0;
  // virtual HRESULT GetAllVersions(CATIAdpPLMIdentificator * iComponent, CATListPtrCATIAdpPLMIdentificator** opListPLMComp) = 0;
/** 
 * Check for versions of components.
 *
 * <br><b>Role</b>: Retrieves in the database all versions of components et check for state.
 * try to call provider services first if return E_NOTIMPL use our own implementation.
 * No order is guaranteed in return.
 *
 * @param iPLMIDList [in]
 *   The components list whose versions must be checked.
 * @param iState [in]
 *   versions state to check.
 * @param oResultList [out]
 *   The result list of checked version.
 *   -1 no version found
 *    0 version is not in good state
 *    1 version is in good state
 *
 * @return
 *   <code>S_OK</code> if the versions of the component could be retrieved in the database.
 *   <code>E_FAIL</code> if the operation failed.
 *
 */
  virtual HRESULT CheckVersion (const CATLISTV(CATPLMID) &iPLMIDList, CATIPLMCompVersioningService::VersionState iState, CATListOfInt* oResultList) = 0;

/** 
 * Retrieve specific elements (Best so far / Latest) which have changed since a specified date.
 *
 */
  virtual HRESULT GetSpecialMinorModifiedAfter (const CATTime &iDate, CATIPLMRecordReadSet *&oResultsVersion) = 0;

};

//------------------------------------------------------------------

#endif
