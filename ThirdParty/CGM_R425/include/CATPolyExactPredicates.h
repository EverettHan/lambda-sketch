// COPYRIGHT DASSAULT SYSTEMES 2004, ALL RIGHTS RESERVED.
//===================================================================
//
// CATPolyExactPredicates.h
//   Exact geometry predicates.
//   For the exact orientation of three points in the plane or four points in space 
//   see CATPolyExactArithmetic.  The predicates from this class are based on the
//   exact arithmetic predicates.
//
//===================================================================
// November 2004  Creation: Code generated by the CAA wizard  ndo
//===================================================================
#ifndef CATPolyExactPredicates_H
#define CATPolyExactPredicates_H

#include "CATPolyExactArithmetic.h"
#include "CATPolyDeprecatedM.h"
#include "CATBoolean.h"

class CATMathPoint;


/**
 * <p> This class implements exact geometry predicates. </br>
 * This class is now DEPRECATED, use the colinearity test directly on CATPolyExactArithmetic.
 */
class CATPolyExactPredicates
{

public:

  // Standard constructors and destructors
  // -------------------------------------
  inline CATPolyExactPredicates (const CATPolyExactArithmetic& iExactArithmetic);

  /**
  * Test whether three points are colinear in the space using exact predicates. 
  *   @param A
  *   @param B
  *   @param C
  *   @return
  *      TRUE if the points are colinear and FALSE otherwise.
  */
  POLY_DEPRECATED ("Call AreColinear directly on CATPolyExactArithmetic instead.",
  inline CATBoolean AreColinear (const CATMathPoint& A, const CATMathPoint& B, const CATMathPoint& C) const);

private:

  const CATPolyExactArithmetic& _ExactArithmetic;

};

inline CATPolyExactPredicates::CATPolyExactPredicates (const CATPolyExactArithmetic& iExactArithmetic) : 
  _ExactArithmetic (iExactArithmetic)
{
}

inline CATBoolean CATPolyExactPredicates::AreColinear (const CATMathPoint& A, const CATMathPoint& B, const CATMathPoint& C) const
{
  return _ExactArithmetic.AreColinear (A, B, C);
}

#endif
