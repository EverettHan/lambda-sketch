/**
 * @fullreview SON EBN 04:08:10
 */

// COPYRIGHT Dassault Systemes 2004-2016
//===================================================================
//
// CATIPLMErrorCell.h
// Define the CATIPLMErrorCell interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Aug 2004  Creation: Code generated by the CAA wizard  son
//  Jan 2016  Update:   Jean-Luc MEDIONI  Object: fix WPD mkCheckSource warning
//===================================================================
/**
* @level Protected
* @usage U3
*/


#ifndef PLMErrorSeverity_H
#define PLMErrorSeverity_H

/**
 * Definition of the possible kinds of severity for an error.
 * <tt> Possible values:</tt>
 * <dl>
 * @param <tt>PLM_NOTDEFINED</tt>  <dd> Undefined severity.
 * @param <tt>PLM_WARNING</tt>    <dd> Doesn't influence the way of save.
 * @param <tt>PLM_SEVERE</tt>    <dd> Leads the save engine to reduce the save domain.
 * @param <tt>PLM_FATAL</tt>    <dd> No save is possible, even with restricted domain.
 * </dl>
 */
enum PLMErrorSeverity 
{
  PLM_NOTDEFINED=0, 
  PLM_WARNING=1,    /* Doesn't influence the way of save                */
  PLM_SEVERE=2,     /* Leads the save engine to reduce the save domain  */
  PLM_FATAL=3       /* No save is possible, even with restricted domain */
};
#endif



#ifndef PLM_ERR_REACTION_H
#define PLM_ERR_REACTION_H
/**
 * Definition of the possible kinds of reaction for an error.
 * <tt> Possible values:</tt>
 * <dl>
 * @param <tt>PLM_ERR_NOTDEFINED</tt>  <dd> Undefined reaction.
 * @param <tt>PLM_ERR_CONTINUE</tt>    <dd> Continue the save process.
 * @param <tt>PLM_ERR_CANCEL</tt>    <dd> Cancel the save process.
 * </dl>
 */
enum PLM_ERR_REACTION
{    
	PLM_ERR_NOTDEFINED ,
  PLM_ERR_CONTINUE   ,
  PLM_ERR_CANCEL  
};
#endif








#ifndef CATIPLMErrorCell_H
#define CATIPLMErrorCell_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMErrorCell;
#else
extern "C" const IID IID_CATIPLMErrorCell ;
#endif


class CATComponentId;
class CATUnicodeString;
class CATError;
class CATListValCATComponentId;



//------------------------------------------------------------------

/**
 * This interface is dedicated to describe an error.
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMErrorCell: public CATBaseUnknown
{
  CATDeclareInterface;

public:
  

    
  
  /**
  * Returns the object describing the error.
  * @param oError [out,CATBaseUnknown#Release]
  *    The object describing the error.
  *   It is prohibited to call the Throw method on the provided oError. Please don't try to bypass the protection. 
  *   On the provided oError, the Request method gives a valid information only if GetComponent returns a PLMComponent. In this case, GetRequest indicates what is required on this PLMComponent to avoid this error. 
  *   On oError, the GetErrorTypre methods returns :
  *      CATErrorTypeWarning  : Doesn't influence the way of save         
  *      CATErrorTypeFatal    : Leads the  engine to reduce the action domain
  *      CATErrorTypeCritical : No action (open, save) was possible, even with restricted domain 
  */
  virtual const HRESULT GetError(CATError ** oError)=0;


  /**
  * Returns the PLM components associated to the error, if existing
  * @param oCompIds
  *    The PLM components on which the error happend, if the error is relative to a particular PLM components. 
  *    Exmpty list in case of an error not relative to a PLM component (global error).
  */
  virtual const HRESULT GetComponents (CATListValCATComponentId &  oCompIds)=0;
  

  /**
  * @deprecated V5R201
  */
  virtual const HRESULT GetComponent(CATComponentId & oCompId)=0;

 /**
  * @deprecated V5R201
  */
  virtual const HRESULT GetSeverity(PLMErrorSeverity & oSeverity) =0 ;
 /**
  * @deprecated V5R201
  */
  virtual const HRESULT GetRequest(CATUnicodeString & oRequest)=0;
 /**
  * @deprecated V5R201
  */
  virtual const HRESULT GetDiagnostic(CATUnicodeString & oDiagnostic)=0;
 /**
  * @deprecated V5R201
  */
  virtual const HRESULT GetAdvice(CATUnicodeString & oAdvice)=0;
  


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
