//===================================================================
// COPYRIGHT DS SolidWorks Corporation 2011/10/24
//===================================================================
// CATFreeType.cpp
// Structs, enums and global functions for the FreeType wrapper
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/10/24 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATFreeType_H
#define CATFreeType_H

#if defined (_WINDOWS_SOURCE) || defined (_COCOA_SOURCE) || defined (_ANDROID_SOURCE) || defined (_LINUX_SOURCE) // VZ2-disabled for iOS builds until porting
#define VISU_ENABLE_FREETYPE
#endif


#include "SGInfra.h"
#include "CATBoolean.h"
#include "CATSysErrorDef.h" // HRESULT

class CATFreeTypeFactory;

namespace CATFreeType {

//! Create a new FreeType factory. Factories need to be thread local.
ExportedBySGInfra HRESULT CreateFreeTypeFactory(CATFreeTypeFactory** oFactory);

ExportedBySGInfra CATBoolean CATVidUseFreeType();

struct GlobalMetrics {			// in device units (=pixels)
	// NB. These are FreeType version of the global metrics
	// FT doesn't parse OpenType VDMX tables, so for these fonts 
	// char_height is the only metric that will always match Windows metrics
	int ppem;					// Height of the EM square (aka char_height)
	int cell_height;			// Ascender + descender 
	int line_height;			// cell height + external leading
	int ascender;				// height above baseline
	int descender;				// height below baseline
	int max_advance;			// max advance width of any character
};

struct GlyphAdvance {			// glyph values in device units (26.6 fixed point)
	int xadvance;				// horizontal advance in 1/64th of a pixels 
	int yadvance;				// vertica advance in 1/64th of a pixel	    
	int rsb_delta;				// right edge displacement due to autohint	
	int lsb_delta;				// left edge displacement due to autohint
};

struct ImageMetrics {			// bitmap values are in device units (=pixels)
	int bitmap_width;			
	int bitmap_height;
	int bitmap_bpp;				// bytes per pixel
	int bitmap_yoffset;			// horizontal distance to origin 
	int bitmap_xoffset;			// vertical distance to origin
};

struct FaceOptions {
	unsigned int use_gasp		  : 1;			// use the gasp table to select rendering mode
	unsigned int use_kerning	  : 1;			// use kerning pairs
	unsigned int use_linking	  : 1;			// use font linking to find missing glyphs
	unsigned int use_auto_kerning : 1;			// use auto-kerning (only useful for autohinted fonts)
	unsigned int subpixel_positioning : 1;		// use subpixel positioning - only useful if subpixel rendering is used
	unsigned int stroke			  : 8;			// stroke glyph outlines - a value > 0 is the radius of the border in 1/4th of a pixel (so up to 64 pixels)
};

struct PenPoint {				// baseline positions of the 'pen' in 26.6 fp device units (i.e. 1/64 of pixel or subpixel)
	int x;
	int y;
};

//! controls which hinting and rendering algorithm is used
enum RenderMode {				
	CFT_RENDER_MODE_ANTIALIAS			=(1<<0),				
	CFT_RENDER_MODE_ANTIALIAS_AUTOHINT	=(1<<1),		
	CFT_RENDER_MODE_ANTIALIAS_NOHINT	=(1<<2),		
	CFT_RENDER_MODE_ANTIALIAS_LIGHT		=(1<<3),			
	CFT_RENDER_MODE_MONOCHROME			=(1<<4),				
	CFT_RENDER_MODE_SUBPIXEL			=(1<<5),				
	CFT_RENDER_MODE_SUBPIXEL_AUTOHINT	=(1<<6),	
	CFT_RENDER_MODE_SUBPIXEL_NOHINT		=(1<<7),			
	CFT_RENDER_MODE_SUBPIXEL_LIGHT		=(1<<8),		
};

enum FontWeight {
	CFT_FONT_WEIGHT_NORMAL		= 400,
	CFT_FONT_WEIGHT_BOLD		= 700,
};

enum FontStyle {
	CFT_FONT_STYLE_NORMAL,
	CFT_FONT_STYLE_ITALIC
};

enum FormatHint {
	CFT_FORMAT_HINT_DEFAULT			= 0,
	CFT_FORMAT_HINT_2D				= CFT_FORMAT_HINT_DEFAULT,
	CFT_FORMAT_HINT_3D				= 1,
	CFT_FORMAT_HINT_3D_SCALABLE		= 2,
	CFT_FORMAT_HINT_MAX	= CFT_FORMAT_HINT_3D_SCALABLE
};

#define VERTICAL_SPACING_FACTOR 20    // set the vertical spacing ,the more VERTICAL_SPACING_FACTOR corresponds to less vertical spacing between characters
enum OrientationType          
{
  LEFT_TO_RIGHT=0,
  TOP_TO_BOTTOM,
  RIGHT_TO_LEFT,
  BOTTOM_TO_TOP,
};

#define FT2HR(err) \
	(err ? E_FAIL : S_OK)

};


#endif // CATFreeType_H
