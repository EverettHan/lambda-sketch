//===================================================================
// COPYRIGHT Dassault Systemes 2015/03/25
//===================================================================
// CATPLMOfflineContentIdentifier.cpp
// Header definition of class CATPLMOfflineContentIdentifier
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/03/25 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMOfflineContentIdentifier_H
#define CATPLMOfflineContentIdentifier_H

#include "CATUuid.h"
#include "CATPLMOfflineContentBase.h"
#include "CATOmxDefaultCollecManager.h"
#include "CATOmxCollecManager.h"
#include "CATOmxOSet.h"
#include "CATIAV5Level.h"
#include "CATOmxSupport.h"  //DS_CXX11_SUPPORT_MOVE_SEMANTIC
#include "CATLib.h"



#if defined(DS_CXX11_SUPPORT_MOVE_SEMANTIC) && !defined(_IOS_SOURCE) && !defined(_ANDROID_SOURCE) && !defined(_MACOSX_SOURCE) && !defined(_DARWIN_SOURCE) //TODO verifier, apres migration sur la nouvelle API, que c'est toujours vrai (pour CXX11)...
#if defined(CATIAR423)
#define OFFLINE_CONTENT_SRDF_COMPILATION
#else
#define OFFLINE_CONTENT_IML_COMPILATION
#endif
#endif

#if defined(OFFLINE_CONTENT_IML_COMPILATION)
#define RDFNamespace iml
#endif
#if defined(OFFLINE_CONTENT_SRDF_COMPILATION)
#define RDFNamespace SimpleRDF
#endif
typedef unsigned int CATHashKey;


#if defined(OFFLINE_CONTENT_IML_COMPILATION) || defined(OFFLINE_CONTENT_SRDF_COMPILATION)
namespace RDFNamespace
{
  class Node;
}
#else 
#define RDFNamespace iml
namespace RDFNamespace
{
  class Node
  {
  public:
    Node(const Node &) {};
    Node & operator = (const Node &) { return *this; };

    unsigned int hash() const { return 0; }
    bool operator == (const Node & n) const { return false; }
  };
}
#endif
//-----------------------------------------------------------------------

class ExportedByCATPLMOfflineContentBase CATPLMOfflineContentIdentifier
{
  RDFNamespace::Node *_contentId;
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATPLMOfflineContentIdentifier();
  CATPLMOfflineContentIdentifier(const RDFNamespace::Node &iFromNode);
  virtual ~CATPLMOfflineContentIdentifier();

  /**
  *
  * <br><b>Role</b>:
  * @param &oContentIdNode
  *
  * @return
  * <dl>
  * <dt><code>S_OK</code> <dd> Node exists
  * <dt><code>S_FALSE</code> <dd> Node doesn't exist
  * </dl>
  */
  HRESULT GetIdentifier(RDFNamespace::Node &oContentIdNode) const;

  CATPLMOfflineContentIdentifier& operator=(RDFNamespace::Node &iContentIdNode);
#ifdef DS_CXX11_SUPPORT_MOVE_SEMANTIC
  CATPLMOfflineContentIdentifier& operator=(CATPLMOfflineContentIdentifier&&);
  CATPLMOfflineContentIdentifier(CATPLMOfflineContentIdentifier&&);
#endif
  CATPLMOfflineContentIdentifier& operator=(const CATPLMOfflineContentIdentifier&);
  CATPLMOfflineContentIdentifier(const CATPLMOfflineContentIdentifier&);


  int operator!() { return 0 == _contentId; }
  CATHashKey hash() const;
  //strcmp like comparison function
  //return 
  //   -1 if a<b
  //    1 if a>b
  //    0 if a=b
  int Compare(const CATPLMOfflineContentIdentifier &iOther) const;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATPLMOfflineContentIdentifier>::manager();
typedef CATOmxOSet<CATPLMOfflineContentIdentifier> CATPLMOfflineContentIdentifiersSet;

//-----------------------------------------------------------------------

#endif
