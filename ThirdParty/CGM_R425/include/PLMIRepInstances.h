// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// PLMIRepInstances.h
// Define the PLMIRepInstances interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2008  Creation: Code generated by the CAA wizard  LVT
//===================================================================
#ifndef PLMIRepInstances_H
#define PLMIRepInstances_H

/**
 * @level Protected
 * @usage U3
 */

#include "CATPLMModelerRepInterfaces.h"
#include "PLMIIterator.h"
#include "PLMIRepInstance.h"

// --- System framework
#include "CATBaseUnknown.h"

// --- Forward declaration
class CATListValCATICkeParm_var;
class CATListValCATBaseUnknown_var;
class PLMIRepReference;
class PLMIIterator;
class CATIAdpEnvironment;
class CATIInstance_var;
class CATIType_var;
class CATBRExtraParameters;
class CATUFOServiceOutput;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMModelerRepInterfaces IID IID_PLMIRepInstances;
#else
extern "C" const IID IID_PLMIRepInstances ;
#endif

//------------------------------------------------------------------

/**
 * Interface dedicated to Representation Instances management.
 *
 * <br><b>Role</b>: This interface provides means to manage the collection of Representation Instances aggregated by <tt>this</tt> reference.
 *
 * @href CATIPLMNavRepInstance
 */
class ExportedByCATPLMModelerRepInterfaces PLMIRepInstances: public CATBaseUnknown
{
  CATDeclareInterface;

public:


    /**
     * Retrieves the number of representation instances aggregated under <tt>this</tt> reference.
     *
     *  @param  oSize
     *      The size of <tt>this</tt> aggretated representation instances collection. <br>
     *      Output parameter. <br>
     *      This parameter is valuated if method succeeds.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>S_FALSE</code> if the method succeeds but there is no representation instances. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT Count (int &oSize) = 0;

    /**
     * Retrieves the list of representation instances aggregated under <tt>this</tt> reference.
     *
     *  @param  oLRepInstances
     *      A list of representation instances. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as empty. This method returns an error otherwise. <br>
     *      This parameter is valuated if method succeeds.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>S_FALSE</code> if the method succeeds but there is no aggregated representation instance. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT List (CATListValCATBaseUnknown_var &oLRepInstances) = 0;

		/**
		 *  Creates an iterator to navigate on the representation instances collection. <br>
		 *  Do not modify the collection (by removing, replacing or adding a representation instance for example) 
		 *  while the iterator is being in used.
     *
		 *   @param opIterator  [CATBaseUnknown#Release]
     *      An iterator. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
		 *   @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameter provided is unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
		 */
    virtual HRESULT Iterator (PLMIIterator *&opIterator) = 0;

    /**
     * Removes a representation instance aggregated under <tt>this</tt> reference.
     *
     *  @param  iRepInstance
     *      The representation instance to remove. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT Remove (PLMIRepInstance *ipRepInstance) = 0;

    
    /**
     * Replaces a representation instance aggregated under <tt>this</tt> reference with another one.
     *
     *  @param  ipReplacedRepInstance
     *      The representation instance to be replaced. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  ipNewRepReference
     *      The representation reference corresponding to the replacing representation instance. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  opNewRepInstance [CATBaseUnknown#Release]
     *      The created representation instance replacing the old one. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @param opOutputParameters
     *      Output information for reroute. <br>
     *      This parameter will be enrich by the UFO Replace method. <br>
     *      Output parameter. <br>
     *  @param  iIID
     *      The desired interface (PLMIRepInstance by default). <br>
     *      Input Parameter. <br>
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT ReplaceRepresentation (PLMIRepInstance *ipReplacedRepInstance, PLMIRepReference *ipNewRepReference, CATBaseUnknown *&opNewRepInstance, CATUFOServiceOutput *& opOutputParameters, const IID& iIID = IID_PLMIRepInstance) = 0;

    /**
     * Instantiates a representation reference under <tt>this</tt> reference. <br>
     * This method creates a representation instance from the given representation reference and aggregates it under <tt>this</tt> reference.
     * @businesslogic PLMInstanceAggregationCheck
     *
     *  @param  ipEnvironment
     *      The applicative environnement. <br>
     *      Input Parameter. <br>
     *  @param  ipRepReference
     *      The representation reference to instantiate.
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  opRepInstance [CATBaseUnknown#Release]
     *      The created representation instance. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @param ipExtraParameters
     *      Optional. Context parameters required by the PLMIdentificationInitialization.
     *      <br>Default context parameters accessible within the rule:
     *      <ul>
     *        <li>OperationId set to "Implicit"</li>
     *        <li>OperationDetail set to "None"</li>
     *      </ul>
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT AddRepresentationInstanceFromRepReferenceType (CATIAdpEnvironment *ipEnvironment, PLMIRepReference *ipRepReference, PLMIRepInstance *&opRepInstance, const CATBRExtraParameters* ipExtraParameters = NULL) = 0;

    /**
     * Instantiates a representation reference under <tt>this</tt> reference. <br>
     * This method creates a representation instance from the given representation reference and aggregates it under <tt>this</tt> reference.
     * @businesslogic PLMInstanceAggregationCheck
     *
     *  @param  ipEnvironment
     *      The applicative environnement. <br>
     *      Input Parameter. <br>
     *   @param ispProxy
     *       Proxy of the Representation Instance that will be created.
     *       <br>PLM Attributes initialized on the proxy are copied on the created Representation Instance.
     *  @param  ipRepReference
     *      The representation reference to instantiate.
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  opRepInstance [CATBaseUnknown#Release]
     *      The created representation instance. <br>
     *      Output parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise. <br>
     *      This parameter is returned to caller as NULL if method fails. <br>
     *      This parameter is valuated if method succeeds.
     *  @return 
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT AddRepresentationInstanceFromProxy (CATIAdpEnvironment *ipEnvironment, const CATIInstance_var & ispProxy, PLMIRepReference *ipRepReference, PLMIRepInstance *&opRepInstance) = 0;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(PLMIRepInstances, CATBaseUnknown);

//------------------------------------------------------------------

#endif
