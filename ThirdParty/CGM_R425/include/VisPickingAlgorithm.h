#ifndef VisPickingAlgorithm_h
#define VisPickingAlgorithm_h

// COPYRIGHT DASSAULT SYSTEMES 2011

#include "CATBaseUnknown.h"

#include "SGInfra.h"

class CAT3DViewpoint;
class CATRep;

class CATMathPoint;
class CATMathPointf;
class CATMathVectorf;

/**
 * Class used to override picking algorithm of VisPrimitiveGroupRep
 * <b>Role</b>: Class used to override picking algorithm of VisPrimitiveGroupRep
 * This class enables users to override the default picking algorithm of the VisPrimitiveGroupRep.
 * To do so, create a subclass of this class and override its methods, then pass an instance of the subclass
 * to the VisPrimitiveGroupRep using the VisPrimitiveGroupRep::SetPickingAlgorithm method.
 */
class ExportedBySGInfra VisPickingAlgorithm : public CATBaseUnknown
{
  CATDeclareClass;

public:
  enum ViewpointRelativePosition
  {
    OUTSIDE,
    INTERSECTING,
    INSIDE
  };

  VisPickingAlgorithm();
  virtual ~VisPickingAlgorithm();

  /**
   * Test if the rep is picked
   * <b>Role</b>: This method is used by the CATPickingRender to test if the rep is picked.
   * Default implementation always returns CATFalse (rep is never picked).
   * @param ipRep
   *   A pointer to the VisPrimitiveGroupRep that is tested
   * @param iopViewpoint
   *   A CAT3DViewpoint generated by the picking window (generally a 4 by 4 window arround the picked pixel)
   * @param iX
   *   Position in X of the picked pixel (in screen space X=0: left of the window)
   * @param iY
   *   Position in Y of the picked pixel (in screen space Y=0: top of the window)
   * @param iWindowWidth
   *   Width of the window (in pixels)
   * @param iWindowHeight
   *   Height of the window (in pixels)
   * @param iMmInSupportUnit
   *   Inverse of the size(height) of a pixel in millimeter
   * @param iRatioWH
   *   Ratio Height of a pixel / Width of a pixel
   * @param oIntersection
   *   Must be equal to point of intersection
   * @param oNormal
   *   Must be equal to the primitive's normal at the intersection
   * @param oDepth
   *   Must be equal to the depth of the intersection (the value must be between 0 and 1,
   *   when oDepth = 0, the intersection is on the near clip plane,
   *   when oDepth = 1, the intersection is on the far clip plane
   * @param oDimention
   *   Must be equal to the dimention of the picked primitive (2 for triangles, 1 for edges, 0 for vertices)
   * @param oId
   *   Must be equal to the index of the picked primitive
   * @return
   *   <dl>
   *   <dt><tt>CATTrue</tt>       <dd>If the rep is picked
   *   <dt><tt>CATFalse</tt>      <dd>If the rep is not picked
   *   </dl>
   * @deprecated R424FD01
   */
  virtual CATBoolean Pick(
    CATRep* ipRep, CAT3DViewpoint* iopViewpoint,
    float iX, float iY, float iWindowWidth, float iWindowHeight, float iMmInSupportUnit, float iRatioWH,
    CATMathPointf& oIntersection, CATMathVectorf& oNormal, float& oDepth, int& oDimention, int& oId);

  /**
   * Test if the rep is picked
   * <b>Role</b>: This method is used by the CATPickingRender to test if the rep is picked.
   * Default implementation always returns CATFalse (rep is never picked).
   * @param ipRep
   *   A pointer to the VisPrimitiveGroupRep that is tested
   * @param iopViewpoint
   *   A CAT3DViewpoint generated by the picking window (generally a 4 by 4 window arround the picked pixel)
   * @param iX
   *   Position in X of the picked pixel (in screen space X=0: left of the window)
   * @param iY
   *   Position in Y of the picked pixel (in screen space Y=0: top of the window)
   * @param iWindowWidth
   *   Width of the window (in pixels)
   * @param iWindowHeight
   *   Height of the window (in pixels)
   * @param iMmInSupportUnit
   *   Inverse of the size(height) of a pixel in millimeter
   * @param iRatioWH
   *   Ratio Height of a pixel / Width of a pixel
   * @param oIntersection
   *   Must be equal to point of intersection
   * @param oNormal
   *   Must be equal to the primitive's normal at the intersection
   * @param oDepth
   *   Must be equal to the depth of the intersection (the value must be between 0 and 1,
   *   when oDepth = 0, the intersection is on the near clip plane,
   *   when oDepth = 1, the intersection is on the far clip plane
   * @param oDimention
   *   Must be equal to the dimention of the picked primitive (2 for triangles, 1 for edges, 0 for vertices)
   * @param oId
   *   Must be equal to the index of the picked primitive
   * @return
   *   <dl>
   *   <dt><tt>CATTrue</tt>       <dd>If the rep is picked
   *   <dt><tt>CATFalse</tt>      <dd>If the rep is not picked
   *   </dl>
   */
  virtual CATBoolean Pick(
    CATRep* ipRep, CAT3DViewpoint* iopViewpoint,
    float iX, float iY, float iWindowWidth, float iWindowHeight, float iMmInSupportUnit, float iRatioWH,
    CATMathPoint& oIntersection, CATMathVectorf& oNormal, float& oDepth, int& oDimention, int& oId);

  /**
   * Computes the rep's relative position to the viewport
   * <b>Role</b>: This method is used by CATPickingOutsideRender, CATPickingInsideRender...
   * to test if a rep is picked. Default implementation always returns OUTSIDE.
   * @param ipRep
   *   A pointer to the VisPrimitiveGroupRep that is tested
   * @param iopViewpoint
   *   A CAT3DViewpoint generated by the selection trap
   * @return
   *   <dl>
   *   <dt><tt>OUTSIDE</tt>      <dd>If the rep is completely ouside the viewport
   *   <dt><tt>INTERSECTING</tt> <dd>If the rep is intersecting the viewport
   *   <dt><tt>INSIDE</tt>       <dd>If the rep is completely inside the viewport
   *   </dl>
   */
  virtual ViewpointRelativePosition GetViewpointRelativePosition(
    CATRep* ipRep, CAT3DViewpoint* iopViewpoint);

  /**
   * Test if the rep is in the specified polygon
   * <b>Role</b>: This method is used by CATPickingPolygonInsideRender to test if a rep is picked.
   * Default implementation always returns CATFalse (rep is never picked).
   * @param ipRep
   *   A pointer to the VisPrimitiveGroupRep that is tested
   * @param iopViewpoint
   *   A CAT3DViewpoint generated by the selection trap (polygon bounding box)
   * @param ipPolygonPoints
   *   The points defining the selection polygon
   * @return
   *   <dl>
   *   <dt><tt>CATTrue</tt>      <dd>If the rep is completely inside the polygon
   *   <dt><tt>CATFalse</tt>     <dd>If the rep is intersecting or is completely outside the polygon
   */
  virtual CATBoolean IsInsidePolygon(
    CATRep* ipRep, CAT3DViewpoint* iopViewpoint,
    int iPolygonPointsCount,
    const float* ipPolygonPoints);
};

#endif  // VisPickingAlgorithm_h
