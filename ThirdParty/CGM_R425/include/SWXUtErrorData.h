//===================================================================
// COPYRIGHT DS SolidWorks 2010/07/29
//===================================================================
// SWXUtErrorData.cpp
// Header definition of class SWXUtErrorData
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/07/29 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtErrorData_H
#define SWXUtErrorData_H

#include "SWXUtGeneral.h"
#include "CATString.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"

class CATError;

//-----------------------------------------------------------------------

class ExportedBySWXUtGeneral SWXUtErrorData
{
public:
	// Standard constructors and destructors
	// -------------------------------------
	SWXUtErrorData();
	SWXUtErrorData(CATError *ipError);
	SWXUtErrorData(const CATString &iCatalogName, const CATString &iMsgKey, int iSeverity = 0);
	SWXUtErrorData(const CATString &iCatalogName, const CATString &iMsgKey, const CATUnicodeString &iParam1);
	SWXUtErrorData(const CATString &iCatalogName, const CATString &iMsgKey, const CATUnicodeString &iParam1, const CATUnicodeString &iParam2);
	virtual ~SWXUtErrorData();

	CATUnicodeString GetNLSMessage() const;

	const CATString &GetCatalogName() const { return mCatalogName; }
	const CATString &GetMessageKey() const { return mMsgKey; }
	const CATString &GetCatiaMessageKey() const { return mCatiaMessageKey; }
	const CATListValCATUnicodeString & GetMessageParameters() const { return mParameters; }

	int GetSeverity() const { return mSeverity; }
	void SetSeverity(int iSeverity);

	int GetNoErrorSeverity() const;

	void SetCatalogName(const CATString &iCatalogName);
	void SetMessageKey(const CATString &iMessageKey);

	// OK to directly set string if it is already translated (comes directly from Catia for example).
	void SetTranslatedMessage(const CATUnicodeString &iMessage);
	void SetMessageParameters(const CATLISTV(CATUnicodeString) &iParams);

	void Set(CATError *ipError);

	bool IsEmptyError() const { return mEmptyError; }

	enum FadeBehavior_e { eDefaultFade = 0, eQuickFade, eExtendedFade, eNoFade };
	FadeBehavior_e GetFadeBehavior() const { return mFadeBehavior; }
	void SetFadeBehavior(FadeBehavior_e iFadeBehavior) { mFadeBehavior = iFadeBehavior; }

	bool GetAutoCloseFlag() const { return mbAutoCloseFlag; }
	void SetAutoCloseFlag(bool ibAutoCloseFlag) { mbAutoCloseFlag = ibAutoCloseFlag; }

protected:
	// Do not use this if you can help it!
	friend class SWXEMoError;
	friend class SWXCSEMoError;
	void UnsavorySetRawMessage(const CATUnicodeString &iMessage);
	bool IsCATCatalog(const CATString &iCatalogName);
	bool IsNewCATMessage(const CATString &iMessageKey);

private:
	// Copy constructor and equal operator are compiler generated
	CATUnicodeString mRawMessage; // To be used only if necessary!
	CATString mCatalogName;
	CATString mMsgKey;
	CATListValCATUnicodeString mParameters;

	int mSeverity;
	FadeBehavior_e mFadeBehavior;
	bool mbAutoCloseFlag;
	bool mEmptyError;

	CATString mCatiaMessageKey;
	CATString mCatiaCatalogName;
};

//-----------------------------------------------------------------------

#endif
