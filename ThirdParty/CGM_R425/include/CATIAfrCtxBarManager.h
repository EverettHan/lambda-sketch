//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2013/10/10
//===================================================================
// CATIAfrCtxBarManager.cpp
// Header definition of class CATIAfrCtxBarManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/10/10 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIAfrCtxBarManager_H
#define CATIAfrCtxBarManager_H

/**
 * @level Protected
 * Usage U3
 */

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
#include "CATString.h"
#include "CATMathPoint2Df.h"

//class CATString;

extern ExportedByCATAfrItf  IID IID_CATIAfrCtxBarManager ;

/**
* Interface to manage contextual components.
* <b>Role</b>:This interface provides services that enable you to interfere with the contextual components.
* Use @href CATAfrServices#GetAfrCtxBarManager to get an instance of the interface.
*/
class ExportedByCATAfrItf CATIAfrCtxBarManager: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     *  Updates and displays the ContextBar component.
     *  <b>Role</b>: the update takes into account all registered actors, the current app and current model. 
     *  @param iId
     *    The ID you want to trigger.
     *  @param iAtSamePlace
     *    ContextComponent will be placed at the same place than the last time it was visible
     *  @param iExclusiveMode
     *    if TRUE only actors registered for iID will be called
     *    if FALSE actors registered on iID and All_CtxId will be called
     */
    virtual void UpdateContextComponent(CATString iId = "", CATBoolean iAtSamePlace = FALSE, CATBoolean iExclusiveMode = FALSE)=0;

    /**
     *   Enables to declare an object as actor of the context bar.
     *   <b>Role</b>: The declared object must implement @href CATIAfrCtxBar interface. 
	 *   Registered actors are called whenever context bar is filled and displayed.
     *   @param i_Name
     *     The late_type of the object to subscribe
	 *   @param iContextId
	 *     The ID corresponding to the context for which the object is registered
	 *   @return 
     *     An HRESULT value 
     */
    virtual HRESULT SubcribeForCtxBarContent(CATString i_Name, CATString iContextId = "All_CtxId") = 0;

    /**
     *   Enables to unregister an object that was previously declared as actor of the context bar.
     *   @param i_Name
     *     The late_type of the object to unsubscribe
	 *   @param iContextId
	 *     The ID corresponding to the context for which the object was registered
	 *   @return 
     *     An HRESULT value  
     */
    virtual HRESULT UnSubcribeForCtxBarContent(CATString i_Name, CATString iContextId = "All_CtxId") = 0;

	 /**
     *   Enables to declare an object as actor of the contextual menu.
     *   <b>Role</b>: The declared object must implement @href CATIAfrCtxBar interface. 
	 *   Registered actors are called whenever the contextual menu is filled and displayed.
     *   @param i_Name
     *     The late_type of the object to subscribe
	 *   @param iContextId
	 *     The ID corresponding to the context in which the object is registered
	 *   @return 
     *     An HRESULT value 
     */
    virtual HRESULT SubcribeForCtxMenuContent(CATString iName, CATString iContextId = "All_CtxId") = 0;
    
    /**
     *   Enables to unregister an object that was previously declared as actor of the contextual menu.
     *   @param i_Name
     *     The late_type of the object to unsubscribe
     *   @param iContextId
     *      The ID corresponding to the context for which the object was registered  
	 *   @return 
     *     An HRESULT value 
     */
    virtual HRESULT UnSubcribeForCtxMenuContent(CATString iName, CATString iContextId = "All_CtxId") = 0;
    
    /*
     *   Informs the ContextBar manager that a trigger has been left-clicked.
     *   Use this method only if a left-click is performed.
     *   @param iId
     *      The ID corresponding to the trigger
		 *   @param iExclusiveMode
     *      if TRUE only actors registered for iID will be called
     *      if FALSE actors registered on iID and All_CtxId will be called
    */
    virtual void ActivateEventReceived(CATString iId, int iExclusiveMode = 0) = 0;
    
    /*
     *   Informs the ContextBar manager that a trigger has been right-clicked.
     *   @param iId
     *      The ID corresponding to the trigger
     *   @param iExclusiveMode
     *      if TRUE only actors registered for iID will be called
     *      if FALSE actors registered on iID and All_CtxId will be called
    */
    virtual void ContextEventReceived(CATString iId,int iExclusiveMode = 0) = 0;

    /*
     *   Allow to activate or deactivate fade effect
     *   @param iActivate
     *      if TRUE fade effect will be activate if it's not
     *      if FALSE fade effect will be deactivate if it's not
    */
    virtual void SetFadeEffect(CATBoolean iActivate) = 0;

		/*
		 * Returns the position of the contextbar component.
		 * The returned coordinates are relative to the associated viewer.
		 * Position == Top Left-hand corner of the component.
		*/
		virtual CATMathPoint2Df GetBarPosition() const = 0;

    /*
    * @nodoc
    */
    virtual void UpdateContextMenuOnly(CATString iId) = 0;

    /*
    * @nodoc
    */
    virtual void CancelContextChange() = 0;

    /*
    * @nodoc
    */
    virtual void ContextEventReceivedFromJS(CATString iId,const CATUnicodeString & iMessage,const CATUnicodeString & iComponentName) = 0;

	/*
    * Redisplay the component positionned according to mouse position (without any modification in its composition)
    */
	virtual void UpdateDisplay() = 0;

	/**
	*   Enables to register in order to called on PreselectedItemEventCB 
	*   <b>Role</b>: The declared object must implement @href CATIAfrCtxBar interface.
	*   You have to register at each construction of the contextual bar because you are automatically unregister at each FillCtxBar call.
	*   @param i_Name
	*     The late_type of the object to subscribe
	*   @return
	*     An HRESULT value
	*/
	virtual HRESULT SubscribePreselectedItemEvent(CATString iName) = 0;

	/**
	*   Enables to unregister on PreselectedItemEventCB
	*   <b>Role</b>: The declared object must implement @href CATIAfrCtxBar interface.
	*  Note : You are automatically unregister at each FillCtxBar call.
	*   @param i_Name
	*     The late_type of the object to subscribe
	*   @return
	*     An HRESULT value
	*/
	virtual HRESULT UnSubscribePreselectedItemEvent(CATString iName) = 0;

};

//-----------------------------------------------------------------------

#endif
