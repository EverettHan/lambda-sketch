// COPYRIGHT Dassault Systemes 2005
//===================================================================
//  Apr 2005  Creation: Code generated by the CAA wizard  phb
//===================================================================
#ifndef CATIOmbRepRefLoadingModeAccess_H
#define CATIOmbRepRefLoadingModeAccess_H

/**
* @level  Protected
* @usage   U3
*/

#include "CATOmbSelectiveLoading.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATCollec.h"

class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbSelectiveLoading IID IID_CATIOmbRepRefLoadingModeAccess;
#else
extern "C" const IID IID_CATIOmbRepRefLoadingModeAccess ;
#endif

//------------------------------------------------------------------
/**
* Interface allowing consultation of the Loading Mode of a Representation Reference.
*/
class ExportedByCATOmbSelectiveLoading CATIOmbRepRefLoadingModeAccess: public CATBaseUnknown
{
	CATDeclareInterface;

public:
	/**
	* Get the current Loading mode.
	*
	* @param oMode
	*	The name of the current mode.
	*
	* @param oIsConsistent
	*	To indicates that a transition from that current mode has failed,
	*	<br>and that it was impossible to apply the default correction:
	*	<br>Switching to the PLM_Mode (i.e. unloading everything to restart on clean basis).
	*/
	virtual HRESULT GetCurrentMode
		( CATUnicodeString&	oMode
		, CATBoolean&		oIsConsistent
		) = 0;

  /**
	* Get the current Loading mode.
	*
	* @param oMode
	*	The name of the current mode.
	* @return 
  *   <ul>
  *     <li> S_OK : Mode successfully retrieved
  *     <li> CATOmb_E_NOT_CONSISTENT_MODE : The return mode is not consistent. it is necessary to restore the consistency by calling CATIOmbRepRefLoadingModeSwitch::RestoreConsistentState on the repref
  *     <li> E_FAIL : unexpected error
  *   </ul>	
	*/
	virtual HRESULT GetCurrentMode
		( CATUnicodeString&	oMode		
		) = 0;

	/**
	* Test if RepRef is within a Pending Transition.
	*/
	virtual HRESULT TestPendingTransition( CATBoolean&	oPendingTransition ) = 0;

	/**
	* Retrieves the list of possible destination modes from the current mode.
	*
	* @param oModesList
	*	The modes towards which a transition is possible 
	*/
	virtual HRESULT	ListPossibleModes( CATListOfCATUnicodeString&	oModesList ) = 0;


  /**
	* Test if a mode can be a valid destination for a transition from the current mode.
  *<b>Role</b>
  * If the target mode requires the unload of a dirty document, the mode is not possible. 
	*
	* @param iMode
	*	The mode towards which a transition is studied 
	*/
	virtual CATBoolean	IsModePossible( CATUnicodeString&	iMode) = 0;


	/**
	* Test if a mode can be a valid destination for a transition from the current mode.
	* <b><Role></b>
  * For PUA SwitchEngine we can precise here that a dirty document can be unloaded. 
	* @param iMode
	*	  The mode towards which a transition is studied 
  * @param iForbiddenToUnloadDirtyDocument
  *   If the target mode requires the unload of a dirty document, the mode is possible only if iForbiddenToUnloadDirtyDocument is false. 
  *   
	*/
	virtual CATBoolean	IsModePossible( CATUnicodeString&	iMode,CATBoolean iForbiddenToUnloadDirtyDocument) = 0;
};

//------------------------------------------------------------------
CATDeclareHandler( CATIOmbRepRefLoadingModeAccess, CATBaseUnknown );

#endif
