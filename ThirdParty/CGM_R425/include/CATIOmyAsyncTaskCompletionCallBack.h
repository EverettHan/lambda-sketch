//===================================================================
// COPYRIGHT [Dassault System] 2010/08/09
//===================================================================
// CATIOmyAsyncTaskCompletionCallBack.cpp
// Header definition of class CATIOmyAsyncTaskCompletionCallBack
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/08/09 Creation: Code generated by the 3DS wizard
//===================================================================

/**
 * @level Protected
 * @usage U4 CATOmyAsyncTaskCompletionCallBackAdapter
 */



#ifndef CATIOmyAsyncTaskCompletionCallBack_H
#define CATIOmyAsyncTaskCompletionCallBack_H

#include "CATOMYCuteIO.h"
#include "CATBaseUnknown.h"

class CATIOmyAsyncResult;

extern ExportedByCATOMYCuteIO  IID IID_CATIOmyAsyncTaskCompletionCallBack ;

/**
* This interface defines the method that is called when an asynchrnous PLMQL/VVS order has completed. 
* This interface is provided by the caller of the asynchronous PLMQL/Order. Caller will be woken-up thanks
* to this interface when the order has been completed (with success or failure) and CATIA is on idle
* Note : Implementation must not start high consuming computations in this interface
* Note : YOU MUST USE THE PROVIDED ADAPTER
*
*/
/*
 ____    ____  _______
|_   \  /   _||_   __ \
  |   \/   |    | |__) |
  | |\  /| |    |  ___/
 _| |_\/_| |_  _| |_
|_____||_____||_____|

*/

class ExportedByCATOMYCuteIO CATIOmyAsyncTaskCompletionCallBack : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** 
  * Defines the method called to wake-up caller of asynchronous order. 
  * <Role>
  * This method will be called in the backbone waiting-loop when the completion message 
  * is received from the asynchronous process
  * Avoid performing long treatement in this method in order to keep the best User Experience possible 
  * for the end user
  * @param iResult [in]
  *   Describe the status of the asynchronous task
  *
  * @return
  *   <code></code> : User defined. Caller (BackBone loop will not check the return code of this process)
  *
   */
  virtual HRESULT OnTaskCompleted(CATIOmyAsyncResult& iResult)=0;

};

//-----------------------------------------------------------------------
#endif
