// COPYRIGHT Dassault Systemes 2002
//===================================================================
//
// CATIDocExternalView.h
// Define the CATDocIExternalView interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2002  Creation: Code generated by the CAA wizard  TDV
//===================================================================
#ifndef CATIDocExternalView_H
#define CATIDocExternalView_H

#include "CATInteractiveInterfaces.h"
#include "CATBaseUnknown.h"

#include "CATListOfInt.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListPV.h"
#include "CATLISTV_CATBaseUnknown.h"

class CATPixelImage;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATInteractiveInterfaces IID IID_CATIDocExternalView;
#else
extern "C" const IID IID_CATIDocExternalView ;
#endif

//------------------------------------------------------------------

/**
 * Describe the functionality of your interface here
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedByCATInteractiveInterfaces CATIDocExternalView: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

     /**
     * Find all inputs and their role.
     * @param oNbInputsFound
     *   number of inputs finded.
	 */

   virtual HRESULT FindAutomaticInputs(int &oNbInputsFound) = 0;

   /**
   * set inputs and their role.
   * @param inputs
   *   inputs to add.
   * @param helps
   *   roles of the inputs
   */
   
   virtual HRESULT SetInputs (const CATLISTV(CATBaseUnknown_var) * inputs , const CATListOfCATUnicodeString * helps) = 0;

   /**
   * Find all outputs and their role.
   * @param oNbOutputsFound
   *   number of outputs finded.
   */

   virtual HRESULT FindAutomaticOutputs(int &oNbOutputsFound) = 0;

     /**
     * Retrieves all inputs and their role.
     * @param oInputList
     *   List of all inputs.
     * @param oInputRoleList
     *   list of the role of all inputs.
     */
   virtual HRESULT GetListInputs (CATListValCATBaseUnknown_var*& oInputList,
                                  CATListOfCATUnicodeString*& oInputRoleList) = 0;

   /**
     * Retrieves inputs count.
     * @param oInputCount
     *   Count of inputs.
     */
   virtual HRESULT GetInputsNumber (int& oInputCount) = 0;

   /**
     * Retrieves the role of one input.
     * @param iPos
     *   input position, from 1 to @href #GetInputsNumber.
     * @param oRole
     *   The role of the iPos input.
     */
   virtual HRESULT GetInputRole (const int iPos,
                                 CATUnicodeString & oRole) = 0;

   /**
     * Modifies the role of one input.
     * @param iPos
     *   input position, from 1 to @href #GetInputsNumber.
     * @param iRole
     *  The role of the iPos input.
     */
   virtual HRESULT SetInputRole (const int iPos,
                                 const CATUnicodeString &iRole) = 0;

   /**
     * Retrieves one input.
     * @param iPos
     *   input position, from 1 to @href #GetInputsNumber.
     * @param oInputValue
     *   The iPos input.
    */
   virtual HRESULT GetInput (const int iPos,
                             CATBaseUnknown_var& oInput) = 0;
     /**
     * Retrieves all outputs and their role.
     * @param oOutputList
     *   List of all outputs.
     * @param oOutputRoleList
     *   list of the role of all outputs.
     */
   virtual HRESULT GetListOutputs (CATListValCATBaseUnknown_var*& oOutputList,
                                  CATListOfCATUnicodeString*& oOutputRoleList) = 0;

   /**
     * Retrieves outputs count.
     * @param oOutputCount
     *   Count of outputs.
     */
   virtual HRESULT GetOutputsNumber (int& oOutputCount) = 0;

   /**
     * Retrieves the role of one output.
     * @param iPos
     *   input position, from 1 to @href #GetOutputsNumber.
     * @param oRole
     *   The role of the iPos output.
     */
   virtual HRESULT GetOutputRole (const int iPos,
                                 CATUnicodeString & oRole) = 0;

   /**
     * Modifies the role of one output.
     * @param iPos
     *   input position, from 1 to @href #GetOutputsNumber.
     * @param iRole
     *  The role of the iPos output.
     */
   virtual HRESULT SetOutputRole (const int iPos,
                                 const CATUnicodeString &iRole) = 0;

   /**
     * Retrieves one output.
     * @param iPos
     *   input position, from 1 to @href #GetOutputsNumber.
     * @param oOutputValue
     *   The iPos output.
    */
   virtual HRESULT GetOutput (const int iPos,
                             CATBaseUnknown_var& oOutput) = 0;

   /**
     * Retrieves all available parameters.
     * @param oParamList
     *   liste of available parameters
     */
   virtual HRESULT GetInternalParameters (CATListValCATBaseUnknown_var* &  oParamList) = 0;

   /**
     * Retrieves all published parameters.
     * @param oPublishedParamList
     *   List of published parameters. 
     *   <br>A parameter is published thanks to the 
     *   @href #AddParameter method.
     *   <br>This list is a sub-list of the list given by @href #GetInternalParameters. 
     *
     */
   virtual HRESULT GetParameters (CATListValCATBaseUnknown_var* & oPublishedParamList) = 0;

   /**
     * Publishes a parameter.
     * @param iParamToPublish
     *   This parameter should be in the list given by @href #GetInternalParameters.
     */
   virtual HRESULT AddParameter (const CATBaseUnknown_var& iParamToPublish) = 0;

   /**
     * Un-Publishes a parameter.
     * @param iParamToUnpublish
     *   This parameter should be in the list given by @href #GetInternalParameters.
     */
   virtual HRESULT RemoveParameter (const CATBaseUnknown_var& iParamToUnpublish) = 0;

   /**
     * Retrieves the role of one published parameter. 
     * @param iSpec
     *   A published parameter. iSpec must be in the list returned by the @href #GetParameters
     *   method.
     * @param oRole
     *   The role of the iSpec parameter
     */
   virtual HRESULT GetParameterRole (const CATBaseUnknown_var& iSpec,
                                     CATUnicodeString & oRole) = 0;

   /**
     * Modifies the role of one published parameter. 
     * @param iSpec
     *   A published parameter. iSpec must be in the list returned by the @href #GetParameters
     *   method.
     * @param iRole
     *   The role of the iSpec parameter
     */
   virtual HRESULT SetParameterRole (const CATBaseUnknown_var& iSpec,
                                     const CATUnicodeString &iRoliRole) = 0;
     /**
     * Sets a pixel image as preview.
     * <br><b>Role</b>:This pixelimage will be embedded and used for preview in catalog. These
     * catalog are <tt>.catalog</tt> files.
     * @param iImage
     *   A pixel image with 130*110 size.
     */
   virtual HRESULT SetPreview (CATPixelImage* iImage) = 0;

   /**
     * Retrieves the associated pixel image as preview.
     * @param oImage
     *   A pixel image with 130*110 size.
     */
   virtual HRESULT GetPreview (CATPixelImage*& oImage) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler(CATIDocExternalView, CATBaseUnknown);
//------------------------------------------------------------------

#endif
