// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMIntegRecordWrite.h
// Define the CATIPLMIntegRecordWrite interface
//
//===================================================================
//
// Usage notes:
//   This interface is to be used at the integration level so that
//   ComponentId are handled in place of PLMId
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  tlr
//===================================================================
/**
 * @level Protected
 * @usage U3
 */
#ifndef CATIPLMIntegRecordWrite_H
#define CATIPLMIntegRecordWrite_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h" 
#include "CATOmxSR.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMIntegRecordWrite;
#else
extern "C" const IID IID_CATIPLMIntegRecordWrite;
#endif

//------------------------------------------------------------------

class CATComponentId;
class CATIPLMAttrWrite;
class CATUnicodeString;
class CATVVSUrl;
class CATString;
class _SEQUENCE_octet;
class CATPLMSemanticRelationData;
class CATPLMSemanticRelation;
class CATLISTP(CATPLMSemanticRelation);
class CATPLMSemanticRelationId;
class CATPLMStreamDescriptor;
class CATPLMTypeId;
class CATPLMRepositoryName;
class CATPLMTypeH;
class CATIPLMCompRecordWrite;

/**
 * This interface has to be used by the Save Factories to write in a save message (or more generally in a message to send to the server) the subpart corresponding to an object
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMIntegRecordWrite : public CATBaseUnknown
{
  CATDeclareInterface;
public:

  /**
   * @deprecated V5R204
   * Use the method with CATPLMTypeId
   */
  virtual HRESULT GetAttributeAccess(const CATString * iExtensionType, CATIPLMAttrWrite ** oAttrAccess) = 0;


  /**
  * Log an attributes update. This method computes a CATIImmObjectAttr interface for the dedicated object.
  * The return interface will be used by the system to update attributes.
  *
  * @param  oAttrAccess [out, CATBaseUnknown#Release]
  *    interface managing attributes setting
  * @param  iExtensionType
  *    Applicative extension type
  *    if NULL (Default) -> Attributes belong to the Master Bloc (MBSI)
  *    if Valued -> Attributes belong to the Slave Bloc (SBSI) corresponding to iExtensionType
  */
  virtual HRESULT GetAttributeAccess(CATIPLMAttrWrite ** oAttrAccess, const CATPLMTypeId *iExtensionType = NULL) = 0;


  /**
   * @see CATPLMServices.CATIPLMCompRecordWrite#ReserveStream
   */
  virtual HRESULT ReserveStream(const CATPLMStreamDescriptor * iStreamDesc) = 0;

  /**
   * @see CATPLMServices.CATIPLMCompRecordWrite#DeleteStream
   */
  virtual HRESULT DeleteStream(CATPLMStreamDescriptor * iStreamDesc) = 0;

  /**
   * @see CATPLMServices.CATIPLMCompRecordWrite#ResetStream
   */
  virtual HRESULT ResetStream(void) = 0;

  /**
   * Define basic Relation.(Ownership, Instance-Reference, TK_External)
   *
   * @param  iRelType
   *    PlmType of the relation. If NULL defines old relations support such as TK_External.
   * @param  iTargetId
   *    Id of the Targeted object
   * @return
   *    Error code of function
   * <br><b>Legal values</b>:
   *   <dl>
   *     <dt>S_OK</dt>
   *     <dd>operation is successfully.</dd>
   *     <dt>E_FAIL </dt>
   *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
   *   </dl>
   */
  virtual HRESULT SetAssociatedObject(const CATString * iRelType, const CATComponentId & iTargetId) = 0;


  /**
  * Declares a relation to create.
  * @param iSemanticRelation
  *   The semantic relation to create
  * @return
  *    Error code of function
  * <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>operation is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PushSRForAdd(const CATPLMSemanticRelation & iSemanticRelation) = 0;

  /**
  * Declares a relation to synchronize.
  * @param iSemanticRelation
  *   The semantic relation to synchronize
  * @return
  *    Error code of function
  * <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>operation is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PushSRForSync(const CATPLMSemanticRelation & iSemanticRelation) = 0;

  /**
  * Declares a relation to delete.
  * @param iSemanticRelationId
  *   The semantic relation id to delete
  * @return
  *    Error code of function
  * <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>operation is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PushSRIdForDel(const CATPLMSemanticRelationId & iSemanticRelationId) = 0;

  /**
  * Add Semantic Relations from a list. It replace/remove the existing SRs if any.
  *
  * @param  iSRList
  *    the list of CATPLMSemanticRelation objects
  * @return
  *    Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>operation is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT SetSRList(const CATLISTP(CATPLMSemanticRelation) & iSRList) = 0;

  /**
  * Gets access to provider capabilities in order to determine save method.
  * @param iRepoName
  *   The repository name
  * @param oSRSaveSupported
  *   TRUE if provider supports SR save
  * @param oIncrementalSRSaveSupported
  *   TRUE if provider supports incremental SR save
  * @param oCtxrelSaveSupported
  *   TRUE if provider supports context SR save
  * @return
  *    Error code of function
  * <br><b>Legal values</b>:
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>operation is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT GetSRSaveInformation(CATPLMRepositoryName & iRepoName,
    CATBoolean & oSRSaveSupported,
    CATBoolean & oIncrementalSRSaveSupported,
    CATBoolean & oCtxrelSaveSupported) = 0;

  /**
  * Removes an extension from an existing object.
  * Note : Should be used only in case of Update.
  *
  * @param  iExtensionType
  *    Applicative extension type
  *
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>operation is successfully.</dd>
  *     <dt>E_FAIL</dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT RemoveExtension(const CATPLMTypeId &iExtensionType) = 0;

  /** returns the actual record you can do things with*/
  virtual CATOmxSR<CATIPLMCompRecordWrite> GetRecord() const = 0;
};

//------------------------------------------------------------------
CATDeclareHandler(CATIPLMIntegRecordWrite, CATBaseUnknown);

#endif
