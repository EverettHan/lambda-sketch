// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIDeployedWorkbenchesManager.h
// Define the CATIDeployedWorkbenchesManager interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2005  Creation: Code generated by the CAA wizard  PHB
//===================================================================
#ifndef CATIDeployedWorkbenchesManager_H
#define CATIDeployedWorkbenchesManager_H

/**
* @level Protected
* @usage U3 
*/

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATAfrItf IID IID_CATIDeployedWorkbenchesManager;
#else
extern "C" const IID IID_CATIDeployedWorkbenchesManager ;
#endif

class CATIDeployedWorkbench;
class CATIUserCategory;
class CATCmdWorkbench;
class CATCmdWorkshop;

/**
 * Data structure used to give information on the loaded workbench to let
 * deployed workbenches add some content.
 *
 * _workbenchName: name of the workbench that has been loaded
 * _pCreatedWorkbench: pointer on the loaded workbench
 * _pWorkshop: pointer on the workshop in which the workbench has been loaded
 */
struct CATDeployedWorkbenchData
{
  CATString _workbenchName;
  CATCmdWorkbench * _pCreatedWorkbench;
  CATCmdWorkshop * _pWorkshop;
};

//------------------------------------------------------------------
/**
* Interface to manage deployed workbenches.
* <b>Role</b>: Deployed workbenches are presented in the Start menu,
* under the User Category.
* <br>
* (between the favorites and the market solutions).
* <p>
* This interface is supposed to be supported by the @href CATApplicationFrame instance.
*/
class ExportedByCATAfrItf CATIDeployedWorkbenchesManager: public CATBaseUnknown
{
	CATDeclareInterface;

public:

	/**
	* Retrieve all Deployed Workbenches.
	* @param oLstDwb
	*	The list of all deployed workbenches
	* @return
	*	<b>S_OK</b> in case of success (but list may be empty)
	*/
	virtual HRESULT GetWorkbenches( CATLISTV(CATBaseUnknown_var)& oLstDwb ) = 0;

	/**
	* Retrieve a given Deployed Workbench.
	* @param iWbName
	*	The name of the searched deployed workbenches
	* @param oDWbench
	*	The retrieved deployed workbench (if found)
	* @return
	*	<b>S_OK</b> in case of success (Found)
	*	<b>E_FAIL</b> in case of failure (Not found)
	*/
	virtual HRESULT GetWorkbench( const CATString& iWbName, CATIDeployedWorkbench*& oDWbench ) = 0;

	/**
	* Retrieve managed User Categories.
	* @param oLstUsrCateg
	*	The list of all managed user categories
	* @return
	*	<b>S_OK</b> in case of success (but list may be empty)
	*/
	virtual HRESULT GetCategories( CATLISTV(CATBaseUnknown_var)& oLstUsrCateg ) = 0;

	/**
	* Create a User Category, or retrieves the already existing one.
	* @param iId
	*	The name of the user category to create
	* @param oUsrCateg
	*	The created (or pre-existing) user category
	* @return
	*	<b>S_OK</b> in case of Created user category
	*	<b>S_FALSE</b> in case of Pre-existing user category
	*	<b>E_FAIL</b> in case of failure
	*/
	virtual HRESULT CreateUserCategory( const CATString& iId, CATIUserCategory*& oUsrCateg ) = 0;

	/**
	* Delete a User Category.
	* @param iId
	*	The name of the user category to delete
	* @return
	*	<b>S_OK</b> in case of Deleted user category
	*	<b>E_FAIL</b> in case of failure
	*/
	virtual HRESULT DeleteUserCategory( const CATString& iId ) = 0;

	/**
	* Define the current in-work Index File: newly created categories and workbenches will
	* be saved in this file.
	* @param iId
	*	The name of the file to set as current
	*   if this file wans't known by the manager or do not exists, it will be created
	* @return
	*	<b>S_OK</b> in case of file is successfully created
	*	<b>E_FAIL</b> in case of failure
	*/
	virtual HRESULT DefineCurrentIndexFile( const CATString& iId ) = 0;

	/**
	* Creation of command headers of a workbench.
	* This method gets called each time Application Frame creates the command headers (CATCommandHeader) of a workbench.
	* @param iWbName
	*	The identifier of the workbench.
	* @return
	*	Not used
  *
  * Deprecated. Use instead the function with the same name but with the argument CATDeployedWorkbenchData.
  */
	virtual HRESULT WorkbenchCreateCommands (const CATString& iWbName) = 0;
  /**
	* Creation of command headers of a workbench.
	* This method gets called each time Application Frame creates the command headers (CATCommandHeader) of a workbench.
	* @param iWbData
	*	The identifier of the workbench.
	* @return
	*	Not used
  */
  virtual HRESULT WorkbenchCreateCommands (const CATDeployedWorkbenchData& iWbData) = 0;

	/**
	* Creation of command access of a workbench.
	* This method gets called each time Application Frame creates the command access (CATCmdAccess) of a workbench.
	* @param iWbName
	*	The identifier of the workbench.
	* @return
	*	Not used
  *
  * Deprecated. Use instead the function with the same name but with the argument CATDeployedWorkbenchData.
  */
	virtual HRESULT WorkbenchCreateAccess (const CATString& iWbName) = 0;
  /**
	* Creation of command access of a workbench.
	* This method gets called each time Application Frame creates the command access (CATCmdAccess) of a workbench.
	* @param iWbData
	*	The identifier of the workbench.
	* @return
	*	Not used
  */
  virtual HRESULT WorkbenchCreateAccess (const CATDeployedWorkbenchData& iWbData) = 0;

	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

//------------------------------------------------------------------
CATDeclareHandler (CATIDeployedWorkbenchesManager, CATBaseUnknown);

#endif
