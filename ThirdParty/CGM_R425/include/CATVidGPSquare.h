// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidGPSquare.h
// Header definition of CATVidGPSquare
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidGPSquare_H
#define CATVidGPSquare_H

#include <VisuDialog.h>
#include <CATVidGPTexturedWidget.h>
#include <CATUnicodeString.h>
#include <list.h>
#include <CATVidColor.h>
#include <CATGraphicMaterial.h>
#include <CATVidImageBlender.h>
#include <CATGraphicMaterial.h>
#include <CATVid.h>
#include <CATVidGPTexturedWidget.h>

class CATPickingRender;
class CATSYPIntAnimation;
class CATSYPBeginStoryboard;
class CATVidGPTexture;
class CATVidImageBlender;

class CATPixelImage;

class CATVidOneGPRep;
class CATMathPointf;
class CATGraphicAttributeSet;
class CATMathVectorf;

//-----------------------------------------------------------------------

class VidColorizeStruct;

/**
 * A GPSquare can have : A texture (image, ...), An animated image (mng format), A solid color (rgba) 
 *
 * @ingroup VIDGP
 */
class ExportedByVisuDialog CATVidGPSquare: public CATVidGPTexturedWidget
{
  CATDeclareClass;

public:
  /**
  * Default constructor
  */
  CATVidGPSquare ();
  /**
  * Standard constructor
  */
  CATVidGPSquare (CATCommand *i_pParent, const CATString & i_pIdentifier, CATBoolean i_useManipulatorFlag = FALSE);
  /**
  * Sets a color to each corner of the square.
  * The interpolation is done triangle by triangle
  * 
  *   (color1) # - - - # (color2)
  *            |      /|
  *            |     / |
  *            |    /  |
  *            |   /   |
  *            |  /    |
  *            | /     |
  *            |/      |
  *   (color4) # - - - # (color3)
  *
  * @param i_color1 color of the NW corner
  * @param i_color2 color of the NE corner
  * @param i_color3 color of the SE corner
  * @param i_color4 color of the SW corner
  */
  void Set4Color(const CATVidColor& i_color1, const CATVidColor& i_color2, const CATVidColor& i_color3, const CATVidColor& i_color4);
  /**
  * @see SetPixelImage
  */
  void Get4Color(CATVidColor& o_color1, CATVidColor& o_color2, CATVidColor& o_color3, CATVidColor& o_color4) const;

  /**
  * Unsets the 4Color if set previously.
  */
  void Unset4Color();  
  /**
  * The color of the 1-pixel border of the square (included in the dimension).
  * If this color is transparent, it is not drawn.
  * Default is a transprent color.
  */
  void SetBorderColor(const CATVidColor& i_color);
  /**
  * @see SetBorderColor
  */
  const CATVidColor& GetBorderColor() const;
  /**
  * Make a gradient with transparency on the color.
  * Bottom-left and bottom-right have the rgba color,
  * Top-left and top-right have the rgb color with alpha set to 255.
  * Default is no transparency gradient.
  */
  void SetTransparencyGradientFlag(const CATBoolean& i_transparencyGradientFlag);
  /**
   * @see SetTransparencyGradientFlag
  */
  CATBoolean GetTransparencyGradientFlag() const;
  /**
  * @nodoc deprecated
  */
  void SetTessellatedFlag(CATBoolean i_tessellatedFlag){}
  /**
  * @nodoc deprecated
  */
  CATBoolean GetTessellatedFlag() const{return 0;}

protected:
	virtual ~CATVidGPSquare ();
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidGPSquare (CATVidGPSquare &);
  CATVidGPSquare& operator=(CATVidGPSquare&);
private:
  void BuildGPSquare();
private:
  friend class l_CATVidGPSquare;
};

//-----------------------------------------------------------------------

#endif
