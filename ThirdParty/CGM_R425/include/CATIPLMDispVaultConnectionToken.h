// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMDispVaultConnectionToken.h
// Define the CATIPLMDispVaultConnectionToken interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mar 2005  Creation: Code generated by the CAA wizard  sbq
//===================================================================
#ifndef CATIPLMDispVaultConnectionToken_H
#define CATIPLMDispVaultConnectionToken_H

// PPRDispatcherCClient framework
#include "CATPLMDispatcherSpecificItf.h"

// System framework
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMDispatcherSpecificItf IID IID_CATIPLMDispVaultConnectionToken;
#else
extern "C" const IID IID_CATIPLMDispVaultConnectionToken ;
#endif

//------------------------------------------------------------------

/**
* Interface representing a connection token that contains all the 
* required information to connect to a Vault data source.
*
* This is an additional interface for a CATIPLMDispConnectionToken.
*
* @see PPRDispatcherCClient.CATIPLMDispConnectionToken
*/
class ExportedByCATPLMDispatcherSpecificItf CATIPLMDispVaultConnectionToken: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

   /**
    * Returns a VaultIdentifier
    * <br><b>Role:</b>This method allows to get a vault identifier
    * @param oVaultIdentifier
    *   Ouput parameter, vault identifier.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error. Report to GetLastError for more information.</li>
    *  </ul>
    * @see CATVirtualVaultSystem.CATVVSPLMAndVaultSiteManager#RegisterVaultSiteDescriptorDefinition
    */
   virtual HRESULT GetVaultIdentifier(int *oVaultIdentifier)= 0;

    /**
    * Sets a VaultIdentifier
    * <br><b>Role:</b>This method allows to set a vault identifier
    * @param iVaultIdentifier
    *   vault identifier
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: The Vault identifier has already been set.</li>
    *  </ul>
    * @see CATVirtualVaultSystem.CATVVSPLMAndVaultSiteManager#RegisterVaultSiteDescriptorDefinition
    */
   virtual HRESULT SetVaultIdentifier(int iVaultIdentifier)= 0;

   // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
