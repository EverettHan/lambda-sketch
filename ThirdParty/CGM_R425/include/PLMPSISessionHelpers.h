// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// PLMIPSISessionHelpers.h
// Define the PLMIPSISessionHelpers interface
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2005  Creation: Code generated by the CAA wizard  aif
//===================================================================

/** 
* @CAA2Level L1
* @CAA2Usage U1
*/

#ifndef PLMPSISessionHelpers_H
#define PLMPSISessionHelpers_H

// PLMSessionInterfaces
#include "PLMPSISessionInterfaces.h"

// System
#include "CATString.h"

class CATUnicodeString;
class PLMIPSIUserExitManager;
class CATIAdpEnvironment;
class CATListValPLMPSIHelpParamValuation;

/**
* Class managing session data for the creation of PLM entities.
* <b>Role</b>: This class allows to manage some session information like the current environment (@href CATIAdpEnvironment)
*/
class ExportedByPLMPSISessionInterfaces PLMPSISessionHelpers
{
public:

    /** @nodoc */
    enum CATPLMUEType {
        catPLMType_Reference = 0,
        catPLMType_Representation = 1,
    };

    /** @nodoc */
    static  HRESULT GetPLMUEManager(CATPLMUEType iType, PLMIPSIUserExitManager *& oUEmanag);

    /**
    * Retrieves the Session Helpers.
    * @param opSessionHelper 
    *   The returned session helpers.
    * <br><b>Note: Do not release the returned singleton.</b>
    * @return
    *  <ul>
    * 	 <li> E_FAIL  if an error occurred </li> 
    * 	 <li> S_OK if the Session Helpers are returned </li>
    *  </ul>
    */
    static HRESULT GetSessionHelpers(PLMPSISessionHelpers *& opSessionHelper);

    /**
    * Sets the current environment of the session.<br>
    * This method does not load the environment. Loading is done only when necessary.
    * @param iEnvId
    *   The environment identifier to be set.
    * @return
    *  <ul>
    * 	 <li> E_INVALIDARG  if the environment is not supported by the session </li>
    * 	 <li> E_FAIL  if an error occurred </li> 
    * 	 <li> S_OK	the environment is successfully set </li>
    *  </ul>
    */
    HRESULT SetCurrentEnvironment(const CATString & iEnvId);

    /**
	* @nodoc 
    * Gets the current environment of the CATIA session.<br>
    * This method does not load the environment.
    * @param oEnvId
    *   The environment identifier of the session.  
    * @param oEnvName
    *   The environment name of the session.  
    * @return
    *  <ul>
    * 	 <li> E_FAIL  if an error occurred </li> 
    * 	 <li> S_OK	if the environment is valuated </li>
    *  </ul>
    */
    HRESULT GetCurrentEnvironment(CATString & oEnvId, CATUnicodeString & oEnvName);

    /**
    * Computes the current environment of the session.
    * @param oEnv [out, CATBaseUnknown#Release]
    *   The current environment of the session.
    *   <br><b>Note</b>: the pointer must be <em>RELEASED</em>.
    * @return
    *  <ul>
    * 	 <li> E_FAIL  if an error occurred </li> 
    * 	 <li> S_OK	if the environment is valuated </li>
    *  </ul>
    */
    HRESULT GetCurrentEnvironment(CATIAdpEnvironment *& oEnv);

    /** @nodoc */
    HRESULT SetParamValue(CATPLMUEType iPLMUEType, CATListValPLMPSIHelpParamValuation & iHelpParamValuationList, const CATString & iEnvironmentId = CATString());

    /** @nodoc */
    HRESULT GetListParamValue(CATPLMUEType iPLMUEType, CATListValPLMPSIHelpParamValuation & oHelpParamValuationList, const CATString & iEnvironmentId = CATString());

private :

    static PLMPSISessionHelpers _PLMPSISessionHelpers;

    /** Default Constructor.*/
    PLMPSISessionHelpers();

    /** Copy Constructor.*/
    PLMPSISessionHelpers(const PLMPSISessionHelpers &);

    /** Destructor.*/
    ~PLMPSISessionHelpers();

};

#endif
