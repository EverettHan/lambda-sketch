#ifndef CATTorus_h
#define CATTorus_h
// COPYRIGHT DASSAULT SYSTEMES  1999
/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */ 

#include "CATBaseUnknown.h"
#include "CATElementarySurface.h"
#include "CATMathDef.h"
#include "CATMathAxis.h"
#include "ExportedByCATGMGeometricInterfaces.h"
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATGMGeometricInterfaces IID IID_CATTorus ;
#else
extern "C" const IID IID_CATTorus ;
#endif

/**
* Interface representing a geometrical torus.
* A torus is a surface of revolution generated by revolving a circle or a circle arc
* in the three dimensional space about an axis coplanar with the circle. The circle arc to be revolved 
* is not necessarily revolved around 2*Pi. 
* <br> The CATTorus is created by the <tt>CreateTorus</tt>
* method of the <tt>CATGeoFactory</tt> interface and deleted with the <tt>Remove</tt> method.
* <br>A CATTorus is defined by:
* <ul>
* <li>a CATMathAxis in which the third direction is the revolution axis</li>
* <li>a major axis: its radius is counted on the plane defined by  the first
* and second direction of the CATMathAxis</li>
* <li>a minor axis:  its radius is counted on the plane defined by  the first
* and second direction of the CATMathAxis</li>
* <li>The low limit of the major ring, measured from
* the axis first direction.
* <li>The high limit of the major ring, measured from
* the axis first direction.
* <li>The low limit of the minor ring, counted from 
* the external minor radius in the plane
* defined by the first and second direction of the torus axis. 
* <li>The high limit of the minor ring, counted from 
* the external minor radius in the plane
* defined by the first and second direction of the torus axis. 
* </ul>
* Note:  
* <ul>
* <li>The major end angle must be greater than the major start angle.<br>
* <tt>iMajorEndAngle - iMajorStartAngle</tt> must not be greater than 2*Pi.</li>
* <li>The minor end angle must be greater than the minor start angle.
* <tt>iMinorEndAngle - iMinorStartAngle</tt> must not be greater than 2*Pi. </li>
* </ul>
 */
class ExportedByCATGMGeometricInterfaces CATTorus : public CATElementarySurface
{
  CATDeclareInterface;
public:
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //            C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/**
 * Returns the major ring radius of <tt>this</tt> CATTorus.
 * @return
 * The major ring radius value.
 */
  virtual double   GetMajorRadius() const = 0;

/**
 * Returns the major ring low limitation of <tt>this</tt> CATTorus.
 * @return
 * The major ring low limitation angle value.
 */
  virtual CATAngle    GetMajorStartAngle() const = 0;

/**
 * Returns the major ring high limitation of <tt>this</tt> CATTorus.
 * @return
 * The major ring high limitation angle value.
 */
  virtual CATAngle    GetMajorEndAngle() const = 0;

/**
 * Returns the minor ring radius of <tt>this</tt> CATTorus.
 * @return
 * The minor ring radius value.
 */
  virtual double   GetMinorRadius() const = 0;

/**
 * Returns the minor ring low limitation of <tt>this</tt> CATTorus.
 * @return
 * The minor ring low limitation angle value.
 */
  virtual CATAngle    GetMinorStartAngle() const = 0;

/**
 * Returns the minor ring high limitation of <tt>this</tt> CATTorus.
 * @return
 * The minor ring high limitation angle value.
 */
  virtual CATAngle    GetMinorEndAngle() const = 0;

/**
 * The next two methods control the placement of the "seam"
 *  in the minor angle.  Each method changes the values of both
 *  the maximum and the minimum minor angle to which the torus
 *  can be opened.  The two methods are provided for completeness.
 */
	/**
	 * Defines the location of the seam in the minor angle.
	 * @param iNewMin
	 * The new value of the seam.
	 */
  virtual  void       SetMinMinorAngle(const double iNewMin) = 0;
	/**
	 * Defines the location of the seam in the minor angle.
	 * @param iNewMin
	 * The new value of the seam.
	 */
  virtual  void       SetMaxMinorAngle(const double iNewMin) = 0;
  
/**
 * Returns the  scale on the major ring of <tt>this</tt> CATTorus.
 * @return
 * The coefficient such that:
 * <tt>Uparameter = coeff * angle</tt>.
 */
  virtual double      GetUScale() const = 0;

/**
 * Modifies the scale on the major ring of <tt>this</tt> CATTorus.
 * @param iNewScale
 * The coefficient such that:
 * <tt>Uparameter = iNewScale * angle</tt>.
 */
  virtual void        SetUScale(const double iNewScale) = 0;

/**
 * Returns the scale on the minor ring of <tt>this</tt> CATTorus.
 * @return
 * The coefficient such that:
 * <tt>Vparameter = coeff * angle</tt>.
 */
  virtual double      GetVScale() const = 0;

/**
 * Modifies the scale on the minor ring of <tt>this</tt> CATTorus.
  * @param iNewScale
 * The coefficient such that:
 * <tt>Vparameter = iNewScale * angle</tt>.
 */
  virtual void        SetVScale(const double iNewScale) = 0;

  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //               N O N - C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

 /**
 * @nodoc
 * Returns the shift in the angle on the minor ring of <tt>this</tt> CATTorus.
 *<br> This is used to preserve parametrization under
 * normal offsets of the CATTorus, in particular to offset
 * a nonsingular torus as a singular torus, we may need to construct
 * a singular patch over angles from -Pi to -2Pi.  This shift
 * enables us to align the parametrizations.  It will always be a
 * multiple of 2Pi.
 */
  virtual double      GetPhiShift() const = 0;

/**
 * @nodoc
 * Modifies the shift in the angle on the minor ring of <tt>this</tt> CATTorus.
 *<br>Since the shift must be commensurate with 2Pi, the input is
 * a CATLONG32.
 */
  virtual void        SetPhiShift(const CATLONG32 iNewCycles) = 0;

/**
 * @nodoc
 * Precise if <tt>this</tt> CATTorus is Apple or Core(Lemon) type.
 */
  virtual CATBoolean  IsAppleType() const = 0;

};
  
CATDeclareHandler(CATTorus,CATElementarySurface);

#endif
