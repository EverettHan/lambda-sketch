//===================================================================
// COPYRIGHT Microsoft 2012/02/09
//===================================================================
// CATAsyncTasksFactory_NG.cpp
// Header definition of class CATAsyncTasksFactory_NG
//===================================================================
//
// Usage notes:
// Factory that creates Asynchronous Tasks
// 
// @see CATAsyncTasksServices
//
// Physical Task
//
// Logical Task
//
//===================================================================
//  2012/02/09 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATAsyncTasksFactory
#define CATAsyncTasksFactory CATAsyncTasksFactory_NG
#endif

#ifndef CATAsyncTasksFactory_NG_H
#define CATAsyncTasksFactory_NG_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncTaskID_NG.h"
#include "CATBoolean.h"
#include "CATOmxArray.h"
#include "CATAsyncTasksUtils.h"
#include "CATAsyncRequest.h"
#include "CATAsyncSplittableRequest.h"

class CATAsyncTask;
class CATIAsyncTaskCompletionCallBackBase;

//-----------------------------------------------------------------------
class ExportedByCATAsyncTasksPlatform CATAsyncTasksFactory
{
public:
  typedef CATAsyncTaskID(CATAsyncTasksFactory::*CreateFct)(CATAsyncRequest&, CATIAsyncTaskCompletionCallBackBase&, const CATAsyncTaskID&);

  // Standard constructors and destructors
  // -------------------------------------
  CATAsyncTasksFactory ();
  virtual ~CATAsyncTasksFactory ();

  /**
  * Creates an Asynchronous Sequential task 
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iAsyncTaskCompletionCallBack : callback that is called when task is completed
  * <br/> [in][optional] iTaskAlias : Alias to the task
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncSequentialLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                            CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack );

  HRESULT CreateAsyncSequentialLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                            CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                            const CATUnicodeString              &iTaskAlias );

  HRESULT CreateAsyncSequentialLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                            const CATUnicodeString              &iTaskAlias );

  /**
  * Creates an Asynchronous Logical task
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iAsyncTaskCompletionCallBack : callback that is called when task is completed
  * <br/> [in][optional] iTaskAlias : Alias to the task
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncParallelLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                          CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack );

  HRESULT CreateAsyncParallelLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                          CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                          const CATUnicodeString              &iTaskAlias );

  HRESULT CreateAsyncParallelLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                          const CATUnicodeString              &iTaskAlias );

  /**
  * Template method
  * Create an Asynchronous R Type Request Physical Task
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iRequestParams : Request Parameters. This params has to be tied to R type Request
  * <br/> [in] iAsyncTaskCompletionCallBack : Callback that is called when task is completed
  * <br/> [in][optional] iAsyncTaskParentId : Logical Task on which the new created Physical Task will be attached
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  template<class R>
  HRESULT CreateAsyncPhysicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                   const CATAsyncRequest::Params       &iRequestParams,
                                   CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                   const CATAsyncTaskID                &iAsyncTaskParentId = CATAsyncTaskID_Null,
                                   const CATUnicodeString              *iAsyncTaskUserName = NULL,
                                   CATBoolean iIncrementTraceCounter = TRUE)
  {
    CATAsyncRequest * pAsyncRequest = new R(static_cast<const struct R::Params&>(iRequestParams));
    pAsyncRequest->SetIncrementTraceCounter(iIncrementTraceCounter);
    HRESULT RC = _CreatePhysicalTask(oAsyncTaskId, pAsyncRequest, iAsyncTaskCompletionCallBack, iAsyncTaskParentId, iAsyncTaskUserName);
    CATSysReleasePtr(pAsyncRequest);
    return RC;
  }

  /**
  * Template method
  * Create an Asynchronous R Type Request Tasks Builder
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iBuilderSettings : Async Tasks Builder Setting (@see CATAsyncTasksUtils)
  * <br/> [in] iRequestParams : Request Parameters. This params has to be tied to R type Request
  * <br/> [in] iAsyncTaskCompletionCallBack : Callback that is called when task is completed
  * <br/> [in][optional] iAsyncTaskParentId : Logical Task on which the new created Physical Task will be attached
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  template<class R>
  HRESULT CreateAsyncTasksBuilder( CATAsyncTaskID                      &oAsyncTaskId,
                                   const AsyncTasksBuilderSettings     &iBuilderSettings,
                                   const CATAsyncRequest::Params       &iRequestParams,
                                   CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                   const CATAsyncTaskID                &iAsyncTaskParentId = CATAsyncTaskID_Null,
                                   const CATUnicodeString              *iAsyncTaskUserName = NULL)
  {
    CATAsyncSplittableRequest* pAsyncRequest = new R(static_cast<const struct R::Params&>(iRequestParams), FALSE);
    HRESULT RC = _CreateTasksBuilder(oAsyncTaskId, iBuilderSettings, (CreateFct)&CATAsyncTasksFactory::_BasicTaskCreator, pAsyncRequest, iAsyncTaskCompletionCallBack, iAsyncTaskParentId,iAsyncTaskUserName);
    CATSysReleasePtr(pAsyncRequest);
    return RC;
  }

  /**
  * Create an Asynchronous Empty Task
  * This task cannot be started but an ID is asign to it
  *
  * The empty task can be attached to a logical Task and the type task specified secondly
  * To specified the type task, just call the factory method :
  *     - <code>CreateAsyncSequentialLogicalTask</code>
  *     - <code>CreateAsyncParallelLogicalTask</code>
  *     - <code>CreateAsyncPhysicalTask</code>
  *     - <code>CreateAsyncTasksBuilder</code>
  *
  * /!\ - If a logical task contains an empty task, the logical task cannot be started
  *     - It is not possible to attached an empty task to a started logical task
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncTask( CATAsyncTaskID & oAsyncTaskId );

protected:
  /**
  * Template method
  * Create an Asynchronous R Type Request Tasks Builder
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iBuilderSettings : Async Tasks Builder Setting (@see CATAsyncTasksUtils)
  * <br/> [in] iRequestParams : Request Parameters. This params has to be tied to R type Request
  * <br/> [in] ipTasksFactoryFct : Tasks Creator Function
  * <br/> [in] iAsyncTaskCompletionCallBack : Callback that is called when task is completed
  * <br/> [in][optional] iAsyncTaskParentId : Logical Task on which the new created Physical Task will be attached
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  template<class R>
  HRESULT CreateAsyncTasksBuilder( CATAsyncTaskID                      &oAsyncTaskId,
                                   const AsyncTasksBuilderSettings     &iBuilderSettings,
                                   const CATAsyncRequest::Params       &iRequestParams,
                                   CreateFct                            ipTasksFactoryFct,
                                   CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                   const CATAsyncTaskID                &iAsyncTaskParentId = CATAsyncTaskID_Null,
                                   const CATUnicodeString              *iAsyncTaskUserName = NULL)
  {
    R* pAsyncRequest = new R(static_cast<const struct R::Params&>(iRequestParams), FALSE);
    HRESULT RC = _CreateTasksBuilder(oAsyncTaskId, iBuilderSettings, ipTasksFactoryFct, pAsyncRequest, iAsyncTaskCompletionCallBack, iAsyncTaskParentId,iAsyncTaskUserName);
    CATSysReleasePtr(pAsyncRequest);
    return RC;
  }

  /**
  * Create an Asynchronous Empty Task built by Tasks Builder
  * This task cannot be started but an ID is asign to it
  *
  * The empty task can be attached to a logical Task and the type task specified secondly
  * To specified the type task, just call the factory method :
  *     - <code>CreateAsyncSequentialLogicalTask</code>
  *     - <code>CreateAsyncParallelLogicalTask</code>
  *     - <code>CreateAsyncPhysicalTask</code>
  *     - <code>CreateAsyncTasksBuilder</code>
  *
  * /!\ - If a logical task contains an empty task, the logical task cannot be started
  *     - It is not possible to attached an empty task to a started logical task
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncTask( CATAsyncTaskID & oAsyncTaskId, const CATAsyncTaskID & iTaskBuilderId );

  // Basic Tasks Creator for Tasks Builders
  // ---------------------------------
  CATAsyncTaskID _BasicTaskCreator( CATAsyncRequest                     &iAsyncRequest,
                                    CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                                    const CATAsyncTaskID                &iAsyncBuilderId);

private:
  
  CATAsyncTasksFactory (const CATAsyncTasksFactory &) = delete;
  CATAsyncTasksFactory& operator=(const CATAsyncTasksFactory&) = delete;

  HRESULT _CreateAsyncSequentialLogicalTask( CATAsyncTaskID                      &oAsyncTaskId,
                                             CATIAsyncTaskCompletionCallBackBase *iAsyncTaskCompletionCallBack,
                                             const CATUnicodeString              &iTaskUserName );

  HRESULT _CreateAsyncParallelLogicalTask( CATAsyncTaskID                      &oAsyncTaskId, 
                                           CATIAsyncTaskCompletionCallBackBase *iAsyncTaskCompletionCallBack,
                                           const CATUnicodeString              &iTaskUserName );

  HRESULT _CreatePhysicalTask( CATAsyncTaskID                      &oAsyncTaskId, 
                               CATAsyncRequest                     *ipAsyncRequest,
                               CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                               const CATAsyncTaskID                &iAsyncTaskParentId,
                               const CATUnicodeString              *iTaskUserName);
    
  HRESULT _CreateTasksBuilder( CATAsyncTaskID                      &oAsyncTaskId,
                               const AsyncTasksBuilderSettings     &iBuilderSettings,
                               CreateFct                            ipTasksFactoryFct,
                               CATAsyncSplittableRequest           *ipAsyncRequest,
                               CATIAsyncTaskCompletionCallBackBase &iAsyncTaskCompletionCallBack,
                               const CATAsyncTaskID                &iAsyncTaskParentId,
                               const CATUnicodeString              *iTaskUserName);

};

//-----------------------------------------------------------------------

#endif
