// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATPLMConnectionParameters.h
// Header definition of CATPLMConnectionParameters
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATPLMConnectionParameters_H
#define CATPLMConnectionParameters_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATOmxDefaultCollecManager.h"
#include "CATOmxOMap.h"

class CATListValCATUnicodeString;
class CATUnicodeString;
class CATListPtrCATPLMParameter;
class CATPLMParameter;
class CATBinary;

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* Do not use the @href CATPLMConnectionParameters constructor to
* do such and such but instead...
*
* @example
*  // example is optional
*  pObject = new CATPLMConnectionParameters;
*  pObject->SetXXX(...);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByCATPLMServicesItf CATPLMConnectionParameters: public CATBaseUnknown
{
public:

  // Standard constructors and destructors
  // -------------------------------------
  CATPLMConnectionParameters ();
  virtual ~CATPLMConnectionParameters ();

  /**
  *	Size
  */
  int Size() const;

  /**
  *	Lists Parameter Names including the Empty parameters i.e. Parameters without associated value
  */
  HRESULT ListParameters(CATListValCATUnicodeString * oParamNamesList) const;

  /**
  *	Lists Empty Parameter Names. i.e. Parameters without associated value
  */
  HRESULT ListEmptyParameters(CATListValCATUnicodeString * oParamNamesList) const;

  /**
  *	Returns the value of the specified parameter
  */
  HRESULT GetParameterValue(const CATUnicodeString& iParamName, CATUnicodeString * oParamValue) const;

  /**
  *	Returns the authorized values of the specified parameter
  */
  HRESULT GetParameterAuthorizedValues(const CATUnicodeString& iParamName, CATListValCATUnicodeString * oParamValuesList) const;

  /**
  *	Adds The parameter and its correponding authorized values.
  * This method maps the specified Param Name to the specified authorized values. 
  * It means if the Parameter already exists, the existing authorized values will be replaced by the specified one. 
  */
  HRESULT AddParameterAuthorizedValues(const CATUnicodeString& iParamName, const CATListValCATUnicodeString& iListOfAuthorizedValues);

  /**
  *	Adds an empty Parameter. If the Parameter already exists with an associated value, The value is erased.
  */
  HRESULT AddParameter(const CATUnicodeString& iParamName);

  /**
  *	Adds a Parameter and its corresponding value.
  * This method maps the specified Param Name to the specified value. 
  * It means if the Parameter already exists, the existing value will be replaced by the specified value 
  */
  HRESULT AddParameterValue(const CATUnicodeString& iParamName, const CATUnicodeString& iParamValue);

  /**
  *	Removes the Parameter (and its corresponding value, Authorized values...) 
  */
  HRESULT RemoveParameter(const CATUnicodeString& iParamName);

  /** @nodoc */
  static HRESULT StreamParameters(CATPLMConnectionParameters* iParameters, CATBinary** oStream);
  /** @nodoc */
  static HRESULT UnstreamParameters(CATBinary* iStream, CATPLMConnectionParameters** oParameters);

  HRESULT SwitchSecurityContext (const CATUnicodeString &iNewSecurityContext);

  HRESULT GetSecurityInfos(CATUnicodeString& oUserId,CATUnicodeString& oSecurityContext,CATUnicodeString& oSecurityContextUuid,CATUnicodeString& oRole,CATUnicodeString& oOrganization,CATUnicodeString& oProject);

  HRESULT SetSecurityInfos(const CATUnicodeString& iUserId,const CATUnicodeString& iSecurityContext,const CATUnicodeString& iSecurityContextUuid,const CATUnicodeString& iRole,const CATUnicodeString& iOrganization,const CATUnicodeString& iProject);

  //@deprecated please use GetParameterValue(SECURITY_CONTEXT,...)
  const CATUnicodeString& GetSecurityContextValue() const;

  //@deprecated please use GetParameterValue(SECURITY_CONTEXT_UUID,...)
  const CATUnicodeString& GetSecurityContextUuidValue() const;

private :
  // no AddRef made on this method!!!
  CATPLMParameter* RetrieveParameter( const CATUnicodeString& iParamName ) const;
  //
  CATOmxOMap<CATUnicodeString,CATPLMParameter*,CATOmxDefaultCollecManager<CATUnicodeString>::manager,com_manager> _Parameters ;

  static HRESULT StreamInteger(const int  iValue, CATBinary& ioStream);
  static HRESULT StreamString (const CATUnicodeString& iValue, CATBinary& ioStream);

  static HRESULT UnstreamString (const CATBinary&  iStream, int& ioCursor, CATUnicodeString& oValue  );
  static HRESULT UnstreamInteger(const CATBinary& iStream, int& ioCursor, int& oValue);

  HRESULT _AddValue(CATPLMParameter* ipParam,const CATUnicodeString& iParamValue);

  void _DeclareInvalidSecurityContext();

  CATUnicodeString _SECURITY_CONTEXT_VALUE,_SECURITY_CONTEXT_UUID_VALUE;

};

#endif
