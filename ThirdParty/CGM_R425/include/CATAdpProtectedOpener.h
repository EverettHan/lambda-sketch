//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/12/09
//===================================================================
// CATAdpProtectedOpener.cpp
// Header definition of class CATAdpProtectedOpener
//===================================================================
//
// Usage notes: Class to manage open in session
// <br><b>Role</b>: Provides all basic functions to open data in CATIA/DELMIA/SIMULIA AUTHORING session (identified as AUTHORING session further 
// on)  <ul>
// <li> To process an open, you may be need a PLM identificator, you can use Query services 
// before using Open services. </li>  
// </ul>
// @param ispCompletionParameters 
//        Sets the elements retrieved during Complete and OpenAndComplete. See @href CATIAdpProtectedCompletionParameters
// @param iopErrorMonitor
//        The error monitor collects errors and can be parsed to review them. See @href CATIAdpErrorMonitor
// <li> In every case, all elements are decorated. i.e. at least mandatory reps are retrieved. See @href CATIAdpProtectedCompletionParameters for more informations
// Sample to use it :
// CATUuid errorMonitorId;
// CATIAdpErrorMonitor* pErrorMonitor = 0;
// CATAdpErrorMonitorFactory::CreateErrorMonitor(errorMonitorId, pErrorMonitor);
// CATAdpProtectedOpener opener(CATAdpProtectedCompletionParametersFactory::Integrity(),pErrorMonitor);
// opener.AddElements(iListOfPLMID);
// CATOmbLoadingModeRuleSet ruleset; // optional
// ruleset.ApplyPredefinedRules(<my_predefined_mode>);
// opener.CompleteAndOpen(oListOfComponents, lifeCycleBag, &ruleset);
//
// Components are released from session when the @href CATOmbLifeCycleRootsBag is destroyed.
//
// Sample to use with a config filter : See @href CATAdpProtectedCompletionParametersFilterConfigFactory for more informations
// CATIPLMFilterConfig *pConfigFilter = ... 
// CATAdpProtectedOpener opener(CATAdpProtectedCompletionParametersFilterConfigFactory::Filter(pConfigFilter),pErrorMonitor);
// opener.AddElements(iListOfPLMID);
// CATOmbLoadingModeRuleSet ruleset; // optional
// ruleset.ApplyPredefinedRules(<my_predefined_mode>);
// opener.CompleteAndOpen(oListOfComponents, lifeCycleBag, &ruleset);
//
//===================================================================
//  2010/12/09 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1  
*/

#ifndef CATAdpProtectedOpener_H
#define CATAdpProtectedOpener_H

#include "CATPLMIntegrationAccess.h"
#include "CATIAdpProtectedCompletionParameters.h"
#include "CATPLMComponentData.h"
#include "CATOmbLifeCycleRootsBag.h"
#include "CATIAdpPLMIdentificator.h"
#include "CATPLMID.h"
#include "CATPLMIDSet.h"
#include "CATIAdpErrorMonitor.h"
#include "CATListPtrCATIAdpPLMIdentificator.h"
#include "CATOmbLoadingModeRuleSet.h"
class CATAdpProtectedOpenerImpl;
class CATPLMCompletionData;
class CATPLMCompletionDatum;
class CATUuid;

//-----------------------------------------------------------------------
/* 
* Provides all basic functions to open data 
*
* Samples are available on "R&D WW Operations" community, post "Open Migration for V6R2013": https://dsswym.dsy.ds/#post:27231.
* Also Check corresponding odt: CATPLMIntegrationAccess.tst/CATPLMItgTestIntegrationAccess.m/src/CATPLMItgTestAdpProtectedOpener.cpp.
* Sample : 
* CATOmbLifeCycleRootsBag lifeCycleBag;
* CATUuid errorMonitorId;
* CATIAdpErrorMonitor* pErrorMonitor = 0;
* CATAdpErrorMonitorFactory::CreateErrorMonitor(errorMonitorId, pErrorMonitor);
* CATAdpProtectedOpener opener(CATAdpProtectedCompletionParametersFactory::<wanted mode>,pErrorMonitor);
* opener.AddElements(iListOfPLMID);
* CATOmbLoadingModeRuleSet ruleset; // optional
* ruleset.ApplyPredefinedRules(<my_predefined_mode>);
* opener.CompleteAndOpen(oListOfComponents, lifeCycleBag, &ruleset);
*
* see @href CATAdpProtectedCompletionParametersFactory for the differents modes. 
*
* For fine tuning, you can also get the parameters to modify :
* CATIAdpProtectedCompletionParameters_var spParams = CATAdpProtectedCompletionParametersFactory::<wanted mode>;
* CATAdpProtectedOpener opener(spParams,pErrorMonitor);
*
* You can also get an error monitor after opening :
*
* CATAdpProtectedOpener opener(CATAdpProtectedCompletionParametersFactory::<wanted mode>,pErrorMonitor);
* opener.AddElements(iListOfPLMID);
* opener.CompleteAndOpen(oListOfComponents, lifeCycleBag);
*
* and optionally :
*
* CATIAdpErrorMonitor * pErrorMonitor = 0;
* opener.GetErrorMonitor(pErrorMonitor);
* 
*/
class ExportedByCATPLMIntegrationAccess CATAdpProtectedOpener
{

public:
// Standard constructors and destructors
// -------------------------------------
  virtual ~CATAdpProtectedOpener ();

/**
* Class constructor
* <br><b>Role</b>: 
* Create a new opener
* @param ispCompletionParameters
* Completion parameters. @see CATAdpProtectedCompletionParametersFactory or @see CATIAdpProtectedCompletionParameters for fine tuning.
* @param CATIAdpErrorMonitor
* Error monitor to populate with errors.
* You can also use @see CATAdpProtectedOpener#GetErrorMonitor to get it after
* 
*/
CATAdpProtectedOpener (CATIAdpProtectedCompletionParameters_var   ispCompletionParameters,
                       CATIAdpErrorMonitor                      * iopErrorMonitor = NULL);

/**
* <br><b>Role</b>: 
* Add elements to open.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* @param iListOfId 
*   List of CATIAdpPLMIdentificator to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElements(const CATListPtrCATIAdpPLMIdentificator & iListOfId);

/**
* <br><b>Role</b>: 
* Add elements to open.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* @param iAdpId
*  CATIAdpPLMIdentificator to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElement(CATIAdpPLMIdentificator * iAdpId);

/**
* <br><b>Role</b>: 
* Add elements to open.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* <li> In case of complex plmid, only the last element of the path is expanded. All elements of the path are opened
* @param iListOfId
*  CATPLMIDSet to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElements(const CATPLMIDSet & iListOfId);

/**
* <br><b>Role</b>: 
* Add elements to open.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* <li> In case of complex plmid, only the last element of the path is expanded. All elements of the path are opened
* @param 
*  CATPLMID to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElement(const CATPLMID & iId);


/**
* <br><b>Role</b>:
* Add elements to open. The added components may hold additionnal informations making the open process faster.
* This is advanced usage. Prefer the previous version taking CATPLMIDs or CATIAdpPLMIdentificatiors.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* <li> In case of complex plmid, only the last element of the path is expanded. All elements of the path are opened
* @param iListOfId
*  CATPLMIDSet to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElements(const CATPLMCompletionData & iData);

/**
* <br><b>Role</b>:
* Add element to open.The added component may hold additionnal informations making the open process faster.
* This is advanced usage. Prefer the previous version taking CATPLMID or CATIAdpPLMIdentificatior.
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* <li> In case of complex plmid, only the last element of the path is expanded. All elements of the path are opened
* @param
*  CATPLMID to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElement(const CATPLMCompletionDatum & iDatum);

/**
* <br><b>Role</b>:
* Add elements to open from its physical id.
* <li>Note that an additionnal query to the database will be made to get the corresponding plmids.
* This method is less efficient than giving the whole CATPLMID if available.</li>
* <li>If no component matching this physical id is found in the database, a warning will be posted
*  in the error monitor. Its id will be "ComponentUnavailabilityInDatabase".</li>
* <li>If RequireMaterials has been set to true in ispCompletionParameters, materials applied to this structure will
* also be retrieved.</li>
* @param
*  CATPLMID to process (complete, or complete and open)
* @return
* <dl>
* <dt><code>S_OK</code><dd>  Operation succeeded </dd>
* <dt><code>E_UNEXPECTED</code> <dd> Bad argument, no element added </dd>
* <dt><code>E_FAIL</code>  <dd> Failure, no element added </dd>
* </dl>
*/
HRESULT AddElementFromPhysicalId(const CATUnicodeString & iPhysicalId);
HRESULT AddElementFromPhysicalId(const CATUuid & iPhysicalId);


/**
* Get completed elements
* <li>Elements are completed regarding options set in @href CATIAdpProtectedCompletionParameters
* @param [out] oCompletedCATPLMIDs
*  List of completed PLMIDs
* @return S_OK if no issue
*         S_FALSE The data were completed, but some warnings were detected.
*         E_FAIL  in case of failure
*/
HRESULT Complete(CATPLMIDSet & oCompletedCATPLMIDs);

/**
* Get completed elements
* <li>Elements are completed regarding options set in @href CATIAdpProtectedCompletionParameters
* @param [out] oCompletedAdpIdentificators
*  List of completed elements
* @return S_OK if no issue
*         S_FALSE The data were completed, but some warnings were detected.
*         E_FAIL  in case of failure
*/
HRESULT Complete(CATListPtrCATIAdpPLMIdentificator & oCompletedAdpIdentificators);

/**
* <br><b>Role</b>: 
* <li>The components will be opened in the current AUTHORING session.</li>
* <li>if CATOmbLoadingModeRuleSet is null, component will be opened in predefined mode.</li>
* <li>Some of the components might already have been opened. In this case, neither component won't be reopened nor
*     switch would be done even if CATOmbLoadingModeRuleSet is different from the current switch state.</li>
* <li>If Complete has been called, completion will not be done again. Previously completed set 
* will be opened.</li>
* @param oOpenedComponents
*   CATPLMComponentData with list of opened components. @see CATPLMComponentData
* @param ioBag
*  Lifecyclebag. When the bag is released, components can be unloaded from session if not held by another bag.
*  You need to keep the bag until you won't need opened components anymore.
* @param 
* Loading rules
* @return
* <dl>
* <dt><code>S_OK</code> <dd> if no issue</dd>
* <dt><code>S_FALSE</code> <dd>The data were opened, but some warnings were detected.</dd>
* <dt><code>E_FAIL</code> <dd> in case of failure</dd>
* </dl>
*/
HRESULT CompleteAndOpen(CATPLMComponentData        & oOpenedComponents,
                        CATOmbLifeCycleRootsBag    & ioBag,
                        CATOmbLoadingModeRuleSet   * iLoadingRules = NULL);


/*
* <li>Get an error monitor to iterate through errors.</li>
*/

HRESULT GetErrorMonitor(CATIAdpErrorMonitor *& opErrorMonitor);

protected:
CATAdpProtectedOpenerImpl *_impl;
CATAdpProtectedOpener () {}

private:
// Copy constructor and equal operator
// -----------------------------------
CATAdpProtectedOpener (CATAdpProtectedOpener &);
CATAdpProtectedOpener& operator=(CATAdpProtectedOpener&);
};

//-----------------------------------------------------------------------

#endif
