// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMCompSaveTransaction.h
// Define the CATIPLMCompSaveTransaction interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompSaveTransaction_H
#define CATIPLMCompSaveTransaction_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATOmxKeyValueBlock.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompSaveTransaction;
#else
extern "C" const IID IID_CATIPLMCompSaveTransaction ;
#endif

class CATIPLMCompRecordWrite;
class CATPLMID;
class CATUnicodeString;
class CATIPLMCompRecordReadSet;
class CATVVSTransaction;
class CATPLMTLogEntry;
class CATPLMTEvent;
class CATPLMFlatTableRowToWrite;

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
 *
 * CATIPLMCompSaveTransaction  manages the list of record (the table of data).
 * The save message can be seen as a set of Record and in a record through the CATIPLMCompRecordWrite interface,  you will perform all your Updates/Creations/Deletions of Object.
 * When you will be finished, you will close Commit() on CATIPLMCompSaveTransaction  and if you have any problems , you will be able to call  Rollback(). Note that there is no sense to not rollback the  PDM if the commit step failed.
 */
class ExportedByCATPLMServicesItf CATIPLMCompSaveTransaction: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
 /**
  * Returns the name of the transaction. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param oName
  *   The name
  */
  virtual HRESULT GetName(CATUnicodeString** oName) = 0;

  /**
  * Creates the next CATIPLMCompRecordWrite corresponding to the given CATPlmID.
  * through the CATIPLMCompRecordWrite interface, you can perform all your Updates/Creations/Deletions of Object.
  *
  * @param  iId
  *     The CATPlmID of the object to modify within the RecordWrite.
  * @param  oppRecordWrite [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompRecordWrite object.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>successfully</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Next(const CATPLMID& iId, CATIPLMCompRecordWrite** oppRecordWrite) = 0;

  /**
  * Creates a new section that can be seen as a whole of RecordWrite,
  * ie Insert a delimiter characters into the save message to separate whole of Records.
  *
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>successfully</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT NextSection () = 0;

  /**
  * Save in the PDM all the elementary operations included in the transaction. 
  * If Succeeded, Commit() method has to be called.If the operation fails a PDM rollaback can be launched. 
  * 
  * Save method returns a CATIPLMCompRecordReadSet which allows accessing to the return message. 
  * By calling Next method, analyse the report on each Operation (record) done.
  *
  * @param oppRecordReportSet [out, CATBaseUnknown#Release]
  *     Provides access to the list of record.(The message)
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Save is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Save entirely or partially failed. A report is available.
  *     Get further information by using CATIPLMCompRecordReadSet returned
  *     </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A fatal communication problem occurs during the operation.
  *     Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Save(CATIPLMCompRecordReadSet** oppRecordReportSet = NULL) = 0;

  /**
  * Commit in the PDM all the elementary operations included in the transaction. If the operation fails a PDM rollaback can be launched.
  *
  * @param oppRecordReportSet [out, CATBaseUnknown#Release]
  *     Provides access to the list of record if the provider can do it and you have ask for it.
  *     If you provide a pointer and the provider rturns a value, you are requested to release all elements.
  *     The output pointer can be NULL if the provider cannot do it.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>commit is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd> If *oRecordReportSet is NULL : nothing to commit. Else, oRecordReportSet contains a global report.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Commit(CATIPLMCompRecordReadSet** oppRecordReportSet = NULL) = 0;

  /**
  * As soon as the commit step has failed, you can rollback the PDM using this service..
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>rollback is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>nothing to rollback.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Rollback() = 0;

  /**
  * Flush the content of the transaction.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Flush is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>nothing to Flush.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Flush() = 0;

  /**
  * Return the pointer to the Virtual Vault System session associated to this save transaction.
  * This is the session opened between the client and the server dealing the streams.
  * @return
  *     <dt>S_OK</dt>
  *     <dd>a VVS session exists.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>no VVS session, NULL pointer returned.</dd>
  */
  virtual HRESULT GetVVSTransaction(CATVVSTransaction*& otransaction) = 0;

  /**
  * Sets the Action associated to the transaction.
  * Should be done before any ::Next statement to make sure that streaming can be acheived.
  * @param  iId
  *     The CATPlmID of the action.
  */
  virtual HRESULT SetAction(const CATPLMID& iId) = 0;

  /**
  * Sets the Workspace associated to the transaction.
  * Should be done before any ::Next statement to make sure that streaming can be acheived.
  * @param  iId
  *     The CATPlmID of the workspace.
  */
  virtual HRESULT SetWorkspace(const CATPLMID& iId) = 0;

  /**
  * Add a log entry to be saved within the transaction.
  * WARNING: All events must be logged before the first call to Next method...
  * @return
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Log entry added successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>Log entry not added.</dd>
  *   </dl>
  */
  virtual HRESULT AddLogEntry(CATPLMTLogEntry* iLogEntry) = 0;

  /*
  * Ability given to add a row of flattable in a save transaction
  */
  virtual HRESULT AddFlatTableRow(const CATPLMFlatTableRowToWrite& iFTR) = 0;

  /*
  * Add in body of request BEFORE SET CONTEXT (...) some specific parameters.
  * Those specific parameters activate or not some triggers server side.
  *
  * BE CAREFUL (Save transaction):
  * Those specific parameters doesn't appear when Save transaction is sent to server (eg: On M1, 00XY_CheckProcessor.vplmsession is empty).
  * Those specific parameters appears when Commit transaction is sent to server (eg: On M1, 00XY+1_StatelessSaveProcessor.vplmsession is filled with parameters).
  *
  * BE CAREFUL:
  * SetCustomizedParameters must be called before first call to AddFlatTableRow and/or Next
  *
  * @param iName
  *  iName can be "customdata" or "customlisteners" or customtransactionparameters
  * @param iKey
     (key_1, value_1),..., (key_N, value_N)
     iKey is used for key_1,...,key_N
  * @param iValue
     (key_1, value_1),..., (key_N, value_N)
     iValue is used for value_1,...,value_N
  */
  virtual HRESULT SetCustomizedParameters(const CATUnicodeString& iName, const CATOmxKeyString& iKey, const CATOmxAny& iValue) = 0;
};

#endif
