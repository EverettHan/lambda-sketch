//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/10/27
//===================================================================
// CATVidMdlSelectionModelAdapter.h
// Header definition of class CATVidMdlSelectionModelAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/10/27 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlSelectionModelAdapter_H
#define CATVidMdlSelectionModelAdapter_H

#include <VisuDialog.h>
#include <CATIVidMdlSelectionModel.h>
#include <CATIVidMdl.h>

class CATSYPEventHandlersSupport;
class CATSYPEvent;
class CATSYPEventHandler;
class CATSYPEventArgs;
class CATSYPEventFactory;

/**
 * Adapter class that must be used to implement the CATIVidMdlSelectionModel
 * interface.
 *
 * This adapter defines all the member functions useful to ensure a correct
 * dispatching of events between the selection model and all the views it
 * is associated. This allows to be able to keep synchronize all the views that
 * display a same data model.
 *
 * It also defines a simple implementation of the GetModel member function.
 *
 * You can look at the CATVidMdlSelectionModel class to see how the
 * CATIVidMdlSelectionModel interfaces is implemented using this adapter.
 * This is mandatory to use this adapter when implementing the CATIVidMdlSelectionModel
 * interface. First, it provides an implementation for the event dispatching system
 * and second, limits the impact when the interface is modified.
 */
class ExportedByVisuDialog CATVidMdlSelectionModelAdapter : public CATIVidMdlSelectionModel
{
  CATDeclareClass;
public:
  /** Default constructor */
  CATVidMdlSelectionModelAdapter (const CATIVidMdl_var & i_spModel);
  /** Destructor */
  virtual ~CATVidMdlSelectionModelAdapter ();

  /**
   * @copydoc#AddHandler
   */
  int AddHandler(CATSYPEvent * i_pEvent, CATSYPEventHandler * i_pHandler, int i_handleConsumedEvents = 0);

  /**
   * @copydoc#RemoveHandler
   */
  int RemoveHandler(CATSYPEvent * i_pEvent, CATSYPEventHandler * i_pHandler);

  /**
   * Dispatch an event
   *
   * @param i_pArgs the arguments of the event to dispatch.
   *
   * @return !=0 if the dispatch succeeds, otherwise 0.
   */
  int Dispatch(CATSYPEventArgs * i_pArgs);


  /**
   * Get the SelectionChange event. This event must be sent by the selection
   * model each time the content of the selection is modified.
   *
   * @return the SelectionChange event instance. AddRef has not been called
   * on the returned pointer.
   */
  static CATSYPEvent * SelectionChanged();

  /**
   * @copydoc CATIVidMdlSelectionModel#GetModel
   */
  const CATIVidMdl_var & GetModel() const;

  /**
  * @copydoc CATIVidMdlSelectionModel#IsItemSelected
  */
  virtual int IsItemSelected(const CATVidMdlIndex & i_index) const;

  /**
  * @copydoc CATIVidMdlSelectionModel#IsItemSelected
  */
  virtual int IsItemSelected(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "") const;

  /**
  * @copydoc CATIVidMdlSelectionModel#IsItemSelected
  */
  virtual void GetSelectedItems(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems);

  /**
  * @copydoc CATIVidMdlSelectionModel#IsItemSelected
  */
  virtual void GetSelectedItems(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems, CATSYPDynArray<CATUnicodeString> & o_selectedColumnsIDs);

  /**
  * @copydoc GetSelectedItemsInLeafProxyModel#IsItemSelected
  */
  virtual void GetSelectedItemsInLeafProxyModel(CATSYPDynArray<CATVidMdlIndex> & o_selectedItems, CATSYPDynArray<CATUnicodeString> & o_selectedColumnsIDs);

  /**
  * @copydoc CATIVidMdlSelectionModel#Select
  */
  virtual void Select(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVid::SelectionFlag i_selectionFlag);

  /**
  * @copydoc CATIVidMdlSelectionModel#Select
  */
  virtual void Select(const CATSYPDynArray<CATVidMdlIndex> & i_indexes, CATVid::SelectionFlag i_selectionFlag, const CATSYPDynArray<CATUnicodeString>  & i_selectedColumnID);

  /**
  * @copydoc CATIVidMdlSelectionModel#Add
  */
  virtual void Add(const CATVidMdlIndex & i_index);

  /**
  * @copydoc CATIVidMdlSelectionModel#Add
  */
  virtual void Add(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "");

  /**
  * @copydoc CATIVidMdlSelectionModel#Remove
  */
  virtual void  Remove(const CATVidMdlIndex & i_index);

  /**
  * @copydoc CATIVidMdlSelectionModel#Remove
  */
  virtual void Remove(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "");

  /**
  * @copydoc CATIVidMdlSelectionModel#GetLastModifiedItem
  */
  virtual CATVidMdlIndex GetLastModifiedItem() const;

  /**
  * @copydoc CATIVidMdlSelectionModel#GetLastModifiedItem
  */
  virtual CATVidMdlIndex GetLastModifiedItem(CATUnicodeString & o_ColumnID) const;
  
  /**
  * @copydoc CATIVidMdlSelectionModel#SetLastModifiedItem
  */
  virtual void SetLastModifiedItem(CATVidMdlIndex idx);
  
  /**
  * @copydoc CATIVidMdlSelectionModel#SetLastModifiedItem
  */
  virtual void SetLastModifiedItem(CATVidMdlIndex idx, const CATUnicodeString i_ColumnID = "");

  /**
  * @copydoc CATIVidMdlSelectionModel#SetLastModifiedItem
  */
  virtual CATVidMdlIndex GetCurrentIndex() const;

  /**
  * @copydoc CATIVidMdlSelectionModel#SetLastModifiedItem
  */
  virtual CATVidMdlIndex GetCurrentIndex(CATUnicodeString & o_ColumnID) const;

  /**
  * Set i_index as the current index of this selection model.
  *
  * @param i_index the new current index
  */
  virtual void SetCurrentIndex(const CATVidMdlIndex & i_index);

  /**
  * Set i_index as the current index of this selection model.
  *
  * @param i_index the new current index
  *
  * @param i_ColumnID the new current columnID
  *
  */
  virtual void SetCurrentIndex(const CATVidMdlIndex & i_index, const CATUnicodeString i_ColumnID = "");

protected:
  /**
   * Get the factory of events for the SelectionModel
   *
   * @return the event factory. Can't be NULL.
   */
  static CATSYPEventFactory * GetEventFactory();

private:
  // Copy constructor and assignement operator are disabled
  CATVidMdlSelectionModelAdapter (CATVidMdlSelectionModelAdapter &);
  CATVidMdlSelectionModelAdapter& operator=(CATVidMdlSelectionModelAdapter&);

  // Support for event handlers registration
  CATSYPEventHandlersSupport * _pSupport;

  // The model associated to the selection model
  CATIVidMdl_var _model;

};

#endif
