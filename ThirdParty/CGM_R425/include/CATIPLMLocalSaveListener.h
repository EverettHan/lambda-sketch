// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMLocalSaveListener.h
// Define the CATIPLMLocalSaveListener interface
//
//===================================================================
//
// Usage notes:
//   New interface: The listener interface dedicated for LocalSave
//
//===================================================================
//
//  Jan 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIPLMLocalSaveListener_H
#define CATIPLMLocalSaveListener_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATIPLMGenericListenerAbstract.h"
class SessionComponentsInfos;
class SessionComponentsAndSizeInfos;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMLocalSaveListener;
#else
extern "C" const IID IID_CATIPLMLocalSaveListener ;
#endif

/**
 * @level Protected
 * @usage U4 CATPLMLocalSaveListenerAdaptor
 */


//------------------------------------------------------------------

/**
 * Listener Interface specific for LocalSave engine
 */
class ExportedByCATPLMIntegrationInterfaces CATIPLMLocalSaveListener: public CATIPLMGenericListenerAbstract
{
  CATDeclareInterface;

  public:

    /**
     * Asks the listener whether to continue the LocalSave process or not.
     *   The listener should not answer FALSE if the LocalSave is meant by the user. (Even if iNewComponents and iModifiedComponents are set with 0)
     *                       The LocalSave operation has an image validation meaning.
     *   @param iNewComponents [in] A structure containing the number of components declared as NEW for the current LocalSave
     *   @param iModifiedComponents [in] A structure containing the number of components declared as MODIFIED which will be saved for current LocalSave
     *   @param oAccept [out] if TRUE, the LocalSave() will be performed normally
     *                        if FALSE, the LocalSave() will not be performed and will return S_CANCELEDBYLISTENER
     *   @return E_FAIL if a problem occured
     *           S_OK else
     */
  virtual HRESULT ValidateDataSize(const SessionComponentsInfos & iNewComponents, 
				   const SessionComponentsAndSizeInfos &iModifiedComponents,
				   CATBoolean &oAccept) =0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};
CATDeclareHandler( CATIPLMLocalSaveListener, CATBaseUnknown );

//------------------------------------------------------------------

#endif
