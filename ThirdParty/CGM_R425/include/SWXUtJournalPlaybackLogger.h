//===================================================================

//===================================================================
// SWXUtJournalPlaybackLogger.cpp
// Header definition of class SWXUtJournalPlaybackLogger
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/06/17 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtJournalPlaybackLogger_H
#define SWXUtJournalPlaybackLogger_H

#include "SWXUtJournal.h"
#include "CATIXMLDOMDocumentBuilder.h"
#include "CATListOfCATUnicodeString.h"
#include "CATUnicodeString.h"
#include "SWXUtHandlerOut.h"

//-----------------------------------------------------------------------

class ExportedBySWXUtJournal SWXUtJournalPlaybackLogger
{
	public:
		
		SWXUtJournalPlaybackLogger();
		virtual ~SWXUtJournalPlaybackLogger ();

	public:

		HRESULT StartLog( const CATUnicodeString& iFileName );
		HRESULT EndLog();

		HRESULT LogModelImport( const CATUnicodeString& iModel );
		HRESULT LogModelImportError( const CATUnicodeString& iError );
		HRESULT LogJournal( const CATUnicodeString& iJournal );
		HRESULT LogStep( const CATUnicodeString& iJournal, const CATUnicodeString& iStep );
		HRESULT LogError( const CATUnicodeString& iJournal, const CATUnicodeString& iError );
		HRESULT LogWarning( const CATUnicodeString& iJournal, const CATUnicodeString& iWarning );
		HRESULT LogAssert( const CATUnicodeString& iJournal, const CATUnicodeString& iCondition, const CATUnicodeString& iFile, int iLine, const CATUnicodeString& iMessage );

		CATUnicodeString GetLogFileName();
		HRESULT GetRootNode( const SWXUtHandlerOut& oRootNode );
		bool GetPlayBackResult();

	private:

		HRESULT LogFileEvent( const CATUnicodeString& iNodeName, const CATUnicodeString& iFileName );
		HRESULT LogJournalEvent( const CATUnicodeString& iNodeName, const CATUnicodeString& iJournal, const CATUnicodeString& iText );
		HRESULT GetDocAndRootNode( const SWXUtHandlerOut& oDoc, const SWXUtHandlerOut& oRootNode );

	private:

		SWXUtJournalPlaybackLogger( SWXUtJournalPlaybackLogger& );
		SWXUtJournalPlaybackLogger& operator=( SWXUtJournalPlaybackLogger& );

	private:

		CATUnicodeString mLogFileName;

		CATIXMLDOMDocumentBuilder_var mXmlBuilder;

		CATListOfCATUnicodeString mXmlSaveOptions;
		CATListOfCATUnicodeString mXmlSaveOptionValues;

		bool mPlayBackResult; // true - playback succeeded, false - otherwise
};

//-----------------------------------------------------------------------

#endif
