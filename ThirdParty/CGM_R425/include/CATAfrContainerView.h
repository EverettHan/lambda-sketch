// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATAfrContainerView.h
// Header definition of CATAfrContainerView
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jul 2009  Creation: Code generated by the CAA wizard  LD3
//===================================================================
#ifndef CATAfrContainerView_H
#define CATAfrContainerView_H

#include "CATAfrItf.h"
#include "CATAfrModelView.h"
#include "CATString.h"
#include "CATUnicodeString.h"
#include "CATMathPoint2Df.h"

class CATAfrStarterView;
//-----------------------------------------------------------------------
/**
 * Implement a Container view Factory.
 * <b>Role</b>: Allow to create a Factory class for your Container view. To be validated and compiled, you have to include 
 * some files like this:
 * <tt>
 *      #include "CATEAfrContainerViewFactory.h"
 *      #include "TIE_CATIAfrContainerViewFactory.h"
 *      CATImplementContainerViewFactory(CATAfrMyContainerView,MyRepresentationType);

* </tt>
 * The first file is the adapter of your factory and
 * the second file is the TIE file allowing to implement CATIAfrContainerViewFactory interface.
 *<b>Important:</b> Your Container view class must have a constructor with a CATBaseUnknown argument.
 * For instance:
 *  <tt>CATAfrMyContainerView (CATBaseUnknown *ipModel);</tt>
 * @param classname 
 *   The class name of your Container view. The factory which return an instance of this class. 
 * @param lateType
 *   The representation type of your implementation.
 */
#define CATImplementContainerViewFactory( classname, lateType )\
class CAT##lateType##ContainerFactory: public CATEAfrContainerViewFactory\
{\
  CATDeclareClass;\
public :\
  CATAfrContainerView * CreateInstanceContainerView (CATBaseUnknown *ipModel);\
};\
  CATImplementClass( CAT##lateType##ContainerFactory,\
  CodeExtension,\
  CATEAfrContainerViewFactory,\
  lateType );\
  TIEchain_CATIAfrContainerViewFactory(CAT##lateType##ContainerFactory);\
  CATAfrContainerView * CAT##lateType##ContainerFactory::CreateInstanceContainerView (CATBaseUnknown *ipModel)\
{\
  return new classname(ipModel);\
}


/**
* Adapter class representing the view of a container. 
* Derive this class and overload the necessary methods to create a dialog elements 
* panel (for example a toolbar). 
*
* <br><b>Role</b>: Allow to create a panel (or a grid) which will contain commands
* in a container (menu, toolbar,...).
* 
* It is possible to create dynamically Containers (buttons) under the container (toolbar)
* by specifying a particular notification sending: @href CATDynamicCreationNotification.
* This notification reacts on a particular event simulating creation of new nodes in the
* concerning container. It may be the click on a button that you have created in this class
* and subscribes on the click event.
* 
*/
class ExportedByCATAfrItf CATAfrContainerView: public CATAfrModelView
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors
  // -------------------------------------
     CATAfrContainerView (CATCommand * iParent=NULL,CATString * const iIdentifier=NULL);
     CATAfrContainerView (CATBaseUnknown * ipModel);
     virtual ~CATAfrContainerView ();


  // virtual methods
  // -------------------------------------

    /**
     *   Initialize the widgets panel which will contain commands.
     *   @param ipParent
     *      The parent command. Dialog components need to know their parent.
     *   @param iId
     *      An Id to build a unique name for the Dialog object. Comes from the model object (CATCmdContainer)
     *   @return the container command (Ex @href CATDlgToolbar, @href CATVidLayGrid,...)
     *      or the command characterizing the container (Ex @href CATD
     */
     virtual CATCommand * InitWidgetsPanel(CATCommand * ipParent, CATString & iId);


    /**
     *   Create the widgets sub panel which will contain commands.
     *   Overload this method to create your sub container view.
     *   @param ipParent
     *      The parent command. Dialog components need to know their parent.
     *   @return the sub container command (Ex @href CATFrmIbox, @href CATVidLayGrid,...)
     */
     virtual CATCommand * CreateWidgetsSubPanel(CATCommand * ipParent, CATString & iId);


    /**
     *   Delete the widgets panel previously created.
     *   No necessary to delete the commands inside.
     */
     virtual void DeleteWidgetsPanel() ;


     /**
     *   Delete the widgets sub panel previously created.
     */
     virtual void DeleteWidgetsSubPanel() ;


    /**
     *   Set the icon name representing the container.
     *   @param iIcon
     *      The icon name to set
     */
     virtual void SetIconName(const CATString & iIcon) ;

    /**
     *   Set container title.
     *   @param iTitle
     *      The title to set
     */
     virtual void SetTitle(const CATUnicodeString& iTitle) ;

     /**
     *   Set container help resource file name.
     *   @param iHelpRsc
     *      The help resource file name
     */
     virtual void SetHelpRsc(const CATString & iHelpRsc);

     /**
     *   Set container tooltip short help.
     *   @param iHelp
     *      The text to set as a tooltip short help
     */
     virtual void SetShortHelp(const CATUnicodeString& iHelp) ;

     /**
     *   Set container tooltip short help icon name.
     *   @param iIcon
     *      The icon name for tooltip short help
     */
     virtual void SetShortHelpIconName(const CATString & iIcon);

     /**
     *   Set container tooltip short help icon dimension.
     *   @param iconDimension
     *      The icon dimension for tooltip short help
     */
     virtual void SetShortHelpIconDimension(const CATMathPoint2Df & iconDimension);

     /**
     *   Set container tooltip long help.
     *   @param iHelp
     *      The text to set as a tooltip long help
     */
     virtual void SetLongHelp(const CATUnicodeString & iHelp);

     /**
     *   Set container tooltip long help icon name.
     *   @param iIcon
     *      The icon name for tooltip long help
     */
     virtual void SetLongHelpIconName(const CATString & iIcon);

     /**
     *   Set container tooltip long help icon dimension.
     *   @param iconDimension
     *      The icon dimension for tooltip long help
     */
     virtual void SetLongHelpIconDimension(const CATMathPoint2Df & iconDimension);

     /**
     *   Set container tooltip LongHelpId.
     *   @param iLongHelpId
     *      The LongHelpId for Contextual Help (F1)
     */
     virtual void SetLongHelpId(const CATUnicodeString& iLongHelpId);


    /**
     *   Show the widgets panel.
     */
     virtual void ShowWidgetsPanel() ;


    /**
     *   Hide the widgets panel.
     */
     virtual void HideWidgetsPanel(int visType=0) ;


    /**
     *   Get the widgets panel visibility status.
     *   @return the visibility status: 0 if not visible, >0 if visible.
     */
     virtual int GetWidgetsPanelVisibility() ;

    /**
     *   Returns whether the widgets panel has to be displayed now.</br>
     *   This is useful when you create a sub container view.
     *   @return 0 if the widgets panel must wait an action to be displayed, >0 if it is always or currently displayed.
     */
     virtual int HasToBeDisplayedNow();


     /**
     *   Resets the widgets panel. Implements this methods when your model is dynamically modified.
     *   It allows to re-initialize values of your widgets panel. 
     */
     virtual void ResetWidgetsPanel();

     /**
     *   Set the previous selected starter view in this container. Called just after the creation of the view by CATCmdContainerRep.
     *   If no starter have been selected, this is the first child of the container which will be provided.
     */
     virtual void SetSelectedStarterView(CATCommand * i_pStarterView, const int & iSelectedStarter = 0);

     
      /**
      *
      * <br><b>Role</b>: Return the persistance of the the selected starter.
      * 
      * @return TRUE, the selected starter will be persistent (store in the setting), 
      * FALSE, the selected starter will be reset each time the container will be created
      * 
      */
      virtual CATBoolean GetPersistenceSelectedStarterFlag() const;


      /**
      *
      * <br><b>Role</b>: Return the flag that indicates that this container acts as an IconBox.
      * 
      * @return TRUE, this container acts as an IconBox, 
      * FALSE, otherwise
      * 
      */
      virtual CATBoolean GetIconBoxFlag() const;

      /**
      *   Set a flag indicating whether the associated model container is customizable or not.
      *   @param i_noCustoFlag TRUE when the associated model container is not customizable,
      *          FALSE otherwise.
      */
      virtual void SetNoCustoFlag(CATBoolean i_noCustoFlag);

      virtual void SetActive(bool i_isActive);

};

//-----------------------------------------------------------------------

#endif
