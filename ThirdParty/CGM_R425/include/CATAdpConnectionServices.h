// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATAdpConnectionServices.h
// Header definition of CATAdpConnectionServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  PMM
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATAdpConnectionServices_H
#define CATAdpConnectionServices_H

#include "CATPLMIntegrationAccess.h"

#include "CATBoolean.h"
#include "IUnknown.h"
#include "CATEventSubscriber.h"

class CATAdpConnectionParameters;
class CATUnicodeString ;
class CATListValCATString;

//-----------------------------------------------------------------------

/**
* Class to manage PLM connections to VPDM.
*
* <br><b>Role</b>: This class provides all basic functions to manage connection to Virtual Product Data Model.
*   The connection consists in creating  an access to the repository storing the VPDM. The repository is also named <b>provider</b>.  
*   You probably should use identification services to valuate user and password.
*
*   <ul> The available repository are: 
*   <li>ENOVIA , named <b>EV5</b> in all APIs</li>
*   </ul>
*/
class ExportedByCATPLMIntegrationAccess CATAdpConnectionServices
{
public:
   
   /** 
    * Connects to a repository.
    * <br><b>Role:</b>This method allows you to connect to a repository.
    * This method does not work anymore with User and Password which are ignored since identifcation services introduction.
    * @param iRepository
    *   The repository name.
    * @param iUserID
    *   The user name for connection
    * @param iUserPasswd
    *   The user password for connection
    * @param iServer
    *   The server name for connection expected format is:
    *   M1: 'ServerName:PortNumber' or <ServerName>:<PortNumber>/ematrix)
    *   TST: '<fullfilename (directory/whatyouwant.xml)>:<otherdirectory>' or '<fullfilename (directory\whatyouwant.xml)>#<otherdirectory>' (TST) )
    * @param iRole
    *   The user role on server for connection
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Connection successfull. </li> 
    *   <li><tt>S_FALSE</tt>: Already connected. </li> 
    *   <li><tt>E_FAIL</tt>: Error during connection.</li>
    *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
    *  </ul>
    */
   static HRESULT ConnectToProvider(const char * iRepository,
                                    const CATUnicodeString & iUserID, 
                                    const CATUnicodeString & iUserPasswd,
                                    const CATUnicodeString & iServer, 
                                    const CATUnicodeString & iRole);
   /** 
    * Connects to a repository.
    * <br><b>Role:</b>This method allows you to connect to a repository.
    * @param iRepository
    *   The repository name.
    * @param iConnectionParam
    *   The CATAdpConnectionParameters
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Connection successfull. </li> 
    *   <li><tt>S_FALSE</tt>: Already connected. </li> 
    *   <li><tt>E_FAIL</tt>: Error during connection.</li>
    *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
    *  </ul>
    */
   static HRESULT ConnectToProvider(const char * iRepository,
                                    CATAdpConnectionParameters* iConnectionParam );  

   /**
    * Checks connection to a repository.
    * <br><b>Role:</b>This method verifies that connection is valid.
    * @param iRepository
    *   The repository name.
    * @param oIsConnected
    *   TRUE if already connected, FALSE otherwise.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Check successfully done. </li> 
    *   <li><tt>E_FAIL</tt>: Error during check.</li>
    *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
    *  </ul>
    */
   static HRESULT IsConnected( const char * iRepository, 
                               CATBoolean& oIsConnected );

   /**
    * Disconnects from a repository.
    * <br><b>Role:</b>This method allows you to disconnect from a repository.
    * @param iRepository
    *   The repository name.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Disconnection successfull. </li> 
    *   <li><tt>S_FALSE</tt>: Already disconnected. </li> 
    *   <li><tt>E_FAIL</tt>: Error during disconnection.</li>
    *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct(iRepository may be NULL pointer).</li>
    *  </ul>
    */
   static HRESULT Disconnect( const char * iRepository);

   /**
    * Returns the list of connected repository.
    * <br><b>Role:</b>This method allows you to get The list of connected repository.
    * @param oProviders
    *   The list of repository name.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error during operation.</li>
    *   <li><tt>E_INVALIDARG</tt>: Input parameter are not correct.</li>
    *  </ul>
    */
    static HRESULT GetConnectedProviders(CATListValCATString & oRepositoryList);

  #if !defined(_WINDOWS_SOURCE) \
    /* INFRASTRUCTURE: */ \
            /* PLMAdapter */       || defined(__CATPLMImplAdapterBase) \
            /* INTEGRATION*/       || defined (__CATPLMIntegrationAccess) || defined (__CATPLMItgTestLocalSave) || defined (__CATPLMItgOfflineTests) || defined (__CATPLMIntegrationInfra)  || defined (__CATPLMItgTestIntegrationAccess)\
    /* EXTERNAL APPLICATION: */ \
           /* CATPLMCSShareServices/CATPLMShareServices.m/src/CATPLMShareServices.cpp */           || defined (__CATPLMShareServices)        /*EXPLICIT authorization given to JSY */ \
           /* X3DSessionServer/X3DSessionServices.m/src/X3DEngConnectServices.cpp */               || defined (__X3DSessionServices)        /*no authorization given */ \
           /* SWXCSDataServices/SWXCSDataServices.m/src/SWXCSPLMDataServices.cpp */                || defined (__SWXCSDataServices)        /*no authorization given */ \
           /* SWXToolbox/SWXToolbox.m/src/SWXPDMDeployContent.cpp */                               || defined (__SWXToolbox)                 /*no authorization given */ \
           /* SWXCSToolbox/SWXCSToolbox.m/src/SWXCSPDMDeployContent.cpp */                         || defined (__SWXCSToolbox)               /*no authorization given */ \
           /* SWXCSDataServices/SWXCSDataServices.m/src/SWXCSPLMDataServices.cpp */                || defined (__SWXCSDataServices)          /*no authorization given */ \
           /* SWXPDMCore/SWXPDMSnapShots.m/src/SWXPDMSnapShotsUtil.cpp */                          || defined (__SWXPDMSnapShots)            /*no authorization given */ \
           /* SWXCSPDMCore/SWXCSPDMSnapShots.m/src/SWXCSPDMSnapShotsUtil.cpp */                    || defined (__SWXCSPDMSnapShots)          /*no authorization given */ \
           /* CATLSWebServer/CATLSWebServerManager.m/src/CATLSComputeServerServices.cpp */         || defined (__CATLSWebServerManager)      /*no authorization given */ \
           /* CATImmLifeCycleUI/CATPLMCollabSpaceSwitch.m/src/CATPLMCollabSpaceSwitchCmd.cpp */    || defined (__CATPLMCollabSpaceSwitch)    /*no authorization given */ \
           /* CATImmVPMBaseUI/CATDesignHistoryCore.m/src/CATPDMDHUtils.cpp */                      || defined (__CATDesignHistoryCore)       /*no authorization given */ \
    /* ODT EXTERNAL APPLICATION: */ \
           /* CATComponentBasedDesignMdl.tst/CATComponentBasedDesignMdlTst.m/src/CATECbaOdtSwitchCollabSpace01CegOdtRun.cpp  */ || defined (__CATComponentBasedDesignMdlTst) \
           /* CATGeolocationModeler.tst/CATGLTestSwitchCollabSpace.m/src/CATEOdtTestGLSwitchCollabSpace01OdtRun.cpp */          || defined (__CATGLTestSwitchCollabSpace)    \
           /* CATWelding.tst/CATWdgTest_SwitchCollabSpace.m/src/main.cpp */                                                     || defined (__CATWdgTest_SwitchCollabSpace)  \
           /* BusinessRulesModeler.tst/CkeProjectSwitch.m/src/main.cpp */                                                       || defined (__CkeProjectSwitch)              \
           /* CATPLMDictionary.tst\TstSwitchCollabspace.m\src\TstSwitchCollabspace.cpp */                                       || defined (__TstSwitchCollabspace)          \
           /* BusinessRulesModeler\CATRefImportAndDeployRscsets.m\src\main.cpp - GRNAC Stefan - IR-792784*/                     || defined (__CATRefImportAndDeployRscsets)
   
   /**
    * Switch security context of user.
    * 
    * More detailed reading PES attached to function: FUN062259
    * 
    * USE WITH CAUTION:
    * -Wintop collabspace is changed.
    * -Webtop collabspace is NOT changed.
    * -Collabspace seen in UI is NOT changed.
    *
    * State of data in rich client:
    * All datas must be saved when you perform a switch of security context.
    * You must be connected to one and only one provider M1 when you perform a switch of security context.
    *
    * <br><b>Role:</b>This method will try to clean internal data to accept the switch.
    * @param iRepository
    *   The repository for the switch.
    * @param iRole
    *   The new role to use.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error during operation. The switch was not performed</li>
    *  </ul>
    */
   static HRESULT SwitchSecurityContext (const char * iRepository, const CATUnicodeString & iSecurityContext);
#endif

   /**
    * Adds a callback for the BeforeSwitchSecurityContextEvent.
    * This event provides the ability to abort the switch.
    * @param ipEventSubscriber
    *   The subscriber.
    * @param iCallback
    *   The method to call.
    * @param iClientData
    *   The data to pass to the method.
    * @return
    *   The callback.
    */
   static CATCallback AddBeforeSwitchSecurityContextCallback(CATBaseUnknown * ipEventSubscriber, CATSubscriberMethod iCallback, CATSubscriberData iClientData = NULL);

   /**
    * Adds a callback for the AfterSwitchSecurityContextEvent.
    * This event provides the ability to abort the switch.
    * @param ipEventSubscriber
    *   The subscriber.
    * @param iCallback
    *   The method to call.
    * @param iClientData
    *   The data to pass to the method.
    * @return
    *   The callback.
    */
   static CATCallback AddAfterSwitchSecurityContextCallback(CATBaseUnknown * ipEventSubscriber, CATSubscriberMethod iCallback, CATSubscriberData iClientData = NULL);

   /**
    * Remove a callback for the BeforeSwitchSecurityContextEvent    
    * 
    * @param iEventSubscriber 
    *   the subscriber
    * @param iCallbackOnSwitchSecurityContextCallback 
    *   the callback to remove
    */
   static void RemoveBeforeSwitchSecurityContextCallback(CATBaseUnknown * iEventSubscriber, CATCallback iCallbackOnSwitchSecurityContextCallback);

   /**
    * Remove a callback for the AfterSwitchSecurityContextEvent    
    * 
    * @param iEventSubscriber 
    *   the subscriber
    * @param iCallbackOnSwitchSecurityContextCallback 
    *   the callback to remove
    */
   static void RemoveAfterSwitchSecurityContextCallback(CATBaseUnknown * iEventSubscriber, CATCallback iCallbackOnSwitchSecurityContextCallback);
};

//-----------------------------------------------------------------------

#endif
