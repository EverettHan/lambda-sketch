//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/03
//===================================================================
// CATPLMMajorVersionData.cpp
// Header definition of class CATPLMMajorVersionData
//===================================================================
//
// Usage notes:
// Contains the major versioning related data.
//
//===================================================================
//  2018/05/03 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMMajorVersionData_H
#define CATPLMMajorVersionData_H

#include "CATPLMServicesItf.h"
#include "CATOmxSharable.h"
#include "CATUuid.h"
#include "CATUnicodeString.h"
#include "CATOmxCollecManager.h"

class ExportedByCATPLMServicesItf CATPLMMajorVersionData : public CATOmxSharable
{
public:
  CATPLMMajorVersionData(const CATUuid& iVersionId, const CATUnicodeString& iMajorRevision, int iMajorOrder);
  CATPLMMajorVersionData(const CATUuid& iVersionId, const CATUnicodeString& iMajorRevision, int iMajorOrder, CATBoolean iIsLast);
  virtual ~CATPLMMajorVersionData();

  /**
  * Returns if this major is the last one in the whole family.
  * It is not linked to V_isLastVersion attribute, it is based on the majororder attribute.
  * It is set to TRUE if majororder=max(majororder) locally in the database.
  * So we can compute this value only if at least one element of all major version are returned from the query.
  * @result
  *   S_OK   : the oResult contains if the major version is the last one locally in the database or not.
  *   E_FAIL : we can't know if this is the last major version from the requested query.
  */
  HRESULT IsLastMajor(CATBoolean &oIsLastMajor) const;

  CATBoolean IsLastMajor() const;
  CATBoolean IsLastMajorComputed() const;

  /*
  * Returns the version id as uuid.
  */
  CATUuid GetVersionId() const;

  /**
  * Returns the major revision as string.
  * Example: '--A' or '--C'
  */
  CATUnicodeString GetMajorRevision() const;

  /**
  * Checks if the major information are from the same major family.
  * @return
  *   TRUE  : major information are from the same family.
  *   FALSE : if not.
  */
  CATBoolean CheckFamily(const CATPLMMajorVersionData& iComparedMajorVersion) const;

  /**
  * Returns a value based on the order of major information.
  * Note : It only has a meaning if Major information are from the same family.
  * If not sure, use CheckFamily before.
  *
  * @return
  *   -1 : The current major info is before the compared one.
  *   0  : The current major info is equal to the compared one.
  *   +1 : The current major info is after the compared one.
  */
  int Compare(const CATPLMMajorVersionData& iComparedMajorVersion) const;
  int Compare(const CATPLMMajorVersionData* ipComparedMajorVersion) const;

  /**
  * ComputeHashKey
  */
  unsigned int ComputeHashKey() const;

protected:
  /**
  *  Sets the flag _IsLast if query request allows it.
  */
  void SetIsLastMajor(CATBoolean iIsLast);

private:
  CATPLMMajorVersionData(CATPLMMajorVersionData &);
  CATPLMMajorVersionData& operator=(CATPLMMajorVersionData&);

  // Attributes
  CATUnicodeString _MajorRevision; // M1 attribute: majorrevision. Example: '---', '--A', '--B', ...
  CATUuid _VersionId; // M1 attribute: versionId
  int _MajorOrder; // M1 attribute: majorOrder
  CATBoolean _IsLast; // Computed locally (last version returned)
  CATBoolean _IsLastComputed;

  friend class CATPLMCompVersioningService;
  friend class CATPLMCompVersioningLegacyService;
  friend class CATPLMVersioningConvertion;
  friend class CATPLMxVersioningNLVService;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATPLMMajorVersionData*>::manager();

#endif
