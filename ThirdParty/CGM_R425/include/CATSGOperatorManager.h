//===================================================================
// COPYRIGHT Dassault Systemes 2015/09/04
//===================================================================
// CATSGOperatorManager.cpp
// Header definition of class CATSGOperatorManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/09/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATSGOperatorManager_H
#define CATSGOperatorManager_H

#include "CATSGUtil.h"

#ifdef SG_COMPOSITES_MULTIOS
#include "SGComposites.h"
#include "CATSGComposite.h"
#include "CATSGCompositeRing.h"

class ExportedBySGComposites CATSGOperatorManager : public CATSGComposite
{
public:

    //See CATPolyInterfClashOper::PenetrationVectorDirection
    enum PenetrationVectorDirection
    {
        REMOVE_SMALLER_FROM_LARGER = 0,
        REMOVE_OBJECT1_FROM_OBJECT2 = 1,
        REMOVE_OBJECT2_FROM_OBJECT1 = 2
    };

    //See CATPolyBoundingVolume::TypeID
    enum BoundingVolumeType
    {
        AABB,
        SPHERE,
        OBB,
        PLANE,
        CAPSCYLINDER
    };

    //See CATBVHTreeBuilder::SpatialOptimization
    enum SpatialOptimization
    {
        NO_OPTIMIZATION,
        BASIC_OPTIMIZATION,
        BEST_OPTIMIZATION
    };

    struct ClashParameters {

        ClashParameters():
            stopAtFirstIntersection(FALSE),
            computeDepthPenetration(FALSE),
            penetrationVectorDirection(REMOVE_SMALLER_FROM_LARGER),
            computeIntersectionCurves(FALSE),
            onlyFirstPrimitives(FALSE),
            useGeometricGranularity(FALSE),
            detectInclusion(FALSE),
            detectInclusionInOpenObjetcs(FALSE),
            displayNormals(NORMAL),
            useCanonics(FALSE),
            BVType(SPHERE),
            spatialOptimization(BASIC_OPTIMIZATION),
            maxNumberOfTrianglesPerMesh(100)
        {
        }

        CATBoolean stopAtFirstIntersection;
        CATBoolean computeDepthPenetration;
        PenetrationVectorDirection penetrationVectorDirection;
        CATBoolean computeIntersectionCurves;
        CATBoolean onlyFirstPrimitives;
        CATBoolean useGeometricGranularity;
        CATBoolean detectInclusion;
        CATBoolean detectInclusionInOpenObjetcs;
        CATBoolean displayNormals;
        CATBoolean useCanonics;
        BoundingVolumeType BVType;
        SpatialOptimization spatialOptimization;
        int maxNumberOfTrianglesPerMesh;
    };

    virtual CAT3DRep* Clash(CATSGCompositeRingPtr iFirstRing, CATSGCompositeRingPtr iSecondRing, ClashParameters ipClashParams = ClashParameters()) = 0;
};

// {4BFCC201-E462-4D0B-BA37-2C12EC9C5DB8}
static const GUID GUID_CATSGOperatorManagerTrait =
{ 0x4bfcc201, 0xe462, 0x4d0b, { 0xba, 0x37, 0x2c, 0x12, 0xec, 0x9c, 0x5d, 0xb8 } };

template<>
class CATTraitInfo<CATSGOperatorManager>
{
public:
	static const GUID& 					GetTraitGUID()
	{
		return GUID_CATSGOperatorManagerTrait;
	}
	static const int					GetTraitTag() { return CATTraitTag(-1); }
	static const CATECompositionMode	GetCompositeMode()
	{
		return CATECompositionModeParticular;
	}
	static const CATTraitRawInfo 		GetRaw()
	{
        DefaultGetRawImplementation;
	}

    static HRESULT GetBindableMethod(const CATUnicodeString& iID, CAT3DRep* (CATSGOperatorManager::*&opMethod)(CATSGCompositeRingPtr, CATSGCompositeRingPtr, CATSGOperatorManager::ClashParameters))
    {
        CAT3DRep* (CATSGOperatorManager::*pClash)(CATSGCompositeRingPtr, CATSGCompositeRingPtr, CATSGOperatorManager::ClashParameters) = &CATSGOperatorManager::Clash;
        if(iID == "CATSGOperatorManager::Clash") {
            opMethod = pClash;
            return S_OK;
        } else {
            return E_FAIL;
        }
    }

    static HRESULT GetBindableMethodID(CAT3DRep* (CATSGOperatorManager::*ipMethod)(CATSGCompositeRingPtr, CATSGCompositeRingPtr, CATSGOperatorManager::ClashParameters), CATUnicodeString& oID)
    {
        CAT3DRep* (CATSGOperatorManager::*pClash)(CATSGCompositeRingPtr, CATSGCompositeRingPtr, CATSGOperatorManager::ClashParameters) = &CATSGOperatorManager::Clash;
        if(ipMethod == pClash) {
            oID = "CATSGOperatorManager::Clash";
            return S_OK;
        } else {
            return E_FAIL;
        }
    }
};

typedef CATCompositeTPtr<CATSGOperatorManager>     CATSGOperatorManagerPtr;
typedef CATOnStackBorrowPtr<CATSGOperatorManager>  CATSGOperatorManagerBorrowPtr;

#endif	// SG_COMPOSITES_MULTIOS
#endif //CATSGOperatorManager_H
