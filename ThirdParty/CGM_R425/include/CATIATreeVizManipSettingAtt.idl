// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIATreeVizManipSettingAtt.idl
// Automation interface for the TreeVizManipSettingAtt element 
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2004  Creation: Code generated by the CAA wizard  fbj
//===================================================================
#ifndef CATIATreeVizManipSettingAtt_IDL
#define CATIATreeVizManipSettingAtt_IDL

#include "CATIASettingController.idl"
#include "CATVariant.idl"
#include "CATSafeArray.idl"
#include "CATBSTR.idl"

#include "CatTreeTypeEnum.idl"
#include "CatTreeOrientationEnum.idl"
#include "CatTreeSizeTypeEnum.idl"

/**  
 * The Interface to retrieve and set the visual information on the specification tree.
 */
interface CATIATreeVizManipSettingAtt : CATIASettingController 
{

#pragma PROPERTY Type
	 /**
	 * Retrieves or Sets the type applied to the specification tree.
	 */
     HRESULT get_Type(out /*IDLRETVAL*/ CatTreeTypeEnum		oType);
     HRESULT put_Type( in CatTreeTypeEnum	iType );

	 /** 
	 * Retrieves environment informations for the type applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of the type applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetTypeInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

    /**
     * Locks or unlocks the type of the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the type applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetTypeLock( in  boolean iLocked );



#pragma PROPERTY Orientation
    
	 /**
	 * Retrieves or Sets the orientation applied to the specification tree.
	 */
     HRESULT get_Orientation(out /*IDLRETVAL*/ CatTreeOrientationEnum		oOrientation);
     HRESULT put_Orientation( in CatTreeOrientationEnum	iOrientation );

	  /** 
	 * Retrieves environment informations for the orientation applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of the orientation applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetOrientationInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the orientation applied to the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the orientation applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetOrientationLock( in  boolean iLocked );



#pragma PROPERTY SizeType
    /**
	 * Retrieves or Sets the type of size applied to the text of the specification tree.
	 */
     HRESULT get_SizeType(out /*IDLRETVAL*/ CatTreeSizeTypeEnum		oSizeType);
     HRESULT put_SizeType( in CatTreeSizeTypeEnum	iSizeType );

	  /** 
	 * Retrieves environment informations for the type of size applied to the text of the specification tree.
	 * <br><b>Role</b>:Retrieves the state of the type of size applied to the text of the specification tree 
	 * in the current environment. 
	 * Attributes "size" and "SizeType" are linked together by the same 
	 * lock. So there is no function "GetSizeInfo".
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetSizeTypeInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	 /**
     * Locks or unlocks the type of size applied to the text of the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the type of size applied to the text of the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * Attributs "size" and "SizeType" are linked together by the same 
	 * lock. So there is no function "SetSizeTypeLock".
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetSizeTypeLock( in  boolean iLocked );

#pragma PROPERTY Size
    /**
	 * Retrieves or Sets the number of characters shown for the text of the specification tree.
	 */
     HRESULT get_Size(out /*IDLRETVAL*/ long		oSize);
     HRESULT put_Size( in long	iSize );


#pragma PROPERTY ShowActivation
    /**
	 * Retrieves or Sets the visualization Show/NoShow's mode applied to the specification tree.
	 */
     HRESULT get_ShowActivation(out /*IDLRETVAL*/ boolean		oShowActivation);
     HRESULT put_ShowActivation( in boolean	iShowActivation );

	 /** 
	 * Retrieves environment informations for the visualization Show/NoShow's mode applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of the visualization Show/NoShow's mode applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetShowActivationInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the visualization Show/NoShow's mode applied to the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the visualization Show/NoShow's mode applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetShowActivationLock( in  boolean iLocked );



#pragma PROPERTY DisplayGeomOnScrolling
    /**
	 * Retrieves or Sets the "display geometry on scrolling" mode.
	 */
     HRESULT get_DisplayGeomOnScrolling(out /*IDLRETVAL*/ boolean		oDisplayGeomOnScrolling);
     HRESULT put_DisplayGeomOnScrolling( in boolean	iDisplayGeomOnScrolling );

	  /** 
	 * Retrieves environment informations for "display geometry on scrolling" mode.
	 * <br><b>Role</b>:Retrieves the state of "display geometry on scrolling" mode 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetDisplayGeomOnScrollingInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the "display geometry on scrolling" mode.
	 * <br><b>Role</b>:Locks or unlocks "display geometry on scrolling" mode if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetDisplayGeomOnScrollingLock( in  boolean iLocked );


#pragma PROPERTY AutoExpandActivation
	/**
	 * Retrieves or Sets the automatic expand mode applied to the specification tree.
	 */
     HRESULT get_AutoExpandActivation(out /*IDLRETVAL*/ boolean		oAutoExpandActivation);
     HRESULT put_AutoExpandActivation( in boolean	iAutoExpandActivation );

	   /** 
	 * Retrieves environment informations for automatic expand mode applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of automatic expand mode applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetAutoExpandActivationInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the automatic expand mode applied to the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the automatic expand mode applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetAutoExpandActivationLock( in  boolean iLocked );

#pragma PROPERTY ArcSelectionActivation
	/**
	 * Retrieves or Sets the arc-selection mode applied to the specification tree.
	 */
     HRESULT get_ArcSelectionActivation(out /*IDLRETVAL*/ boolean		oArcSelectionActivation);
     HRESULT put_ArcSelectionActivation( in boolean	iArcSelectionActivation );

	   /** 
	 * Retrieves environment informations for arc-selection mode applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of arc-selection mode applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetArcSelectionActivationInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the arc-selection mode applied to the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the arc-selection mode applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetArcSelectionActivationLock( in  boolean iLocked );

#pragma PROPERTY AutoScrollActivation
	/**
	 * Retrieves or Sets the automatic scrolling mode applied to the specification tree.
	 */
     HRESULT get_AutoScrollActivation(out /*IDLRETVAL*/ boolean		oAutoScrollActivation);
     HRESULT put_AutoScrollActivation( in boolean	iAutoScrollActivation );

	   /** 
	 * Retrieves environment informations for automatic scrolling mode applied to the specification tree.
	 * <br><b>Role</b>:Retrieves the state of the automatic scrolling mode applied to the specification tree 
	 * in the current environment. 
	 * @param ioAdminLevel
	 *       <br>If the parameter is locked, AdminLevel gives the administration
	 *       level that imposes the value of the parameter.
	 *	 <br>If the parameter is not locked, AdminLevel gives the administration
	 *       level that will give the value of the parameter after a reset.
	 * @param ioLocked
	 *      Indicates if the parameter has been locked.
	 * @return 
	 *      Indicates if the parameter has been explicitly modified or remain
	 *      to the administrated value.
     */
     HRESULT GetAutoScrollActivationInfo	( inout					CATBSTR		ioAdminLevel
						, inout					CATBSTR		ioLocked
						, out  /*IDLRETVAL*/	boolean		oModified
						);

	/**
     * Locks or unlocks the automatic scrolling mode applied to the specification tree.
	 * <br><b>Role</b>:Locks or unlocks the automatic scrolling mode applied to the specification tree if it is possible
	 * in the current administrative context. In user mode this method will always
	 * return E_FAIL.
	 * @param iLocked
	 *	the locking operation to be performed
	 *	<b>Legal values</b>:
	 *	<br><tt>TRUE :</tt>   to lock the parameter.
	 * 	<br><tt>FALSE:</tt>   to unlock the parameter.
     */
     HRESULT SetAutoScrollActivationLock( in  boolean iLocked );
};

// Interface name : CATIATreeVizManipSettingAtt
#pragma ID CATIATreeVizManipSettingAtt "DCE:67ff8de5-294f-4b50-be3f27e6d6498d84"
#pragma DUAL CATIATreeVizManipSettingAtt

// VB object name : TreeVizManipSettingAtt (Id used in Visual Basic)
#pragma ID TreeVizManipSettingAtt "DCE:e8450ade-b303-40c4-b53644914931da48"
#pragma ALIAS CATIATreeVizManipSettingAtt TreeVizManipSettingAtt

#endif
