// File generated by CPPExt (Transient)
//
//                     Copyright (C) 1991,1995 by
//  
//                      MATRA DATAVISION, FRANCE
//  
// This software is furnished in accordance with the terms and conditions
// of the contract and with the inclusion of the above copyright notice.
// This software or any other copy thereof may not be provided or otherwise
// be made available to any other person. No title to an ownership of the
// software is hereby transferred.
//  
// At the termination of the contract, the software and all copies of this
// software must be deleted.
//
#ifndef _CATStandard_Failure_HeaderFile
#define _CATStandard_Failure_HeaderFile

#ifndef _Handle_CATStandard_Failure_HeaderFile
#include "Handle_CATStandard_Failure.hxx"
#endif

#ifndef _CATStandard_CString_HeaderFile
#include "CATStandard_CString.hxx"
#endif
#ifndef _CATStandard_Transient_HeaderFile
#include "CATStandard_Transient.hxx"
#endif
#ifndef _CATStandard_OStream_HeaderFile
#include "CATStandard_OStream.hxx"
#endif
#ifndef _CATStandard_SStream_HeaderFile
#include "CATStandard_SStream.hxx"
#endif
class CATStandard_NoSuchObject;

#include "SysCascade.h"

 Ca_ne_compile_plus_!

class CATStandard_Failure : public CATStandard_Transient {
/*
public:

 // Methods PUBLIC
 // 
ExportedBySysCascade  CATStandard_Failure();
ExportedBySysCascade  CATStandard_Failure(const CATStandard_CString aString);
ExportedBySysCascade    void Print(CATStandard_OStream& s) const;
  void operator<<(CATStandard_OStream& s) const
{
  Print(s);
}

ExportedBySysCascade    void Reraise(const CATStandard_CString aMessage) ;
ExportedBySysCascade  static  Handle_CATStandard_Failure Caught() ;
ExportedBySysCascade  static  void Raise(const CATStandard_CString aMessage = "") ;
ExportedBySysCascade  static  void Raise(CATStandard_SStream& aReason) ;
ExportedBySysCascade  virtual  void Throw() const;
ExportedBySysCascade  ~CATStandard_Failure();




 // Type management
 //
 ExportedBySysCascade  friend Handle_CATStandard_Type& CATStandard_Failure_Type_();
 ExportedBySysCascade  const Handle(CATStandard_Type)& DynamicType() const;
 ExportedBySysCascade  CATStandard_Boolean	       IsKind(const Handle(CATStandard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 
inline   void InLineDummy() const;


 // Fields PRIVATE
 //
CATStandard_CString myMessage;
*/

};


//#include "CATStandard_Failure.lxx"



// other inline functions and methods (like "C++: function call" methods)
//


#endif
