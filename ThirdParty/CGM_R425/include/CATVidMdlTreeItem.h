//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/06/07
//===================================================================
// CATVidMdlTreeItem.h
// Header definition of class CATVidMdlTreeItem
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/06/07 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlTreeItem_H
#define CATVidMdlTreeItem_H

#include <VisuDialog.h>
#include <CATBaseUnknown.h>
#include <CATLISTV_CATBaseUnknown.h>
#include <CATSYPArray.h>

// ------------------------------------------------------
// Declaration of a list of pointers on CATVidMdlTreeItem
class CATVidMdlTreeItem;
class CATVidAbstractCloneProvider;
#include <CATLISTP_Clean.h>
#include <CATLISTP_AllFunct.h>
#include <CATLISTP_Declare.h>
class CATSYPPropertiesChangedEventArgs;
class CATVidMdlStandardTree;
class CATSYPEventHandler;
CATLISTP_DECLARE(CATVidMdlTreeItem);
// ------------------------------------------------------
/**
 * CATVidMdlTreeItem is an item of data that can be stored into a
 * simple tree based model (like CATVidMdlStandardTree provided by VID).
 * A CATVidMdlTreeItem is composed of a pointer on its parent
 * (also a CATVidMdlTreeItem), a list of children (CATVidMdlTreeItem objects)
 * and a single value (stored in a CATBaseUnknown_var).
 *
 * This class is not intented to be derived, but to be used as is.
 */
class ExportedByVisuDialog CATVidMdlTreeItem : public CATBaseUnknown
{
  CATDeclareClass;
public:
  /**
   * Constructor
   * Be carefull, do not Release the given i_pParent pointer after calling this
   * constructor. The CATVidMdlTreeItem takes ownership of it.
   * @param i_pParent pointer on the parent of the constructed item. By default,
   * it is a NULL pointer, so, the item has no parent.
   */
  CATVidMdlTreeItem(CATVidMdlTreeItem * i_pParent = NULL);
  /**
   * Constructor
   * Be carefull, do not Release the given i_pParent pointer after calling this
   * constructor. The CATVidMdlTreeItem takes ownership of it.
   * @param i_spData list of data to associate to this tree item.
   * @param i_pParent pointer on the parent of the constructed item. By default,
   * it is a NULL pointer, so, the item has no parent.
   */
  CATVidMdlTreeItem(const CATBaseUnknown_var & i_data, CATVidMdlTreeItem * i_pParent = NULL);
  /**
   * Constructor
   * Be carefull, do not Release the given i_pParent pointer after calling this
   * constructor. The CATVidMdlTreeItem takes ownership of it.
   * @param i_spData list of data to associate to this tree item.
   * @param i_pParent pointer on the parent of the constructed item. By default,
   * it is a NULL pointer, so, the item has no parent.
   */
  CATVidMdlTreeItem(CATLISTV(CATBaseUnknown_var) & i_datas, CATVidMdlTreeItem * i_pParent = NULL);
  /**
   * Destructor
   */
  ~CATVidMdlTreeItem();
  /**
   * Appends the given child item.
   * The i_pChild is appended to the pointers list _children.
   * This member function asserts in case of i_pChild is NULL.
   * Don't call Release on the pointer to the object you give to InsertChildAt
   * It will be released at the destruction or the reset of the tree model.
   *
   * @param i_pChild a pointer on the child to append.
   */
  void AppendChild(CATVidMdlTreeItem * i_pChild);
  /**
   * Inserts the given child item.
   * The i_pChild is inserted at the i_row position.
   * This member function asserts in case of i_pChild is NULL.
   * Don't call Release on the pointer to the object you give to InsertChildAt
   * It will be released at the destruction or the reset of the tree model.
   *
   * @param i_row the row where to insert the child.
   * @param i_pChild a pointer on the child to insert.
   * @return FALSE if i_row is not a valid row or if i_pChild is NULL, TRUE otherwise.
   */
  CATBoolean InsertChildAt(int i_row, CATVidMdlTreeItem * i_pChild);

  /*
  * Insert a new column in the tree items at the i_column place.
  * @param i_column a pointer on the child to insert.
  * @param iListOfValueToInsert the list of values to insert.
  * @return FALSE if the method failes, TRUE otherwise.  
  *
  */
  CATBoolean InsertColumnAt(int i_column, CATSYPDynArray<CATBaseUnknown_var> iListOfValueToInsert);
  /**
   * Remove the child item passed as argument.
   * The child item passed as argument is removed.
   * This member function asserts and returns FALSE in case of i_pChild is NULL
   * Or in case i_pChild is not a child of the current element.
   *
   * @param i_pChild a pointer on the child to remove.
   * @return FALSE if i_pChild is NULL or is not a child of the current element, TRUE otherwise.
   */
  CATBoolean RemoveChild(CATVidMdlTreeItem * i_pParent);
  
  CATBoolean RemoveColumn(int i_column);
  /**
   * Remove the child item located at the i_row position.
   * The child item at the i_row position is removed.
   * This member function returns FALSE in case i_row is not a valid row.
   *
   * @param i_row the row from where to remove the child.
   * @return FALSE if i_row is not a valid row, TRUE otherwise.
   */
  CATBoolean RemoveChildAt(int i_row);
  /**
   * Remove all child items.
   */
  void ResetChildren();
  /**
   * Remove all child items.
   */
  void ResetChildrenWithoutRelease();
  /**
   * Gets the child item located at the i_row position.
   * Be carefull, do not Release the returned pointer. Its lifecycle is
   * handled by the CATVidMdlItem instance.
   *
   * @param i_row the index that references the item to retrieve.
   * @return the child item located at the i_row position if it exists, or
   * otherwise a NULL pointer.
   */
  CATVidMdlTreeItem * GetChild(int i_row) const;
  /**
   * Gets the number of children of the current element.
   *
   * @return the number of children of the current element.
   */
  int GetChildNumber() const;
  /**
   * Gets the number of columns of the current element.
   *
   * @return the number of columns of the current element.
   */
  int GetColumnCount() const;
  /**
   * Gets the row number at which this item is located.
   *
   * @return the row number at which this item is located.
   */
  int GetRow() const;
  /**
   * Gets the parent of the current element.
   *
   * Be carefull, do not Release the returned pointer. Its lifecycle is
   * handled by the CATVidMdlItem instance.
   *
   * @return the parent element of the current item, or otherwise, a NULL pointer
   * if the current element has no parent (for example this is the case of the
   * root element).
   */
  CATVidMdlTreeItem * GetParent() const;
  /**
   * Sets the parent of the current element.
   */
  void SetParent(CATVidMdlTreeItem * i_pChild);
  /**
   * Gets the data for this item.
   *
   * @return the element stored for this item, or
   * otherwise, NULL_var if it doesn't exist.
   */
  CATBaseUnknown_var GetDataElement(int i_columnIndex = 0) const;
  /**
   * Sets the data for this item.
   *
   * @param i_data the new data value.
   * @return FALSE if the data has not been set, otherwise TRUE.
   */
  CATBoolean SetDataElement(const CATBaseUnknown_var & i_data, int i_columnIndex = 0);
  /**
   * Set the flag that indicates whether this item is updated or not.
   *
   * @param i_dirty 0 if the item is updated, 1 otherwise.
   */
  void SetDirty(int i_dirty);
  /**
   * Indicates whether this item is updated or not.
   *
   * @return 0 if the item is updated, 1 otherwise.
   */
  int GetDirty() const;
  /**
   * Clone the entire tree structure attached to this tree item through
   * parenting. 
   * 
   * @param i_pProvider a clone provider for the data element of the tree item.
   *
   * @return the root item of the cloned subtree, ie. the clone of this item.
   *
   * @see #GetDataElement
   */
  CATVidMdlTreeItem * Clone(CATVidAbstractCloneProvider * i_pProvider) const;

	/*
	* Get the capacity of node to expand only parts of its children.
	*/
	int GetPartialExpandFlag();

protected:
  virtual CATVidMdlStandardTree* GetTreeModel();

private:
  int GetColumnIndexOfData(CATBaseUnknown * i_pData);
  CATBoolean InsertColumnToAllChildren(CATVidMdlTreeItem * i_pItem, int i_column, CATSYPDynArray<CATBaseUnknown_var> & iListOfValueToInsert);
  CATBoolean RemoveColumnToAllChildren(CATVidMdlTreeItem * i_pItem, int i_column);
  CATBoolean InsertData(int i_column, CATBaseUnknown_var ispData);
  CATBoolean RemoveData(int i_column);

	/*
	* Set the capacity of node to expand only parts of its children.
	* WARNING, This feature only works with CATVidMdlCacheTreeAdapter inherited models.
	* Assertion will occur if model is from another type.
	*/
	void SetPartialExpandFlag(int i_flag);

  /** Pointer on the parent item of this node */
  CATVidMdlTreeItem * _pParent;
  /** List of children of this node */
  CATLISTP(CATVidMdlTreeItem) _children;


  /** List of data items stored into this node */
  CATBaseUnknown_var _data;
  CATLISTV(CATBaseUnknown_var) _datas;//Data in the case of several introspectable by line. (1 by cell).
  CATSYPArray<CATSYPEventHandler*> _dataHandlerArray;//Data in the case of several introspectable by line. (1 by cell).
  /** flag that indicates if this item is updated or not */
  int _dirty;

  // Copy Constructor and Assignement operator are declared private and
  // not implemented because CATVidMdlTreeItem is intented to manipulated using
  // pointers.
  CATVidMdlTreeItem (CATVidMdlTreeItem &);
  CATVidMdlTreeItem& operator=(CATVidMdlTreeItem&);


	/*Capacity of node to expand only parts of its children.
	* WARNING, This feature only works with CATVidMdlCacheTreeAdapter inherited models.
	*/
	int _partialExpandFlag;

  void DataChanged(CATBaseUnknown * i_pSender, CATSYPPropertiesChangedEventArgs * i_pArgs);

	friend class CATVidMdlIndex;
};

//-----------------------------------------------------------------------

#endif
