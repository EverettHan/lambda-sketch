//===================================================================
// COPYRIGHT Microsoft 2012/07/09
//===================================================================
// CATMathOptFunction.cpp
// Header definition of class CATMathOptFunction
//===================================================================
//
// Usage notes:
//   You have to redefine : 
//            1- CATOptReal Eval(const CATOptReal * iX) const in your reimplementation
//                    because of in CATMathFunctionRN the following method is pure virtual :
//                    double Eval(const double * iX) const 
//  WARNING : CATMathOptimizer  was implemented to be free from the data nature thanks to the typedef CATOptReal.
//            However for the casual use, CATOptReal = double 
//            and CATMathOptFunction overrides CATMathFunctionRN whose data are double
//            2- CATMathClassId IsA() const                because of CATMathFunctionRN
//            3- CATMathFunctionRN * Duplicate() const     because of CATMathFunctionRN
//            4- void ResetBuffer() 
//            5- IsDifferentiable/IsTwiceDifferentiable/IsThirdDifferentiable to set if the function is differentiable
//  WARNING : CATMathFunctionRN can be always ifferentiated.
//            For CATMathFunctionRN, if no specific derivatives are computed,Finite Difference are used in EvalXXXDeriv 
//            It is not the case for CATMathOptFunction, if they are not differentiable, EvalFirstDeriv/EvalSecondDeriv and EvalThirdDeriv  return CATCATOptRealMax.
//   To be efficient, 
//      1- if the function is differentiable,
//            it's recommended to override EvalFirstDeriv, EvalSecondDeriv and EvalThirdDeriv 
//            and to override IsOption in that case
//      2- it's recommended to delete _aPresentVariables 
//            and to build it with the present variables in the fonction
//            _aPresentVariables is the successive index of present variable
//     exemple : in the constructor
//         if(_aPresentVariables)
//           delete[] _aPresentVariables;
//         _nbPresentVariables = N;                 //with N<_N
//         _aPresentVariables = new CATULONG32[N];
//         _aPresentVariables[i] = j;               //with 0<=i<=N and i<=j<=_N
//         ...
//
//===================================================================
//  2012/07/09 Creation: Code generated by the 3DS wizard
//  6Dec16 KJD : replacement of Reset by ResetBuffer (API without const)
//               several steps because Reset is pure virutal
//                - Reset becomes only virtual and ResetBuffer calls Reset (done)
//                - internal migration (done)
//                - external migration (CATLivePhotoReconstruction) (to do)
//                - then ResetBuffer will become pure virtual
//  2017/05/16 Addition  _PowerScaleX (CATMathAttrScaleOption)and GetScaleOption
//  ??/??/17 KJD ResetBuffer becomes pure virtual
//  08/03/2018 SMT1 : Added EvalGradient method.
//  20/02/19 RESEARCH/KJD New Init API to enable to manage more smartly 
//           the allocation of the arrays  _aPowerScaleX and _ahX
//           + deletion of the array  _aPresentVariables
//===================================================================

#ifndef CATMathOptFunction_H
#define CATMathOptFunction_H

#include "YN000OPT.h"
#include "CATMathFunctionRN.h"
#include "CATDataType.h"
#include "CATSysBoolean.h"
#include "CATOptTypes.h"

class CATMathAttrScaleOption;
class CATTolerance;

//-----------------------------------------------------------------------

class ExportedByYN000OPT CATMathOptFunction : public CATMathFunctionRN
{
public:
  CATMathOptFunction (CATSoftwareConfiguration* iConfig,
                      const CATTolerance            * iTolObject,
                      const CATLONG32                 iNumberOfVariables,
                      const CATMathAttrScaleOption& iScaleOption);


protected:
  void Init (CATSoftwareConfiguration     * iConfig,
             const CATTolerance            * iTolObject,
             const CATLONG32                 inVariables,
             const CATMathAttrScaleOption  & iScaleOption,
             CATBoolean                      iSameScaleX);

public:
  virtual ~CATMathOptFunction ();

  /*
  * Set the tolerance owned by this function 
  */
  void SetScaleOption(CATMathAttrScaleOption & iScaleOption);

  /*
  * Returns the tolerance owned by this function 
  */
  const CATTolerance * GetTolObject() const;

  /*
  * Return the relative integer power of the factory scale which describes the homogeneity of the function
  */
  CATLONG32 GetPowerScaleF( ) const;
  
  /*
  * Returns the tolerance owned by this function 
  */
  void GetScaleOption(CATMathAttrScaleOption & oScaleOption);

   /**
  * Is the function  differentiable ?
  * @return  True if the function is differentiable otherwise false               
  */
  virtual CATBoolean IsDifferentiable() const=0;

   /**
  * Is the function twice differentiable ?
  * @return  True if the function is twice differentiable otherwise false               
  */
  virtual CATBoolean IsTwiceDifferentiable() const=0;

  /**
  * Is the function third differentiable ?
  * @return  True if the function is third differentiable otherwise false                          
  */
  virtual CATBoolean IsThirdDifferentiable() const=0;

  //Reset cache and all pre-calculated objects
  virtual void ResetBuffer();
  virtual void Reset() const {}; //to delete
 /**
 * Tests if an evaluator is available for <tt>this</tt> CATMathFunctionGeneral.
 * @param iOption
 * The type of evalution.
 * <br><b>Legal values</b>:
 * <dl> <dt>OptionEval   </dt>  <dd>  evaluation of the function
 * <dt>OptionEvalFirstDeriv   </dt>  <dd>  evaluation of the first derivative of the function
 * <dt>OptionEvalSecondDeriv</dt>  <dd>  evaluation of the second derivative of the function
 * <dt>OptionEvalThirdDeriv</dt>  <dd>  evaluation of the third derivative of the function
 * </dl>
 * @return
 * The result of the test.
 * <br><b>Legal values</b>: <tt>TRUE</tt> if the evaluation is available for <tt>this</tt> CATMathFunctionGeneral,
 * <tt>FALSE</tt> otherwise.
 */
  virtual CATBoolean IsOption (const CATMathOption iOption) const;

private:
//public: // CPT on 2018/9/7: "private:" breaks CATLivePhotoReconstruction\CATPhotoSBA.m\src\CATPhotoSBAExtendedPrivate.cpp
/**
 * Use SaveEvalFirstDeriv instead
 **/
  virtual CATOptReal              EvalFirstDeriv                (const CATLONG32               & iVar0         ,
                                                                 const CATOptReal                  * iX            )    const;
private:
  /**
  * Computes the vector of all partial derivatives 
  * The default implementation calls EvalFirstDeriv for each variable
  * Can be derived if it is cheaper to compute all partial derivatives in one go
  **/
  virtual CATBoolean             EvalGradient                  (const CATOptReal              * iX,
                                                                      CATOptReal              * ioGradient        )    const;
public:

/**
 * The behaviour of SafeEvalFirstDeriv is identical to that of EvalFirstDeriv. As a debug option it is possible to compare
 * the result with the finite difference evaluation in order to validate the derived implementation of EvalFirstDeriv
 **/
          CATOptReal              SafeEvalFirstDeriv            (const CATLONG32               & iVar0         ,
                                                                 const CATOptReal                  * iX            )    const;

          CATBoolean             SafeEvalGradient                  (const CATOptReal              * iX,
                                                                      CATOptReal              * ioGradient        )    const;

  virtual CATOptReal              EvalSecondDeriv               (const CATLONG32               & iVar0         ,
                                                                 const CATLONG32               & iVar1         ,
                                                                 const CATOptReal                  * iX            )    const;

  virtual CATOptReal              EvalThirdDeriv                (const CATLONG32               & iVar0         ,
                                                                 const CATLONG32               & iVar1         ,
                                                                 const CATLONG32               & iVar2         ,
                                                                 const CATOptReal                  * iX            )    const;

  

  /**
  * Determines which variables really are use in each function
  * @param oaPresentVariables      Array (matrix size NbVariable) with the presence or not of each variable.
  * @ This array have to be init to FALSE before being send to this function. 
  * @ The function only fill the present variable and don't touch to the other cell of the array.
  * @return                        The number of non-zero coefficients in all the system
  */
  virtual CATLONG32 FillPresentVariables(CATBoolean *oaPresentVariables) const;

  /**
  * Determines which variables really are use in a function
  * @param oaPresentVariables      Array of the indexes of the variable with non-zero coefficients (already allocated by caller)
  * @return                        The number of non-zero coefficients for the function
  */
  virtual CATLONG32 GetPresentVariables(CATULONG32 * oaPresentVariables) const;

  /**
  * Determines the number of variables really used in a function
  * @return                        The number of non-zero coefficients for the function 
  * @note By default, it returns the number of variables provided to the ctor
  */
  virtual CATLONG32 GetNbPresentVariables() const;

private:
  void SetStep(const CATMathAttrScaleOption & iScaleOption);
  double DEBUG_ValidateDeriv(const CATOptReal  iDeriv, const CATOptReal  iFD) const;
  CATMathOptFunction (CATMathOptFunction &);
  CATMathOptFunction& operator=(CATMathOptFunction&);

  //===========================================================================================================
  //
  //  DATA
  //
  //===========================================================================================================
protected:
  //CATULONG32       * _aPresentVariables;  // successive index of the present variables
  CATLONG32        * _aPowerScaleX;
  CATOptReal       * _ah1, *_ah2, *_ah3;  // scaled step for DF for every unknown and coordinate
  CATLONG32          _sPowerScaleX;
  CATOptReal         _sh1,  _sh2,  _sh3;  // scaled step for DF defined for every coordinate
  CATLONG32          _PowerScaleF;
};
#endif
