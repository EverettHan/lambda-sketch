//===================================================================
// COPYRIGHT Dassault Systemes 2015/08/13
//===================================================================
// CATSGCompositesContainer.cpp
// Header definition of class CATSGCompositesContainer
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/08/13 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATSGCompositesContainer_H
#define CATSGCompositesContainer_H

#include "CATSGUtil.h"

#ifdef SG_COMPOSITES_MULTIOS
#include "CATSGComposite.h"
#include "CATSGCompositeRing.h"
#include "CATCompositePtrList.h"
#include "CATIOAtomics.h"

class CATSGCompositesContainer
{
public:
    CATSGCompositesContainer ();
    ~CATSGCompositesContainer ();

    unsigned int GetSizeInBytes(const int iIncludeStructuralSize = 1);

    HRESULT AddComposite(CATSGCompositePtr iComposite, CATERingOpMode iOpMode = CATERingOpModeSingle);

    HRESULT RemoveComposite(CATSGCompositePtr iComposite, CATERingOpMode iOpMode = CATERingOpModeSingle);

    CATSGCompositePtr GetView(const CATTraitRawInfo& iTraitRawInfo);

    CATSGCompositePtr GetViewFromTag(const CATTraitTag iTraitTag);

    HRESULT BorrowView(const CATTraitRawInfo& iTraitRawInfo, CATOnStackBorrowBasePtr& oBorrowedPtr);

    HRESULT BorrowViewFromTag(const CATTraitTag iTraitTag, CATOnStackBorrowBasePtr& oBorrowedPtr);

    HRESULT TraverseAll(CATSGCompositesTraverse& iTraverse);

    HRESULT TraverseAll(CATSGCompositesConstTraverse& iTraverse) const;

  void Flush();

private:
    void                        _updateTags();
    CATIOAtomicLock             _modificationLock;
    CATSGCompositePtr           _taggedComposites[CATTraitTagCount];
    CATSGCompositesList         _composites;
};

class CATSGCompositesContainer2
{
public:
    CATSGCompositesContainer2 () {}
    ~CATSGCompositesContainer2 () {
        RingDeletingTraverse ringDeletingTraverse;
        TraverseAll(ringDeletingTraverse);
    }

    unsigned int GetSizeInBytes(const int iIncludeStructuralSize = 1) {
        unsigned int currentSize = 0;

        CATSGComposites::iterator it = _composites.begin();
        CATSGComposites::iterator endIt = _composites.end();

        for(; it != endIt; ++it) {
            currentSize += (*it)->GetSizeInBytes(iIncludeStructuralSize);
        }

        return currentSize;
    }

    HRESULT AddComposite(CATSGCompositePtr iComposite, CATERingOpMode iOpMode = CATERingOpModeSingle) {
        _composites.push_back(iComposite);
        return S_OK;
    }

    HRESULT RemoveComposite(CATSGCompositePtr iComposite, CATERingOpMode iOpMode = CATERingOpModeSingle) {
        auto it = std::find(_composites.begin(), _composites.end(), iComposite);
        if (it != _composites.end())
        {
            _composites.erase(it);
            return S_OK;
        }
        return E_FAIL;
    }

    CATSGCompositePtr GetView(const CATTraitRawInfo& iTraitRawInfo) {
        CATSGCompositePtr res;

        CATSGComposites::iterator it = _composites.begin();
        CATSGComposites::iterator endIt = _composites.end();

        for(; it != endIt; ++it) {
            if((*it)->IsTraitSupported(iTraitRawInfo.GetTraitGUID())) {
                res = *it;
                break;
            }
        }
        return res;
    }

    CATSGCompositePtr GetViewFromTag(const CATTraitTag iTraitTag) {
        CATSGCompositePtr res;
        if( iTraitTag < 0 || iTraitTag > CATTraitTagCount) {
            return res;
        }

        CATSGComposites::iterator it = _composites.begin();
        CATSGComposites::iterator endIt = _composites.end();

        for(; it != endIt; ++it) {
            if((*it)->GetTrait().GetTraitTag() == iTraitTag) {
                res = *it;
                break;
            }
        }
        return res;
    }


    HRESULT BorrowView(const CATTraitRawInfo& iTraitRawInfo, CATOnStackBorrowBasePtr& oBorrowedPtr) {
        CATSGComposites::iterator it = _composites.begin();
        CATSGComposites::iterator endIt = _composites.end();

        for(; it != endIt; ++it) {
            if((*it)->IsTraitSupported(iTraitRawInfo.GetTraitGUID())) {
                oBorrowedPtr = *it;
                return S_OK;
            }
        }
        return E_FAIL;
    }

    HRESULT BorrowViewFromTag(const CATTraitTag iTraitTag, CATOnStackBorrowBasePtr& oBorrowedPtr) {
        if( iTraitTag < 0 || iTraitTag > CATTraitTagCount) {
            return E_INVALIDARG;
        }

        CATSGComposites::iterator it = _composites.begin();
        CATSGComposites::iterator endIt = _composites.end();

        for(; it != endIt; ++it) {
            if((*it)->GetTrait().GetTraitTag() == iTraitTag) {
                oBorrowedPtr = *it;
                return S_OK;
            }
        }
        return E_FAIL;
    }

    HRESULT TraverseAll(CATSGCompositesTraverse& iTraverse) {
        auto it = _composites.begin();
        auto endIt = _composites.end();

        bool keepRolling = true;
        for(; it != endIt && keepRolling; ++it) {
            keepRolling = iTraverse(*it);
        }
        return S_OK;
    }

    HRESULT TraverseAll(CATSGCompositesConstTraverse& iTraverse) const {
        auto it = _composites.cbegin();
        auto endIt = _composites.cend();

        bool keepRolling = true;
        for(; it != endIt && keepRolling; ++it) {
            keepRolling = iTraverse(*it);
        }
        return S_OK;
    }

    std::size_t Count() const
    {
        return _composites.size();
    }

    CATSGComposites& GetComposites()
    {
        return _composites;
    }

    void Flush() {

    }

private:
    void                        _updateTags() {}
    //CATIOAtomicLock             _modificationLock;
    CATSGComposites             _composites;
};
#endif //SG_COMPOSITES_MULTIOS
#endif //CATSGCompositesContainer_H
