//===================================================================
// COPYRIGHT Dassault Systemes 2016/10/04
//===================================================================
// PLMExchangeQueryForExistenceWS.cpp
// Header definition of class PLMExchangeQueryForExistenceWS
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016/10/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef PLMExchangeQueryForExistenceWS_H
#define PLMExchangeQueryForExistenceWS_H

#include "PLMExchangeWebServices.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListOfCATString.h"
#include "CATOmxAny.h"
#include "CATOmxArray.h"
#include "CATIPLMCompConnectionInstance.h"

//-----------------------------------------------------------------------

class ExportedByPLMExchangeWebServices PLMExchangeQueryForExistenceWS
{
public:
   // Standard constructors and destructors
   // -------------------------------------
   PLMExchangeQueryForExistenceWS ();
   virtual ~PLMExchangeQueryForExistenceWS ();

   //
   // TODO: Add your methods for this class here.
   //

   enum WebServiceContext
   {
      WebServiceContextUnknown = 0,
      WebServiceContextImport,
      WebServiceContextExport
   };
   
private:
   // Copy constructor and equal operator
   // -----------------------------------
   PLMExchangeQueryForExistenceWS (PLMExchangeQueryForExistenceWS &);
   PLMExchangeQueryForExistenceWS& operator=(PLMExchangeQueryForExistenceWS&);

   void InitializeEnabledAttributesList(); 
   HRESULT InitializeQuery(); 

public: 
   /**
   * Method to get server data
   * @param output oServerName
   * @param output oServerProtocol
   * @param output oServerPort
   * @param output oServerURI
   * @param output oServerURL
   * @return 
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT GetCurrentServerData(   CATUnicodeString & oServerName,
                                          CATUnicodeString & oServerProtocol,
                                          CATUnicodeString & oServerPort,
                                          CATUnicodeString & oServerURI,
                                          CATUnicodeString & oServerURL);

   /**
   * Method to get current connection instance
   * @param CATIPLMCompConnectionInstance
   * pointer to the connection instance   
   * @return 
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT GetConnectedInstance(   CATIPLMCompConnectionInstance ** oCnxInst);

   /**
   * Method to get if current provider is real server (PLMxT and TST Provider doesn't have URLs) 
   * @param CATBoolean oIsValid
   * the boolean value specifiying validity of the server 
   * @return
   * <dl>
   * <dt><code>S_OK</code> if everything ran ok, otherwise...
   * <dt><code>E_FAIL</code> <dd>
   * </dl>
   */
   static HRESULT IsValidServer(CATBoolean & oIsValid);
   HRESULT ExecuteTestQuery();

   HRESULT QueryObjectExistenceWebService(   const CATListOfCATUnicodeString & ListOfObjectsPhysicalID,
                                             const CATUnicodeString & istrURL, 
                                             const WebServiceContext & iContextOperation,                                             
                                             CATListOfInt & oListOfEnabledOperationsValues); 

   HRESULT ExecuteQuery(   const CATListOfCATUnicodeString & iListOfEntitiesPhysicalIDs,
                           const CATListOfCATUnicodeString & iListOfRelationsPhysicalIDs,
                           const CATListOfCATString & iListOfAttributeNames,
                           const WebServiceContext & iContextOperation,                                             
                           CATOmxArray<CATOmxAny>* & oRecordSet);

   HRESULT ReadRecordAttributes( const CATOmxAny *ipRecordRead ,  
                                 CATUnicodeString & ousPhysicalID , 
                                 const CATListOfCATString & iAttributeNames, 
                                 CATListOfCATUnicodeString & oAttributeValues);

   HRESULT CheckIsExistObject( const CATOmxAny *ipRecordRead ,  bool & oIsExistObject );

   private: 
      CATListOfCATString         _EnabledAttributesList; 
      CATUnicodeString           _ServerURL; 
      CATUnicodeString           _FullWebServicePath; 
      CATUnicodeString           _SecurityRole; 
};

//-----------------------------------------------------------------------

#endif
