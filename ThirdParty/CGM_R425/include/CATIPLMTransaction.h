// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMTransaction.h
// Define the CATIPLMTransaction interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Dec 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMTransaction_H
#define CATIPLMTransaction_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMTransaction;
#else
extern "C" const IID IID_CATIPLMTransaction ;
#endif

class CATIPLMRecordReadSet;
class CATTime;
class CATPLMID;
class CATUnicodeString;

/**
* The CATIPLMTransaction has 3 methods:
*
* Commit() to commit the CATIPLMTransaction contains in the PDM.
* Rollback() to rollback the PDM if an error oiccured during Commit() step.
* Flush() to empty the log of operation
*
* <i>Note</i> that in order to share the CATIPLMRecordWriteSet contains, the CATIPLMTransaction implementation has to be done in the same class as the CATIPLMRecordWriteSet Interface.
*/
class ExportedByCATPLMServicesItf CATIPLMTransaction: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Save in the PDM all the elementary operations included in the transaction. 
  * If Succeeded, Commit() method has to be called.If the operation fails a PDM rollaback can be launched. 
  * 
  * Save method returns a CATIPLMCompRecordReadSet which allows accessing to the return message. 
  * By calling Next method, analyse the report on each Operation (record) done.
  *
  * @param  oRecordReportSet [out, CATBaseUnknown#Release]
  *     Provides access to the list of record.(The message)
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Save is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Save entirely or partially failed. A report is available.
  *     Get further information by using CATIPLMCompRecordReadSet returned
  *     </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A fatal communication problem occurs during the operation.
  *     Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Save(CATIPLMRecordReadSet ** oRecordReportSet) = 0; 

  /**
  * Commit in the PDM all the elementary operations included in the transaction. If the operation fails a PDM rollaback can be launched.
  * @param  oRecordReportSet [out, CATBaseUnknown#Release]
  *     Returns an access to a list of record.
  *     This list is to be created for error handling during commit.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>commit is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>nothing to commit.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Commit(CATIPLMRecordReadSet ** oRecordReportSet = NULL) = 0;

  /**
  * As soon as the commit step has failed, you can rollback the PDM using this service..
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>rollback is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>nothing to rollback.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Rollback() = 0;
  
  /**
  * Flush the contain of the transaction.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Flush is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>nothing to Flush.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Flush() = 0;

  /**
  * Sets the Action associated to the transaction.
  * @param  iId
  *     The CATPlmID of the action.
  */
  virtual HRESULT SetAction(const CATPLMID & iId) = 0;
  
  /**
  * Sets the Applicability date associated to the transaction.
  * @param  iValue
  *     The CATTime corresponding to Applicability date.
  *     The provided date must be between 1970 and 2038.
  */
  virtual HRESULT SetApplicabilityDate(const CATTime * iValue) = 0;

  /**
  * Sets a Transaction comment.
  * @param  iTransactionComment
  *     The comment.
  */
  virtual HRESULT SetTransactionComment (const CATUnicodeString &iTransactionComment) = 0;

  /*
  * Add in body of request BEFORE SET CONTEXT (...) some specific parameters.
  * Those specific parameters activate or not some triggers server side.
  *
  * BE CAREFUL (Save transaction):
  * Those specific parameters doesn't appear when Save transaction is sent to server (eg: On M1, 00XY_CheckProcessor.vplmsession is empty).
  * Those specific parameters appears when Commit transaction is sent to server (eg: On M1, 00XY+1_StatelessSaveProcessor.vplmsession is filled with parameters).

  * BE CAREFUL (Import transaction):
  * Those specific parameters appears when Import transaction is sent to server (eg: On M1, 00XY+1_ImportProcessor.vplmsession is filled with parameters).

  * BE CAREFUL (New version transaction):
  * Those specific parameters appears when method NewVersion is called and transaction is sent to server (eg: On M1, 00XY_NewVersionProcessor.vplmsession is filled with parameters).
  *
  * BE CAREFUL:
  * SetCustomizedParameters must be called before first call to AddFlatTableRow and/or Next
  *
  * @param iMapStrToKvb
  *  map that contains:
  *  iName_A iKey_BC, iValue_BC
  *  iName_A iKey_BD, iValue_BD
  *  iName_E iKey_FG, iValue_FG
  *  iName_E iKey_FH, iValue_FH
  *  iName_E iKey_FI, iValue_FI
  */
  virtual HRESULT SetCustomizedParameters(const CATPLMStrToKvb& iMapStrToKvb) = 0;

  /**
  * Retrieve parameters set using SetCustomizedParameters
  * @param oMapStrToKvb
  *  map that contains:
  *  iName_A iKey_BC, iValue_BC
  *  iName_A iKey_BD, iValue_BD
  *  iName_E iKey_FG, iValue_FG
  *  iName_E iKey_FH, iValue_FH
  *  iName_E iKey_FI, iValue_FI
  *  is returned
  */
  virtual HRESULT GetCustomizedParameters(CATPLMStrToKvb& oMapStrToKvb) const = 0;

};

#endif
