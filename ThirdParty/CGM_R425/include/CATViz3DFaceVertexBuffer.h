// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATViz3DFaceVertexBuffer.h
// Header definition of CATViz3DFaceVertexBuffer
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  jut
//===================================================================
#ifndef CATViz3DFaceVertexBuffer_H
#define CATViz3DFaceVertexBuffer_H

#include "SGInfra.h"
#include "CATVizVertexBuffer.h"

#include "list.h"
#include "CATUnicodeString.h"
class CATVisTextureCoordinateSet;


//-----------------------------------------------------------------------

template <class Buffer,class MutableBuffer>
class l_CATVizVertexBufferEditHelperSpec;

class CATViz3DFaceMutableVertexBuffer;

class ExportedBySGInfra CATViz3DFaceVertexBuffer: public CATVizVertexBuffer
{
  friend class l_CATVizVertexBufferEditHelperSpec<CATViz3DFaceVertexBuffer,CATViz3DFaceMutableVertexBuffer>;
public:
  
  /** @nodoc */
  CATViz3DFaceVertexBuffer(const CATViz3DFaceVertexBuffer & iSource);

  /** @nodoc */
  virtual unsigned int AddRef();
  /** @nodoc */
  virtual unsigned int Release();
  /** @nodoc */
  virtual unsigned int GetRefCount() const;
  
  /** @nodoc */
  virtual unsigned int GetNumberOfVertices() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfNormals() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextures() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinates() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfUV() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTangents() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfBinormals() const;
  
  /** @nodoc */
  virtual float const* GetVerticesReadOnly() const;
  /** @nodoc */
  virtual float const* GetNormalsReadOnly() const;
  /** @nodoc */
  virtual float const* GetTexturesReadOnly() const;
  /** @nodoc */
  virtual float const* GetUVReadOnly() const;
  /** @nodoc */
  virtual float const* GetTangentsReadOnly() const;
  /** @nodoc */
  virtual float const* GetBinormalsReadOnly() const;

  /** @nodoc */
  virtual int HasVertices() const;
  /** @nodoc */
  virtual int HasNormals() const;
  /** @nodoc */
  virtual int HasTextures() const;
  /** @nodoc */
  virtual int HasUV() const;
  /** @nodoc */
  virtual int HasTangents() const;
  /** @nodoc */
  virtual int HasBinormals() const;
  /** @nodoc */
  virtual int HasExtraTCsets() const;

  /** @nodoc */
  virtual HRESULT ComputeTextures(const CATMappingOperator & iOp, const CATBaseUnknown * iCell = NULL, const float * iPlanarNormal = NULL);
  /** @nodoc */
  virtual HRESULT ComputeTangentBinormal(CATViz3DFace * );

  virtual void EmptyVBO(unsigned int& newVBOCreation);

  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinatesInFile() const;

  /** @nodoc */
  virtual unsigned int GetSizeInBytes(int iIncludeStructuralSize = 1);

  /** @nodoc */
  virtual void SetTCsHaveBeenUpdated(int value);

  /** @nodoc */
  virtual int TCsHaveBeenUpdated() const;

  // MULTI TEXTURING MANAGEMENT

  /** @nodoc */
  virtual unsigned int GetNumberOfExtraTextureCoordinateSets() const;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetExtraTextureCoordinateSetConst(const unsigned int iSetIndex) const;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetTextureCoordinateSetConst(const CATUnicodeString& iIdentifier) const;

  /** @nodoc */
  virtual HRESULT ComputeTextures(const CATMappingOperator & iOp, const CATUnicodeString& iTCsetID, const CATBaseUnknown * iCell = NULL, const float * iPlanarNormal = NULL);

protected:
  /** @nodoc */
  CATViz3DFaceVertexBuffer();

  /** @nodoc */
  CATViz3DFaceVertexBuffer& operator=(const CATViz3DFaceVertexBuffer& iSource);

  /** @nodoc */
  CATViz3DFaceVertexBuffer(unsigned int nbVertices, unsigned int nbNormals, float* vertices, float* normals = NULL, float* textures = NULL, const int textureFormat = 0, float* uv = NULL, float* tanBinorm = NULL, unsigned int iAllocMode = ALLOCATE_VERTICES | ALLOCATE_NORMALS | ALLOCATE_TEXTURES);
  /** @nodoc */
  virtual HRESULT Allocate(unsigned int nbVertices, unsigned int nbNormals, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm, int clear = 1);
  /** @nodoc */
  virtual HRESULT EnsureCapacity(unsigned int nbVertices, unsigned int nbNormals, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm);
  /** @nodoc */

  virtual float* GetVertices() const;
  /** @nodoc */
  virtual float* GetNormals() const;
  /** @nodoc */
  virtual float* GetTextures() const;
  /** @nodoc */
  virtual float* GetUV() const;
  /** @nodoc */
  virtual float* GetTangents() const;
  /** @nodoc */
  virtual float* GetBinormals() const;

  /** @nodoc */
  virtual HRESULT SetTextures(const float* iTextureCoordinates, const int iNbCoordinates, int iAllocMode);

  /** @nodoc */
  virtual HRESULT SetUV(const float* iUV, int iAllocMode);
  /** @nodoc */
  virtual void Empty();

  virtual l_CATVizVertexBufferEditHelper* GetEditHelper_Impl();

  void Swap(CATViz3DFaceVertexBuffer* iBuffer);

  /** @nodoc */
  virtual HRESULT AddTextureCoordinateSet(const CATVisTextureCoordinateSet* iSet);
  /** @nodoc */
  virtual void ResetTextCoordSets( bool ResetOnlyDefaultTCSet = false );

  virtual ~CATViz3DFaceVertexBuffer ();

protected:

  unsigned int _nbVertices;
  unsigned int _nbNormals;
  unsigned int _refCount    : 26;
  unsigned int _nbTexCoords : 2;
  unsigned int _nbAllocatedTexCoords : 2;
  unsigned int _ownArrays   : 1;
  unsigned int _tcsHaveBeenUpdated : 1;

  float * _vertex;
  float * _normal;
  float * _tanBinorm;

private:

  // list of TC sets
  // 1. LEGACY_UV_SET : legacy 'uv' set
  // 2. DEFAULT_TC_SET : default tc set
  // n. additional tc set
  list<CATVisTextureCoordinateSet> _texCoordSets;

  // index of the TCset to render
  //unsigned int _tcSetToRender;
};

//-----------------------------------------------------------------------

class ExportedBySGInfra CATViz3DFaceMutableVertexBuffer : public CATViz3DFaceVertexBuffer
{
public:
  /** @nodoc */
  CATViz3DFaceMutableVertexBuffer();
  
  /** @nodoc */
  CATViz3DFaceMutableVertexBuffer(const CATViz3DFaceVertexBuffer & iSource);

  /** @nodoc */
  CATViz3DFaceMutableVertexBuffer& operator=(const CATViz3DFaceVertexBuffer & iSource);

  /** @nodoc */
  CATViz3DFaceMutableVertexBuffer (unsigned int nbVertices, unsigned int nbNormals, float *vertices, float *normals = NULL, float *textures = NULL, const int textureFormat = 0, float *uv = NULL, float *tanBinorm = NULL, unsigned int iAllocMode = ALLOCATE_VERTICES | ALLOCATE_NORMALS | ALLOCATE_TEXTURES);

  inline void Swap(CATViz3DFaceMutableVertexBuffer* iBuffer){CATViz3DFaceVertexBuffer::Swap(iBuffer);}

protected:
  virtual l_CATVizVertexBufferEditHelper* GetEditHelper_Impl();
  virtual ~CATViz3DFaceMutableVertexBuffer() = default;
};

//-----------------------------------------------------------------------

#endif
