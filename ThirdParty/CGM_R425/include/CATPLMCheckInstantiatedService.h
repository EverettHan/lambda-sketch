//===================================================================
// COPYRIGHT Dassault Systemes 2017/09/14
//===================================================================
// CATPLMCheckInstantiatedService.cpp
// Header definition of class CATPLMCheckInstantiatedService
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017/09/14 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMCheckInstantiatedService_H
#define CATPLMCheckInstantiatedService_H

#include "CATPLMServicesItf.h"
#include "CATOmxOSet.h"
#include "CATOmxJsonObject.h"
#include "CATPLMID_Any.h"
#include "CATIPLMError.h"

template<> ExportedByCATPLMServicesItf CATOmxCollecManager& CATOmxDefaultCollecManager<CATOmxOSet<CATPLMID_Any> >::manager();

class ExportedByCATPLMServicesItf CATPLMCheckInstantiatedService
{
public:
  /*
  * Returns the instance(s)'s physicalid for each input references' physicalid, regardless the current user PnO scope.
  * It means the output result may contain physicalids ouside the current user PnO scope.
  * The output result is stored in oInstancesByReference.
  * The key is the reference's physicalid. The value is the set of instance(s)'s physicalid which instantiate the reference.
  * The set of instance may be empty, in this case it means the reference is not instantiated.
  * It also may contain one to n physicalids if the reference if multi-instantiated.
  *
  * @param iReferences
  *   list of reference physicalids
  * @param oInstancesByReference
  *   result map: reference's physicalid -> instance(s)'s physicalid set
  * @param opError
  *   output errors
  *
  * @return
  * <dl>
  *   <dt><code>S_OK</code> the request has been executed successfully, the output result is consistent<dd>
  *   <dt><code>E_FAIL</code> the request failed, one or more reference physicalids cannot be processed. Note that some of them could be processed and returned<dd>
  *   <dt><code>E_INVALIDARG</code> oInstancesByReference is not empty<dd>
  *   <dt><code>E_NOTIMPL</code> the required procedure is not deployed on the server<dd>
  * </dl>
  */
  static HRESULT QueryInstancesRegardlessPnO(CATOmxOSet<CATPLMID_Any>& iReferences, CATOmxOMap<CATPLMID_Any, CATOmxOSet<CATPLMID_Any> >& oInstancesByReference, CATIPLMError*& opError);

private:
  CATPLMCheckInstantiatedService();
  virtual ~CATPLMCheckInstantiatedService();

  CATPLMCheckInstantiatedService (CATPLMCheckInstantiatedService &);
  CATPLMCheckInstantiatedService& operator=(CATPLMCheckInstantiatedService&);

  static HRESULT _QueryInstancesRegardlessPnO(CATOmxOSet<CATPLMID_Any>& iReferences, CATOmxOMap<CATPLMID_Any, CATOmxOSet<CATPLMID_Any> >& oInstancesByReference, CATIPLMError*& opError);
  static HRESULT _ProcessOutputs(CATOmxJsonObject& iOutput, CATOmxOMap<CATPLMID_Any, CATOmxOSet<CATPLMID_Any> >& oInstancesByReference);
};

#endif
