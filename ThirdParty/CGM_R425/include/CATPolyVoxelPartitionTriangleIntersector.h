//===================================================================
// COPYRIGHT  2019/07/24
//===================================================================
// CATPolyVoxelPartitionTriangleIntersector.cpp
// Header definition of class CATPolyVoxelPartitionTriangleIntersector
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2019/07/24 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPolyVoxelPartitionTriangleIntersector_H
#define CATPolyVoxelPartitionTriangleIntersector_H

#include "PolyPartitions.h"

#include <vector>

class CATPolyVoxelPartition;

class CATMathPoint;
class CATMathBox;

class ExportedByPolyPartitions CATPolyVoxelPartitionTriangleIntersector
{
public:

  CATPolyVoxelPartitionTriangleIntersector(const CATPolyVoxelPartition& iVoxelPartition);

  void Run(const CATMathPoint iTriangle[3], const double iTolerance, std::vector<unsigned int>& oVoxels);

  void Run(const CATMathBox& iBox, int& oIMin, int& oIMax, int& oJMin, int& oJMax, int& oKMin, int& oKMax);

private:

  struct IntRange
  {
    IntRange() : _Min(0), _Max(0), _Empty(true) {}

    void Insert(int iMin, int iMax);

    int _Min;
    int _Max;
    bool _Empty;
  };

  struct Point2D
  {
    Point2D(const double iX = 0.0, const double iY = 0.0) : _Coords{ iX, iY } {}

    double _Coords[2];
  };

  struct PixelGrid
  {
    PixelGrid() : _JRange(), _JKRange(1) {}

    void Reset();

    IntRange _JRange;
    std::vector<IntRange> _JKRange;
  };

  void SortTrianglePoints(const double iXMin, const double iXMax, const double*& opLowPoint, const double*& opMiddlePoint, const double*& opHighPoint);

  void SortTriangleAxis(const double iBox[3]);

  Point2D GetPointOnBar(const double iBarBgn[3], const double iBarEnd[3], const double iX);

  int GetVoxelUpIndex(const double iCoord, const unsigned int iIJK);

  int GetVoxelDownIndex(const double iCoord, const unsigned int iIJK);

  void MakePolygon(const double iXMin, const double iXMax, const double* ipLowPoint, const double* ipMiddlePoint, const double* ipHighPoint);

  void MakePixels();

  void AddVoxels(const unsigned int iI, std::vector<unsigned int>& oVoxels);

private:

  const CATPolyVoxelPartition& _VoxelPartition;
  const double _Epsilon;

  double _Tolerance;
  double _Triangle[3][3];

  unsigned int _IJK[3];
  PixelGrid _PixelGrid;
  std::vector<Point2D> _Polygon;
};

#endif
