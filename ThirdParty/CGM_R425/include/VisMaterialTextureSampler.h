//===================================================================
// COPYRIGHT Dassault Systemes 2017-02-08
//===================================================================
// VisMaterial.cpp
// Header definition of class VisMaterialTextureSampler
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017-9-05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisMaterialTextureSampler_H
#define VisMaterialTextureSampler_H

#include "SGInfra.h"
#include "VisMaterialEnum.h"
#include "CAT3x3Matrix.h"
#include "CATVisColorf.h"

class ExportedBySGInfra VisMaterialTextureSampler
{
public:

  /** Texture filtering modes.
  * @param eNearest
  * Nearest texel is used.
  * @param eLinear
  * Average of nearest texels is used.
  * @param eNone
  * Invalid.
  * @see VisMaterial
  */
  typedef enum 
  {
    eNearest,
    eLinear,
    eNone,
    NB_FILTERING
  } Filtering;

  /**
  * Texture tiling mode.
  * @param eRepeat
  * The integer part of the coordinate will be ignored and a repeating pattern is formed.
  * @param eClampToBorder
  * The coordinates that fall outside the range will be given a specified border color.
  * @param eClampToEdge
  * The coordinate will simply be clamped between 0 and 1.
  * @param eMirror
  * The texture will be repeated, but it will be mirrored when the integer part of the coordinate is odd.
  * @param eMirrorOnce
  * todo.
  * @see CATGraphicMaterial
  */
  typedef enum
  {
    eRepeat,
    eClampToEdge,
    eClampToBorder,
    eMirror,
    eMirrorOnce,
    NB_WRAPPING
  } Wrapping;

  VisMaterialTextureSampler()=default;
  ~VisMaterialTextureSampler();

  VisMaterialTextureSampler(const VisMaterialTextureSampler& iObj);
  VisMaterialTextureSampler& operator=(const VisMaterialTextureSampler& iObj);

  bool operator==(const VisMaterialTextureSampler&) const;
  bool operator!=(const VisMaterialTextureSampler&) const;

  CAT3x3Matrix GetTransform() const;

public:
  Filtering _min = VisMaterialTextureSampler::eLinear;
  Filtering _mag = VisMaterialTextureSampler::eLinear;
  Filtering _mip = VisMaterialTextureSampler::eLinear;
  Wrapping _u = VisMaterialTextureSampler::eRepeat;
  Wrapping _v = VisMaterialTextureSampler::eRepeat;
  Wrapping _w = VisMaterialTextureSampler::eRepeat;
  CATVisColorf _borderColor = CATVisColorf(0.f, 0.f, 0.f, 1.f);

protected:
  CAT3x3Matrix *_pTrf = nullptr;
};

// ------------------------------------------------------------------------------------------

class CATRmaOCAVisuServices;
class VisMaterialTestServices;
class VisMaterialSerializer;
class VisMaterial3DXMSerializer;
class CATMaterialApplicationOperations;
class VisSpecularGlossinessMaterial;
class VisMaterialPropertiesHelper;

/**
* This class is to be used by LRE team for a specific purpose only
* if anyone else want to use per parameter UV transform, please use CATMaterialApplicationOperation API
*/
class ExportedBySGInfra VisMaterialTextureSamplerWithTransform: public VisMaterialTextureSampler
{
  friend CATRmaOCAVisuServices;
  friend VisMaterialTestServices;
  friend VisMaterialSerializer;
  friend VisMaterial3DXMSerializer;
  friend CATMaterialApplicationOperations;
  friend VisSpecularGlossinessMaterial;
  friend VisMaterialPropertiesHelper;

private:
  VisMaterialTextureSamplerWithTransform(const CAT3x3Matrix &iTrf);

  VisMaterialTextureSamplerWithTransform(const VisMaterialTextureSampler &iInitSampler);
  void SetTransform(const CAT3x3Matrix &iTrf);
};

#endif
