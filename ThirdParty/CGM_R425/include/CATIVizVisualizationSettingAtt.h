// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIVizVisualizationSettingAtt.h
// Define the CATIVizVisualizationSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2004  Creation: Code generated by the CAA wizard  ywg
//
//  Notice:
//  When deliver this interface the following file should also be delivered:
//  - VisualizationBase\CATVizBase.m\LocalInterfaces\TIE_CATIVizVisualizationSettingAtt.h
//  - VisualizationBase\CATVizBase.m\LocalInterfaces\CATVizVisualizationSettingCtrl.h
//  - VisualizationBase\CATVizBase.m\src\CATVizVisualizationSettingCtrl.cpp
//  - VisualizationBase\ProtectedInterfaces\CATManageVisuRepository.h
//  - VisualizationBase\CATVizBase.m\src\CATManageVisuRepository.cpp
//===================================================================
#ifndef CATIVizVisualizationSettingAtt_H
#define CATIVizVisualizationSettingAtt_H

#include "SGInfra.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedBySGInfra IID IID_CATIVizVisualizationSettingAtt;
#else
extern "C" const IID IID_CATIVizVisualizationSettingAtt ;
#endif

class CATSettingInfo;

//------------------------------------------------------------------

/**
 * Interface to the Visualization setting controller.
 * <b>Role</b>: The Visualization setting controller is dedicated to manage
 * the setting parameters used in CATIA visualization.
 */
class ExportedBySGInfra CATIVizVisualizationSettingAtt: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    //***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************

  // No constructors or destructors on this pure virtual base class

  // **************************************************************
  // Methods for Visualization tab page
  // **************************************************************
     // ColorBackgroundMode
     /**
     * Retrieves the ColorBackgroundMode attribute.
     */
     virtual HRESULT GetColorBackgroundMode(      CATBoolean & ioColorBackgroundMode) = 0;
     /**
     * Sets the ColorBackgroundMode attribute.
     */
     virtual HRESULT SetColorBackgroundMode(const CATBoolean    iColorBackgroundMode) = 0;
     /**
     * Retrieves information about the ColorBackgroundMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetColorBackgroundModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the ColorBackgroundMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetColorBackgroundModeLock( unsigned char      iLocked ) = 0;

     // BackgroundRGB
     /**
     * Retrieves the BackgroundRGB attribute.
     */
     virtual HRESULT GetBackgroundRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the BackgroundRGB attribute.
     */
     virtual HRESULT SetBackgroundRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the BackgroundRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBackgroundRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BackgroundRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBackgroundRGBLock( unsigned char      iLocked ) = 0;

     // NoShowBackgroundRGB
    /**
     * Retrieves the No Show Background Color setting attribute value.
     * <br><b>Role</b>: The No Show Background Color setting attribute manages the backgraound color of no show space
     * @param ioR, ioG, ioB [inout]
     *   The Red, Green, Blue components of the No Show Background Color setting attribute value
     * @return
     *   S_OK if the No Show Background Color setting attribute value
     *   is successfully retrieved, and E_FAIL otherwise
     */
     virtual HRESULT GetNoShowBackgroundRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
    /**
     * Sets the No Show Background Color setting attribute value.
     * <br><b>Role</b>: The No Show Background Color setting attribute manages the backgraound color of no show space
     * @param iR, iG, iB [in]
     *   The Red, Green, Blue components of the No Show Background Color setting attribute value
     *   <br><b>Legal values</b>: between 0 and 255
     * @return
     *   S_OK if the No Show Background Color setting attribute value
     *   is successfully set, and E_FAIL otherwise
     */
     virtual HRESULT SetNoShowBackgroundRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
    /**
     * Retrieves the No Show Background Color setting attribute information object.
     * @param ioInfo [inout]
     *   The No Show Background Color setting attribute information object
     * @return
     *   S_OK if the No Show Background Color setting attribute
     *   information is successfully retrieved, and E_FAIL otherwise
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetNoShowBackgroundRGBInfo( CATSettingInfo*    ioInfo )   = 0;
    /**
     * Locks or unlocks the No Show Background Color setting attribute.
     * <br><b>Role</b>: Locks or unlocks the No Show Background Color setting attribute
     * if the operation is allowed in the current administrated environment.
     * In user mode this method will always return E_FAIL.
     * @param iLocked [in]
     *   A flag to indicate whether the No Show Background Color setting attribute should be locked.
     *   <br><b>Legal values</b>:
     *     <br><tt>TRUE</tt> to lock
     *     <br><tt>FALSE</tt> to unlock
     * @return
     *   S_OK if the No Show Background Color setting attribute
     *   is successfully locked or unlocked, and E_FAIL otherwise
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetNoShowBackgroundRGBLock( unsigned char      iLocked ) = 0;

     // SelectedElementRGB
     /**
     * Retrieves the SelectedElementRGB attribute.
     */
     virtual HRESULT GetSelectedElementRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the SelectedElementRGB attribute.
     */
     virtual HRESULT SetSelectedElementRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the SelectedElementRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetSelectedElementRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the SelectedElementRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetSelectedElementRGBLock( unsigned char      iLocked ) = 0;

     /**
     * Retrieves the Advanced selectedElementRGB attribute.
     */
     virtual HRESULT GetAdvancedSelectedElementRGB(unsigned int* ioR, unsigned int* ioG, unsigned int* ioB) = 0;
     /**
     * Sets the Advanced selectedElementRGB attribute.
     */
     virtual HRESULT SetAdvancedSelectedElementRGB(const unsigned int iR, const unsigned int iG, const unsigned int iB) = 0;

     // SelectedEdgeRGB
     /**
     * Retrieves the SelectedEdgeRGB attribute.
     */
     virtual HRESULT GetSelectedEdgeRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the SelectedEdgeRGB attribute.
     */
     virtual HRESULT SetSelectedEdgeRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the SelectedEdgeRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetSelectedEdgeRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the SelectedEdgeRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetSelectedEdgeRGBLock( unsigned char      iLocked ) = 0;

     // PreselectedElementRGB
     /**
     * Retrieves the PreselectedElementRGB attribute.
     */
     virtual HRESULT GetPreselectedElementRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the PreselectedElementRGB attribute.
     */
     virtual HRESULT SetPreselectedElementRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the PreselectedElementRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPreselectedElementRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the PreselectedElementRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPreselectedElementRGBLock( unsigned char      iLocked ) = 0;

     /**
     * Retrieves the Advanced PreselectedElementRGB attribute.
     */
     virtual HRESULT GetAdvancedPreSelectedElementRGB(unsigned int* ioR, unsigned int* ioG, unsigned int* ioB) = 0;
     /**
     * Sets the Advanced PreselectedElementRGB attribute.
     */
     virtual HRESULT SetAdvancedPreSelectedElementRGB(const unsigned int iR, const unsigned int iG, const unsigned int iB) = 0;

     // PreselectedElementLinetype
     /**
     * Retrieves the PreselectedElementLinetype attribute.
     */
     virtual HRESULT GetPreselectedElementLinetype(       unsigned int& ioPreselectedElementLinetype ) = 0;
     /**
     * Sets the PreselectedElementLinetype attribute.
     */
     virtual HRESULT SetPreselectedElementLinetype( const unsigned int   iPreselectedElementLinetype)  = 0;
     /**
     * Retrieves information about the PreselectedElementLinetype setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPreselectedElementLinetypeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the PreselectedElementLinetype setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPreselectedElementLinetypeLock( unsigned char      iLocked ) = 0;

     // UnderIntensifiedRGB
     /**
     * Retrieves the UnderIntensifiedRGB attribute.
     */
     virtual HRESULT GetUnderIntensifiedRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the UnderIntensifiedRGB attribute.
     */
     virtual HRESULT SetUnderIntensifiedRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the UnderIntensifiedRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetUnderIntensifiedRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the UnderIntensifiedRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetUnderIntensifiedRGBLock( unsigned char      iLocked ) = 0;

     // UpdateNeededRGB
     /**
     * Retrieves the UpdateNeededRGB attribute.
     */
     virtual HRESULT GetUpdateNeededRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the UpdateNeededRGB attribute.
     */
     virtual HRESULT SetUpdateNeededRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the UpdateNeededRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetUpdateNeededRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the UpdateNeededRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetUpdateNeededRGBLock( unsigned char      iLocked ) = 0;

     // HandlesRGB
     /**
     * Retrieves the HandlesRGB attribute.
     */
     virtual HRESULT GetHandlesRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the HandlesRGB attribute.
     */
     virtual HRESULT SetHandlesRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the HandlesRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetHandlesRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the HandlesRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetHandlesRGBLock( unsigned char      iLocked ) = 0;

     // BorderEdgesMode
     /**
     * Retrieves the BorderEdgesMode attribute.
     */
     virtual HRESULT GetBorderEdgesMode(      CATBoolean & ioBorderEdgesMode) = 0;
     /**
     * Sets the BorderEdgesMode attribute.
     */
     virtual HRESULT SetBorderEdgesMode(const CATBoolean    iBorderEdgesMode) = 0;
     /**
     * Retrieves information about the BorderEdgesMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBorderEdgesModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BorderEdgesMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBorderEdgesModeLock( unsigned char      iLocked ) = 0;

     // BorderEdgesRGB
     /**
     * Retrieves the BorderEdgesRGB attribute.
     */
     virtual HRESULT GetBorderEdgesRGB( unsigned int* ioR, unsigned int* ioG, unsigned int* ioB ) = 0;
     /**
     * Sets the BorderEdgesRGB attribute.
     */
     virtual HRESULT SetBorderEdgesRGB( const unsigned int iR, const unsigned int iG, const unsigned int iB ) = 0;
     /**
     * Retrieves information about the BorderEdgesRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBorderEdgesRGBInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BorderEdgesRGB setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBorderEdgesRGBLock( unsigned char      iLocked ) = 0;

     // BorderEdgesThickness
     /**
     * Retrieves the BorderEdgesThickness attribute.
     */
     virtual HRESULT GetBorderEdgesThickness(     unsigned int& ioBorderEdgesThickness) = 0;
     /**
     * Sets the BorderEdgesThickness attribute.
     */
     virtual HRESULT SetBorderEdgesThickness(const unsigned int  iBorderEdgesThickness) = 0;
     /**
     * Retrieves information about the BorderEdgesThickness setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBorderEdgesThicknessInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BorderEdgesThickness setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBorderEdgesThicknessLock( unsigned char      iLocked ) = 0;

     // HighlightMode
     /**
     * Retrieves the HighlightMode attribute.
     */
     virtual HRESULT GetHighlightMode(     unsigned int& ioHighlightMode) = 0;
     /**
     * Sets the HighlightMode attribute.
     */
     virtual HRESULT SetHighlightMode(const unsigned int  iHighlightMode) = 0;
     /**
     * Retrieves information about the HighlightMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetHighlightModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the HighlightMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetHighlightModeLock( unsigned char      iLocked ) = 0;

     // PreHighlightMode
     /**
     * Retrieves the PreHighlightMode attribute.
     */
     virtual HRESULT GetPreHighlightMode(     unsigned int& ioPreHighlightMode) = 0;
     /**
     * Sets the PreHighlightMode attribute.
     */
     virtual HRESULT SetPreHighlightMode(const unsigned int  iPreHighlightMode) = 0;
     /**
     * Retrieves information about the PreHighlightMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPreHighlightModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the PreHighlightMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPreHighlightModeLock( unsigned char      iLocked ) = 0;

     // AllZBufferElementMode
     /**
     * Retrieves the AllZBufferElementMode attribute.
     */
     virtual HRESULT GetAllZBufferElementMode(      CATBoolean & ioAllZBufferElementMode) = 0;
     /**
     * Sets the AllZBufferElementMode attribute.
     */
     virtual HRESULT SetAllZBufferElementMode(const CATBoolean    iAllZBufferElementMode) = 0;
     /**
     * Retrieves information about the AllZBufferElementMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAllZBufferElementModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AllZBufferElementMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAllZBufferElementModeLock( unsigned char      iLocked ) = 0;

     // AntiAliasingMode
     /**
     * Retrieves the AntiAliasingMode attribute.
     */
     virtual HRESULT GetAntiAliasingMode(      CATBoolean & ioAntiAliasingMode) = 0;
     /**
     * Sets the AntiAliasingMode attribute.
     */
     virtual HRESULT SetAntiAliasingMode(const CATBoolean    iAntiAliasingMode) = 0;
     /**
     * Retrieves information about the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAntiAliasingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AntiAliasingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAntiAliasingModeLock( unsigned char      iLocked ) = 0;

     // AntiAliasingOffset
     /**
     * Retrieves the AntiAliasingOffset attribute.
     */
     virtual HRESULT GetAntiAliasingOffset(      float& ioAntiAliasingOffset) = 0;
     /**
     * Sets the AntiAliasingOffset attribute.
     */
     virtual HRESULT SetAntiAliasingOffset(const float   iAntiAliasingOffset) = 0;
     /**
     * Retrieves information about the AntiAliasingOffset setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAntiAliasingOffsetInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AntiAliasingOffset setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAntiAliasingOffsetLock( unsigned char      iLocked ) = 0;

     /**
     * Full Scene Anti-aliasing mode.
     * @param CATFSAAMode_Deactivated
     *   The Full Scene Anti-aliasing is deactivated. This is the default behavior.
     * @param CATFSAAMode_2xSuperSampling
     *   The Full Scene Anti-aliasing mode is set to 2 times super sampling.
     * @param CATFSAAMode_4xSuperSampling
     *   The Full Scene Anti-aliasing mode is set to 4 times super sampling.
     * @param CATFSAAMode_8xSuperSampling
     *   The Full Scene Anti-aliasing mode is set to 8 times super sampling.
     * @param CATFSAAMode_16xSuperSampling
     *   The Full Scene Anti-aliasing mode is set to 16 times super sampling.
     */
     enum CATFullSceneAntiAliasingMode
     {
        CATFSAAMode_Deactivated=0,
        CATFSAAMode_2xSuperSampling=2,
        CATFSAAMode_4xSuperSampling=3,
        CATFSAAMode_8xSuperSampling=4,
        CATFSAAMode_16xSuperSampling=5,
        CATFSAAMode_2xMultiSampling=6,
        CATFSAAMode_4xMultiSampling=7,
        CATFSAAMode_8xMultiSampling=8,
        CATFSAAMode_16xMultiSampling=9
     };

     // FullSceneAntiAliasingMode
     /**
     * Retrieves the FullSceneAntiAliasingMode attribute.
     */
     virtual HRESULT GetFullSceneAntiAliasingMode( enum CATIVizVisualizationSettingAtt::CATFullSceneAntiAliasingMode & ioFullSceneAntiAliasingMode) = 0;
     /**
     * Sets the FullSceneAntiAliasingMode attribute.
     */
     virtual HRESULT SetFullSceneAntiAliasingMode(const enum CATIVizVisualizationSettingAtt::CATFullSceneAntiAliasingMode    iFullSceneAntiAliasingMode) = 0;
     /**
     * Retrieves information about the FullSceneAntiAliasingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFullSceneAntiAliasingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FullSceneAntiAliasingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFullSceneAntiAliasingModeLock( unsigned char      iLocked ) = 0;

     // --- BEGIN --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- BEGIN --- //

     // Curvature step threshold for smooth edges
     virtual HRESULT GetEdgeHighCurvatureStepThresholdActivated(CATBoolean & ioActivateCurvatureStepDetectionMode) = 0;
     virtual HRESULT SetEdgeHighCurvatureStepThresholdActivated(const CATBoolean iActivateCurvatureStepDetectionMode) = 0;
     virtual HRESULT GetEdgeHighCurvatureStepThresholdActivatedInfo(CATSettingInfo* oInfo)   = 0;
     virtual HRESULT SetEdgeHighCurvatureStepThresholdActivatedLock(unsigned char iLocked) = 0;

     virtual HRESULT GetEdgeHighCurvatureStepThreshold(float& ioCurvatureStepThreshold) = 0;
     virtual HRESULT SetEdgeHighCurvatureStepThreshold(const float iCurvatureStepThreshold) = 0;
     virtual HRESULT GetEdgeHighCurvatureStepThresholdInfo(CATSettingInfo* oInfo)   = 0;
     virtual HRESULT SetEdgeHighCurvatureStepThresholdLock(unsigned char iLocked) = 0;

     // --- END --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- END --- //


     // AAOnSSAO
     /**
     * Retrieves the AAOnSSAO attribute.
     */
     virtual HRESULT GetAAOnSSAO(CATBoolean & ioAAOnSSAO) = 0;
     /**
     * Sets the FullSceneAntiAliasingMode attribute.
     */
     virtual HRESULT SetAAOnSSAO(const CATBoolean iAAOnSSAO) = 0;
     /**
     * Retrieves information about the AAOnSSAO setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAAOnSSAOInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AAOnSSAO setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAAOnSSAOLock( unsigned char      iLocked ) = 0;

     // AADynamic
     /**
     * Retrieves the AADynamic attribute.
     */
     virtual HRESULT GetAADynamic(CATBoolean & ioAADynamic) = 0;
     /**
     * Sets the FullSceneAntiAliasingMode attribute.
     */
     virtual HRESULT SetAADynamic(const CATBoolean iAADynamic) = 0;
     /**
     * Retrieves information about the AADynamic setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAADynamicInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AADynamic setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAADynamicLock( unsigned char      iLocked ) = 0;


     // OutlinesDynamic
     /**
     * Retrieves the OutlinesDynamic attribute.
     */
     virtual HRESULT GetOutlinesDynamic(CATBoolean & ioOutlinesDynamic) = 0;
     /**
     * Sets the FullSceneAntiAliasingMode attribute.
     */
     virtual HRESULT SetOutlinesDynamic(const CATBoolean iOutlinesDynamic) = 0;
     /**
     * Retrieves information about the OutlinesDynamic setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOutlinesDynamicInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OutlinesDynamic setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetOutlinesDynamicLock( unsigned char      iLocked ) = 0;


     // DisplayCurrentScale
     /**
     * Retrieves the DisplayCurrentScale attribute.
     */
     virtual HRESULT GetDisplayCurrentScale(      CATBoolean & ioDisplayCurrentScale) = 0;
     /**
     * Sets the DisplayCurrentScale attribute.
     */
     virtual HRESULT SetDisplayCurrentScale(const CATBoolean    iDisplayCurrentScale) = 0;
     /**
     * Retrieves information about the DisplayCurrentScale setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDisplayCurrentScaleInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DisplayCurrentScale setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDisplayCurrentScaleLock( unsigned char      iLocked ) = 0;
     // --------------------------------------------------------------

     // SLIMode
     /**
     * SLI activation mode.
     * @param CATSLIMode_Deactivated
     *   The SLI usage is disabled.
     * @param CATSLIMode_ActivatedAFR
     *   SLI is used for alternate frame rendering.
     * @param CATSLIMode_ActivatedVR
     *   SLI is used for virtual reality.
     */
     enum CATSLIMode
     {
       CATSLIMode_Deactivated  = 0,
       CATSLIMode_ActivatedVR  = 1,
       CATSLIMode_ActivatedAFR = 2
     };

     /**
     * Retrieves the SLIMode attribute.
     */
     virtual HRESULT GetSLIMode(enum CATIVizVisualizationSettingAtt::CATSLIMode &     ioSLIMode) = 0;
     /**
     * Sets the SLIMode attribute.
     */
     virtual HRESULT SetSLIMode(const enum CATIVizVisualizationSettingAtt::CATSLIMode iSLIMode) = 0;
     /**
     * Retrieves information about the SLIMode setting parameter.
     */
     virtual HRESULT GetSLIModeInfo(CATSettingInfo*  oInfo) = 0;
     /**
     * Locks or unlocks the SLIMode setting parameter.
     */
     virtual HRESULT SetSLIModeLock(unsigned char    iLocked) = 0;
     // --------------------------------------------------------------

     // StaticBatchingMode
     /**
     * Retrieves the NavigIconMode attribute.
     */
     virtual HRESULT GetStaticBatchingMode(      CATBoolean & ioStaticBatchingMode) = 0;
     /**
     * Sets the NavigIconMode attribute.
     */
     virtual HRESULT SetStaticBatchingMode(const CATBoolean    iStaticBatchingMode) = 0;
     /**
     * Retrieves information about the NavigIconMode setting parameter.
     */
     virtual HRESULT GetStaticBatchingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NavigIconMode setting parameter.
     */
     virtual HRESULT SetStaticBatchingModeLock( unsigned char      iLocked ) = 0;
     // --------------------------------------------------------------
     // UnloadMemoryFromGPUMode
     /**
     * Retrieves the NavigIconMode attribute.
     */
     virtual HRESULT GetUnloadMemoryFromGPU(CATBoolean & ioUnloadMemoryFromGPUMode) = 0;
     /**
     * Sets the NavigIconMode attribute.
     */
     virtual HRESULT SetUnloadMemoryFromGPU(const CATBoolean    iUnloadMemoryFromGPUMode) = 0;
     /**
     * Retrieves information about the NavigIconMode setting parameter.
     */
     virtual HRESULT GetUnloadMemoryFromGPUInfo(CATSettingInfo*    oInfo) = 0;
     /**
     * Locks or unlocks the NavigIconMode setting parameter.
     */
     virtual HRESULT SetUnloadMemoryFromGPULock(unsigned char      iLocked) = 0;
     // --------------------------------------------------------------

     // --------------------------------------------------------------
     // MeshCompressionNormalEnableMode
     /**
     * Retrieves the NavigIconMode attribute.
     */
     virtual HRESULT GetMeshCompressionNormalEnable(CATBoolean & ioMeshCompressionNormalEnableMode) = 0;
     /**
     * Sets the NavigIconMode attribute.
     */
     virtual HRESULT SetMeshCompressionNormalEnable(const CATBoolean    iMeshCompressionNormalEnableMode) = 0;
     /**
     * Retrieves information about the NavigIconMode setting parameter.
     */
     virtual HRESULT GetMeshCompressionNormalEnableInfo(CATSettingInfo*    oInfo) = 0;
     /**
     * Locks or unlocks the NavigIconMode setting parameter.
     */
     virtual HRESULT SetMeshCompressionNormalEnableLock(unsigned char      iLocked) = 0;
     // --------------------------------------------------------------


     // **************************************************************
     // Methods for Navigation tab page
     // **************************************************************
     // --------------------------------------------------------------
     // Selection frame
     // --------------------------------------------------------------
     // PreSelectionMode
     /**
     * Retrieves the PreSelectionMode attribute.
     */
     virtual HRESULT GetPreSelectionMode(      CATBoolean & ioPreSelectionMode) = 0;
     /**
     * Sets the PreSelectionMode attribute.
     */
     virtual HRESULT SetPreSelectionMode(const CATBoolean    iPreSelectionMode) = 0;
     /**
     * Retrieves information about the PreSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPreSelectionModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the PreSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPreSelectionModeLock( unsigned char      iLocked ) = 0;

     // PreSelNavigatorStartedByArrowKeys
     /**
     * Retrieves the PreSelNavigatorStartedByArrowKeys attribute.
     */
     virtual HRESULT GetPreSelNavigatorStartedByArrowKeys(CATBoolean & ioPreSelNavigatorStartedByArrowKeys) = 0;
     /**
     * Sets the PreSelNavigatorStartedByArrowKeys attribute.
     */
     virtual HRESULT SetPreSelNavigatorStartedByArrowKeys(const CATBoolean    iPreSelNavigatorStartedByArrowKeys) = 0;
     /**
     * Retrieves information about the PreSelNavigatorStartedByArrowKeys setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPreSelNavigatorStartedByArrowKeysInfo(CATSettingInfo*    oInfo) = 0;
     /**
     * Locks or unlocks the PreSelNavigatorStartedByArrowKeys setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPreSelNavigatorStartedByArrowKeysLock(unsigned char      iLocked) = 0;

     // OtherSelectionTimeoutActivity
     /**
     * Retrieves the OtherSelectionTimeoutActivity attribute.
     */
     virtual HRESULT GetOtherSelectionTimeoutActivity(      CATBoolean & ioOtherSelectionTimeoutActivity) = 0;
     /**
     * Sets the OtherSelectionTimeoutActivity attribute.
     */
     virtual HRESULT SetOtherSelectionTimeoutActivity(const CATBoolean    iOtherSelectionTimeoutActivity) = 0;
     /**
     * Retrieves information about the OtherSelectionTimeoutActivity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOtherSelectionTimeoutActivityInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OtherSelectionTimeoutActivity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetOtherSelectionTimeoutActivityLock( unsigned char      iLocked ) = 0;

     // OtherSelectionTimeout
     /**
     * Retrieves the OtherSelectionTimeout attribute.
     */
     virtual HRESULT GetOtherSelectionTimeout(       float& ioOtherSelectionTimeout ) = 0;
     /**
     * Sets the OtherSelectionTimeout attribute.
     */
     virtual HRESULT SetOtherSelectionTimeout( const float   iOtherSelectionTimeout ) = 0;
     /**
     * Retrieves information about the OtherSelectionTimeout setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOtherSelectionTimeoutInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OtherSelectionTimeout setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetOtherSelectionTimeoutLock( unsigned char      iLocked ) = 0;

     // HighlightActivation
     /**
     * Retrieves the HighlightActivation attribute.
     */
     virtual HRESULT GetHighlightActivation(      CATBoolean & ioHighlightActivation) = 0;
     /**
     * Sets the HighlightActivation attribute.
     */
     virtual HRESULT SetHighlightActivation(const CATBoolean    HighlightActivation) = 0;
     /**
     * Retrieves information about the HighlightActivation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetHighlightActivationInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the HighlightActivation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetHighlightActivationLock( unsigned char      iLocked ) = 0;

     // NoZBufferSelectionMode
     /**
     * Retrieves the NoZBufferSelectionMode attribute.
     */
     virtual HRESULT GetNoZBufferSelectionMode(      CATBoolean & ioNoZBufferSelectionMode) = 0;
     /**
     * Sets the NoZBufferSelectionMode attribute.
     */
     virtual HRESULT SetNoZBufferSelectionMode(const CATBoolean    iNoZBufferSelectionMode) = 0;
     /**
     * Retrieves information about the NoZBufferSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetNoZBufferSelectionModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NoZBufferSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetNoZBufferSelectionModeLock( unsigned char      iLocked ) = 0;

     // BoundingBoxSelectionMode
     /**
     * Retrieves the BoundingBoxSelectionMode attribute.
     */
     virtual HRESULT GetBoundingBoxSelectionMode(      CATBoolean & ioBoundingBoxSelectionMode) = 0;
     /**
     * Sets the BoundingBoxSelectionMode attribute.
     */
     virtual HRESULT SetBoundingBoxSelectionMode(const CATBoolean    iBoundingBoxSelectionMode) = 0;
     /**
     * Retrieves information about the BoundingBoxSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBoundingBoxSelectionModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BoundingBoxSelectionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBoundingBoxSelectionModeLock( unsigned char      iLocked ) = 0;

     // MaxSelectionMove
     /**
     * Retrieves the MaxSelectionMove attribute.
     */
     virtual HRESULT GetMaxSelectionMove(       unsigned int& ioMaxSelectionMove ) = 0;
     /**
     * Sets the MaxSelectionMove attribute.
     */
     virtual HRESULT SetMaxSelectionMove( const unsigned int   iMaxSelectionMove)  = 0;
     /**
     * Retrieves information about the MaxSelectionMove setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetMaxSelectionMoveInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MaxSelectionMove setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetMaxSelectionMoveLock( unsigned char      iLocked ) = 0;

     // DisplayDrillList
     /**
     * Retrieves the DisplayDrillList attribute.
     */
     virtual HRESULT GetDisplayDrillList(      CATBoolean & ioDisplayDrillList) = 0;
     /**
     * Sets the DisplayDrillList attribute.
     */
     virtual HRESULT SetDisplayDrillList(const CATBoolean    iDisplayDrillList) = 0;
     /**
     * Retrieves information about the DisplayDrillList setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDisplayDrillListInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DisplayDrillList setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDisplayDrillListLock( unsigned char      iLocked ) = 0;

     // AuxiliaryDrillViewer
     /**
     * Retrieves the AuxiliaryDrillViewer attribute.
     */
     virtual HRESULT GetAuxiliaryDrillViewer(      CATBoolean & ioAuxiliaryDrillViewer) = 0;
     /**
     * Sets the AuxiliaryDrillViewer attribute.
     */
     virtual HRESULT SetAuxiliaryDrillViewer(const CATBoolean    iAuxiliaryDrillViewer) = 0;
     /**
     * Retrieves information about the AuxiliaryDrillViewer setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAuxiliaryDrillViewerInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AuxiliaryDrillViewer setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAuxiliaryDrillViewerLock( unsigned char      iLocked ) = 0;

     // FaceHLDrill
     /**
     * Retrieves the FaceHLDrill attribute.
     */
     virtual HRESULT GetFaceHLDrill(      CATBoolean & ioFaceHLDrill) = 0;
     /**
     * Sets the FaceHLDrill attribute.
     */
     virtual HRESULT SetFaceHLDrill(const CATBoolean    iFaceHLDrill) = 0;
     /**
     * Retrieves information about the FaceHLDrill setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFaceHLDrillInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FaceHLDrill setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFaceHLDrillLock( unsigned char      iLocked ) = 0;

     // DisplayImmersiveDrillViewer
     /**
     * Retrieves the DisplayImmersiveDrillViewer attribute.
     */
     virtual HRESULT GetDisplayImmersiveDrillViewer(      CATBoolean & ioDisplayImmersiveDrillViewer) = 0;
     /**
     * Sets the DisplayImmersiveDrillViewer attribute.
     */
     virtual HRESULT SetDisplayImmersiveDrillViewer(const CATBoolean    iDisplayImmersiveDrillViewer) = 0;
     /**
     * Retrieves information about the DisplayImmersiveDrillViewer setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDisplayImmersiveDrillViewerInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DisplayImmersiveDrillViewer setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDisplayImmersiveDrillViewerLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Navigation frame
     // --------------------------------------------------------------
     // Gravity
     /**
     * Retrieves the Gravity attribute.
     */
     virtual HRESULT GetGravity(      CATBoolean & ioGravity) = 0;
     /**
     * Sets the Gravity attribute.
     */
     virtual HRESULT SetGravity(const CATBoolean    iGravity) = 0;
     /**
     * Retrieves information about the Gravity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetGravityInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the Gravity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetGravityLock( unsigned char      iLocked ) = 0;

     // GravityAxis
     /**
     * Retrieves the GravityAxis attribute.
     */
     virtual HRESULT GetGravityAxis(       unsigned int& ioGravityAxis ) = 0;
     /**
     * Sets the GravityAxis attribute.
     */
     virtual HRESULT SetGravityAxis( const unsigned int   iGravityAxis)  = 0;
     /**
     * Retrieves information about the GravityAxis setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetGravityAxisInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the GravityAxis setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetGravityAxisLock( unsigned char      iLocked ) = 0;

     // FollowGroundMode
     /**
     * Retrieves the FollowGroundMode attribute.
     */
     virtual HRESULT GetFollowGroundMode(      CATBoolean & ioFollowGroundMode) = 0;
     /**
     * Sets the FollowGroundMode attribute.
     */
     virtual HRESULT SetFollowGroundMode(const CATBoolean    iFollowGroundMode) = 0;
     /**
     * Retrieves information about the FollowGroundMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFollowGroundModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FollowGroundMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFollowGroundModeLock( unsigned char      iLocked ) = 0;

     // FollowGroundAltitude
     /**
     * Retrieves the FollowGroundAltitude attribute.
     */
     virtual HRESULT GetFollowGroundAltitude(      float& ioFollowGroundAltitude) = 0;
     /**
     * Sets the FollowGroundAltitude attribute.
     */
     virtual HRESULT SetFollowGroundAltitude(const float   iFollowGroundAltitude) = 0;
     /**
     * Retrieves information about the FollowGroundAltitude setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFollowGroundAltitudeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FollowGroundAltitude setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFollowGroundAltitudeLock( unsigned char      iLocked ) = 0;

     // ViewpointAnimationMode
     /**
     * Retrieves the ViewpointAnimationMode attribute.
     */
     virtual HRESULT GetViewpointAnimationMode(      CATBoolean & ioViewpointAnimationMode) = 0;
     /**
     * Sets the ViewpointAnimationMode attribute.
     */
     virtual HRESULT SetViewpointAnimationMode(const CATBoolean    iViewpointAnimationMode) = 0;
     /**
     * Retrieves information about the ViewpointAnimationMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViewpointAnimationModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the ViewpointAnimationMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViewpointAnimationModeLock( unsigned char      iLocked ) = 0;

     // RotationSphereMode
     /**
     * Retrieves the RotationSphereMode attribute.
     */
     virtual HRESULT GetRotationSphereMode(      CATBoolean & ioRotationSphereMode) = 0;
     /**
     * Sets the RotationSphereMode attribute.
     */
     virtual HRESULT SetRotationSphereMode(const CATBoolean    iRotationSphereMode) = 0;
     /**
     * Retrieves information about the RotationSphereMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetRotationSphereModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the RotationSphereMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetRotationSphereModeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // FlyAndWalk frame
     // --------------------------------------------------------------
      // MouseFreeMode
     /**
     * Retrieves the MouseFreeMode attribute.
     */
     virtual HRESULT GetMouseFreeMode(      CATBoolean & ioMouseFreeMode) = 0;
     /**
     * Sets the MouseFreeMode attribute.
     */
     virtual HRESULT SetMouseFreeMode(const CATBoolean    iMouseFreeMode) = 0;
      /**
     * Retrieves information about the MouseFreeMode setting parameter.
     */
     virtual HRESULT GetMouseFreeModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MouseFreeMode setting parameter.
     */
     virtual HRESULT SetMouseFreeModeLock( unsigned char      iLocked ) = 0;

     // NavigIconMode
     /**
     * Retrieves the NavigIconMode attribute.
     */
     virtual HRESULT GetNavigIconMode(      CATBoolean & ioNavigIconMode) = 0;
     /**
     * Sets the NavigIconMode attribute.
     */
     virtual HRESULT SetNavigIconMode(const CATBoolean    iNavigIconMode) = 0;
      /**
     * Retrieves information about the NavigIconMode setting parameter.
     */
     virtual HRESULT GetNavigIconModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NavigIconMode setting parameter.
     */
     virtual HRESULT SetNavigIconModeLock( unsigned char      iLocked ) = 0;

     // FlyCollisionMode
     /**
     * Retrieves the FlyCollisionMode attribute.
     */
     virtual HRESULT GetFlyCollisionMode(      CATBoolean & ioFlyCollisionMode) = 0;
     /**
     * Sets the FlyCollisionMode attribute.
     */
     virtual HRESULT SetFlyCollisionMode(const CATBoolean    iFlyCollisionMode) = 0;
     /**
     * Retrieves information about the FlyCollisionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlyCollisionModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlyCollisionMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlyCollisionModeLock( unsigned char      iLocked ) = 0;

     // FlyCollisionType
     /**
     * Retrieves the FlyCollisionType attribute.
     */
     virtual HRESULT GetFlyCollisionType(       unsigned int& ioFlyCollisionType ) = 0;
     /**
     * Sets the FlyCollisionType attribute.
     */
     virtual HRESULT SetFlyCollisionType( const unsigned int   iFlyCollisionType)  = 0;
     /**
     * Retrieves information about the FlyCollisionType setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlyCollisionTypeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlyCollisionType setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlyCollisionTypeLock( unsigned char      iLocked ) = 0;

     // FlyCollisionSphereRadius
     /**
     * Retrieves the FlyCollisionSphereRadius attribute.
     */
     virtual HRESULT GetFlyCollisionSphereRadius(      float& ioFlyCollisionSphereRadius) = 0;
     /**
     * Sets the FlyCollisionSphereRadius attribute.
     */
     virtual HRESULT SetFlyCollisionSphereRadius(const float   iFlyCollisionSphereRadius) = 0;
     /**
     * Retrieves information about the FlyCollisionSphereRadius setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlyCollisionSphereRadiusInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlyCollisionSphereRadius setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlyCollisionSphereRadiusLock( unsigned char      iLocked ) = 0;

     // FlySensitivity
     /**
     * Retrieves the FlySensitivity attribute.
     */
     virtual HRESULT GetFlySensitivity(       unsigned int& ioFlySensitivity ) = 0;
     /**
     * Sets the FlySensitivity attribute.
     */
     virtual HRESULT SetFlySensitivity( const unsigned int   iFlySensitivity)  = 0;
     /**
     * Retrieves information about the FlySensitivity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlySensitivityInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlySensitivity setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlySensitivityLock( unsigned char      iLocked ) = 0;

     // FlySpeedMode
     /**
     * Retrieves the FlySpeedMode attribute.
     */
     virtual HRESULT GetFlySpeedMode(       unsigned int& ioFlySpeedMode ) = 0;
     /**
     * Sets the FlySpeedMode attribute.
     */
     virtual HRESULT SetFlySpeedMode( const unsigned int   iFlySpeedMode)  = 0;
     /**
     * Retrieves information about the FlySpeedMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlySpeedModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlySpeedMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlySpeedModeLock( unsigned char      iLocked ) = 0;

     // FlySpeed
     /**
     * Retrieves the FlySpeed attribute.
     */
     virtual HRESULT GetFlySpeed(       unsigned int& ioFlySpeed ) = 0;
     /**
     * Sets the FlySpeed attribute.
     */
     virtual HRESULT SetFlySpeed( const unsigned int   iFlySpeed)  = 0;
     /**
     * Retrieves information about the FlySpeed setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetFlySpeedInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the FlySpeed setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetFlySpeedLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // MouseSpeed frame
     // --------------------------------------------------------------
     // MouseSpeedValue
     /**
     * Retrieves the MouseSpeedValue attribute.
     */
     virtual HRESULT GetMouseSpeedValue(       unsigned int& ioMouseSpeedValue ) = 0;
     /**
     * Sets the MouseSpeedValue attribute.
     */
     virtual HRESULT SetMouseSpeedValue( const unsigned int   iMouseSpeedValue)  = 0;
     /**
     * Retrieves information about the MouseSpeedValue setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetMouseSpeedValueInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MouseSpeedValue setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetMouseSpeedValueLock( unsigned char      iLocked ) = 0;

  // --------------------------------------------------------------
  // KeyboardRotationAngle frame
  // --------------------------------------------------------------
  // KeyboardRotationAngleValue
  /**
   * Retrieves the angle value for rotations operated through key combinations.
   */
  virtual HRESULT GetKeyboardRotationAngleValue(       unsigned int& ioKeyboardRotationAngleValue ) = 0;
  /**
   * Sets the angle value for rotations operated through key combinations.
   */
  virtual HRESULT SetKeyboardRotationAngleValue( const unsigned int   iKeyboardRotationAngleValue)  = 0;
  /**
   * Retrieves information about the KeyboardRotationAngleValue setting parameter.
   * <br>Refer to @href CATIASettingController for a detailed description.
   */
  virtual HRESULT GetKeyboardRotationAngleValueInfo( CATSettingInfo*    oInfo )   = 0;
  /**
   * Locks or unlocks the KeyboardRotationAngleValue setting parameter.
   * <br>Refer to @href CATIASettingController for a detailed description.
   */
  virtual HRESULT SetKeyboardRotationAngleValueLock( unsigned char      iLocked ) = 0;

  // **************************************************************
  // Methods for Performances tab page
  // **************************************************************
     // --------------------------------------------------------------
     // Occlusion frame
     // --------------------------------------------------------------
     // OcclusionCullingMode
     /**
     * Retrieves the OcclusionCullingMode attribute.
     */
     virtual HRESULT GetOcclusionCullingMode(      CATBoolean & ioOcclusionCullingMode) = 0;
     /**
     * Sets the OcclusionCullingMode attribute.
     */
     virtual HRESULT SetOcclusionCullingMode(const CATBoolean    iOcclusionCullingMode) = 0;
     /**
     * Retrieves information about the OcclusionCullingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOcclusionCullingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OcclusionCullingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetOcclusionCullingModeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Accuracy frame
     // --------------------------------------------------------------

     //=================================//
     // GEOM VISU TESSELLATION SETTINGS //
     //=================================//
     // Following methods are only to be used for MePref/UI management,
     // otherwise if you want to access them (get or set), please use CATGeomVisuTessParamAccess API

     // --- BEGIN --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- BEGIN --- //

     // 3DAccuracyMode
     /**
     * Retrieves the 3DAccuracyMode attribute.
     */
     virtual HRESULT GetViz3DAccuracyMode(      unsigned int & io3DAccuracyMode) = 0;
     /**
     * Sets the 3DAccuracyMode attribute.
     */
     virtual HRESULT SetViz3DAccuracyMode(const unsigned int    i3DAccuracyMode) = 0;
     /**
     * Retrieves information about the 3DAccuracyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz3DAccuracyModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 3DAccuracyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz3DAccuracyModeLock( unsigned char      iLocked ) = 0;

     // 3DProportionnalAccuracy
     /**
     * Retrieves the 3DProportionnalAccuracy attribute.
     */
     virtual HRESULT GetViz3DProportionnalAccuracy(      float& io3DProportionnalAccuracy) = 0;
     /**
     * Sets the 3DProportionnalAccuracy attribute.
     */
     virtual HRESULT SetViz3DProportionnalAccuracy(const float   i3DProportionnalAccuracy) = 0;
     /**
     * Retrieves information about the 3DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz3DProportionnalAccuracyInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 3DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz3DProportionnalAccuracyLock( unsigned char      iLocked ) = 0;

     // 3DFixedAccuracy
     /**
     * Retrieves the 3DFixedAccuracy attribute.
     */
     virtual HRESULT GetViz3DFixedAccuracy(      float& io3DFixedAccuracy) = 0;
     /**
     * Sets the 3DFixedAccuracy attribute.
     */
     virtual HRESULT SetViz3DFixedAccuracy(const float   i3DFixedAccuracy) = 0;
     /**
     * Retrieves information about the 3DFixedAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz3DFixedAccuracyInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 3DFixedAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz3DFixedAccuracyLock( unsigned char      iLocked ) = 0;

     // 3DCurveAccuracy
     /**
     * Retrieves the 3DCurveAccuracy attribute.
     */
     virtual HRESULT GetViz3DCurveAccuracy(      float& io3DCurveAccuracy) = 0;
     /**
     * Sets the 3DCurveAccuracy attribute.
     */
     virtual HRESULT SetViz3DCurveAccuracy(const float   i3DCurveAccuracy) = 0;
     /**
     * Retrieves information about the 3DCurveAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz3DCurveAccuracyInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 3DCurveAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz3DCurveAccuracyLock( unsigned char      iLocked ) = 0;

     // OptimizedMeshMode
     /**
     * Retrieves the OptimizedMeshMode attribute.
     */
     virtual HRESULT GetOptimizedMeshMode(      unsigned int& ioOptimizedMeshMode) = 0;
     /**
     * Sets the OptimizedMeshMode attribute.
     */
     virtual HRESULT SetOptimizedMeshMode(const unsigned int   iOptimizedMeshMode) = 0;
     /**
     * Retrieves information about the OptimizedMeshMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOptimizedMeshModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OptimizedMeshMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetOptimizedMeshModeLock( unsigned char      iLocked ) = 0;

     // AdaptiveQualityTessellation
     /**
     * Retrieves the AdaptiveQualityTessellation attribute.
     */
     virtual HRESULT GetAdaptiveQualityTessellation(CATBoolean& ioAdapativeQualityTessellation) = 0;
     /**
     * Sets the AdaptiveQualityTessellation attribute.
     */
     virtual HRESULT SetAdaptiveQualityTessellation(const CATBoolean iAdapativeQualityTessellation) = 0;
     /**
     * Retrieves information about the AdaptiveQualityTessellation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAdaptiveQualityTessellationInfo(CATSettingInfo* oInfo) = 0;
     /**
     * Locks or unlocks the AdaptiveQualityTessellation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAdaptiveQualityTessellationLock(unsigned char      iLocked) = 0;

     // 2DAccuracyMode
     /**
     * Retrieves the 2DAccuracyMode attribute.
     */
     virtual HRESULT GetViz2DAccuracyMode(      CATBoolean & io2DAccuracyMode) = 0;
     /**
     * Sets the 2DAccuracyMode attribute.
     */
     virtual HRESULT SetViz2DAccuracyMode(const CATBoolean    i2DAccuracyMode) = 0;
     /**
     * Retrieves information about the 2DAccuracyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz2DAccuracyModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 2DAccuracyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz2DAccuracyModeLock( unsigned char      iLocked ) = 0;

     // 2DProportionnalAccuracy
     /**
     * Retrieves the 2DProportionnalAccuracy attribute.
     */
     virtual HRESULT GetViz2DProportionnalAccuracy(      float& io2DProportionnalAccuracy) = 0;
     /**
     * Sets the 2DProportionnalAccuracy attribute.
     */
     virtual HRESULT SetViz2DProportionnalAccuracy(const float   i2DProportionnalAccuracy) = 0;
     /**
     * Retrieves information about the 2DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz2DProportionnalAccuracyInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 2DProportionnalAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz2DProportionnalAccuracyLock( unsigned char      iLocked ) = 0;

     // 2DFixedAccuracy
     /**
     * Retrieves the 2DFixedAccuracy attribute.
     */
     virtual HRESULT GetViz2DFixedAccuracy(      float& io2DFixedAccuracy) = 0;
     /**
     * Sets the 2DFixedAccuracy attribute.
     */
     virtual HRESULT SetViz2DFixedAccuracy(const float   i2DFixedAccuracy) = 0;
     /**
     * Retrieves information about the 2DFixedAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetViz2DFixedAccuracyInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the 2DFixedAccuracy setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetViz2DFixedAccuracyLock( unsigned char      iLocked ) = 0;

     // --- END --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- END --- //

     // --------------------------------------------------------------
     // LOD frame
     // --------------------------------------------------------------
     // StaticLOD
     /**
     * Retrieves the StaticLOD attribute.
     */
     virtual HRESULT GetStaticLOD(      float& ioStaticLOD) = 0;
     /**
     * Sets the StaticLOD attribute.
     */
     virtual HRESULT SetStaticLOD(const float   iStaticLOD) = 0;
     /**
     * Retrieves information about the StaticLOD setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetStaticLODInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the StaticLOD setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetStaticLODLock( unsigned char      iLocked ) = 0;

     // DynamicLOD
     /**
     * Retrieves the DynamicLOD attribute.
     */
     virtual HRESULT GetDynamicLOD(      float& ioDynamicLOD) = 0;
     /**
     * Sets the DynamicLOD attribute.
     */
     virtual HRESULT SetDynamicLOD(const float   iDynamicLOD) = 0;
     /**
     * Retrieves information about the DynamicLOD setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDynamicLODInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DynamicLOD setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDynamicLODLock( unsigned char      iLocked ) = 0;

     // GenerateLODsOnSave
     /**
      * Returns the GenerateLODsOnSave setting
      */
     virtual HRESULT GetGenerateLODsOnSave(CATBoolean& oGenerateLODsOnSave) = 0;

     /**
      * Sets the GenerateLODsOnSave setting
      */
     virtual HRESULT SetGenerateLODsOnSave(const CATBoolean iGenerateLODsOnSave) = 0;

     /**
      * Retrieves informations about the GenerateLODsOnSave setting
      */
     virtual HRESULT GetGenerateLODsOnSaveInfo(CATSettingInfo* opInfo) = 0;

     /**
      * Locks/Unlocks the GenerateLODsOnSave setting
      */
     virtual HRESULT SetGenerateLODsOnSaveLock(unsigned char iLocked) = 0;


     // --------------------------------------------------------------
     // Culling frame
     // --------------------------------------------------------------
     // StaticCull
     /**
     * Retrieves the StaticCull attribute.
     */
     virtual HRESULT GetStaticCull(       unsigned int& ioStaticCull ) = 0;
     /**
     * Sets the StaticCull attribute.
     */
     virtual HRESULT SetStaticCull( const unsigned int   iStaticCull)  = 0;
     /**
     * Retrieves information about the StaticCull setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetStaticCullInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the StaticCull setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetStaticCullLock( unsigned char      iLocked ) = 0;

     // DynamicCull
     /**
     * Retrieves the DynamicCull attribute.
     */
     virtual HRESULT GetDynamicCull(       unsigned int& ioDynamicCull ) = 0;
     /**
     * Sets the DynamicCull attribute.
     */
     virtual HRESULT SetDynamicCull( const unsigned int   iDynamicCull)  = 0;
     /**
     * Retrieves information about the DynamicCull setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDynamicCullInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DynamicCull setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDynamicCullLock( unsigned char      iLocked ) = 0;

     // CullVanishingRatio
     /**
     * Retrieves the CullVanishingRatio setting
     */
     virtual HRESULT GetCullVanishingRatio(      float& ioCullVanishingRatio) = 0;

     /**
     * Sets the DynamicLOD setting
     */
     virtual HRESULT SetCullVanishingRatio(const float   iCullVanishingRatio) = 0;

     /**
     * Retrieves information about the CullVanishingRatio setting
     */
     virtual HRESULT GetCullVanishingRatioInfo( CATSettingInfo*    oInfo )   = 0;

     /**
     * Locks/Unlocks the CullVanishingRatio setting
     */
     virtual HRESULT SetCullVanishingRatioLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Transparency frame
     // --------------------------------------------------------------
     // TransparencyMode
     /**
     * deprecated R1.X
     * Retrieves the TransparencyMode attribute.
     */
     virtual HRESULT GetTransparencyMode(      CATBoolean & ioTransparencyMode) = 0;
     /**
     * deprecated R1.X
     * Sets the TransparencyMode attribute.
     */
     virtual HRESULT SetTransparencyMode(const CATBoolean    iTransparencyMode) = 0;

     enum CATTransparencyMode
     {
       CATScreenDoor		  = 0,
       CATAlphaBlending   = 1,
       CATWeightedAverage = 2,
       CATDepthPeeling    = 3,
       CATOrderIndependentTransparency = 4,
       CATAlphaBlendingWithoutSort     = 5,
       CATOrderIndependentTransparencyWithColor = 6
     };

     /**
     * Retrieves the TransparencyMode attribute.
     * @param oTransparencyMode
     *   Value of the transparency mode setting option. The retrieved value can be one of the values
     *	   defined by the @href #CATTransparencyMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     virtual HRESULT GetTransparencyMode(enum CATIVizVisualizationSettingAtt::CATTransparencyMode & oTransparencyMode) = 0;

     /**
     * Sets the TransparencyMode attribute.
     * @param iTransparencyMode
     *   Value of the transparency mode setting option. The value to set can be one of the values
     *	   defined by the @href #CATTransparencyMode enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     virtual HRESULT SetTransparencyMode(const enum CATIVizVisualizationSettingAtt::CATTransparencyMode iTransparencyMode) = 0;

     /**
     * Retrieves information about the TransparencyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetTransparencyModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the TransparencyMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetTransparencyModeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Graphics frame
     // --------------------------------------------------------------
     // GraphicsAPI
     /**
     * deprecated R1.X
     * Retrieves the GraphicsAPI attribute.
     */
     virtual HRESULT GetGraphicsAPI(      CATBoolean & ioGraphicsAPI) = 0;
     /**
     * deprecated R1.X
     * Sets the GraphicsAPI attribute.
     */
     virtual HRESULT SetGraphicsAPI(const CATBoolean    iGraphicsAPI) = 0;

     enum CATGraphicsAPI
     {
       CATOpenGL		  = 0,
       CATDirectX     = 1,
     };

     /**
     * Retrieves the GraphicsAPI attribute.
     * @param oGraphicsAPI
     *   Value of the graphics API setting option. The retrieved value can be one of the values
     *	   defined by the @href #CATGraphicsAPI enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     virtual HRESULT GetGraphicsAPI(enum CATIVizVisualizationSettingAtt::CATGraphicsAPI & oGraphicsAPI) = 0;

     /**
     * Sets the GraphicsAPI attribute.
     * @param iGraphicsAPI
     *   Value of the graphics API setting option. The value to set can be one of the values
     *	   defined by the @href #CATGraphicsAPI enumeration.
     * @return
     *   An HRESULT.
     *    <br><b>Legal values</b>:
     *    <dl>
     *      <dt>S_OK
     *      <dd> if the operation succeeded.
     *      <dt>E_FAIL
     *      <dd> if the operation failed.
     *    </dl>
     */
     virtual HRESULT SetGraphicsAPI(const enum CATIVizVisualizationSettingAtt::CATGraphicsAPI iGraphicsAPI) = 0;

     /**
     * Retrieves information about the GraphicsAPI setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetGraphicsAPIInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the GraphicsAPI setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetGraphicsAPILock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // FPS frame
     // --------------------------------------------------------------
     // MinimumFPSMode
     /**
     * Retrieves the MinimumFPSMode attribute.
     */
     virtual HRESULT GetMinimumFPSMode(      CATBoolean & ioMinimumFPSMode) = 0;
     /**
     * Sets the MinimumFPSMode attribute.
     */
     virtual HRESULT SetMinimumFPSMode(const CATBoolean    iMinimumFPSMode) = 0;
     /**
     * Retrieves information about the MinimumFPSMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetMinimumFPSModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MinimumFPSMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetMinimumFPSModeLock( unsigned char      iLocked ) = 0;

     // NumberOfMinimumFPS
     /**
     * Retrieves the NumberOfMinimumFPS attribute.
     */
     virtual HRESULT GetNumberOfMinimumFPS(       unsigned int& ioNumberOfMinimumFPS ) = 0;
     /**
     * Sets the NumberOfMinimumFPS attribute.
     */
     virtual HRESULT SetNumberOfMinimumFPS( const unsigned int   iNumberOfMinimumFPS)  = 0;
     /**
     * Retrieves information about the NumberOfMinimumFPS setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetNumberOfMinimumFPSInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NumberOfMinimumFPS setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetNumberOfMinimumFPSLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // SpaceFPS frame
     // --------------------------------------------------------------
     // MinimumSpaceFPSMode
     /**
     * Retrieves the MinimumSpaceFPSMode attribute.
     */
     virtual HRESULT GetMinimumSpaceFPSMode(      CATBoolean & ioMinimumSpaceFPSMode) = 0;
     /**
     * Sets the MinimumSpaceFPSMode attribute.
     */
     virtual HRESULT SetMinimumSpaceFPSMode(const CATBoolean    iMinimumSpaceFPSMode) = 0;
     /**
     * Retrieves information about the MinimumSpaceFPSMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetMinimumSpaceFPSModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MinimumSpaceFPSMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetMinimumSpaceFPSModeLock( unsigned char      iLocked ) = 0;

     // NumberOfMinimumSpaceFPS
     /**
     * Retrieves the NumberOfMinimumSpaceFPS attribute.
     */
     virtual HRESULT GetNumberOfMinimumSpaceFPS(       unsigned int& ioNumberOfMinimumSpaceFPS ) = 0;
     /**
     * Sets the NumberOfMinimumSpaceFPS attribute.
     */
     virtual HRESULT SetNumberOfMinimumSpaceFPS( const unsigned int   iNumberOfMinimumSpaceFPS)  = 0;
     /**
     * Retrieves information about the NumberOfMinimumSpaceFPS setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetNumberOfMinimumSpaceFPSInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NumberOfMinimumSpaceFPS setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetNumberOfMinimumSpaceFPSLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Miscellaneous frame
     // --------------------------------------------------------------

     // --- BEGIN --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- BEGIN --- //

     // IsoparGenerationMode
     /**
     * Retrieves the IsoparGenerationMode attribute.
     */
     virtual HRESULT GetIsoparGenerationMode(      CATBoolean & ioIsoparGenerationMode) = 0;
     /**
     * Sets the IsoparGenerationMode attribute.
     */
     virtual HRESULT SetIsoparGenerationMode(const CATBoolean    iIsoparGenerationMode) = 0;
     /**
     * Retrieves information about the IsoparGenerationMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetIsoparGenerationModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the IsoparGenerationMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetIsoparGenerationModeLock( unsigned char      iLocked ) = 0;

     // NbIsopars
     /**
     * Retrieves the NbIsopars attribute.
     */
     virtual HRESULT GetNbIsopars(       unsigned int& ioNbIsopars ) = 0;
     /**
     * Sets the NbIsopars attribute.
     */
     virtual HRESULT SetNbIsopars( const unsigned int   iNbIsopars)  = 0;
     /**
     * Retrieves information about the NbIsopars setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetNbIsoparsInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the NbIsopars setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetNbIsoparsLock( unsigned char      iLocked ) = 0;

     // --- END --- PLEASE USE CATGeomVisuTessParamAccess INSTEAD --- END --- //

     // TwoSideLightingMode
     /**
     * Retrieves the TwoSideLightingMode attribute.
     */
     virtual HRESULT GetTwoSideLightingMode(      CATBoolean & ioTwoSideLightingMode) = 0;
     /**
     * Sets the TwoSideLightingMode attribute.
     */
     virtual HRESULT SetTwoSideLightingMode(const CATBoolean    iTwoSideLightingMode) = 0;
     /**
     * Retrieves information about the TwoSideLightingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetTwoSideLightingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the TwoSideLightingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetTwoSideLightingModeLock( unsigned char      iLocked ) = 0;

     // BackFaceCullingMode
     /**
  * deprecated V5R16.
     * Retrieves the BackFaceCullingMode attribute.
     */
     virtual HRESULT GetBackFaceCullingMode(      CATBoolean & ioBackFaceCullingMode) = 0;
     /**
  * deprecated V5R16.
     * Sets the BackFaceCullingMode attribute.
     */
     virtual HRESULT SetBackFaceCullingMode(const CATBoolean    iBackFaceCullingMode) = 0;

  /**
  * Back Face Culling mode.
  * @param CATBackFaceCullingOnSolidFaces
  *   The Back Face Culling algorithm is applied only to faces belonging to solids. This is the default behavior.
  * @param CATBackFaceCullingOnAllFaces
  *   The Back Face Culling algorithm is applied both on faces belonging to solids and also on stand-alone faces.
  * @param CATBackFaceCullingOnStandAloneFaces
  *   The Back Face Culling algorithm is applied only to stand-alone faces.
  * @param CATBackFaceCullingOnNoFaces
  *   The Back Face Culling algorithm is not applied to any faces.
  */
  enum CATBackFaceCullingMode
  {
    CATBackFaceCullingOnSolidFaces		  = 0,
    CATBackFaceCullingOnAllFaces		    = 1,
    CATBackFaceCullingOnStandAloneFaces = 2,
    CATBackFaceCullingOnNoFaces		      = 3
  };

  /**
  * Retrieves the BackFaceCullingMode attribute.
  * @param oBackFaceCullingMode
  *   Value of the back face culling mode setting option. The retrieved value can be one of the four possible values
  *	   defined by the @href #CATBackFaceCullingMode enumeration.
  * @return
  *   An HRESULT.
  *    <br><b>Legal values</b>:
  *    <dl>
  *      <dt>S_OK
  *      <dd> if the operation succeeded.
  *      <dt>E_FAIL
  *      <dd> if the operation failed.
  *    </dl>
  */
  virtual HRESULT GetBackFaceCullingMode(enum CATIVizVisualizationSettingAtt::CATBackFaceCullingMode & oBackFaceCullingMode) = 0;


  /**
  * Sets the BackFaceCullingMode attribute.
  * @param iBackFaceCullingMode
  *   Value of the back face culling mode setting option. The value to set can be one of the four possible values
  *	   defined by the @href #CATBackFaceCullingMode enumeration.
  * @return
  *   An HRESULT.
  *    <br><b>Legal values</b>:
  *    <dl>
  *      <dt>S_OK
  *      <dd> if the operation succeeded.
  *      <dt>E_FAIL
  *      <dd> if the operation failed.
  *    </dl>
  */
  virtual HRESULT SetBackFaceCullingMode(const enum CATIVizVisualizationSettingAtt::CATBackFaceCullingMode iBackFaceCullingMode) = 0;

     /**
     * Retrieves information about the BackFaceCullingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetBackFaceCullingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the BackFaceCullingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetBackFaceCullingModeLock( unsigned char      iLocked ) = 0;

     // LightViewerMode
     /**
     * Retrieves the LightViewerMode attribute.
     */
     virtual HRESULT GetLightViewerMode(      CATBoolean & ioLightViewerMode) = 0;
     /**
     * Sets the LightViewerMode attribute.
     */
     virtual HRESULT SetLightViewerMode(const CATBoolean    iLightViewerMode) = 0;
     /**
     * Retrieves information about the LightViewerMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetLightViewerModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the LightViewerMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetLightViewerModeLock( unsigned char      iLocked ) = 0;

     // LineicCgrMode
     /**
     * Retrieves the LineicCgrMode attribute.
     */
     virtual HRESULT GetLineicCgrMode(      CATBoolean & ioLineicCgrMode) = 0;
     /**
     * Sets the LineicCgrMode attribute.
     */
     virtual HRESULT SetLineicCgrMode(const CATBoolean    iLineicCgrMode) = 0;
     /**
     * Retrieves information about the LineicCgrMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetLineicCgrModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the LineicCgrMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetLineicCgrModeLock( unsigned char      iLocked ) = 0;

     // ShaderMode
     /**
     * Retrieves the ShaderMode attribute.
     */
     virtual HRESULT GetShaderMode(      CATBoolean & ioShaderMode) = 0;
     /**
     * Sets the ShaderMode attribute.
     */
     virtual HRESULT SetShaderMode(const CATBoolean    iShaderMode) = 0;
     /**
     * Retrieves information about the ShaderMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetShaderModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the ShaderMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetShaderModeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // Halo frame
     // --------------------------------------------------------------
     // HaloMode
     /**
     * Retrieves the HaloMode attribute.
     */
     virtual HRESULT GetHaloMode(      CATBoolean & ioHaloMode) = 0;
     /**
     * Sets the HaloMode attribute.
     */
     virtual HRESULT SetHaloMode(const CATBoolean    iHaloMode) = 0;
     /**
     * Retrieves information about the HaloMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetHaloModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the HaloMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetHaloModeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // AccuratePicking frame
     // --------------------------------------------------------------
     // PickingWindowSize
     /**
     * Retrieves the PickingWindowSize attribute.
     */
     virtual HRESULT GetPickingWindowSize(       unsigned int& ioPickingWindowSize ) = 0;
     /**
     * Sets the PickingWindowSize attribute.
     */
     virtual HRESULT SetPickingWindowSize( const unsigned int   iPickingWindowSize)  = 0;
     /**
     * Retrieves information about the PickingWindowSize setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetPickingWindowSizeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the PickingWindowSize setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetPickingWindowSizeLock( unsigned char      iLocked ) = 0;

     // AccuratePickingMode
     /**
     * Retrieves the AccuratePickingMode attribute.
     */
     virtual HRESULT GetAccuratePickingMode(      CATBoolean & ioAccuratePickingMode) = 0;
     /**
     * Sets the AccuratePickingMode attribute.
     */
     virtual HRESULT SetAccuratePickingMode(const CATBoolean    iAccuratePickingMode) = 0;
     /**
     * Retrieves information about the AccuratePickingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAccuratePickingModeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AccuratePickingMode setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAccuratePickingModeLock( unsigned char      iLocked ) = 0;

     // AccuratePickingWindowSize
     /**
     * Retrieves the AccuratePickingWindowSize attribute.
     */
     virtual HRESULT GetAccuratePickingWindowSize(       unsigned int& ioAccuratePickingWindowSize ) = 0;
     /**
     * Sets the AccuratePickingWindowSize attribute.
     */
     virtual HRESULT SetAccuratePickingWindowSize( const unsigned int   iAccuratePickingWindowSize)  = 0;
     /**
     * Retrieves information about the AccuratePickingWindowSize setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAccuratePickingWindowSizeInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AccuratePickingWindowSize setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAccuratePickingWindowSizeLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // MouseDoubleClic frame
     // --------------------------------------------------------------
     // MouseDoubleClicDelay
     /**
     * Retrieves the MouseDoubleClicDelay attribute.
     */
     virtual HRESULT GetMouseDoubleClicDelay(       unsigned int& ioMouseDoubleClicDelay ) = 0;
     /**
     * Sets the MouseDoubleClicDelay attribute.
     */
     virtual HRESULT SetMouseDoubleClicDelay( const unsigned int   iMouseDoubleClicDelay)  = 0;
     /**
     * Retrieves information about the MouseDoubleClicDelay setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetMouseDoubleClicDelayInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the MouseDoubleClicDelay setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetMouseDoubleClicDelayLock( unsigned char      iLocked ) = 0;

     // --------------------------------------------------------------
     // RTR default material shading
     // --------------------------------------------------------------
     // AmbientActivation
     /**
     * Retrieves the AmbientActivation attribute.
     */
     virtual HRESULT GetAmbientActivation(       unsigned int& ioAmbientActivation ) = 0;
     /**
     * Sets the AmbientActivation attribute.
     */
     virtual HRESULT SetAmbientActivation( const unsigned int   iAmbientActivation)  = 0;
     /**
     * Retrieves information about the AmbientActivation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetAmbientActivationInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the AmbientActivation setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetAmbientActivationLock( unsigned char      iLocked ) = 0;


     // DefaultDiffuseAmbientCoefficien
     /**
     * Retrieves the DefaultDiffuseAmbientCoefficien attribute.
     */

     virtual HRESULT GetDefaultDiffuseAmbientCoefficient(       float& ioDefaultDiffuseAmbientCoefficien ) = 0;
     /**
     * Sets the DefaultDiffuseAmbientCoefficien attribute.
     */
     virtual HRESULT SetDefaultDiffuseAmbientCoefficient( const float   iDefaultDiffuseAmbientCoefficien)  = 0;
     /**
     * Retrieves information about the DefaultDiffuseAmbientCoefficien setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDefaultDiffuseAmbientCoefficientInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DefaultDiffuseAmbientCoefficien setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDefaultDiffuseAmbientCoefficientLock( unsigned char      iLocked ) = 0;


     // DefaultSpecularCoefficient
     /**
     * Retrieves the DefaultSpecularCoefficient attribute.
     */
     virtual HRESULT GetDefaultSpecularCoefficient(       float& ioDefaultSpecularCoefficient ) = 0;
     /**
     * Sets the DefaultSpecularCoefficient attribute.
     */
     virtual HRESULT SetDefaultSpecularCoefficient( const float   iDefaultSpecularCoefficient)  = 0;
     /**
     * Retrieves information about the DefaultSpecularCoefficient setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDefaultSpecularCoefficientInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DefaultSpecularCoefficient setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDefaultSpecularCoefficientLock( unsigned char      iLocked ) = 0;


     // DefaultShininess
     /**
     * Retrieves the DefaultShininess attribute.
     */
     virtual HRESULT GetDefaultShininess(       float& ioDefaultShininess ) = 0;
     /**
     * Sets the DefaultShininess attribute.
     */
     virtual HRESULT SetDefaultShininess( const float   iDefaultShininess)  = 0;
     /**
     * Retrieves information about the DefaultShininess setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetDefaultShininessInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the DefaultShininess setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT SetDefaultShininessLock( unsigned char      iLocked ) = 0;

     // OpaqueFaces
     /**
     * Retrieves the OpaqueFaces attribute.
     */
     virtual HRESULT GetOpaqueFaces(      CATBoolean & ioOpaqueFaces) = 0;
     /**
     * Sets the OpaqueFaces attribute.
     */
     virtual HRESULT SetOpaqueFaces(const CATBoolean    iOpaqueFaces) = 0;
     /**
     * Retrieves information about the OpaqueFaces setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
     virtual HRESULT GetOpaqueFacesInfo( CATSettingInfo*    oInfo )   = 0;
     /**
     * Locks or unlocks the OpaqueFaces setting parameter.
     * <br>Refer to @href CATSysSettingController for a detailed description.
     */
      virtual HRESULT SetOpaqueFacesLock( unsigned char      iLocked ) = 0;

      // --------------------------------------------------------------
      // LDH frame
      // --------------------------------------------------------------

      // LDHTargetFramerate
      /**
      * Retrieves the LDHTargetFramerate attribute.
      */
      virtual HRESULT GetLDHTargetFramerate(unsigned int& ioLDHTargetFramerate) = 0;
      /**
      * Sets the LDHTargetFramerate attribute.
      */
      virtual HRESULT SetLDHTargetFramerate(const unsigned int iLDHTargetFramerate) = 0;
      /**
      * Retrieves information about the LDHTargetFramerate setting parameter.
      * <br>Refer to @href CATSysSettingController for a detailed description.
      */
      virtual HRESULT GetLDHTargetFramerateInfo(CATSettingInfo* oInfo) = 0;
      /**
      * Locks or unlocks the LDHTargetFramerate setting parameter.
      * <br>Refer to @href CATSysSettingController for a detailed description.
      */
      virtual HRESULT SetLDHTargetFramerateLock(unsigned char iLocked) = 0;


      // --------------------------------------------------------------
      // View Mode
      // --------------------------------------------------------------

      // ViewModeUIVersion
      /**
      * Retrieves the ViewModeUIVersion attribute.
      */
      virtual HRESULT GetViewModeUIVersion(unsigned int& ioViewModeUIVersion) = 0;
      /**
      * Sets the ViewModeUIVersion attribute.
      */
      virtual HRESULT SetViewModeUIVersion(const unsigned int iViewModeUIVersion) = 0;
      /**
      * Retrieves information about the ViewModeUIVersion setting parameter.
      * <br>Refer to @href CATSysSettingController for a detailed description.
      */
      virtual HRESULT GetViewModeUIVersionInfo(CATSettingInfo* oViewModeUIVersion) = 0;
      /**
      * Locks or unlocks the ViewModeUIVersion setting parameter.
      * <br>Refer to @href CATSysSettingController for a detailed description.
      */
      virtual HRESULT SetViewModeUIVersionLock(unsigned char iLocked) = 0;
};

//------------------------------------------------------------------

#endif
