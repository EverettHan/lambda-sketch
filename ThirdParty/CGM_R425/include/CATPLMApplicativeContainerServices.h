// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// CATPLMApplicativeContainerServices.h
// Header definition of CATPLMApplicativeContainerServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jan 2006  Creation: Code generated by the CAA wizard  ECN
//===================================================================
/**
  * @level Protected 
  * @usage U1 
  */
#ifndef CATPLMApplicativeContainerServices_H
#define CATPLMApplicativeContainerServices_H

#include "CATBaseUnknown.h"
#include "CATPLMComponentInterfaces.h"
#include "CATUnicodeString.h"
class CATIPLMComponent;




//-----------------------------------------------------------------------

/**
* Class to retrieve services on PLM component.
*
* <br><b>Role</b>: this class provides basic methods to manage applicative containers
*
*/
class ExportedByCATPLMComponentInterfaces CATPLMApplicativeContainerServices
{
public:



/**
  * Creates an applicative container.
  * <br><b>Role:</b>This method initializes the structure of the representation reference belonging to the 
  * the given PLM component through the creation of the applicative container.  
  * Note that inside this method , after the container creation , the followings steps are also included :
  *  <ul>
  *  <li>The applicative container is initialized thanks to the <tt>CATInit</tt> interface, 
  *       if it implements it. </li>
  *  <li>The undo/redo mechanism is also initialized 
  * @param oApplicativeContainer [out, CATBaseUnknown#Release]
  *      The created applicative container.
  * @param ipiComponent 
  *      The PLM component.
  * @param iContainerType
  *      The type of the applicative container.
  * @param iInterfaceId
  *      The interface type returned through oApplicativeContainer parameter.
  * @param iContainerSuperType
  *      The supertype of the applicative container.
  *      <br> "": default value, the applicative container has no supertype.
  *      <br> otherwise must be set to the feature container type (CATFeatCont).
  * @param iIdentifier
  *      The name of the applicative container, useful to get it later.
  *	 <br> "": default value, the name is set to the container type iContainerType.
  *      <br><b> Note: </b> If you want to create several applicative containers of
  *      <br> the same type, the parameter iIdentifier becomes mandatory, because
  *      <br> two applicative containers can not have the same name.
  * @return
  *      <tt>S_OK</tt>: the applicative container has been successfuly created.
  *	 <br><tt> E_FAIL</tt>: the operation has failed.
  *	 <br><tt> E_INVALIDARG </tt>: in such cases :
  *           <ul>
  *            <li> <tt>ipiComponent</tt> is null.</li> 
  *            <li> <tt>ipiComponent</tt> base type is not representation reference.</li>
  *           </ul>
  */

 

static HRESULT Create(CATBaseUnknown ** oApplicativeContainer,
				      CATIPLMComponent* ipiComponent,
				      const CATIdent iContainerType,
				      const IID& iInterfaceId,
				      const CATIdent iContainerSuperType="",
				      const CATUnicodeString& iIdentifier="");

/**  
* Gets an applicative container.
* <br><b>Role:</b>This method gets an applicative container in the representation reference structure 
* belonging to the given PLM component.  

*  @param  oApplicativeContainer  
*            The applicative  container.  
*  @param  ipiComponent    
*            The component inside which the appliacative container has to be retrieved.  
*  @param  iInterfaceId  
*            The  interface  type  returned  through  oApplicativeContainer  parameter.  
*  @param  iIdentifier  
*            The name  of  the  applicative  container.  
*  @return  
*            <tt>S_OK</tt>:  the  applicative  container  has  been  successfuly  retrieved.  
*          <br><tt>  E_FAIL</tt>:  the  operation  has  failed.  
*/  

static HRESULT Retrieve(CATBaseUnknown ** oApplicativeContainer,
				        CATIPLMComponent* ipiComponent,
				        const IID& iInterfaceId,
				        const CATUnicodeString& iIdentifier);

};

//-----------------------------------------------------------------------

#endif
