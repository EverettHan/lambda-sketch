// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMScopeBaseEntity.h
// Define the CATIPLMScopeBaseEntity interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2004  Creation: Code generated by the CAA wizard  son
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMScopeBaseEntity_H
#define CATIPLMScopeBaseEntity_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMScopeBaseEntity;
#else
extern "C" const IID IID_CATIPLMScopeBaseEntity ;
#endif

class CATListPtrCATIPLMScopeBaseEntity;
class CATListValCATComponentId;
//------------------------------------------------------------------

/**
* Interface definition of the scope base entity.
*
* <br><b>Role</b>: Components that implement
* CATIPLMScopeBaseEntity are constituing the not exposed scope. For a given list of "save roots", the not exposed Save Scope delimits the minimum domain that contains all the entities that may need to be saved simultaneously to the Save Roots to guarantee the integrity of what's getting saved.
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMScopeBaseEntity: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

         
    
/**
* Computes the scope base entity dependencies.
*<br><b>Role</b>:  GetPointedBaseEntities is a <b>not recursive</b> method.
* @param  oPointedSBEs 
*   The scope base entities that have to be present in the scope if the current entity is is the scope
*/
   virtual HRESULT GetPointedBaseEntities (CATListPtrCATIPLMScopeBaseEntity & oPointedSBEs) = 0;
 
   
   
    
/**
* Computes the corresponding elements in the Exposed Scope
* @param  ioScopeElem 
*   The current scope base entity correspond to the ioScopeElem list in the exposed scope
*/
   virtual HRESULT GetExposedScopeSubpart ( CATListValCATComponentId & ioScopeElem) = 0;
     


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler( CATIPLMScopeBaseEntity, CATBaseUnknown );


//------------------------------------------------------------------

#endif
