// COPYRIGHT DASSAULT SYSTEMES 2003

#ifndef CATOMYUnicodeStringHTab_H_
#define CATOMYUnicodeStringHTab_H_


/**
 * @level Private
 * @usage U1
 */

#include "CATOMYBaseSession.h"
#include "IUnknown.h"
#include "CATBoolean.h"
#include "CATSysSimpleHashTable.h"
#include "CATListOfCATUnicodeString.h"

class CATUnicodeString;

/**
* This object is a hash table to stored objects indexed by a CATUnicodeString.
*/
class ExportedByCATOMYBaseSession CATOMYUnicodeStringHTab
{
public :
  
  /**
  * Creates the hash table.
  * @param iSizeEstimate [in]
  *   the approximative size of the hash table.
  */
  CATOMYUnicodeStringHTab(int  iSizeEstimate);
  
  /**
  * Destructs the hash table.
  */
  ~CATOMYUnicodeStringHTab() ;
    
  /** 
  * Insert a CATUnicodeString in the hash table indexed by the given key.
  * @param ikey [in]
  *   The index of the object to insert.
  * @param iobj [in]
  *   The CATUnicodestring to insert.
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The object was successfully inserted.</LI>
  *     <LI><code>S_FALSE</code> There is already an entry indexed by the given key. The value is replaced.</LI>
  *     <LI><code>E_FAIL</code> An error occured during the insertion.</LI>
  *   </UL>
  */
  HRESULT PutString(const CATUnicodeString& key,const CATUnicodeString& obj);

  /** 
  * Get the CATUnicodeString indexed by the given key.
  * @param ikey [in]
  *   The index of the object.
  * @param obj [out]
  *   The string stored in the hastable.
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The entry was found.</LI>
  *     <LI><code>S_FALSE</code> There is no enty indexed by the given key.</LI>
  *   </UL>
  */
  HRESULT GetString(const CATUnicodeString& key,CATUnicodeString& obj) const;

  /**
   * Streams the entire hastab to a CATUnicodeString
   */

  HRESULT Marshall(CATUnicodeString& oString) const;

  /**
   * Populates the hashtab with a CATUnicodeString generated by WriteWholeStateTo()
   */

  HRESULT Unmarshall(const CATUnicodeString & iString);

  /** 
  * Checks that an item identified by the given key is in the hash table.
  * @param ikey [in]
  *   The index of the entry.
  *
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The entry was found.</LI>
  *     <LI><code>S_FALSE</code> The entry was not found.</LI>
  *   </UL>
  */
  HRESULT ContainsKey(const CATUnicodeString& ikey) const;

  /** 
  * Removes all entries of the hash table
  * <br><b>Role</b>: Delete all items of the hash table. Objects associated with them are not released.
  */
  void Clear();

  /** 
  * Removes the item indexed by a given key.
  * <br><b>Role</b>: Removes an entry in the hash table. Be careful, the object associated with the entry is
  * not deleted.
  *
  * @param ikey [in]
  *   The index of the entry.
  *
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The entry was identified, and successfully removed.</LI>
  *     <LI><code>S_FALSE</code> The entry was not found.</LI>
  *   </UL>
  */
  HRESULT RemoveKey(const CATUnicodeString& ikey);

  /**
   * Gets an entry in the htab
   */
  HRESULT Get(int ipos, CATUnicodeString &oKey, CATUnicodeString &oValue);

  /** 
  * Gets all index of the hash table.
  * @param oKeys [out]
  *   The list of indexes.
  */
  //  void Keys(CATListOfCATUnicodeString& oKeys) const;

  /**
  * Returns the number of stored elements in the hash table.
  */
  int Size() const;

  /** 
  * Dumps all entries of the hash table.
  */
  void DumpEntries() const; 

 private :
  /** 
  * Insert an object in the hash table indexed by the given key.
  * @param ikey [in]
  *   The index of the object to insert.
  * @param iobj [in]
  *   The object to insert.
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The object was successfully inserted.</LI>
  *     <LI><code>S_FALSE</code> There is already an entry indexed by the given key. The object is not inserted.</LI>
  *     <LI><code>E_FAIL</code> An error occured during the insertion.</LI>
  *   </UL>
  */
  HRESULT PutPointer(const CATUnicodeString& ikey, CATUnicodeString* iobj);
  
  /** 
  * Get the object indexed by the given key.
  * @param ikey [in]
  *   The index of the object.
  * @param obj [out]
  *   The object stored in the hastable.
  *
  * @return
  *   <UL>
  *     <LI><code>S_OK</code> The entry was found.</LI>
  *     <LI><code>S_FALSE</code> There is no enty indexed by the given key.</LI>
  *   </UL>
  */
  HRESULT GetPointer(const CATUnicodeString& ikey, CATUnicodeString*& obj) const;



private :
  // internal hash table
  CATSysSimpleHashTable _implHash ;
  // Copy Constructor;
  CATOMYUnicodeStringHTab& operator = (const CATOMYUnicodeStringHTab iHashTab);
} ;
#endif

