// COPYRIGHT Dassault Systemes 2002
//===================================================================
//
// CATIP2PPeer.h
// Define the CATIP2PPeer interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2002  Creation: Code generated by the CAA wizard  jnm
//===================================================================
#ifndef CATIP2PPeer_H
#define CATIP2PPeer_H

#include "CATP2PCore.h"
#include "CATBaseUnknown.h"

#include "CATP2PDefs.h"
#include "CATP2PUserStatus.h"
#include "CATP2PMessagingType.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATP2PCore IID IID_CATIP2PPeer;
#else
extern "C" const IID IID_CATIP2PPeer ;
#endif

//------------------------------------------------------------------


class CATUnicodeString;
class CATP2PService;
class CATP2PPeerInfo;
class CATListValCATUnicodeString;
class CATIP2PMessage;


class ExportedByCATP2PCore CATIP2PPeer: public CATBaseUnknown
{
  CATDeclareInterface;

  public:


	//Group management
	virtual HRESULT CreateAndOrJoinSubGroup(const CATUnicodeString * groupName)=0;
    virtual HRESULT LeaveCurrentGroup()=0;
	virtual HRESULT Refresh() = 0;

    // Current Info
    virtual const CATUnicodeString * GetPeerName() = 0;
	virtual const CATUnicodeString * GetCurrentGroup() = 0;
	virtual const CATListValCATUnicodeString* GetSubGroups() = 0;

	//Initilization method
	virtual HRESULT InitP2P()=0;
	
	//RTC methods
	virtual HRESULT InitP2PForRTC()=0;
	virtual HRESULT ChangeP2PStatus(CATP2PUserStatus status, const CATUnicodeString& iDesc)=0;
	virtual HRESULT SendP2PMessage(const CATUnicodeString& iDestPeerName, unsigned char type, const CATUnicodeString& iHeader, char* buffer, int size)=0;
	virtual HRESULT OpenP2PSession(const CATUnicodeString& iDestPeerName, int iSessionType)=0;
  virtual HRESULT CloseP2PSession(const CATUnicodeString& iDestPeerName, int iSessionType)=0;
  virtual int IsPeerConnected(const CATUnicodeString& iPeerName)=0;
  virtual HRESULT GetConnectedPeers(CATListValCATUnicodeString& connectedPeers)=0;
  virtual HRESULT GetStatusAndDesc(const CATUnicodeString& peerId, CATP2PUserStatus& status, CATUnicodeString& oDesc)=0;
  virtual CATP2PUserStatus GetStatus()=0;
  virtual CATUnicodeString GetDesc()=0;
  

	
	

	//HTTP inputs
	virtual HRESULT SetHTTPConnexion(const char* server, const char* uri, int port = 80, void* data = NULL) = 0;
    virtual	HRESULT GetHTTPConnexion(char*& server, char*& uri, int& port) = 0;
    virtual	HRESULT GetHTTPConnexionData(void*& data) = 0;


    // to register your services by name
	virtual	HRESULT RegisterService(CATP2PServiceName srv)=0; // a faire par nom 

	// Publisher for P2P Notifications
    virtual CATBaseUnknown* GetP2PPublisher()=0;

	//Communication
    virtual HRESULT SendToGroup(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size)=0;
	virtual HRESULT SendToPeer(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATUnicodeString& remotePeer)=0;
	virtual HRESULT ReplyToPeer(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATIP2PMessage* intialMessage)=0;

	virtual	HRESULT SendToPeerCrossGroup(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATUnicodeString& remotePeerName)=0;

//	virtual HRESULT OpenStreamToPeer(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,  CATUnicodeString& remotePeerName)=0;
//	virtual HRESULT OpenStreamToGroup(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size)=0;

	//Discovery
	virtual HRESULT CrossGroupPeerSearch() = 0;

	//
	virtual HRESULT Disconnect() = 0;




 
};

//------------------------------------------------------------------

#endif
