// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMSpacePersistencyIntent.h
// Define the CATIPLMSpacePersistencyIntent interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  PBV
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATIPLMSpacePersistencyIntent_H
#define CATIPLMSpacePersistencyIntent_H

#include "CATPLMIdentificationAccess.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIdentificationAccess IID IID_CATIPLMSpacePersistencyIntent;
#else
extern "C" const IID IID_CATIPLMSpacePersistencyIntent ;
#endif

class CATIAdpPLMIdentificator;
class CATPLMID;

/**
* Interface accessing persistency intent for current resolution space
*/
class ExportedByCATPLMIdentificationAccess CATIPLMSpacePersistencyIntent: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Checks if space contains Created / modified or Deleted components.
  *
  * @param oDirty
  *        The dirty status
  * @return
  *   S_OK if request succeeded <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT IsSpaceDirty (CATBoolean & oDirty) const = 0;

  /**
  * Checks if component is registered as to be deleted
  *
  * @param iIdentifier [in]
  *   Identifier of PLM components.
  *
  * @param oToBeDeleted
  *   TRUE : component is registered as to be deleted.
  *   FALSE : component is not registered as to be deleted.
  * 
  * @return
  *   S_OK if request succeeded <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT IsComponentToBeDeleted (const CATPLMID & iPLMID, CATBoolean & oToBeDeleted) const = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
