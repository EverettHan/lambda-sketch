//===================================================================
// COPYRIGHT Dassault Systemes 2012/06/12
//===================================================================
// CATVidMdlDynamicListAdapter.h
// Header definition of class CATVidMdlDynamicListAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/06/12 Creation: Code generated by the 3DS wizard  VV6
//===================================================================

#ifndef CATVidMdlDynamicListAdapter_H
#define CATVidMdlDynamicListAdapter_H

#include <VisuDialog.h>
#include <CATVidMdlListAdapter.h>

/** @ingroup groupVidModelViewModel
 * CATVidMdlDynamicListAdapter is an adapter class that eases the communication
 * between an existing model with the CID list control. Furthermore, it allows
 * also to create dynamic models, i.e., models that load their elements when
 * needed.
 *
 *
 * The member function dedicated to the modification of the model (as inserting
 * or removing an element from the model) are not implemented and do nothing.
 * This is because as it's an existing model, modifications on it are performed
 * by others functions.
 *
 *
 * To use this interface, you need to re-implement the following member functions:
 * GetNumberOfItems and GetItem. The first one must return the number of elements
 * contained inside the model. As it is called regularly, its implementation must
 * be as fast as possible. The second one is reponsible to return a particular
 * item stored inside the list given its index.
 *
 *
 * Optionnaly, you can implement the GetIntrospectable member function. This member
 * function must be implemented as soon as your object stored inside the list is not
 * introspectable by CID (for example, if it is a classic CATBaseUnknown). In that case
 * you must implement this member function which is reponsible to build an introspectable
 * object that contains the property you want to display for this item. To do that
 * the input corresponds to the CATBaseUnknown stored inside your model.
 *
 */
class ExportedByVisuDialog CATVidMdlDynamicListAdapter : public CATVidMdlListAdapter
{
  CATDeclareClass;
public:
  /** Default constructor */
  CATVidMdlDynamicListAdapter ();
  /** Destructor */
  virtual ~CATVidMdlDynamicListAdapter ();

  /**
   * Get the number of elements contained inside this model.
   *
   * @return the number of elements contained inside this model.
   */
  virtual int GetNumberOfItems() = 0;

  /**
   * Get the item located at the given position inside the model.
   *
   * @param i_position the position inside the model of the item to retrieve.
   *
   * @return the item located at the given position or NULL_var if no item
   * can be found.
   */
  virtual CATBaseUnknown_var GetItem(int i_position) = 0;

  /**
   * @copydoc CATIVidMdl#GetIntrospectable
   *
   * You should re-implement this member function as soon as the elements
   * of your model are not introspectable by CID.
   */
  virtual CATISYPIntrospectable_var GetIntrospectable(const CATBaseUnknown_var & i_item);

  /**
   * @copydoc CATIVidMdl#HasIndex
   */
  virtual int HasIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#CreateIndex
   */
  virtual CATVidMdlIndex CreateIndex(int i_row, int i_column, const CATVidMdlIndex & i_parent);
  /**
   * @copydoc CATIVidMdl#GetRowCount
   */
  virtual int GetRowCount(const CATVidMdlIndex & i_index);
  /**
  * @copydoc CATIVidMdl#GetColumnCount
   */
  virtual int GetColumnCount(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetElement
   */
  virtual CATBaseUnknown_var GetElement(const CATVidMdlIndex & i_index);
  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();



private:
  // Copy constructor and equal operator are disabled
  CATVidMdlDynamicListAdapter (const CATVidMdlDynamicListAdapter &);
  CATVidMdlDynamicListAdapter& operator=(const CATVidMdlDynamicListAdapter&);
};

#endif
