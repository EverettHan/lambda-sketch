//===================================================================
// COPYRIGHT Dassault Systemes 2010/02/23
//===================================================================
// PLMIFctIdPortsMappingServices.h
// Header definition of class PLMIFctIdPortsMappingServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/02/23 Creation: Code generated by LVT
//===================================================================
#ifndef PLMIFctIdPortsMappingServices_H
#define PLMIFctIdPortsMappingServices_H

/**
 * @level Protected
 * @usage U3
 */

// --- PLMModelerBaseInterfaces framework
#include "CATPLMModelerBaseInterfaces.h"

// --- System framework
#include "CATBaseUnknown.h"

// --- Forward declaration
class CATIPLMNavReference;

extern ExportedByCATPLMModelerBaseInterfaces  IID IID_PLMIFctIdPortsMappingServices ;


/**
 * Declaration of the component to instantiate to get a handler on this interface.
 */
#define PLMFctIdPortsMappingServicesComponent "PLMFctIdPortsMappingServices"

/**
 * Interface that computes a mapping between Ports based on their Functional Identifications. <br>
 * This mapping is used at reroute after a Replace operation.
 *
 * @example
 *  PLMIFctIdPortsMappingServices *pPortsMappingServices = NULL; <br>
 *  HRESULT Hr = ::CATInstantiateComponent(PLMFctIdPortsMappingServicesComponent, IID_PLMIFctIdPortsMappingServices, (void **)&pPortsMappingServices); <br>
 *  if(SUCCEEDED(Hr) && pPortsMappingServices) <br>
 *  { <br>
 *    ... <br>
 *    pPortsMappingServices->Release(); <br>
 *    pPortsMappingServices = NULL; <br>
 *  } <br>
 */
class ExportedByCATPLMModelerBaseInterfaces PLMIFctIdPortsMappingServices: public CATBaseUnknown
{
  CATDeclareInterface;

public:
    /**
     * Sets the context of the Replace operation. <br>
     *
     *  @param  ipReplacedReference
     *      The Reference to be replaced. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  ipReplacingReference
     *      The Reference that replace the replaced reference. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT SetContextAtReplace(CATIPLMNavReference *ipReplacedReference, CATIPLMNavReference *ipReplacingReference) = 0;

    /**
     * Returns the Port of the replacing Reference that matches the provided Port of the replaced Reference. <br>
     * It several Ports is matching the given Port, no one is returned.
     *
     *  @param  ipReplacedReferencePort
     *      A Port of the replaced Reference. <br>
     *      Input Parameter. <br>
     *      This parameter MUST NOT be provided by caller as NULL. This method returns an error otherwise.
     *  @param  opReplacingReferencePort  [out, CATBaseUnknown#Release]
     *      A Port of the replacing Reference. <br>
     *      Output Parameter. <br>
     *      This parameter MUST be provided by caller as NULL. This method returns an error otherwise.
     *  @return
     *      <code>S_OK</code> if the method succeeds. <br>
     *      <code>S_FALSE</code> if the method succeeds but there is not one Port matching the provided Port (none or several). <br>
     *      <code>E_INVALIDARG</code> if parameters provided are unexpected. <br>
     *      <code>E_FAIL</code> otherwise. <br>
     */
    virtual HRESULT GetMatchingPortAtReplace(CATBaseUnknown *ipReplacedReferencePort, CATBaseUnknown *&opReplacingReferencePort) = 0;
};

//-----------------------------------------------------------------------

CATDeclareHandler(PLMIFctIdPortsMappingServices, CATBaseUnknown);

#endif
