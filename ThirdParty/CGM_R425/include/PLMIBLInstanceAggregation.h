// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// PLMIBLInstanceAggregation.h
// Define the PLMIBLInstanceAggregation interface
//
//===================================================================
// Apr 2007  Creation: Code generated by the CAA wizard DOV
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef PLMIBLInstanceAggregation_H
#define PLMIBLInstanceAggregation_H

// Export
#include "PLMBusinessLogicInterfaces.h"

// Inheritance
#include "CATBaseUnknown.h"

class CATIInstance_var;
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMBusinessLogicInterfaces IID IID_PLMIBLInstanceAggregation;
#else
extern "C" const IID IID_PLMIBLInstanceAggregation;
#endif

/**
* Interface to launch the integration of the business logic definition related to the instance aggregation operation.
*/
class ExportedByPLMBusinessLogicInterfaces PLMIBLInstanceAggregation: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** List of supported operation Id.*/
  enum OperationId {
    InstanceAggregation = 0,
    ReplaceReference = 1
  };

  /**
  * Tells whether the aggregation of a PLM instance under a PLM reference is a valid operation from the business logic point of view.
  *
  * @param iOperationId
  *   Operation Id to differentiate the contextual usage. Authorized values are:
  *   <ul>
  *       <li> PLMIBLInstanceAggregation::InstanceAggregation (for Instance Aggregation) </li>
  *       <li> PLMIBLInstanceAggregation::ReplaceReference (for Replace Reference) </li>
  *   </ul>
  *
  * @param iAggregatingReference
  *    The PLM reference which will aggregate the PLM instance if the authorization is granted (OperationId = InstanceAggregation),
  *    or the PLM reference which aggregates the PLM instance which reference will be replaced if the authorization is granted (OperationId = ReplaceReference)
  *
  * @param iReferenceToInstantiate
  *    The PLM reference which will be instantiated and aggregated if the authorization is granted (OperationId = InstanceAggregation),
  *    or the PLM reference which will replace the existing one (OperationId = ReplaceReference)
  *
  * @param iExistingInstance
  *    Unused. Must be set to NULL_var (OperationId = InstanceAggregation)
  *    The PLM instance which for which is reference will be changed (OperationId = ReplaceReference)
  *
  * @return
  *   <ul>
  *       <li> S_OK      if the business logic is successfully integrated and the operation is authorized</li>
  *       <li> S_FALSE   if their is no business logic to integrate </li>
  *       <li> E_FAIL    if the operation is not authorized or an error occurs. The following error classes and error identifiers can be associated with:
  *           <ul>
  *               <li>   @error PLMBLInstanceAggregationError PLMBLInstanceAggregationError::RunCheck::InternalError
  *                      The business logic access service failed
  *               </li>
  *               <li>   @error PLMBLInstanceAggregationError PLMBLInstanceAggregationError::RunCheck::ValidationError
  *                      The operation is not authorized
  *               </li>
  *               <li>   @error PLMBLInstanceAggregationError PLMBLInstanceAggregationError::RunCheck::ExecutionError
  *                      A business logic definition execution failed
  *               </li>
  *           </ul>
  *       </li>
  *   </ul>
  */
  virtual HRESULT RunCheck(PLMIBLInstanceAggregation::OperationId iOperationId,
    CATIInstance_var & iAggregatingReference,
    CATIInstance_var & iReferenceToInstantiate,
    CATIInstance_var & iExistingInstance) = 0;

  /** @deprecated  V6R2011x */
  virtual HRESULT RunCheck(CATIInstance_var & iAggregatingReference,
    CATIInstance_var & iReferenceToInstantiate) = 0;

};

#endif
