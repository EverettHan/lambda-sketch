// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATVizOptimizedVertexBuffer.h
// Header definition of CATVizOptimizedVertexBuffer
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2003  Creation: Code generated by the CAA wizard  svq
//===================================================================
#ifndef CATVizOptimizedVertexBuffer_H
#define CATVizOptimizedVertexBuffer_H

#ifndef NULL
#define NULL 0
#endif 

#include "SGInfra.h"

#include "CATVizVertexBuffer.h"
#include "list.h"

class CATStreamer;

#define MASK_hasTextures0           0x7FFFFFFF // 01111111111111111111111111111111
#define MASK_hasTextures1           0x80000000 // 10000000000000000000000000000000
#define MASK_numTexCoords0          0x9FFFFFFF // 10011111111111111111111111111111
#define MASK_numTexCoords1          0x60000000 // 01100000000000000000000000000000
#define MASK_numAllocatedTexCoords0 0xE7FFFFFF // 11100111111111111111111111111111
#define MASK_numAllocatedTexCoords1 0x18000000 // 00011000000000000000000000000000
#define MASK_hasUV0                 0xFBFFFFFF // 11111011111111111111111111111111
#define MASK_hasUV1                 0x4000000  // 00000100000000000000000000000000
#define MASK_hasTanBinorm0          0xFDFFFFFF // 11111101111111111111111111111111
#define MASK_hasTanBinorm1          0x2000000  // 00000010000000000000000000000000
#define MASK_refCount               0x1FFFFFF  // 00000001111111111111111111111111

//-----------------------------------------------------------------------

template <class Buffer,class MutableBuffer>
class l_CATVizVertexBufferEditHelperSpec;

class CATVizOptimizedMutableVertexBuffer;

/**
* Describe your class here.
* <p>
* Using this prefered syntax will enable mkdoc to document your class.
*/
class ExportedBySGInfra CATVizOptimizedVertexBuffer : public CATVizVertexBuffer
{
  friend class l_CATVizVertexBufferEditHelperSpec<CATVizOptimizedVertexBuffer,CATVizOptimizedMutableVertexBuffer>;
public:

  /** @nodoc */
  virtual unsigned int AddRef();
  /** @nodoc */
  virtual unsigned int Release();
  /** @nodoc */
  virtual unsigned int GetRefCount() const;

  /** @nodoc */
  virtual unsigned int GetNumberOfVertices() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfNormals() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextures() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinates() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfUV() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfTangents() const;
  /** @nodoc */
  virtual unsigned int GetNumberOfBinormals() const;
  
  /** @nodoc */
  virtual float const *GetVerticesReadOnly() const;
  /** @nodoc */ 
  virtual float const *GetNormalsReadOnly() const;
  /** @nodoc */ 
  virtual float const *GetTexturesReadOnly() const;
  /** @nodoc */ 
  virtual float const *GetUVReadOnly() const;
  /** @nodoc */ 
  virtual float const *GetTangentsReadOnly() const;
  /** @nodoc */ 
  virtual float const *GetBinormalsReadOnly() const;

  /** @nodoc */
  virtual int HasVertices() const;
  /** @nodoc */
  virtual int HasNormals() const;
  /** @nodoc */
  virtual int HasTextures() const;
  /** @nodoc */
  virtual int HasUV() const;
  /** @nodoc */
  virtual int HasTangents() const;
  /** @nodoc */
  virtual int HasBinormals() const;
  /** @nodoc */
  virtual int HasExtraTCsets() const;

  /** @nodoc */
  virtual HRESULT ComputeTextures(const CATMappingOperator & iOp, const CATBaseUnknown * iCell = NULL, const float * iPlanarNormal = NULL);
  /** @nodoc */
  virtual HRESULT ComputeTangentBinormal(CATViz3DFace * );

  /** @nodoc */
  virtual void EmptyVBO(unsigned int& newVBOCreation);

  /** @nodoc */
  inline void Get(unsigned int & nbVertices, unsigned int & nbNormals, float * & vertices, float * & normals);

  /** @nodoc */
  virtual unsigned int GetNumberOfTextureCoordinatesInFile() const;
 
  /** @nodoc */
  unsigned int GetSizeInBytes(int iIncludeStructuralSize = 1);

  // MULTI TEXTURING MANAGEMENT

  /** @nodoc */
  virtual unsigned int GetNumberOfExtraTextureCoordinateSets() const;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetExtraTextureCoordinateSetConst(const unsigned int iSetIndex) const;
  /** @nodoc */
  virtual CATVisTextureCoordinateSet const* GetTextureCoordinateSetConst(const CATUnicodeString& iIdentifier) const;
   /** @nodoc */
  //virtual HRESULT SetTextureCoordinateSetToRender(const CATUnicodeString& iIdentifier);
  /** @nodoc */
  //virtual CATUnicodeString GetTextureCoordinateSetToRender() const;

protected:
  /** @nodoc */
  CATVizOptimizedVertexBuffer();
  /** @nodoc */
  CATVizOptimizedVertexBuffer (unsigned int nbVertices, unsigned int nbNormals, const float *vertices, const float *normals = NULL, const float *textures = NULL, const int textureFormat = 0, const float *uv = NULL, const float *tanBinorm = NULL);
  
  /** @nodoc */
  virtual HRESULT Allocate(unsigned int nbVertices,unsigned int nbNormals, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm, int clear = 1);
  
  /** @nodoc */
  virtual float *GetVertices() const;
  /** @nodoc */
  virtual float *GetNormals() const;
  /** @nodoc */
  virtual float *GetTextures() const;
  /** @nodoc */
  virtual float *GetUV() const;
  /** @nodoc */
  virtual float *GetTangents() const;
  /** @nodoc */
  virtual float *GetBinormals() const;
  
  /** @nodoc */
  virtual HRESULT SetTextures(const float *iTextureCoordinates, const int iNbCoordinates, int iAllocMode);
  
  /** @nodoc */
  virtual HRESULT SetUV(const float *iUV, int iAllocMode);
  
  /** @nodoc */
  virtual void Empty();

  /** @nodoc */
  inline void SetData(unsigned int nbVertices,unsigned int nbNormals, float *data, float *extended_data, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm);   

  virtual l_CATVizVertexBufferEditHelper* GetEditHelper_Impl();

  void Swap(CATVizOptimizedVertexBuffer* iBuffer);

  /** @nodoc */
  virtual HRESULT AddTextureCoordinateSet(const CATVisTextureCoordinateSet* iSet);
  /** @nodoc */
  virtual void ResetTextCoordSets();
  
  unsigned int _nbVertices;
  unsigned int _nbNormals;
  
  float *_data;
  float *_extended_data;
  
  //unsigned int _hasTextures:1;
  //unsigned int _numTexCoords:2;
  //unsigned int _numAllocatedTexCoords:2;
  //unsigned int _hasUV:1;
  //unsigned int _hasTanBinorm:1;
  //unsigned int _refCount:25;
  std::atomic<unsigned int> _ShareStruct;

private:

  // list of TC sets
  // 1. LEGACY_UV_SET : legacy 'uv' set
  // 2. DEFAULT_TC_SET : original tc set
  // n. additional tc set
  list<CATVisTextureCoordinateSet> _texCoordSets;

  CATVizOptimizedVertexBuffer (CATVizOptimizedVertexBuffer &);
  CATVizOptimizedVertexBuffer& operator=(CATVizOptimizedVertexBuffer&);

  inline void Set_hasTextures(int ihasTextures);
  inline void Set_numTexCoords(int inumTexCoords);
  inline void Set_numAllocatedTexCoords(int inumAllocatedTexCoords);
  inline void Set_hasUV(int ihasUV);
  inline void Set_hasTanBinorm(int ihasTanBinorm);

  inline unsigned int Get_numTexCoords() const;
  inline unsigned int Get_numAllocatedTexCoords() const;

protected:
  ~CATVizOptimizedVertexBuffer ();
};


class ExportedBySGInfra CATVizOptimizedMutableVertexBuffer : public CATVizOptimizedVertexBuffer
{
public:
  CATVizOptimizedMutableVertexBuffer();
  /** @nodoc */
  CATVizOptimizedMutableVertexBuffer (unsigned int nbVertices, unsigned int nbNormals, const float *vertices, const float *normals = NULL, const float *textures = NULL, const int textureFormat = 0, const float *uv = NULL, const float *tanBinorm = NULL);

  inline void Swap(CATVizOptimizedMutableVertexBuffer* iBuffer){CATVizOptimizedVertexBuffer::Swap(iBuffer);}

protected:
  virtual l_CATVizVertexBufferEditHelper* GetEditHelper_Impl();
  virtual ~CATVizOptimizedMutableVertexBuffer() = default;
};

//-----------------------------------------------------------------------
inline void CATVizOptimizedVertexBuffer::Get(unsigned int & nbVertices, unsigned int & nbNormals, float * & vertices, float * & normals)
{
  nbVertices = _nbVertices;
  nbNormals = _nbNormals;
  vertices = _data;
  normals = &_data[3*_nbVertices];
}

inline void CATVizOptimizedVertexBuffer::SetData(unsigned int nbVertices,unsigned int nbNormals, float *data, float *extended_data, int hasTextures, int textureFormat, int hasUV, int hasTanBinorm)
{
  _nbVertices = nbVertices;
  _nbNormals = nbNormals;

  Set_hasTextures(hasTextures);
  Set_numTexCoords(textureFormat);
  Set_hasUV(hasUV);
  Set_hasTanBinorm(hasTanBinorm);

  _data = data;
  _extended_data = extended_data;
}

inline void CATVizOptimizedVertexBuffer::Set_hasTextures(int ihasTextures)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
		newVal = ((expectedVal & MASK_hasTextures0) | (ihasTextures << 31));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

inline void CATVizOptimizedVertexBuffer::Set_numTexCoords(int inumTexCoords)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
        newVal = ((expectedVal & MASK_numTexCoords0) | (inumTexCoords << 29));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

inline void CATVizOptimizedVertexBuffer::Set_numAllocatedTexCoords(int inumAllocatedTexCoords)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
		newVal = ((expectedVal & MASK_numAllocatedTexCoords0) | (inumAllocatedTexCoords << 27));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

inline void CATVizOptimizedVertexBuffer::Set_hasUV(int ihasUV)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
		newVal = ((expectedVal & MASK_hasUV0) | (ihasUV << 26));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

inline void CATVizOptimizedVertexBuffer::Set_hasTanBinorm(int ihasTanBinorm)
{
    unsigned int expectedVal = 0;
    unsigned int newVal = 0;
	// this loop to ensure that the value of _ShareStruct has not been modified by another thread during newVal calculation
    expectedVal = _ShareStruct.load();
    do {
		newVal = ((expectedVal & MASK_hasTanBinorm0) | (ihasTanBinorm << 25));
    } while (!_ShareStruct.compare_exchange_strong(expectedVal, newVal));
}

inline unsigned int CATVizOptimizedVertexBuffer::Get_numTexCoords() const
{
	return ((_ShareStruct.load() & MASK_numTexCoords1) >> 29);
}

inline unsigned int CATVizOptimizedVertexBuffer::Get_numAllocatedTexCoords() const
{
	return ((_ShareStruct.load() & MASK_numAllocatedTexCoords1) >> 27);
}

#endif
