// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIObjectRightsRuntime.h
// This interface is implemented by objects that can be edited, browsable,
// runnable or not. 
//
//===================================================================
//
// Usage notes:
// use this interface to know the editable, browsable or runnable status
// of the object 
//
//===================================================================
//
//  Jan 2003  Creation: Code generated by the CAA wizard  tdv
//===================================================================
#ifndef CATIObjectRightsRuntime_H
#define CATIObjectRightsRuntime_H

#include "KnowledgeItf.h"
#include "CATBaseUnknown.h"

#include "CATUnicodeString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByKnowledgeItf IID IID_CATIObjectRightsRuntime;
#else
extern "C" const IID IID_CATIObjectRightsRuntime ;
#endif

//------------------------------------------------------------------

/**
* This interface can be used to check if the current object is editable, 
* browsable, or runnable.
* <p>
*/
class ExportedByKnowledgeItf CATIObjectRightsRuntime: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	
    /**
	* Tests if the object is editable.
	* @param oResult 
	* 0 if the object is not editable, 1 else
	* @param oExplain
	* If oExplain is not NULL when calling method, it contains the reason why the object is not editable.
	* @return
	* E_FAIL if the method fails, S_OK else
	*/
	virtual HRESULT IsEditable(int& oResult, CATUnicodeString *oExplain = NULL) const = 0;
	
	/**
	* Tests if the object is browsable.
	* @param oResult 
	* 0 if the object is not browsable, 1 else
	* @param oExplain
	* If oExplain is not NULL when calling method, it contains the reason why the object is not browsable.
	* @return
	* E_FAIL if the method fails, S_OK else
	*/
	virtual HRESULT IsBrowsable(int& oResult, CATUnicodeString *oExplain = NULL) const = 0;
	
	/**
	* Tests if the object is runnable.
	* @param oResult 
	* 0 if the object is not runnable, 1 else
	* @param oExplain
	* If oExplain is not NULL when calling method, it contains the reason why the object is not runnable.
	* @return
	* E_FAIL if the method fails, S_OK else
	*/
	virtual HRESULT IsRunnable(int& oResult, CATUnicodeString *oExplain = NULL) const = 0;
	
	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

CATDeclareHandler(CATIObjectRightsRuntime, CATBaseUnknown);

#endif
