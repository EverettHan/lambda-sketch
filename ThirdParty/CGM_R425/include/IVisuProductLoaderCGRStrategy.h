//===================================================================
// COPYRIGHT Dassault Systemes 2021/02/05
//===================================================================
// VisuProductLoader.cpp
// Header definition of class VisuProductLoader
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/02/05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef IVisuProductLoaderCGRStrategy_H
#define IVisuProductLoaderCGRStrategy_H

#include "CATVisItf.h"

#include "CATBaseUnknown.h"

#include <utility>
#include <string>
#include <vector>
#include <functional>
#include <tuple>
#include <memory>

class CATRep;
class CATUnicodeString;
class CATMathPoint;
class CATSGManager;


extern ExportedByCATVisItf IID IID_IVisuProductLoaderCGRStrategy;


/**
* @class IVisuProductLoaderCGRStrategy is an abstract interface to external techno dependancies.
* Its implementations load CGR based on different technologies
* 3DExperience Native can be based on VVS and LDH.
* Cloud cannot!
*/
class ExportedByCATVisItf IVisuProductLoaderCGRStrategy : public CATBaseUnknown
{
  CATDeclareInterface;
public:
  /**
   * @brief push a CGR
   */
  virtual HRESULT PushCGR(const CATUnicodeString& iID, const CATUnicodeString& iURL, const CATMathPoint& iMin, const CATMathPoint& iMax) = 0;

  virtual bool IsBadAuthentication() const = 0;

  virtual bool IsPLMCache() const = 0;

  virtual void SetAuthenticationToValid() = 0;

  virtual unsigned int JobsSize() const = 0;

  virtual CATSGManager* GetSGManager()  = 0;

  /**
  * @brief pop CGRs
  */
  virtual HRESULT PopCGR(unsigned int iSize, std::vector<std::pair<std::string, CATRep*>>& oLoadedCGRs) = 0;

  /**
  * @ Load a texture
  **/
  virtual HRESULT LoadTexture(const CATUnicodeString& iID, const CATUnicodeString& iURL, std::shared_ptr<char>& oBuffer, unsigned int& oReceivedLen) = 0;

  /**
  * add a callback to execute when the CGR is loaded.
  * @param iMaterialApplication the material application to apply
  * @param iCallbacks callback to apply on the root rep of the CGR.
  */
  virtual HRESULT PushOnLoadedCallback(const CATUnicodeString& iID, const std::function<HRESULT(CATRep*)>& iCallback) = 0;

};

//-----------------------------------------------------------------------
CATDeclareHandler(IVisuProductLoaderCGRStrategy, CATBaseUnknown);


#endif
