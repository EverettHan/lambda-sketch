// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMAttributeBlockAccess.h
// Define the CATIPLMAttributeBlockAccess interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2009  Creation: Code generated by the CAA wizard  XJT
//===================================================================
#ifndef CATIPLMAttributeBlockAccess_H
#define CATIPLMAttributeBlockAccess_H

/**
* @level Protected
* @usage U3
*/

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMAttributeBlockAccess;
#else
extern "C" const IID IID_CATIPLMAttributeBlockAccess ;
#endif

class CATOmxKeyValueBlock;
class CATOmxAny;
class CATString;
class CATPLMTypeId;
class CATOmxKeyString;
class CATPLMType;

//------------------------------------------------------------------

/**
* Interface to access blocks of PLMAttributes directly from Records.
*
*/
class ExportedByCATPLMServicesItf CATIPLMAttributeBlockAccess: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
    * Returns the block of attribute.
    * @param oAttrBlock [out]
    *   The block of attributes.
    * @param iPLMExtension [in]
    *   The extension on which the block should be accessed. If NULL, the block is the main attribute block.
    *   The list of extension can be found in CATIPLMRecordRead.ListExtensionTypes
    * @return
    *   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.     
    */
    virtual HRESULT GetAttributeBlock ( CATOmxKeyValueBlock &oAttrBlock, const CATString * iPLMExtension = NULL ) = 0;


    /**
    * Returns the block of attribute.
    * @param oAttrBlock [out]
    *   The block of attributes.
    * @param iPLMExtension [in]
    *   The extension on which the block should be accessed. If CATPLMTypeId_Null, the block is the main attribute block.
    * @return
    *   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.     
    */
    virtual HRESULT GetAttributeBlock ( CATOmxKeyValueBlock &oAttrBlock , const CATPLMTypeId &iPLMExtension ) = 0;

    /**
    * Returns the block of attribute.
    * @param oAttrBlock [out]
    *   The block of attributes.
    * @param iPLMExtension [in]
    *   The extension on which the block should be accessed. If CATPLMTypeId_Null, the block is the main attribute block.
    * @return
    *   <code>S_OK</code> if everything ran ok, otherwise E_FAIL.     
    */
    virtual HRESULT GetAttrBlock ( CATOmxKeyValueBlock &oAttrBlock , CATPLMType* ipPLMExtension = NULL ) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
