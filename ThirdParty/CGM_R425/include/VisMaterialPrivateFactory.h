//===================================================================
// COPYRIGHT Dassault Systems 2018-10-02
//===================================================================
// VisMaterialPrivateFactory.cpp
// Header definition of class VisMaterialPrivateFactory
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018-10-02 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisMaterialPrivateFactory_H
#define VisMaterialPrivateFactory_H

#include "SGInfra.h"
#include "VisMaterialFactory.h"

class VisMaterialApplication;
class VisMaterialTestServices;
class VisMaterialHolder;
class VisMaterialPhysMaterialHolder;
class CATVrml2Options;
class VisMaterialSerializer;
class VisMaterial3DXMSerializer; // can be removed after migration to TypeDesc
class VisMaterialSerializer3DXM; // can be removed after migration to TypeDesc

namespace stlr {
  namespace translator {
    class MaterialTranslator;
  }
};

namespace vis::gltf {
  class MaterialTranslator;
};

namespace Vis {
  class MaterialProvider;
}
class XCTImpostorBakingInt;


/**
* This class lets you get any material model (including PLM materials) and
* get VisMaterial of any material model in return from GetVisMaterialFromWrapper,
* which is not possible using VisMaterialFactory
*/
class ExportedBySGInfra VisMaterialPrivateFactory : public VisMaterialFactory
{
  friend VisMaterialSerializer;
  friend VisMaterialApplication;
  friend VisMaterialHolder;
  friend VisMaterialPhysMaterialHolder;
  friend VisMaterialTestServices;
  friend CATRmaMaterialConnectionRenderingExt;
  friend CATRmaOCAVisuServices;
  friend class CATRmaTstVisMaterialSerializer;        // only to ease odt
  friend stlr::translator::MaterialTranslator;  // XCTStellarTranslator get PerfMat
  friend vis::gltf::MaterialTranslator;         // VisGltf get PerfMat
  friend CATVrml2Options;                       // for GetPerformanceMaterial
  friend XCTImpostorBakingInt;                  // GetPerformanceMaterial (to be removed), ask N5P
  friend Vis::MaterialProvider;                 // Creates material models from files (Axf)
  friend VisMaterial3DXMSerializer;             // for GetPerformanceMaterial
  friend VisMaterialSerializer3DXM;             // for GetPerformanceMaterial
  friend class VisGraphicMaterial;              // VisuToolkit integration;
  friend class CATNeuMaterialUtils;
  friend class l_VisMaterialPropertiesHelper;   // GetPerformanceMaterial

private:
  // Standard constructors and destructors
  // -------------------------------------
  VisMaterialPrivateFactory();
  virtual ~VisMaterialPrivateFactory();

  // true for this class
  virtual CATBoolean IsAllowedToReturnAnyModel() const { return true; };

  /**
  * Get any material model: Not to use by everyone
  */
  [[deprecated("\n\n\tDEPRECATED method:\n\tPKO1, Jan.2020: Use GetMaterialModel(const VisMaterialModelVersion::TypeDesc iTypeDesc) instead\n")]]
  const VisMaterialModel* GetMaterialModel(const CATUnicodeString& iType);

  /**
  * Get any material model: Not to use by everyone
  */
  const VisMaterialModel* GetMaterialModel(const VisMaterialModelVersion::TypeDesc& iTypeDesc) const;

  /**
  * DO NOT USE THIS METHODE.
  * This methode is for internal use only. It will be removed soon.
  */
  VisMaterial* ConvertGraphicMaterial(const CATGraphicMaterial* ipMadel);

  /**
  * DO NOT USE THIS METHODE.
  * This methode is for internal use only. It will be removed soon.
  */
  void ConvertMaterialApplication(VisMaterialApplication *pVisMat);

  /**
  * Creates another version of the given material using native material model for the rasterizer.
  * The pointer to the performance version is stored in the source material with automatic updates of the performance version
  */
  const VisMaterial* GetPerformanceMaterial(const VisMaterial& ipMat, bool forceEvisuPerformance = false);

  /**
  * This experimental/debug method! Don't use it yet
  * Sets the manually created performance material
  */
  HRESULT SetCustomPerformanceMaterial(const VisMaterial& iOrigMat, VisMaterial* iPerfMat);

  // Copy constructor and equal operator
  // -----------------------------------
  VisMaterialPrivateFactory(VisMaterialPrivateFactory &);
  VisMaterialPrivateFactory& operator=(VisMaterialPrivateFactory&);

};

//-----------------------------------------------------------------------

#endif
