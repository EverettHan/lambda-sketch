// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIExposeObject.h
// This interface is to be implemented by V6 CAA objects that want to be exposed to Knowledge Language and Edit/Find
// It is reserved for CAA parner objects. It musn't be used for DS internal objects
// Another interface exists for internal objects. 
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2008  Creation: Code generated by the CAA wizard  FRH
//===================================================================
#ifndef CATIExposeObject_H
#define CATIExposeObject_H

/** 
* @CAA2Level L1
* @CAA2Usage U4 CATKweExposeObjectAdapter
*/

#include "CATLifSpecs.h"
#include "CATICkeObject.h"
#include "CATUnicodeString.h"
#include "CATListValCATIType.h"
#include "CATIValue.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATIExposeObject;
#else
extern "C" const IID IID_CATIExposeObject ;
#endif


/**   
 * Interface to declare Knowledgeware access on objects. Reserved for CAA Partner.<br> 
 *
 * <b>Role</b>: this interface allows an object to publish its types and attributes values
 * to KnowledgeWare and to the Edit/Find functionality by granting objects with type information.
 * <br>
 * Implementations of that interface should derive from @href CATKweExposeObjectAdapter.
 *
 * <p><b>BOA information</b>: this interface CANNOT be implemented
 * using the BOA (Basic Object Adapter).
 * To know more about the BOA, refer to the CAA Encyclopedia home page.
 * Click Middleware at the bottom left, then click the Object Modeler tab page.
 * Several articles deal with the BOA.</p>

 *
 * @see CATICkeObject,CATIType,CATIValue
 */
class ExportedByCATLifSpecs CATIExposeObject: public CATICkeObject
{
  CATDeclareInterface;

  public:
	
	/**
	* Returns the main Knowledge type of an object.
	*
	* An AddRef is done.
	* @return  [CATBaseUnknown#Release]  the main type of the object.
	*/
	virtual CATIType* Type() const = 0;

	/**
	* Casts this object to another one supporting the given type.
	*
	* An AddRef is done, if not NULL.
	* @param iType type we want to cast the object to.
	* @return  [CATBaseUnknown#Release]  the object supporting this type (may be NULL or self).
	*/
	virtual CATICkeObject * IsSupporting( const CATIType_var& iType ) const = 0;

    /**
	* Fills the given list with types supported by this object.
	* <br>
	* The list in input may not be empty. This method is supposed to add some types to the list.<br>
	* At least the main type of the object is supposed to be in this list
	*
	* @param iolListOfCATIType the filled list.
	* @return classic HRESULT
	*/
	virtual HRESULT ListSupportedTypes( CATListValCATIType_var& iolListOfCATIType ) const = 0;

	/**
	* Sets an attribute value.<br>
	* The contract of this method is to copy the value in input in its internal attribute value.<br>
	* If the value passed as argument is Unset, the contract of this method is to Unset the attribute value (if it makes sense).<br>
	*
	* @param iKey Name of the attribute.
	* @param iValue Value of the attribute. 
	* @return classic HRESULT
	*/
	virtual HRESULT SetValue( const CATUnicodeString& iKey,
							  const CATIValue_var& iValue ) = 0;

	/**
	* Gets an attribute value.<br>
	* The contract of this method is to retrieve the value from its internal attribute value and return it.<br>
	* In some contexts a copy may be created. But if the attribute is a parameter, the method is supposed to return the parameter itself.<br>
	* If the internal attribute value is Unset, the contract of this method is to Unset the attribute value that is returned.<br>
	*
	* @param iKey Name of the attribute.
	* @return  [CATBaseUnknown#Release] iValue Value of the attribute (an AddRef is done, if not NULL).
	*/
	virtual CATIValue* GetValue( const CATUnicodeString& iKey ) = 0;
	
	/**
    * Returns the owner of the object (in terms of tree aggregation.<br> 
	* May be NULL. An AddRef is done
	* @return  [CATBaseUnknown#Release] the owner of the object..
	*/
	virtual CATICkeObject* GetOwner() const = 0;

};

CATDeclareHandler(CATIExposeObject,CATICkeObject);

//------------------------------------------------------------------

#endif
