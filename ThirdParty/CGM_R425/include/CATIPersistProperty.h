/**
 * @level Private
 * @usage U3
 */
// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPersistProperty.h
// Define the CATIPersistProperty interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2004  Creation: Code generated by the CAA wizard  pbv
//===================================================================
#ifndef CATIPersistProperty_H
#define CATIPersistProperty_H

#include "CATObjectModelerItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATObjectModelerItf IID IID_CATIPersistProperty;
#else
extern "C" const IID IID_CATIPersistProperty ;
#endif

class CATStorage;

/**
*    Allows to manage non-simple properties in storage objects.
*
*    Omb can manage simple and non-simple properties. Simple properties
*    are a stored in a single stream. Non-simple properties are stored
*    in severals substreams, substorages.
*
*    Property (Simple)
*       |
*       +-- Attr1          --- saves in ---> \003ICATPropertySets
*       +-- Attr2          --- saves in ---> \003ICATPropertySets
*       +-- Attr3          --- saves in ---> \003ICATPropertySets
*
*    Property (Non-Simple)                   
*       |                                    \003CATIPropertySets
*       +-- Attr1          --- saves in ---> \003CATIExtraPropertyStream1
*       +-- Attr2          --- saves in ---> \003CATIExtraPropertyStream1
*       +-- Attr3          --- saves in ---> \003CATIExtraPropertyStorage2
*                                            \003CATIExtraPropertyStream2
*
*    In the storage object, a stream is created named "\003CATIPropertySets".
*    This is the primary stream of the property set, and holds all simple
*    property values. Non-simple property values (streams and storages) are
*    stored under the same storage object as substreams and storages. In this
*    case, the primary stream contains only the property name.
*
*    e.g.: \003ICATPreview, \003IExtraPropertyStream1, ...
*
*    These elements are entirely manages by a specific implementation that
*    support instance of CATIPersistProperty interface.
*
*    The implementation of CATIPersistProperty allows a non-simple property
*    to be stored in and loaded from compound files. The name of the sibling
*    streams and storages is determined by this implementation. When a property
*    is destroyed, a tombstone is required for deleting associated streams 
*    and storages (in your case, a CATObject is created for calling 
*    CATIPersistProperty::OnDelete). 
*
* --------------------------------------------------------------------------
*/
class ExportedByCATObjectModelerItf CATIPersistProperty: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
    * <dl>
    * <dt><b>Saves the property into the specified storage object.</b>
    *
    *  Warning : the save method should not store a copy of the
    *            passed iStorage pointer.
    *  
    * <pre>
    *   @param iStorage 
    *      open storage pointer.  
    *   @return
    *     S_OK           : succeeded
    *     E_FAIL         : Unexplained failure
    * </pre>
    * </dl>
    */
    virtual HRESULT Save (CATStorage* iStorage) = 0;
    
    /**
    * <dl>
    * <dt><b>Loads the property from the specified storage object.</b>
    *
    *  Warning : the load method should not store a copy of the
    *            passed iStorage pointer.
    *  
    * <pre>
    *   @param iStorage 
    *      open storage pointer.  
    *   @return
    *     S_OK           : succeeded
    *     E_FAIL         : Unexplained failure
    * </pre>
    * </dl>
    */
    virtual HRESULT Load (CATStorage* iStorage) = 0;
    
    /**
    * <dl>
    * <dt><b>Cleanup the storage object when the property has been deleted.</b>
    *
    *  Warning 1 : the cleanup method should not store a copy of the
    *              passed iStorage pointer.
    *  Warning 2 : the base object is not your property but a CATObject (a tombstone)
    *  
    * <pre>
    *   @param iStorage 
    *      open storage pointer.  
    *   @return
    *     S_OK           : succeeded
    *     E_FAIL         : Unexplained failure
    * </pre>
    * </dl>
    */
    virtual HRESULT OnDelete (CATStorage* iStorage) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
