//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/10/21
//===================================================================
// CATVidMdlTreeAdapter.cpp
// Header definition of class CATVidMdlTreeAdapter
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/10/21 Creation: Code generated by the 3DS wizard JV8
//===================================================================

#ifndef CATVidMdlTreeAdapter_H
#define CATVidMdlTreeAdapter_H

#include <VisuDialog.h>
#include <CATVidMdlTreeItem.h>
#include <CATVidMdlAdapter.h>
#include <CATVidMdlIndex.h>

/**
 * CATVidMdlTreeAdapter is an adapter class for CATIVidMdl interface.
 * It eases the implementation of tree based model by providing some default
 * implementation for several methods of CATIVidMdl interface.
 * To implement a tree based model, you can consider first to derive from this
 * adapter compared to directly derived from the CATIVidMdl interface.
 * Otherwise you can also directly used the standard implementation provided by
 * VID, CATVidMdlStandardTree.
 *
 * By default, this adapter considers the model as read-only. So, to implement
 * an editable model, you have to re-implement the methods that deal with
 * insertion / deletion / modification of an element.
 *
 * For the complete documentation of each member function, please refer to
 * CATIVidMdl header file.
 */
class ExportedByVisuDialog CATVidMdlTreeAdapter: public CATVidMdlAdapter
{
  CATDeclareClass;
public:
  /**
   * Default constructor.
   */
  CATVidMdlTreeAdapter ();
  /**
   * Destructor.
   */
  ~CATVidMdlTreeAdapter ();

  /**
   * @copydoc CATIVidMdl#GetModelType
   */
  virtual CATVid::ModelType GetModelType();
  /**
   * @copydoc CATIVidMdl#AssociateToView
   */
  virtual void AssociateToView(CATVidCtlAbstractItemsView * i_pView);

	/**
	* @copydoc CATIVidMdl#RemoveList
	*/
  virtual CATBoolean RemoveList(const CATSYPDynArray<CATVidMdlIndex> & i_listOfIndexes, CATBoolean i_updateAfterInsertion = TRUE);

	/**
	* @copydoc CATIVidMdl#InsertListOfRowsAt
	*/
	virtual CATBoolean InsertListOfRowsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfRows, const CATVidMdlIndex & i_parent, int i_row=-1, CATBoolean i_updateAfterInsertion = TRUE);

	/**
	* @copydoc CATIVidMdl#InsertListofColumnsAt
	*/
	virtual CATBoolean InsertListofColumnsAt(const CATSYPDynArray<CATSYPDynArray<CATBaseUnknown_var> > & i_listOfColumns, const CATVidMdlIndex & i_parent, int i_column=-1, CATBoolean i_updateAfterInsertion = TRUE);

protected:
  /**
   * @copydoc CATIVidMdl#ExportDataFromItems
   */
  virtual CATVidDnDData * ExportDataFromItems(const CATSYPDynArray<CATVidMdlIndex> & i_indexes);
  /**
   * @copydoc CATIVidMdl#CanDropData
   */
  virtual CATBoolean CanDropData(CATVidData * i_pData, CATVidDnD::Effect i_effect, const CATVidMdlIndex & i_index, const CATVidDnD::DropLocation & i_location);
  /**
   * @copydoc CATIVidMdl#DropData
   */
  virtual CATBoolean DropData(CATVidData * i_pData, CATVidDnD::Effect i_effect, const CATVidMdlIndex & i_index, const CATVidDnD::DropLocation & i_location);
  /**
   * @copydoc CATIVidMdl#GetViewportDropLocation
   */
  virtual void GetViewportDropLocation(CATVidMdlIndex & o_index, CATVidDnD::DropLocation & o_location);

  virtual void GetAllIndexesFromRoot(CATVidMdlTreeItem * i_pItem, int i_column, CATSYPDynArray<CATVidMdlIndex> & oindexesList) {};

private:
// Copy constructor and equal operator
// -----------------------------------
  CATVidMdlTreeAdapter (CATVidMdlTreeAdapter &);
  CATVidMdlTreeAdapter& operator=(CATVidMdlTreeAdapter&);

};

//-----------------------------------------------------------------------

#endif
