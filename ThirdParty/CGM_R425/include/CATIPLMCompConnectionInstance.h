// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMCompConnectionInstance.h
// Define the CATIPLMCompConnectionInstance interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2005  Creation: Code generated by the CAA wizard  jvm
//===================================================================
#ifndef CATIPLMCompConnectionInstance_H
#define CATIPLMCompConnectionInstance_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATUuid.h"
#include "PLMLevelInfo.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompConnectionInstance;
#else
extern "C" const IID IID_CATIPLMCompConnectionInstance;
#endif

class CATPLMConnectionParameters;
class CATBinary;
class CATIPLMDispConnectionToken;
class CATPLMRepositoryName;
class CATUnicodeString;
class CATIPLMSecurity;
class CATPLMPhysicalRepositoryID;

/**
* @level Protected
* @usage U3
*/

/**
* Interface belonging to the <b>Component services</b>.
* Using this level of abstraction you manipulate providers without knowing the PDM it belongs to.<br>
*
* Interface managing the connection to the repository.
*/
class ExportedByCATPLMServicesItf CATIPLMCompConnectionInstance : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  *   Returns the provider repository name .
  *   This type is the PLM Repository Name. Its format is on 4 characters. @see CATPLMRepositoryName
  *   @param  oType
  *     provider type.
  *   @return
  *     Error code of function.
  */
  virtual HRESULT GetType(CATPLMRepositoryName * oType) = 0;

  /**
  *   Returns the provider logical instance id. May be null if multi site connection is not implemented.
  *   The Logical Instance Id is the PLM Repository location. @see CATPLMID_RepositoryLocation
  *   @param oLogicalInstanceId (deletion oLogicalInstanceId expected)
  *     provider logical instance id.
  *   @return
  *     Error code of function.
  */
  virtual HRESULT InstanceId(CATUnicodeString **oLogicalInstanceId) = 0;

  /**
  * Returns the connection parameters.
  * @param  oConnectionParameters [out, CATBaseUnknown#Release]
  *   connection parameters.
  * @return
  *   Error code of function.
  */
  virtual HRESULT GetConnectionParameters(CATPLMConnectionParameters ** oConnectionParameters) = 0;

  /**
  * Returns the connection parameters as Binary stream.
  * @param  oConnectionParameters
  *   connection parameters.
  * @return
  *   Error code of function.
  */
  virtual HRESULT GetConnectionParameters(CATBinary ** oConnectionParameters) = 0;

  /**
  * Returns S_OK if ready to connect - S_FALSE if not - E_FAIL if error -
  */
  virtual HRESULT IsReadyToConnect() = 0;

  /**
  * Prepare Connect by filling connection parameters involving in the CATPLMConnectionParameters Object.
  * As far as all required parameters are not valuated, the method provides updated CATPLMConnectionParameters as output
  * @param ioConnectionParameters
  *   connection parameters. This connection parameters can be updated. Some parameters can be added to the CATPLMConnectionParameters
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>PrepareConnection is successful. Provider is ready to Connect</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Some Parameters are not valuated. Provider is not ready to Connect</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PrepareConnect(CATPLMConnectionParameters * ioConnectionParameters) = 0;

  /**
  * Prepare Connect by filling connection parameters as CATBinary
  * @param iConnectionParameters
  *   connection parameters.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>PrepareConnection is successful. Provider is ready to Connect</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Some Parameters are not valuated. Provider is not ready to Connect</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT PrepareConnect(CATBinary * iConnectionParameters) = 0;

  /**
  *   Returns S_OK if connect - S_FALSE if not - E_FAIL if error -
  */
  virtual HRESULT IsConnected() = 0;

  /**
  *   Connect to the repository for the specified connection parameters involving in the PrepareConnect.
  *
  *   @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Connection is successful.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Connection partially done.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the connection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Connect() = 0;

  /**
  *   Disconnect to the repository
  *	@return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Disconnection is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Already disconnected.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Disconnect() = 0;

  /**
  * Returns the Connection Token. If the provider is not connected and Ready to connect, this method connects to the repository
  * @param oToken
  *   Output parameter, connection token.
  * @return
  *   <ul>
  *   <li><tt>S_OK</tt>: login successful. </li>
  *   <li><tt>E_FAIL</tt>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</li>
  *  </ul>
  */
  virtual HRESULT GetConnectionToken(CATIPLMDispConnectionToken **oToken) = 0;

  /**
   * Returns the Security Policy for this connection. Depending on Security context set for this connection (@see CATPLMConnectionParameters)
   * Checks the security access to Commands. If the provider is not connected or doesn't implement Security policy, the interface is not available.
   * @param oSecurity [out, CATBaseUnknown#Release]
   *   provides run-time security services to PLM components that need to secure their data.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: successful. </li>
   *	  <li><tt>S_FALSE</tt>: ConnectionInstance is not connected or doesn't implement Security policy oSecurity is NULL</li>
   *   <li><tt>E_FAIL</tt>A problem occurs during the disconnection. get further information by using CATIPLMErrorStack</li>
   *  </ul>
   */
  virtual HRESULT GetSecurityPolicy(CATIPLMSecurity ** oSecurity) = 0;

  /**
   * Returns the Physical repository name pointed by a connection.
   * Note : A physical repository is a concept which delimit an addressing area where a PLMID is unique.
   * @param oPhysicalRepositoryName
   *   The name of the physical repository.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: successful. </li>
   *   <li><tt>E_FAIL</tt>The provider does not handle the concept of physical repository.</li>
   *  </ul>
   */
  virtual HRESULT GetPhysicalRepositoryName(CATUnicodeString &oPhysicalRepositoryName) = 0;

  /**
   * Returns the Physical repository identifier pointed by a connection.
   * Note : A physical repository is a concept which delimit an addressing area where a PLMID is unique.
   * @param oPhysicalRepositoryIdentifier
   *   The identifier of the physical repository.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: successful. </li>
   *   <li><tt>E_FAIL</tt>The provider does not handle the concept of physical repository.</li>
   *  </ul>
   */
  virtual HRESULT GetPhysicalRepositoryIdentifier(CATPLMPhysicalRepositoryID &oPhysicalRepositoryIdentifier) = 0;

  /**
   * Returns the PLM level which will be used by the connection.
   * Note : This level is computed between the levels of the client and the provider.
   * @param oLevelInfo
   *   The level to use as a reference.
   * @return
   *   <ul>
   *   <li><tt>S_OK</tt>: the provider gives a level. </li>
   *   <li><tt>S_FALSE</tt>:The provider does not give a level, the client level is returned by default.</li>
   *   <li><tt>E_FAIL</tt>:The provider is not connected, the client level is returned by default.</li>
   *  </ul>
   */
  virtual HRESULT GetPLMLevelInfo(PLMLevelInfo &oLevelInfo) = 0;

#if !defined(_WINDOWS_SOURCE) \
           /* PLMAdapter  */ || defined(__TSTCATPLMSwitchSecurityContext) || defined(__CATPLMImplAdapterBase) || defined(__TSTCATPLMxConnectSwitchSecurityContext_M1) \
           /* Integration */ || defined(__CATPLMIntegrationBase) || defined(__CATPLMIntegrationInfra)
  /**
  * Asks provider to switch to new security context.
  * 
  * More detailed reading PES attached to function: FUN062259
  * 
  * USE WITH CAUTION:
  * -Wintop collabspace is changed.
  * -Webtop collabspace is NOT changed.
  * -Collabspace seen in UI is NOT changed.
  * 
  * State of data in rich client:
  * All datas must be saved when you perform a switch of security context. 
  * You must be connected to one and only one provider M1 when you perform a switch of security context.
  *
  * @return
  *   <ul>
  *   <li><tt>S_OK</tt>: the provider has modified its security context. </li>
  *   <li><tt>E_FAIL</tt>:The provider can't modify its security context. use a Disconnect and a Connect to perform the request.</li>
  *  </ul>
  */
  virtual HRESULT SwitchSecurityContext(const CATUnicodeString& iNewSecurityContext) = 0;
#endif
};

#endif
