// COPYRIGHT Dassault Systemes 2001
//===================================================================
//
// CATIDocumentTemplate.h
// Define the CATIDocumentTemplate interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2001  Creation: Code generated by the CAA wizard  TVQ
//===================================================================
#ifndef CATIDocumentTemplate_H
#define CATIDocumentTemplate_H

// base class
#include "CATBaseUnknown.h"


//#include "CATDocument.h"
#include "CATListOfInt.h"
#include "CATListOfCATUnicodeString.h"
#include "CATListPV.h"
#include "CATLISTV_CATBaseUnknown.h"

#include "CATInteractiveInterfaces.h"

class CATISpecObject_var;
class CATListPtrCATDocument;
class CATListPtrCATIDocId;
class CATIDocId;
class CATIProduct_var;
class CATPathElement;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATInteractiveInterfaces IID IID_CATIDocumentTemplate;
#else
extern "C" const IID IID_CATIDocumentTemplate ;
#endif

//------------------------------------------------------------------

/**
* Interface dedicated to document template management.Missing methods are on CATIUdfFeature interface
*/
class ExportedByCATInteractiveInterfaces CATIDocumentTemplate: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:

	/**
	* Gives the root feature of the document where the template is defined
	* @param oRoot
	* the root of the template
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetRootOfTemplate(CATBaseUnknown_var& oRoot) = 0;
	
	/**
	* Gets all the documents managed by the template
	* @param oDocs
	* the documents list. Must be NULL when calling method. Must be deallocated if method succeeds
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetDocuments(CATListPtrCATDocument *&oDocs) = 0;
	
	/**
	* Gets all the documents managed by the template which have to be duplicated at instanciation (other are referenced). 
	* @param oDocsToNewFrom
	* the documents list. Must be NULL when calling method. Must be deallocated if method succeeds
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetDocsToNewFrom(CATListPtrCATDocument *& oDocsToNewFrom) = 0;

	/**
	* Get all the documents (through their doc identifier) that have to be duplicated at instanciation (other are referenced). 
	* @param oListOfDocId
	* the document identifiers list. Each document identifier in the list must be released if method succeeds
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetDocIdsToNewFrom (CATListPtrCATIDocId & oListOfDocId) = 0;

	/**
	* Sets all the documents managed by the template which UUIDs have to be regenerated at instanciation (other are referenced). 
	* @param iDocs
	* the documents list. Must not be NULL
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetDocsToNewFrom(const CATListPtrCATDocument * iDocs) = 0;

	/**
	* Gets all the external documents which UUIDs have to be regenerated at instanciation (other are referenced). 
	* @param oExtDocuments
	* the documents list. Must be NULL when calling method. Must be deallocated if method succeeds (double deallocation : Release of CATIDocId pointers and delete[] of pointer oExtDocuments)
	* @param oNbDocs
	* the number of external documents
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetExternalDocuments(CATIDocId**& oExtDocuments, int &oNbDocs) = 0;
	
	/**
	* Sets all the external documents which UUIDs have to be regenerated at instanciation (other are referenced). 
	* @param iExternalDocs
	* the list of documents. Must not be NULL
	* @param iNbDocs
	* the number of documents
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetExternalDocuments(CATIDocId** iExternalDocs, int iNbDocs) = 0;

	/**
	* Gets the part numbers of the products in the documents returned by GetDocsToNewFrom.
	* @param oPartNumbers
	* the list of part numbers parameters (@see CATICkeParm) Must be deallocated if method succeeds
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetPartNumbers (CATLISTV(CATBaseUnknown_var)*& oPartNumbers) = 0 ;

	/**
	* Sets the list of inputs of the template
	* @param iInputs
	* the list of inputs. Must not be NULL
	* @param iHelps
	* the list of roles of the inputs. Must not be NULL, and the size of the list has to be the same than iInputs
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetInputs (const CATLISTV(CATBaseUnknown_var) * iInputs , const CATListOfCATUnicodeString * iHelps) = 0;

	/* Retrieves role of all published parameters.
	* @param oPublishedParamRoleList
	*   List of role of published parameters. 
	*   <br>A parameter is published thanks to the 
	*   @href #AddParameter method.
	*
	*/
	virtual HRESULT GetParametersRole (CATListOfCATUnicodeString*&  oPublishedParamRoleList) = 0;

	/**
	* Sets the auto rename of part numbers mode
	* @param iAutoRename
	* if 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetAutoRenamePartNumbers(int iAutoRename) = 0;

	/**
	* Gets the auto rename of part numbers mode
	* @param oAutoRename
	* 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetAutoRenamePartNumbers(int &oAutoRename) = 0;

	/**
	* Sets the suffix used in auto rename of part numbers
	* @param iSuffix
	* the suffix
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetAutoRenamePartNumbersSuffix(const CATUnicodeString &iSuffix) = 0;
	
	/**
	* Gets the suffix used in auto rename of part numbers
	* @param oSuffix
	* the suffix
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetAutoRenamePartNumbersSuffix(CATUnicodeString &oSuffix) = 0;

	/**
	* Sets the product instance used as a context for template definition.
	* You must call this method with the proper product instance if contextual parts or products are included in the documents managed by the template
	* @param iProduct
	* for a template of a contextual part : the definition instance of the contextual part's product<br>
	* for a template of contextual assembly : the instance of the product containing the product that is templated
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetProductInstance(const CATIProduct_var &iProduct) = 0;

	/**
	* Gets the list of automatic inputs (inputs found via FindAutomaticInputs method) and their roles
	* @param oListInputs
	* the list of inputs. Must be deallocated if method succeeds
	* @param oRoles
	* the list of roles. Must be deallocated if method succeeds
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetListAutomaticInputs(CATLISTV(CATBaseUnknown_var)*& oListInputs, CATListOfCATUnicodeString*& oRoles) = 0;
	
	/**
	* Sets the list of automatic inputs and their roles. Call this method only to modify the roles.
	* @param iListInputs
	* the list of inputs. Must not be NULL
	* @param iRoles
	* the roles. Must not be NULL. The list has to have the same size than iListInputs list.
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetListAutomaticInputs(const CATLISTV(CATBaseUnknown_var) *iListInputs, const CATListOfCATUnicodeString *iRoles) = 0;

	/**
	* Finds all automatic inputs (deduced from external links that can be replaced by themselves)
	* Call this method when you have called SetDocsToNewFrom.
	* @param oNbInputsFound
	* the number of inputs found
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT FindAutomaticInputs(int &oNbInputsFound) = 0;

	/**
	* Removes all inputs found in documents which UUIDs are not regenerated (this documents must not be modified)
	* You have to call this method when you have modified inputs list or when document which UUIDs have to be regenerated have been modified
	*/
	virtual HRESULT RemoveForbiddenInputs() = 0;

	/**
	* @nodoc
	*/
	virtual HRESULT SetCatalogDescription(const CATBaseUnknown_var &description) = 0;

	/**
	* @nodoc
	*/
	virtual HRESULT GetPathImportForInput(int iPos, CATPathElement *&oPath) = 0;

	/**
	* @nodoc
	*/
	virtual HRESULT GetAcceptInstantiationWithNotAllInputs(int &accept) = 0;

	/**
	* @nodoc
	*/
	virtual HRESULT SetAcceptInstantiationWithNotAllInputs(int accept) = 0;
	
	/**
	* Sets the instantiation mode of the document template to the default mode
	* @param iNewFromMode
	* if 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetDefaultModeInstantiation(int iDefaultMode) = 0;

	/**
	* Gets the instantiation mode of the document template to the default mode
	* @param oNewFromMode
	* 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetDefaultModeInstantiation(int &oDefaultMode) = 0;

	/**
	* Sets the instantiation mode of the document template to the black box mode (User Feature Like)
	* @param iBlackBoxMode
	* if 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetBlackBoxModeInstantiation(int iBlackBoxMode) = 0;

	/**
	* Gets the instantiation mode of the document template to the black box mode (User Feature Like)
	* @param oBlackBoxMode
	* 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetBlackBoxModeInstantiation(int &oBlackBoxMode) = 0;

	/**
	* Sets the instantiation mode of the document template to the black box mode (User Feature Like)
	* @param iExternalViewMode
	* if 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT SetExternalViewModeInstantiation(int iExternalViewMode) = 0;

	/**
	* Gets the instantiation mode of the document template to the black box mode (User Feature Like)
	* @param oExternalViewMode
	* 0 the mode is disabled, it is enabled else
	* @return
	* E_FAIL if the method fails, S_OK elsewhere
	*/
	virtual HRESULT GetExternalViewModeInstantiation(int &oExternalViewMode) = 0;


	/**
	* This method says if during the document template instantiation, update has to be launched. This method has to be called at instantiation time : 
	* there is no persistent data associated to it. Default behvior if this method is not called is to perform update
	* @param iDoUpdate
	* 0 if no update has to be performed, any other value elsewhere
	* @return
	* E_FAIL if the method fails, S_OK elsewherewhere
	*/
	virtual HRESULT SetUpdateBehavior(int iDoUpdate) = 0;

	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};

CATDeclareHandler(CATIDocumentTemplate, CATBaseUnknown);

//------------------------------------------------------------------

#endif
