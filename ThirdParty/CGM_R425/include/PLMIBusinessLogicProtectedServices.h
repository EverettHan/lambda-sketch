// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// PLMIBusinessLogicProtectedServices.h
// Define the PLMIBusinessLogicProtectedServices interface
//
//===================================================================
// Jan 2009 Creation: Code generated by the CAA wizard ADZ
//===================================================================

/**
* @level Protected
* @usage U3
*/

#ifndef PLMIBusinessLogicProtectedServices_H
#define PLMIBusinessLogicProtectedServices_H

// Export
#include "PLMBusinessLogicInterfaces.h"

// Inheritance
#include "CATBaseUnknown.h"
#include "CATPLMCoreType.h"

#include "PLMIBLIdentificationInitialization.h"


class CATIAdpEnvironment;
class CATIAdpType;
class CATICkeParm_var;
class CATIInstance_var;
class CATListValCATICkeParm_var;
class CATListValCATUnicodeString;
class CATString;
class CATUnicodeString;


#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByPLMBusinessLogicInterfaces IID IID_PLMIBusinessLogicProtectedServices;
#else
extern "C" const IID IID_PLMIBusinessLogicProtectedServices;
#endif

/**
* Interface that provides services for the business logic access.
*/
class ExportedByPLMBusinessLogicInterfaces PLMIBusinessLogicProtectedServices : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * This method initializes the public PLM Attributes by CATRule execution.
  * @businesslogic PLMIdentificationInitialization
  *
  * @param ipiAdpType
  * The type of the PLM entity on which the PLM Public Attributes will be initialized thru CATRule
  *
  * @param iOperationId
  * Operation Id to differentiate the contextual usage. Authorized values are:
  * <ul>
  * <li> PLMIBLIdentificationInitialization::New (for PLM new command) </li>
  * <li> PLMIBLIdentificationInitialization::Implicit (for modeler implicit factories) </li>
  * <li> PLMIBLIdentificationInitialization::Cloning (for any duplication operation: Save As New, Duplicate, ...) </li>
  * <li> PLMIBLIdentificationInitialization::ImportAsNew (for import operations) </li>
  * <li> PLMIBLIdentificationInitialization::Default (for any other request) </li>
  * </ul>
  *
  * @param iOperationDetail
  * Operation Id to differentiate the contextual usage. Authorized values are:
  * <ul>
  * <li> PLMIBLIdentificationInitialization::NoOperationDetail (when called by the commands not specified afterwards) </li>
  * <li> PLMIBLIdentificationInitialization::Create (when called by the commands insert New or Insert Existing) </li>
  * <li> PLMIBLIdentificationInitialization::CopyPaste (when called by the commands copy-paste, cut-paste, drap and drop) </li>
  * <li> PLMIBLIdentificationInitialization::ConfiguredSplit ( when called by the command Configured Split) </li>
  * <li> PLMIBLIdentificationInitialization::InsertLogicalClone ( when called by the command Insert as New Variant) </li>
  * <li> PLMIBLIdentificationInitialization::ReplaceReference ( when called by the commands Replace By Existing, Replace By Version, Replace Global) </li>
  * <li> PLMIBLIdentificationInitialization::CloneDistantData ( when called by the commands Duplicate ) </li>
  * </ul>
  *
  * @param iListOfContextAttributes
  * List of contextual objects and parameters. Each context may either be NULL or hold the following information:
  * <ul>
  * <li> IdString (string): parameter used to pre-valuate the identifier attribute. This information comes from UI (Tools/Options).</li>
  * <li> IdCloningString (string): parameter valuated when OperationId="Cloning". This is a string which can be optionally filled by the duplicate dialogs.</li>
  * <li> CopyFrom (object): parameter valuated when OperationId="Cloning". This a proxy object of the original PLM entity to clone. Reading this PLM entity, the BL can retrieve original attributes values.</li>
  * <li> CoupledRef (object): when a couple PLM Part Reference/Representation Reference is created in one shot, this parameter provides a proxy object of the aggregating Part Reference. Reading this PLM entity, the BL can to initialize the Representation naming based on the aggregating Reference's one.</li>
  * <li> AggregatingReference (object): when a PLM Instance is created, this parameter provides a pointer to the PLM Reference entity that will aggregate the PLM instance. Reading this PLM entity, the BL can initialized the Instance naming based on its aggregating reference name. </li>
  * <li> Reference (object): when a PLM Instance is created, this parameter provides a pointer to the PLM Reference entity of the PLM instance. Reading this PLM entity, the BL can initialized the Instance naming based on its reference name.</li>
  * </ul>
  * NOTE: Use CATICkeParmFactory :: CreateObjectReference (const  CATICkeType_var  &iType,const  CATUnicodeString  &iName  )
  *
  * @param iListOfControlledAttributes
  * List of PLM controlled Attributes that will be set on the PLM proxy:
  * <ul><li>V_discipline</li></ul>
  *
  * @param oListOfModifiedAttributes
  * List of PLM Attributes that have been initialized from BL execution.
  *
  * @param oListOfContextAttributes
  * List of Knowledge Attributes that have been initialized from BL execution on the "BRContext".<br>
  * Example: "CustoDiscipline" String Attribute.
  *
  * @return
  * <ul>
  *   <li><tt>S_OK</tt> if successful.</li>
  *   <li><tt>S_FALSE</tt> when no rule is executed.</li>
  *   <li><tt>E_INVALIDARG</tt> If one of the inputs is not valid.</li>
  *   <li><tt>E_FAIL</tt> if an error occurs. The following error classes and error identifiers can be associated with:</li>
  *   <ul>
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::InternalError<br>
  *         The business logic access service failed</li>
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::ExecutionError<br>
  *         The business logic definition execution failed</li>
  *     </ul>
  * </ul>
  */
  virtual HRESULT GetIdentificationAttributes(CATIAdpType* &ipiAdpType,
    PLMIBLIdentificationInitialization::OperationId iOperationId,
    PLMIBLIdentificationInitialization::OperationDetail iOperationDetail,
    CATListValCATICkeParm_var &iListOfContextAttributes,
    CATListValCATICkeParm_var &iListOfControlledAttributes,
    CATListValCATICkeParm_var &oListOfModifiedAttributes,
    CATListValCATICkeParm_var* oListOfContextAttributes = NULL) = 0;

  /**
  * This method initializes the public PLM Attributes by CATRule execution.
  * @businesslogic PLMIdentificationInitialization
  *
  * @param ipiAdpEnv
  * PLM Environment to be used.
  *
  * @param iModeler
  * Modeler Name
  *
  * @param iCoreType
  * PLM Type Core of the entity to be used
  *
  * @param oListOfModifiedAttributes
  * List of PLM Attributes that have been initialized from BL execution.
  *
  * @param oListOfContextAttributes
  * List of Knowledge Attributes that have been initialized from BL execution on the "BRContext".<br>
  * Example: "CustoDiscipline" String Attribute.
  *
  * @return
  * <ul>
  *   <li><tt>S_OK</tt> if successful.</li>
  *   <li><tt>S_FALSE</tt> when no rule is executed.</li>
  *   <li><tt>E_INVALIDARG</tt> If one of the inputs is not valid.</li>
  *   <li><tt>E_FAIL</tt> if an error occurs. The following error classes and error identifiers can be associated with:</li>
  *   <ul>
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::InternalError<br>
  *         The business logic access service failed</li>
  *
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::ExecutionError<br>
  *         The business logic definition execution failed</li>
  *   </ul>
  * </ul>
  */
  virtual HRESULT GetAttributesInitializedFromBL(CATIAdpEnvironment* &ipiAdpEnv,
    CATString &iModeler,
    CATPLMCoreType &iCoreType,
    CATListValCATICkeParm_var &oListOfPublicAttributes,
    CATListValCATICkeParm_var* oListOfContextAttributes = NULL) = 0;

  /**
   * @deprecated V6R2012
   */
  virtual HRESULT GetAttributesInitializedFromBL(CATIAdpEnvironment* &ipiAdpEnv,
    CATString &iModeler,
    CATPLMCoreType &iCoreType,
    CATListValCATICkeParm_var &iListOfControlledAttributes,
    CATListValCATICkeParm_var &oListOfPublicAttributes,
    CATListValCATICkeParm_var* oListOfContextAttributes = NULL) = 0;

  /**
  * This method initializes the public PLM Attributes by CATRule execution.
  * @businesslogic PLMIdentificationInitialization
  *
  * @param ipiAdpType
  * The type of the PLM entity on which the PLM Public Attributes will be initialized thru CATRule
  *
  * @param iListOfControlledAttributes
  * List of PLM controlled Attributes that will be set on the PLM proxy:
  * <ul><li>V_discipline</li></ul>
  *
  * @param oListOfModifiedAttributes
  * List of PLM Attributes that have been initialized from BL execution.
  *
  * @param oListOfContextAttributes
  * List of Knowledge Attributes that have been initialized from BL execution on the "BRContext".<br>
  * Example: "CustoDiscipline" String Attribute.
  *
  * @return
  * <ul>
  *   <li><tt>S_OK</tt> if successful.</li>
  *   <li><tt>S_FALSE</tt> when no rule is executed.</li>
  *   <li><tt>E_INVALIDARG</tt> If one of the inputs is not valid.</li>
  *   <li><tt>E_FAIL</tt> if an error occurs. The following error classes and error identifiers can be associated with:</li>
  *   <ul>
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::InternalError<br>
  *         The business logic access service failed</li>
  *     <li>@error PLMBLIdentificationInitializationError PLMBLIdentificationInitializationError::RunInitialization::ExecutionError<br>
  *         The business logic definition execution failed</li>
  *   </ul>
  * </ul>
  */
  virtual HRESULT GetAttributesInitializedFromBL(CATIAdpType* &ipiAdpType,
    CATListValCATICkeParm_var &iListOfControlledAttributes,
    CATListValCATICkeParm_var &oListOfModifiedAttributes,
    CATListValCATICkeParm_var* oListOfContextAttributes = NULL) = 0;

  /**
  * Gives the UserId and SecurityContext.
  *
  * @param iProvider
  *   The connected provider to be used.
  *   Empty string: the connected provider is used.
  *
  * @param oUserId
  *   The UserId string
  *
  * @param oSecurityContext
  *   The SecurityContext string SecurityContext = RoleId.OrganisationId.ProjectId
  *
  * @return
  *   <ul>
  *     <li> S_OK           if successful </li>
  *     <li> E_FAIL         in others cases </li>
  *   </ul>
  */
  virtual HRESULT GetSecurityParameters(CATString iProvider, CATUnicodeString & oUserId, CATUnicodeString & oSecurityContext) = 0;

  /**
  * Builds the corresponding CATICkeParm from a PLMEntity and its related parameter name.
  *
  * @param iAttributeName
  *   The name of the attribute to be associated to the parameter.
  * <br>Refer to Business Logic Openness Reference documentation to get the list of parameter names related
  * to a given Business Logic Opening.
  *
  * @param CATIInstance_var
  *   The PLMEntity.
  * <br>Refer to Business Logic Openness Reference documentation to get the list of PLMComponent types related
  * to a given Business Logic Opening.
  *
  * @param ospCkeObject
  *   The created knowledge parameter.
  *
  * @return
  *   <ul>
  *     <li><tt>S_OK</tt> if successful.</li>
  *     <li><tt>E_INVALIDARG</tt> If one of the inputs is not valid.</li>
  *     <ul>
  *       <li><tt>iAttributeName</tt> is empty.</li>
  *       <li><tt>ispCkeInstance</tt> is <tt>NULL_var</tt>.</li>
  *       <li><tt>ospCkeObject</tt> is not <tt>NULL_var</tt>.</li>
  *     </ul>
  *     <li><tt>E_FAIL</tt> in others cases.</li>
  *   </ul>
  */
  virtual HRESULT CreateCkeParmObject(CATUnicodeString & iAttributeName, CATIInstance_var & ispPLMEntity, CATICkeParm_var & ospCkeParm) = 0;
};

#endif
