/**
* @level Protected
* @usage U3
*/
// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIOmyPowerIOSettingAtt.h
// Define the CATIOmyPowerIOSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jun 2009  Creation: Code generated by the CAA wizard  VCS
//===================================================================
#ifndef CATIOmyPowerIOSettingAtt_H
#define CATIOmyPowerIOSettingAtt_H

#include "CATOMYUtils.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"

class CATSettingInfo;

// Attribute names for PLM Cache Setting  file
#define LOCAL_PATH             "CacheLocalPath"
#define MAX_SIZE               "CacheMaxSize"
#define REMOVAL_POLICY         "CacheRemovalPolicy"
#define CHECK_COHERENCY        "CheckCacheCoherency"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYUtils IID IID_CATIOmyPowerIOSettingAtt;
#else
extern "C" const IID IID_CATIOmyPowerIOSettingAtt ;
#endif


//------------------------------------------------------------------

/**
* Interface to modify IO Cache options as shown or defined in User Settings.
* <b>Role</b>: This interface defines the communication protocols between the IO Cache options
* set or shown in Tools/Options/General/Cache settings and the IO Cache Engine.
*/

class ExportedByCATOMYUtils CATIOmyPowerIOSettingAtt: public CATBaseUnknown
{
	CATDeclareInterface;


public:

	/**
	* Cache Removal Policy.
	* used as input parameter in @href #SetRemovalPolicy
	* and as output parameter in @href #GetRemovalPolicy
	* @param Agressive
	*    Each Stream deleted when its URL connection is closed
	* @param Standard
	*  when Cache size exceeds Max authorized size, try to decrease it to half Max size
	* @param Lazy
	*    All deletable Streams are deleted when Cache size exceeds Max authorized size
	*/
	enum RemovalPolicy
	{
		Aggressive = 2,
		Standard = 1,
		Lazy = 0
	};

	/**
	* Retrieves the value of the PLM Cache maximum size.
	* <br><b>Role</b>: Retrieves the value of the PLM Cache maximum size in Mo
	* @param oSize
	*	The maximum allowed size of the cache in Mo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetCacheMaxSizeMo (unsigned int &oSize) = 0;

	/**
	* Sets the value of the PLM Cache maximum size.
	* <br><b>Role</b>: Sets the value of the PLM Cache maximum size in Mo that the
	* user is allowed to set
	* @param oSize
	*	The maximum allowed size of the cache in Mo.
	* @return
	* <b>Legal values</b>:
	* <br><tt>S_OK :</tt> on Success
	* <br><tt>E_OUTOFMEMORY:</tt> Not enough space left on device (only on windows)
	* <br><tt>E_INVALIDARG:</tt> Not in the bounds
	*/
	virtual HRESULT SetCacheMaxSizeMo (unsigned int iSize) = 0;

	/**
	* Retrieves the value of the Cache Metadata max elements size.
	* <br><b>Role</b>: Retrieves the value of Cache Metadata max elements size
	* @param oSize
	*	The maximum allowed size of elements.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetCacheMetadataMaxElements (unsigned int &oSize) = 0;

	/**
	* Sets the value of the Cache Metadata max elements size.
	* <br><b>Role</b>: Sets the value of the Cache Metadata elements size
	* @param oSize
	*	The maximum allowed size of Metadata elements size.
	* @return
	*	<b>Legal values</b>:
	* <br><tt>S_OK :</tt> on Success
	* <br><tt>E_INVALIDARG:</tt> Not in the bounds
	* <br><tt>E_FAIL:</tt> on failure
	*/
  virtual HRESULT SetCacheMetadataMaxElements (unsigned int iSize) = 0;

	/**
	* Retrieves the value of the PLM Cache maximum size upper bound.
	* <br><b>Role</b>: Retrieves the upper bound of the PLM Cache maximum size in Mo
	* @param oSize
	*	The maximum allowed size of the cache in Mo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	*	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetCacheMaxSizeMoUpperBound (unsigned int &oSize) = 0;

	/**
	* Retrieves the cache local path.
	* <br><b>Role</b>: Retrieves the value of the cache local path.
	* If the local path is defined with environment variables then this
	* method return the expansed form. The unexpansed form can be retrieved
	* with @href #GetLocalPathSymb.
	* @param oLocalPath
	*       the local path of the cache.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetLocalPath( CATUnicodeString & oLocalPath) = 0;

	/**
	* Retrieves the cache local path.
	* <br><b>Role</b>: Retrieves the cache local path in a symbolic format.
	* If the local path is defined with environment variables then this
	* method return the literal form for example ${CATCache}.
	* @param oLocalPath
	*       the local path of the cache.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetLocalPathSymb (CATUnicodeString & oLocalPath) = 0;

	/**
	* Sets the cache local path.
	* <br><b>Role</b>: Sets the cache local path in a symbolic format.
	* @param iLocalPath
	*       the local path of the cache.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetLocalPath (CATUnicodeString  &iLocalPath) = 0;

	/**
	* Retrieves the state of the Cache Local Path parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
	virtual HRESULT GetCacheLocalPathInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Retrieves the state of the Cache Max Size parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
	virtual HRESULT GetCacheMaxSizeInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Retrieves the state of the Cache Max Elements parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
  virtual HRESULT GetCacheMetadataMaxElementsInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Retrieves the state of the Cache Deletion parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
	virtual HRESULT GetDeleteCacheInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Retrieves the state of the Cache Removal Policy parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
	virtual HRESULT GetCacheRemovalPolicyInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Retrieves the state of the Cache Check Coherency parameter.
	* <br>Refer to @href CATSysSettingController for a detailled description.
	*/
	virtual HRESULT GetCheckCacheCoherencyInfo (CATSettingInfo* oInfo) = 0;

	/**
	* Gets global informations about streams in cache;
	* <br><b>Role</b>: Gets global informations about streams in cache.
	* @param oSizeStreamFound
	*       the cumulated size of streams already found in cache when requested by the current session
	* @param oSizeStreamDownloaded
	*       the cumulated size of streams downloaded in cache when requested by the current session
	* @param oActualCacheSize
	*       the current size of the cache
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetCacheStats(CATULONG64 &oSizeStreamFound, CATULONG64 &oSizeStreamDownloaded, CATULONG64 &oActualCacheSize) = 0;

	/**
	* removes all deletable streams from the Cache
	*/
	virtual HRESULT CleanCache(CATULONG64 & oNewCacheSize) = 0;

	/**
	* Gets the cache removal policy.
	* <br><b>Role</b>: Gets the current cache removal policy.
	* @param oRemovalPolicy
	*       the current cache removal policy
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetRemovalPolicy( CATIOmyPowerIOSettingAtt::RemovalPolicy & oRemovalPolicy ) = 0;

	/**
	* Sets the cache removal policy.
	* <br><b>Role</b>: Sets the new current cache removal policy.
	* @param iRemovalPolicy
	*       the cache removal policy to set
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetRemovalPolicy( const  CATIOmyPowerIOSettingAtt::RemovalPolicy iRemovalPolicy ) = 0;

	/**
	* Gets the cache check coherency state.
	* <br><b>Role</b>: Gets the current cache check coherency state.
	* @param obCheckCoherency
	*       the current cache check coherency state
	*	<br><tt>TRUE :</tt>  Check cache coherency when opening the cache
	* 	<br><tt>FALSE:</tt>  No check cache coherency when opening the cache
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetCheckCoherency( CATBoolean& obCheckCoherency ) = 0;

	/**
	* Sets the cache check coherency state.
	* <br><b>Role</b>: Sets the new current cache check coherency state.
	* @param ibCheckCoherency
	*        the cache check coherency state to set
	*	<br><tt>TRUE :</tt>  Check cache coherency when opening the cache
	* 	<br><tt>FALSE:</tt>  No check cache coherency when opening the cache
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetCheckCoherency( const CATBoolean ibCheckCoherency ) = 0;

  virtual HRESULT SetSettingsRequireRestart( const CATBoolean ibModalDialogRequired) = 0;
  virtual HRESULT GetSettingsRequireRestart( CATBoolean &obModalDialogRequired) = 0;

};

//------------------------------------------------------------------

#endif
