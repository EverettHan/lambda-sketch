//===================================================================
// COPYRIGHT Dassault Systemes 2020/07/16
//===================================================================
// CATV3D.h
// Header definition of class CATV3D
//===================================================================
//
// Usage notes:
//
//===================================================================
// 2020/07/16 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATV3D_H
#define CATV3D_H

#include "VisuImmersive3D.h"
#include <CATSYPDeclareEnumFactory.h>
#include <CATBaseUnknown_WR.h>
#include <vector>

class CATV3DTopWidget;
class CATV3DRTopWidget;
class CATVidWidget;
class CATV3DLay3DConstraints;
class CAT3DViewpoint;
class CATV3DCtl;
class CATVizViewer;
class CATViewpoint;
class CATV3DAdjustment;

//-----------------------------------------------------------------------

class ExportedByVisuImmersive3D CATV3D
{
  public:
    /**
     * Enumerates the dynamic orientation features of the V3D constraints
     */
    enum DynamicOrientation
    {
      NoDynamicOrientation = 0,
      ParallelToScreen,
      DirParallelToScreen,
      DirectionalToScreen
    };

    /**
      * @brief Allows to remove V3D temporarily from a given viewer.
      */
    class ExportedByVisuImmersive3D Remover
    {
    public:
      /**
       * Constructor 
       * @param i_pViewer the viewer that is treated
       * @param i_removeImmersiveV3D remove from the viewer any immersive V3D(that is V3D mixed with visu rep)
       */
      Remover(CATVizViewer *i_pViewer, bool i_removeImmersiveV3D = false);
      ~Remover();
    private:
      void ChangeVisibility(bool);
      void *operator new(size_t) { return NULL; };
      void operator delete(void *){};
      std::vector<CATBaseUnknown_WR> _viewpointsWRList;
    };

    /**
     * Creates a CATV3DTopWidget from a VID widget.
     *
     * @param i_vidWidget The VID widget from which the CATV3DTopWidget is created.
     * @param i_constraints Constraints to be applied to the CATV3DTopWidget in its associated viewer.
     * @param i_adjustment Adjustement that will be taked in count on the CATV3DGPEmbeddedVid.
     * @param i_viewpoint Viewpoint to be associated to the CATV3DTopWidget.
     * @return CATV3DTopWidget displaying the given VID widget in the 3D viewpoint.
     */
    static CATV3DTopWidget *
    CreateV3DTopWidgetFromVID(CATVidWidget *i_vidWidget, const CATV3DLay3DConstraints &i_constraints, const CATV3DAdjustment& i_adjustment, CAT3DViewpoint *i_viewpoint);

    /**
     * Creates a CATV3DCtl from a VID widget.
     * This CATV3DCtl should be appended
     *
     * @param i_vidWidget The VID widget from which the CATV3DCtl is created.
     * @return CATV3DCtl to be appended to an existing CATV3DTopWidget.
     */
    static CATV3DCtl* CreateV3DCtlFromVID(CATVidWidget* i_vidWidget);

    /**
     * Creates a CATV3DCtl from a VID widget.
     * This CATV3DCtl should be appended
     *
     * @param i_vidWidget The VID widget from which the CATV3DCtl is created.
     * @param i_adjustment Adjustement that will be taked in count on the CATV3DGPEmbeddedVid.
     * @return CATV3DCtl to be appended to an existing CATV3DTopWidget.
     */
    static CATV3DCtl* CreateV3DCtlFromVID(CATVidWidget* i_vidWidget, const CATV3DAdjustment& i_adjustment);
    
    static void GetV3DViewpointsOfViewer(CATVizViewer *i_pViewer, std::vector<CATViewpoint *> o_vector);

  private:
    // Copy constructor and equal operator
    // -----------------------------------
    CATV3D (CATV3D &);
    CATV3D& operator=(CATV3D&);
    // Standard constructors and destructors
    // -------------------------------------
    CATV3D();
    ~CATV3D();
};
CATSYP_DECLARE_ENUMFACTORY(ExportedByVisuImmersive3D, CATV3D__DynamicOrientation);

//-----------------------------------------------------------------------

#endif
