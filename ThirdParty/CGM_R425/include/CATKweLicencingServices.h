// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATKweLicencingServices.h
// Header definition of CATKweLicencingServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Sep 2005  Creation: Code generated by the CAA wizard  tvq
//===================================================================
#ifndef CATKweLicencingServices_H
#define CATKweLicencingServices_H

#include "CATBaseUnknown.h"
#include "KnowledgeItf.h"
class CATUnicodeString;

//-----------------------------------------------------------------------


class ExportedByKnowledgeItf CATKweLicencingServices
{
public:

	// Correspond a la license KT1 non divisee en terme d'options...
	static int KT1Allowed();   // Instanciation User feature, Instanciation PLM Template, Execution Knowledge pattern, Creation User feature reference, Edition user feature instance
	static int PKTAllowed();   // Creation-Edition PLM Template, Creation-Edition Knowledge Pattern

	// Correspond a la toolbar F(x) et a l'edition des relations Knowledge infrastructure
	static int COMAllowed();   // F(x) toolbar, edition equivalent dimension / Design table, formula, edition de parametre

	// correspond a la license KWA non divisee en terme d'options
	static int KWAAllowed();   // Edition regle advisor, check advisor, jeux d'equation, reaction / Inclue l'execution des jeux d'equations

	// correspond a la license PEO non divisée en terme d'options
	static int PEOAllowed();   // Edition optimisations, design of experiment, constraint satisfaction / Execution de ces optimisations

	static int KE1Allowed();   // Runtime des regles expertes (execution)
	static int KWEAllowed();   // Creation-Edition des regles expertes.
	static int EPABtAllowed(); // Creation d'application EPA: edition de process, de type, etc...
	static int EPARtAllowed(); // Execution d'application EPA: execution de process
	static int KWDBtAllowed(); // 
	static int KWDRtAllowed();

	// Name to show when explaining that the KWD Rt license is missing
	static CATUnicodeString KWDRtName();

	static int CheckDiagnosisAllowed(); // Commande de navigation dans les defaillances
	static int KWAExecutionAllowed();   // Execution des jeux d'equations 
	static int PEOExecutionAllowed();   // Execution des optimisations 
	static int NewAllowed();            // New dans le langage autorise

	static int BREditAllowed();         // Edition des Business Rules autorise

	static int PLMConfigAllowed();      // Creation de configs PLM (license PLMConfigAuthoring)

	static int FeatDicV6Allowed();      // Feature Dictionary https://dsxdev-online.dsy.ds/ematrix//common/emxNavigator.jsp?objectId=34152.36236.29654.38363

	static int KWDBtForCustomization(); // Customization of PLM New

	static int GenerativeLanguageBtAllowed(); // creation de generative scripts
	static int GenerativeLanguageRtAllowed(); // execution de generative scripts

	static int PortfolioEditorAllowed(); // definition de portefeuille d'application

	// KnowledgePattern: soit dans PKT, soit dans DesignRuleCapture
	static int KnowledgePatternCreationInDesignRuleCapture();
	static int KnowledgePatternCreationInPKT();
	static int KnowledgePatternCreationAllowed();

	// Product Table
	static int ProductTableCreationAllowed();
	static int ParametricBridgeCreationAllowed();

	// Knowledge replay
	static int KnowledgeReplayAllowed();

	// PLM Templates instantiation
	static int PLMTemplatesInstanciationAllowed();

	// Report template usage
	static int ReportTemplateUsage();   // Usage des templates de reports
	static int ReportTemplateCreation();   // Creation des templates de reports

	// Debug Tool (Monitor)
	static int KweDebugToolAllowed();

	// Data setup
	static int DataSetupResourceSetCreation();   // Creation des resource sets

	static int KweGraphCreation(); // Création de Knowledge Graphs

private:
	// Standard constructors and destructors
	// -------------------------------------
	CATKweLicencingServices();
	virtual ~CATKweLicencingServices();

	// Copy constructor and equal operator
	// -----------------------------------
	CATKweLicencingServices(CATKweLicencingServices &);
	CATKweLicencingServices& operator=(CATKweLicencingServices&);
};

extern "C" ExportedByKnowledgeItf int IsKnowledgeAdvisorWorkshop(CATBaseUnknown* iImpl, const GUID &iid);
//extern "C" ExportedByKnowledgeItf int IsKnowledgeAdvisorWorkbench(CATBaseUnknown* iImpl, const GUID &iid) ; 
extern "C" ExportedByKnowledgeItf int CATIsKnowledgeExpertInside(CATBaseUnknown* iImpl, const GUID &iid);
extern "C" ExportedByKnowledgeItf int CATIsKnowledgeExpertWorkshop(CATBaseUnknown* iImpl, const GUID &iid);
//extern "C" ExportedByKnowledgeItf int CATIsKnowledgeExpertWorkbench(CATBaseUnknown* iImpl, const GUID &iid);

//-----------------------------------------------------------------------

#endif
