// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIBRExecutionServices.h
// This interface is used to call business rules 
//
//===================================================================
//
// Usage notes:
//   This interface provides the Business Rules execution services.
//
//===================================================================
//
//  Jul 2005  Creation: Code generated by the CAA wizard  hcg
//===================================================================
#ifndef CATIBRExecutionServices_H
#define CATIBRExecutionServices_H

#include "CATLifSpecs.h"

#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATIInstance.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATListValCATICkeParm.h"
#include "CATKWEErrorSeverity.h"
#include "CATListValCATCkeAttributeValuationFailing.h"
#include "CATBoolean.h"
class CATIType_var;

class CATLifError;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATIBRExecutionServices;
#else
extern "C" const IID IID_CATIBRExecutionServices ;
#endif

//----------------------------------------------------------------

/**
* Enum type representing validation type.
*
* <br><b>Role</b>: Indication of the collection method for validation values.
*
*/
enum CATValidationType 
{
	ValidationType_AND,
	ValidationType_OR,
};

//------------------------------------------------------------------

/**
* Interface representing BRExecutionService.
* CATIBRExecutionServices is used to execute BR services.
*
* <br><b>Role</b>: Components that implement the BR execution services.
*
* General objective
* -----------------
* Business rules services are invoked by applications or infrastructure components (DS code) to delegate some treatments to customer code.
* They are invoked on a particular object called the fact, that is passed as an argument of the services.
*
* Different kind of services
* --------------------------
* There are 3 kind of services (computation, execution and validation).
* The objective of computation is to produce some information in output without touching the fact object.
*   - for example, computation of a color of an object
* The objective of execution service is to let the customer do anything: producing output, modifying the fact and so forth.
* The objective of validation service is to indicate if a particular treatment on an object, or the state of the fact is invalid.
* 
* BRIds and context object
* ------------------------
* DS Code is calling those services at particular places in the software identified by a BRId (Business Rule Identificator). Each BRId is unique.
* Depending on where the service is called (BRId), there is usually different elements that need to be passed as parameters of the service, either in input ot in output.
* Those elements are given to the service through a context object. Before calling the service, the caller will create a context object by using the GenerateContext method.
* Then the caller will feed the parameters by adding them with CATIDynamicAttributes on the context object.
*
* Errors
* ------
* If during the execution of a service, something has failed preventing the service to be executed, an E_FAIL return code is produced and 
* some errors are generated and available through the GetLastMessage method.
* Note that errors have a severity: the getSeverity method on CATLifBError indicates if the error is a real error, or if it is just a warning.
* There are several reasons for failure
* - some rules that we were supposed to reach haven't been found in the runtime environment (it is an error)
* - some rules have syntax errors (it is an error)
* - some rules execution have generated an evaluation error (that may be either errors / or warnings)
* If it is an error, the DS code can decide to cancel the current operation and raise a message to the end-user. 
* - usually, the message will mean nothing for the end-user: it is likely to be a problem with its environment. The StandardErrorMessage method returns a standard message (contact your administrator).
* - if you want to have an indepth view of the reason of the failure (to fill a log for example), you can use the information contained in the error 
* returned by GetLastMessage
* To simplify the analysis of the error, we provide a GetLastMessageSeverity to be called when an error occurs
* 
* Invalidation
* ------------
* For the ExecuteValidationService (only), the result of the service is a validation or an invalidation. Note that it has nothing to do with en Error of the service
* as explained above.
* The customer has the ability in the rule to precise a severity of the error (an integer) and a message to raise to explain why the service failed to the end-user.
*
*/
class ExportedByCATLifSpecs CATIBRExecutionServices: public CATBaseUnknown
{
	CATDeclareInterface;

public:

	/**
	* To invoke a BR rule service with the intent of doing a special computation.
	* By computation, we mean that we will compute some parameters of the context object but that in no manner, we will 
	* enable the modification of the fact itself
	* 
	* @param iBRid
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource based on the BR resource setting. 
	* @param iFact
	*   An object in which the rule engine will apply the rules directly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). This object is generated by the GenerateContext method.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The rule service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage
	*/  
	virtual HRESULT ExecuteComputationService  (const CATUnicodeString & iBRid, 
												const CATICkeObject_var & iFact,
										        const CATIInstance_var& iContext,
									  	        const  boolean iMandatoryService = FALSE ) = 0;
	/**
	* To invoke a BR rule service.
	* This mode enables the modification of the fact itself
	* 
	* @param iBRid
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource based on the BR resource setting. 
	* @param iFact
	*   An object in which the rule engine will apply the rules directly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). This object is generated by the GenerateContext method.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The rule service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage

	*/  
	virtual HRESULT ExecuteRuleService  (const CATUnicodeString & iBRid, 
										 const CATICkeObject_var & iFact,
										 const CATIInstance_var& iContext,
									  	 const  boolean iMandatoryService = FALSE ) = 0;
	/**
	* To invoke a BR validation service.
	* By validation, we mean that first of all, one critical result of the operation is a validation status but also
	* we ensure that there won't be any modification authorized on the fact
	* If the validation has failed, it is advised to use the PopupMessage method if you want to bring it to the end-user.
	* If the validation has failed, you may be interested in retrieving the severity of the invalidation. You can use GetValidationSeverity method
	* 
	* @param iBRid
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource based on the BR resource setting. 
	* @param iFact
	*   An object in which the rule engine will apply the rules directly or
	*   indirectly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). This object is generated by the GenerateContext method.
	* @param oValidationResult
	*   A boolean that hold the validation result. An invalidation has different levels of severity. Either it will prevent the treatment, or it will be just a warning
	*   Use GetValidationSeverity to differentiate.
	* @param iValidationType
	*   The type of the boolean operator that collects the validation results.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The validation service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage
	*/  
	virtual HRESULT ExecuteValidationService(const CATUnicodeString& iBRid, 
											 const CATICkeObject_var& iFact,
											 const CATIInstance_var& iContext,
											 boolean& oValidationResult,
											 const CATValidationType iValidationType = ValidationType_AND,  
											 const  boolean iMandatoryService = FALSE ) = 0;

	/**
	* To invoke a BR rule service.
	* 
	* @param iBRUsageID
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource. For DS application developers, 
	*   their BRID declarations are specified in a single <AppResourceSetId>.xml file located 
	*   in <b>$OS/resources/knowledge/AppResourceSetDescriptions</b>.
	* @param iFacts
	*   A set of objects in which the rule engine will apply the rules directly or
	*   indirectly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). This object is generated by the GenerateContext method.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The rule service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage

	*/  
	virtual HRESULT ExecuteComputationService  (
		const CATUnicodeString& iBRUsageID, 
		CATLISTV(CATBaseUnknown_var)& iFacts,
		const CATIInstance_var& iContext,
		const  boolean iMandatoryService = FALSE ) = 0;

	/**
	* To invoke a BR rule service.
	* 
	* @param iBRUsageID
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource. For DS application developers, 
	*   their BRID declarations are specified in a single <AppResourceSetId>.xml file located 
	*   in <b>$OS/resources/knowledge/AppResourceSetDescriptions</b>.
	* @param iFacts
	*   A set of objects in which the rule engine will apply the rules directly or
	*   indirectly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). 
	*   This object is generated by the GenerateContext method.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The rule service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage

	*/
	virtual HRESULT ExecuteRuleService(	
		const CATUnicodeString& iBRUsageID, 
		CATLISTV(CATBaseUnknown_var)& iFacts,
		const CATIInstance_var& iContext, 
		const boolean iMandatoryService = FALSE ) = 0;

	/**
	* To invoke a BR validation service.
	* 
	* @param iBRUsageID
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource. For DS application developers, 
	*   their BRID declarations are specified in a single <AppResourceSetId>.xml file located 
	*   in <b>$OS/resources/knowledge/AppResourceSetDescriptions</b>.
	* @param iFact
	*   A set of objects in which the rule engine will apply the rules directly or
	*   indirectly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). 
	*   This object is generated by the GenerateContext method.
	* @param oValidationResult
	*   A boolean that hold the validation result. An invalidation has different levels of severity. Either it will prevent the treatment, or it will be just a warning
	*   Use GetValidationSeverity to differentiate.
	* @param iValidationType
	*   The type of the boolean operator that collects the validation results.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.) 
	*
	* @return S_OK
	*   The validation service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage

	*/  
	virtual HRESULT ExecuteValidationService(
		const CATUnicodeString& iBRUsageID, 
		CATLISTV(CATBaseUnknown_var)& iFacts,
		const CATIInstance_var& iContext,
		boolean& oValidationResult,
		const CATValidationType iValidationType = ValidationType_AND,  
		const boolean iMandatoryService = FALSE ) = 0;


	/**
	* This method provides a text that can be used by the application to show that there was a problem in the rule execution.
	* The only objective of this method is to have the same text everywhere... 
	* @return 
	*   a NLS translation of "The customization of your last operation failed due to a bad environment. Contact your administrator"
	*/
	virtual CATUnicodeString  StandardErrorMessage () const =0;

	/**
	* This method returns the explication of the error, in case a service failed to execute.<br>
	* If you're just interested to know the severity of the error (warning versus error), please call GetLastMessageSeverity instead.
	* @return
	*   an error.
	*/
	virtual CATLifError * GetLastMessage() = 0;

	
	/**
	 * @nodoc use HasOpening
	 */
	virtual boolean TestOpening (const CATUnicodeString& iBRid) = 0;

	/** 
	 * @nodoc use HasOpening
	 */
	virtual boolean TestOpening (const CATUnicodeString& iBRid, const CATIInstance_var& iContext) = 0;

	/**
	 * @nodoc use HasOpening
	 */
	virtual boolean TestOpening (const CATUnicodeString & iBRid,
								 const CATIType_var &iTypeObject,
								 const CATIInstance_var& iContext) = 0;

	/**
	* This method tests if a customization (with no fact) exists.
	*
	* @param iOpeningId Name of the opening.
	* @param iContext Context for the evaluation (can be null).
	* @return S_OK if the opening exists and is chooseable.
	*         S_FALSE an opening exists but lacking context prevents from knowing if it is chooseable.
	*         E_FAIL no opening exists.
	*         E_INVALIDARG iOpeningId is empty.
	*/
	virtual HRESULT HasOpening(const CATUnicodeString& iOpeningId, const CATIInstance_var& iContext) = 0;

	/**
	* This method tests if a customization (with a fact) exists.
	*
	* @param iOpeningId Name of the opening.
	* @param iTypeObject Type of the object to be customized.
	* @param iContext Context for the evaluation (can be null).
	* @return S_OK if the opening exists and is chooseable.
	*         S_FALSE an opening exists but lacking context prevents from knowing if it is chooseable.
	*         E_FAIL no opening exists.
	*         E_INVALIDARG iOpeningId is empty.
	*/
	virtual HRESULT HasOpening(const CATUnicodeString & iOpeningId,
		const CATIType_var &iTypeObject,
		const CATIInstance_var& iContext) = 0;

	/** This class provides services to ease the use of customization rules in different contexts             
	 *  It is more focused on customization rules that need to create an object, similar to a modeler object, but non persistant 
	 *  (like it is requested in the PLM New, where we want to valuate attributes without having created the PLM object
	 *  These services rely on an implementation of CATIInstance called VolatileInstance (for non persistant).
	 *  Such a volatile instance can be created from a Knowledge type
	 *    - In this context, we fill the attributes defined on this type and its ancestors, with a default value, considered as Unset
	 *  Or it can be created from another instance (especially useful in duplication contexts)
	 *    - In this case, we duplicate the attributes of the instance on the new volatile instance
	 *  Finally, a VolatileInstance implements CATIDynamicAttributes, which means that dynamicallt, attributes can be added on it
	 *  (for example, in the customization rules context by using the SetAttribute*** methods in the Enterprise Knowledge language.
	 */
	
	/**
	* This method creates a volatile object that implements CATIInstance from an existing instance. 
	* If iType is specified, it is used as the type for the new instance. Otherwise, the type is retrieved on provided instance (CATIInstance::Type)	
	* All attributes available on provided instance main type are available on created instance, with proper values and properties (read only state, manipulator)
	* Note that computed attributes are not copied.
	* The method fails (returns E_FAIL) if provided instance is NULL
	*/
	virtual HRESULT CreateVolatileInstanceFromInstance(const CATIInstance_var &iInstance, const CATIType_var &iType, CATIInstance_var &oInstance) = 0;

	/**
	* This method creates a volatile object that implements CATIInstance from a type definition. 
	* All attributes available on provided type are available on created instance, with proper properties (read only state)
	* The attributes are initially unset. Note that computed attributes are not copied.
	* The last argument contains a list of attributes values to initialise on the volatile object. It can contain values for read only attributes that 
	* cannot be modified afterwards. The values are volatile parameters which name is the attribute name.
	* This list can be built through a service like CATCkeObjectAttrWriteServices::CreateListOfValuesFromListOfStrings
	* By default, there is no defaut values. The content of the list will be copied. The pointer is not deallocated by the callee
	* The method fails (returns E_FAIL) if provided type is NULL
	*/
	virtual HRESULT CreateVolatileInstanceFromType(const CATIType_var &iType, CATIInstance_var &oInstance,CATLISTV(CATICkeParm_var) *pListDefaultAttributeValues = NULL) =0;




	/**
	* This method can be used after the execution of a validation service, when it has failed to pup up a message to the end-user.
	* In the BRContext, we use the information about the severity (2 to say if the operation is cancelled or 1 if it is just a warning).
	* And we raise the Message filled within the rule. If no message is defined within the rule, a generic message is sent.
	* @param iBRid
	* A logical name representing the opening ID
	* @param iFact
	* The fact
	* @param iContext
	* The BR Context on which we find the message and the severity
	* @return S_OK if the message has been sent
	*         E_FAIL unsuccessful
	*/
	virtual HRESULT PopupMessage (const CATUnicodeString& iBRUsageID,const CATIInstance_var &iFact, const CATIInstance_var& iContext) = 0;

	/**
	* This method returns the severity of the error in case a service failed to execute.
	* @param oSeverity
	* Severity in output (error or warning)
	* @return S_OK if the severity has been retrieved
	*         E_FAIL if there was no error
	*/
	virtual  HRESULT GetLastMessageSeverity (CATKWEErrorSeverity::Severity &oSeverity) = 0;

	/**
	* This method returns the severity of the invalidation in case a validation service that produced it.
	* @param iContext
	* The BR Context on which we find the severity
	* @param oSeverity
	* The severity is an integer produced within the rule by the customer. It is up to the caller of the BR service to decide how to interpret the severity.
	* However, we advise to consider that severity==2 means that the operation will be cancelled, whereas severity==1 means it is just a warning.
	* This is how the severity is interpreted in the PopupMessage method
	* @return S_OK if the severity has been retrieved
	*         E_FAIL if there was no error
	*/
	virtual  HRESULT GetValidationSeverity (const CATIInstance_var& iContext,int &oSeverity) = 0;

	/**
	* This method returns a list of information about failing of attribute modification during the execution of the Business rule.<br>
	* It is used to treat the information afterwards if necessary.<br>
	* Call this method only when GetLastMessage is returning a Not NULL error
	* @param oList
	* List of information in input. It is filled by the service
	* @return S_OK if the list has been filled because there was some errors
	*         S_FALSE if there was no such problems (list empty)
	*         E_FAIL otherwise
	*/
	virtual  HRESULT GetAttributeValuationFalingInformation (CATLISTV(CATCkeAttributeValuationFailing) &oList) = 0;

	/**
	* This method is used to create an object that will be used to pass parameters to the execution services.
	* If a BRID is precised, the object will automatically have the static attributes (declared in the xml file) created 
	* To provide specific dynamic arguments to the object, please use CATIDynamicAttributes::Add method on the generated context after having created it with this method. 
	* @param iName
	*   Name of the created object
	* @param iBRUsageID
	*  The opening for which this context is to be generated.
	* @param iListAttributeValuesForContext
	*  List of values for the attributes. The CATICkeParm name must correspond to names of attributes. This list may be empty.
	* @param oContextGenerated
	*  Context object generated.
	*/
	virtual HRESULT GenerateBRContext ( const CATUnicodeString			&iName,
										const CATUnicodeString			&iBRUsageID,
										const CATLISTV(CATICkeParm_var) &iListAttributeValuesForContext,
									    CATIInstance_var				&oContextGenerated) = 0;
	
	/**
	* To invoke a BR rule service.
	* This mode enables the modification of the fact itself
	* 
	* @param iBRid
	*   A logical name representing the rule resource identifier. The value must be 
	*   unique since it will be used by the BR repository service to find the 
	*   corresponding rule resource based on the BR resource setting. 
	* @param iAxis
	*   An object having multiple type, we may be interested in executing a rule based on a secondary type
	* @param iFact
	*   An object in which the rule engine will apply the rules directly.
	* @param iContext
	*   An object that holds parameters that can be used inside the rules (in read or write mode). This object is generated by the GenerateContext method.
	* @param iMandatoryService
	*   A boolean that indicates whether the rule service is mandatory. (i.e. whether 
	*   or not to report rule resource not found as an error.)
	*
	* @return S_OK
	*   The rule service is successfully executed.
	* @return E_FAIL
	*   The rule service is not successfully executed. 
	*   The precise error can be retrieved with GetLastMessage error. The error severity (warning or error) can be retrieved with GetLastMessageSeverity
	*   If you want to send a message to the end user, as he is not aware of the internal, please use StandardErrorMessage

	*/  
	virtual HRESULT ExecuteRuleServiceOnPrivilegedAxis  (const CATUnicodeString & iBRid, 
														 const CATIType_var & iAxis,
														 const CATICkeObject_var & iFact,
														 const CATIInstance_var& iContext,
									  					 const  boolean iMandatoryService = FALSE ) = 0;

	/**
	* This method loads PLM resources associated to given openings (as for now, resource sets
	* and PLM business rules).
	*
	* USE WITH EXTREME CAUTION !!
	*
	* @param iOpeningIds
	*   List of the opening names to pre-load
	*/
	virtual HRESULT preLoadPLMResources ( const CATListOfCATUnicodeString& iOpeningIds ) = 0;

	virtual HRESULT ExecuteComputationServiceOnPrivilegedAxis  (const CATUnicodeString & iBRid, 
																const CATIType_var & iAxis,
																const CATICkeObject_var & iFact,
																const CATIInstance_var& iContext,
																const  boolean iMandatoryService = FALSE ) = 0;

	/**
	* INTERNAL USE ONLY
	*/
	virtual HRESULT ExecuteConsolidationService(const CATUnicodeString & iBRid,
		const CATICkeObject_var & iFact,
		const CATIInstance_var& iContext,
		const CATIVisitor_var& iAccumulator) = 0;

};

CATDeclareHandler(CATIBRExecutionServices, CATBaseUnknown);
//------------------------------------------------------------------

#endif
