//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/03
//===================================================================
// CATPLMVersionInfo.cpp
// Header definition of class CATPLMVersionInfo
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2018/05/03 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMVersionInfo_H
#define CATPLMVersionInfo_H

#include "CATPLMServicesItf.h"
#include "CATOmxSharable.h"
#include "CATPLMID.h"
#include "CATOmxSR.h"
#include "CATPLMMinorVersionData.h"
#include "CATPLMMajorVersionData.h"
#include "CATOmxArray.h"
#include "CATPLMMajorVersion.h"
#include "CATPLMMinorVersion.h"

class ExportedByCATPLMServicesItf CATPLMVersionInfo : public CATOmxSharable
{
public:
  CATPLMVersionInfo(const CATPLMID& iPLMID, CATPLMMajorVersionData* ipMajorVersionData, CATPLMMinorVersionData* ipMinorVersionData);
  virtual ~CATPLMVersionInfo();

  /*
  * Returns the object's PLMID.
  *
  * @param oPLMID
  *   The retrieved component PLMID.
  *
  * @return
  *   <code>S_OK</code> The element is good and no report is associated.
  *   <code>E_FAIL</code> No specific element is associated to this CATPLMVersionInfo object.
  */
  HRESULT GetPLMID(CATPLMID& oPLMID) const;

  /*
  * Returns the object's PLMID.
  */
  CATPLMID GetPLMID() const;

  /**
  * Returns the major version informations of the element.
  *
  * @param oMajorInfo [out, CATBaseUnknown#Release]
  *   The major information found on the source.
  *
  * @return
  *   <code>S_OK</code> if there is a major information.
  *   <code>E_FAIL</code> if there is not a major information.
  */
  HRESULT GetMajorVersionData(CATPLMMajorVersionData*& opMajorVersionData);

  /*
  * Returns the major version informations of the element.
  * The returned ptr may be NULL and must not be released.
  * Ptr is handled by this object and thus must not be stored somewhere else without a proper addref/release.
  */
  CATPLMMajorVersionData* GetMajorVersionData() const;

  /**
  * Returns the minor version informations of the element.
  *
  * @param oMinorInfo [out, CATBaseUnknown#Release]
  *   The minor information found on the source.
  *
  * @return
  *   <code>S_OK</code> if there is a minor information.
  *   <code>E_FAIL</code> if there is not a minor information.
  */
  HRESULT GetMinorVersionData(CATPLMMinorVersionData*& opMinorVersionData);

  /*
  * Returns the minor version informations of the element.
  * The returned ptr may be NULL and must not be released.
  * Ptr is handled by this object and thus must not be stored somewhere else without a proper addref/release.
  */
  CATPLMMinorVersionData* GetMinorVersionData() const;

  /*
  * Returns the major versions of the element.
  *
  * @return
  *   <code>S_OK</code> if there are major version information.
  *   <code>E_FAIL</code> if there is no major version information.
  */
  HRESULT GetMajorVersions(CATOmxArray<CATPLMMajorVersion*>& oMajorVersion) const;

  /*
  * Returns the major versions of the element.
  */
  CATOmxArray<CATPLMMajorVersion*>& GetMajorVersions();

  /*
  * Returns the minor versions of the element.
  *
  * @return
  *   <code>S_OK</code> if there are minor version information.
  *   <code>E_FAIL</code> if there is no minor version information.
  */
  HRESULT GetMinorVersions(CATOmxArray<CATPLMMinorVersion*>& oMinorVersion) const;

  /*
  * Returns the minor versions of the element.
  */
  CATOmxArray<CATPLMMinorVersion*>& GetMinorVersions();

  /**
  * Returns a value based on the order of:
  *   _PLMID
  *   _spMajorVersionData
  *   _spMinorVersionData
  *   _MajorVersions
  *   _MinorVersions
  *
  * @return
  *   -1 : The current CATPLMVersionInfo info is before the compared one.
  *   0  : The current CATPLMVersionInfo info is equal to the compared one.
  *   +1 : The current CATPLMVersionInfo info is after the compared one.
  */
  int Compare(const CATPLMVersionInfo& iComparedVersionInfo) const;

  /**
  * ComputeHashKey
  */
  unsigned int ComputeHashKey() const;

private:
  CATPLMVersionInfo(CATPLMVersionInfo &);
  CATPLMVersionInfo& operator=(CATPLMVersionInfo&);

  // Attributes
  CATPLMID _PLMID;
  CATOmxSR<CATPLMMajorVersionData> _spMajorVersionData;
  CATOmxSR<CATPLMMinorVersionData> _spMinorVersionData;
  CATOmxArray<CATPLMMajorVersion*> _MajorVersions;
  CATOmxArray<CATPLMMinorVersion*> _MinorVersions;

  friend class CATPLMCompVersioningService;
  friend class CATPLMCompVersioningLegacyService;
  friend class CATPLMxVersioningNLVService;
};

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATPLMVersionInfo*>::manager();

#endif
