
//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/08/23
//===================================================================
// CATAfrPLMCompassServices.cpp
// Header definition of class CATAfrPLMCompassServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/08/23 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAfrPLMCompassServices_H
#define CATAfrPLMCompassServices_H

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
#include "CATIAfrPLMCompass.h"
//---------------------------------------------------------------- System
#include "CATListPV.h"
#include "CATUnicodeString.h"

class CATIAfrPLMCompassProgressTask;
class CATPLMCompassModel;
class CATIAfrPLMCompassFactory;
class CATCSO;
class CATVizViewer;
//-----------------------------------------------------------------------

class ExportedByCATAfrItf CATAfrPLMCompassServices: public CATBaseUnknown

{
CATDeclareClass;

public:


virtual ~CATAfrPLMCompassServices ();

static CATIAfrPLMCompass_var GetCompassFrom(CATBaseUnknown * i_pObject );

static CATIAfrPLMCompass_var GetCurrentCompass();

static CATBoolean IsCompassVID();

static void SetCompassScalable(const CATBoolean & i_scalable) { _scalable = i_scalable;}

static void SetCompassNoBusyCursorFlagOnCSO(const CATBoolean & i_noBusyCursor);

void SetNoBusyCursorFlagOnCSO(const int & i_NoBusyCursorFlag);
int GetNoBusyCursorFlagOnCSO() const;

static CATIAfrPLMCompass_var CreatePLMCompass(CATBaseUnknown * i_AttachedObject,CATVizViewer * iViewer, const CATString &iName,  CATCSO *iCSO = NULL, const CATBaseUnknown_var & iFilter = NULL_var, int iStyle=0);
//static CATIAfrPLMCompass_var CreatePLMCompass(CATBaseUnknown * i_AttachedObject,CATVizViewer * iViewer, const CATString &iName,  CATCSO *iCSO = NULL, const CATBaseUnknown_var & iFilter = NULL_var, int iStyle=0);
private:
  
  // Standard constructors and destructors - instantiable only by the private method GetPLMCompassServices() 
  // -------------------------------------
  CATAfrPLMCompassServices ();
// Copy constructor and equal operator
// -----------------------------------
CATAfrPLMCompassServices (CATAfrPLMCompassServices &);
CATAfrPLMCompassServices& operator=(CATAfrPLMCompassServices&);

CATBoolean _noBusyCursorFlag;

/**
* Get compass attached to an object
**/
static CATBaseUnknown * GetCompass( CATBaseUnknown *iObject );
static HRESULT AttachCompassTo(CATBaseUnknown * i_pCompass, CATBaseUnknown * i_pObject);
static HRESULT DetachCompassTo(CATBaseUnknown * i_pObject);
static CATAfrPLMCompassServices * GetPLMCompassServices();
static CATIAfrPLMCompassFactory *  GetPLMCompassFactory();
static void AppendDefinedPLMCompass(CATBaseUnknown  *pCompass);
static void RemoveDefinedPLMCompass(CATBaseUnknown  *pCompass);
static CATAfrPLMCompassServices * _pPLMCompassServices;
static CATListPV _ListOfDefinedPLMCompass;
static CATPLMCompassModel * GetRecordPLMCompassModel(CATCSO *iCSO , const CATBaseUnknown_var & iFilter);
static CATBoolean IsCompassScalable() {return _scalable;}
/** Get the pointer to the interface to manage progress task on this compass. Do not forget to release the pointer after you finish**/
static CATIAfrPLMCompassProgressTask * GetCompassProgressTask(const CATIAfrPLMCompass_var & spiCompass) ;
class Attachement
{
public:
  Attachement( CATBaseUnknown *iObject, CATBaseUnknown * iCompass ) : _object(iObject), _compass(iCompass)
  {
  };
  CATBaseUnknown *_object;
  CATBaseUnknown * _compass;
};
static Attachement * LocateFromObject(CATBaseUnknown * iObject);



static CATListPV _attachments;

static CATBoolean _scalable;

static CATUnicodeString _envVarVIDCompass;

friend class CATAfrVidAbstractAttachedCompass;
friend class CATEAfrPLMCompassVid;
friend class CATAfrPLMCompassVid;
friend class CATAfrAdapterPLMCompass;
friend class CATPLMCompass;
friend class CATTaskController;
};

//-----------------------------------------------------------------------

#endif

