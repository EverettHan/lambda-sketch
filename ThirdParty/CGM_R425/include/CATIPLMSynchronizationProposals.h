// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMSynchronizationProposals.h
// Define the CATIPLMSynchronizationProposals interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMSynchronizationProposals_H
#define CATIPLMSynchronizationProposals_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATLISTV_CATIPLMSynchronizationProposal.h"

class CATIPLMSynchronizationSolution;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMSynchronizationProposals;
#else
extern "C" const IID IID_CATIPLMSynchronizationProposals ;
#endif

//------------------------------------------------------------------

/**
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMSynchronizationProposals: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Checks if it is necessary to solve explicitly the refresh strategy
  * 
  * @return 
  *       FALSE : it necessary to check all the proposal.
  *       TRUE  : it is possible to valid directly the solution.
  */
  virtual CATBoolean HasSolvedSolution() const = 0;

  /**
  * Access to proposals for diplaying UI and/or resolving strategies
  * 
  * @param ioProposals
  *        The list of proposals
  * @return 
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT GetProposals(CATLISTV(CATIPLMSynchronizationProposal_var) & ioProposals) const = 0;

  /**
  * Build the object representation a valid set of refresh operation
  *
  * @param oSolution [out, CATBaseUnknown#Release]
  *        A set of operations
  * @return 
  *        S_OK if refresh operations are necessary.
  *        S_FALSE if no refresh operations are necessary.
  *        E_FAIL if request failed.
  */
  virtual HRESULT ValidateSolution(CATIPLMSynchronizationSolution *& oSolution) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
