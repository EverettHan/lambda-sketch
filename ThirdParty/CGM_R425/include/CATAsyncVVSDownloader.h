//===================================================================

//===================================================================
// CATAsyncVVSDownloader.cpp
// Header definition of class CATAsyncVVSDownloader
//===================================================================
//
// Usage notes:
// Helper to download VVS urls.
// 
//===================================================================
//  2014/12/04 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncVVSDownloader_H
#define CATAsyncVVSDownloader_H

#include "CATOmyCioUrlUsageLoadingCtx.h"
#include "CATAsyncBasicTypes.h"
#include "CATAsyncStreamRequests.h"

#include "CATOmxSharable.h"
#include "CATOmxVector.h"

class ExportedByCATAsyncStreamRequests CATIVVSDownloadNotifier: public CATOmxSharable
{
public:
  /**
  * On url ready notification. 
  * When called on this notification the url have been downloaded into the cache and it is ready to be used.
  *
  * @param
  * <br/> [in] iUrl : current url ready in the cache
  * <br/> [in] iLockByte : iLockByte url
  * <br/> [in] iBytesPerSec : download speed measured in bytes per second
  * @return
  * <code>S_OK</code>: Notification in good state
  * <code>E*</code>: unexpected error
  *
  */
  virtual HRESULT OnUrlReady(CATOmyCioUrlUsageCtx & iUrl, CATILockBytes2& iLockByte, unsigned int iBytesPerSec) = 0;

  /**
  * On url failed notification. 
  * When called on this notification the url have NOT been downloaded into the cache due to an error.
  *
  * @param
  * <br/> [in] iUrl : current url failed
  * @return
  * <code>S_OK</code>: Notification in good state
  * <code>E*</code>: unexpected error
  *
  */
  virtual HRESULT OnUrlFailed(CATOmyCioUrlUsageCtx & iUrl) = 0;
};

class ExportedByCATAsyncStreamRequests CATAsyncVVSDownloader : public CATOmxSharable
{
public:
  /**
  * Creates a VVS Downloader.
  *
  * @param
  * <br/> [in] iNotifier : object that will be notified when VVS streams have been downloaded or failed to download
  * <br/> [out] opAsyncVVSDownloadHelper : VVS Downloader
  * @return
  * <code>S_OK</code>: VVS Downloader has been properly created
  * <code>E*</code>: unexpected error
  *
  */
  static HRESULT CreateWithNotifier(CATIVVSDownloadNotifier& iNotifier, CATAsyncVVSDownloader*& opAsyncVVSDownloadHelper);

  /**
  * Set urls to download. 
  * Multiple calls to this method will reset the urls downloaded or being downloaded.
  *
  * @param
  * <br/> [in] iUrls : list of CATOmyCioUrlUsageCtx to download
  * @return
  * <code>S_OK</code>: urls properly set
  * <code>E*</code>: unexpected error
  *
  */
  virtual HRESULT SetUrls(CATOmxVector<CATOmyCioUrlUsageCtx>& iUrls) = 0;

  /**
  * Wait until the current list of URLs is downloaded.
  */
  virtual HRESULT WaitForAllTasksToBeCompleted() = 0;
  
protected:

  CATAsyncVVSDownloader(CATIVVSDownloadNotifier & iNotifier);
  virtual ~CATAsyncVVSDownloader() {};   
    
  CATOmxSR<CATIVVSDownloadNotifier> _spNotifier;
  
private:
  
  CATAsyncVVSDownloader (const CATAsyncVVSDownloader &) = delete;
  CATAsyncVVSDownloader& operator=(const CATAsyncVVSDownloader&) = delete;
};

#endif
