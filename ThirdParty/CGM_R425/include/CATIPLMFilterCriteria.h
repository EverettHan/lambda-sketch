// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMFilterCriteria.h
// Define the CATIPLMFilterCriteria interface
//===================================================================
//  Apr 2004  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMFilterCriteria_H
#define CATIPLMFilterCriteria_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATIPLMFilterRelation.h"
#include "CATPLMQueryFilterEnum.h"
#include "CATBoolean.h"
#include "CATIAV5Level.h"
#include "CATLISTV_CATPLMTypeId.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFilterCriteria;
#else
extern "C" const IID IID_CATIPLMFilterCriteria;
#endif

#ifndef NEW_CONFIG_FILTERS
#define NEW_CONFIG_FILTERS
#endif

class CATIPLMFilterConfig;
class CATIPLMFilterFunction;
class CATIPLMFilterAttribute;
#include "CATIPLMFilterCondition.h"
class CATIPLMFilterVolume;
class CATUnicodeString;
class CATString;
class CATPLMType;
class CATPLMID;
class CATIPLMFunction;
class CATPLMTypeH;
class CATPLMFilterTypesToExpand;

class ExportedByCATPLMServicesItf CATIPLMFilterCriteria : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * Create an attribute Filter.
  * Used for filtering query or expand.
  * This API defines the (type, attribute) that the filter is on, and the operator to use.
  * for the filter to be complete, on the returned oFilterAttribute, you need to call CATIPLMFilterAttribute::SetValue to associate value(s)
  * @param iType
  *    The type.
  * @param iAttrName
  *    The attribute name.
  * @param iOp
  *    The operator.
  * @param oFilterAttribute [out, CATBaseUnknown#Release]
  *    The returned created filter.
  * @return
  *    S_OK
  *    E_INVALIDARG : iType not correct, or oFilterAttribute not NULL.
  *    E_INVALIDMULTIOP  : Using a operator for multi valuated attr on a mono valuated attr.
  *                        Or an operator for mono valuated attr on a multi valuated attr.
  *                        (the operator CONTAINS_ONE_OF ir the only operator to used on multi-valuated attr, and should be used on this kind of attr only).
  *    E_INCOMPATIBLETYPES :  For Filter in an iterative criteria, the filter is on a PLMType not compatible with the type of the iterative criteria
  *                           (should be on same type or on parent type).
  *    E_???               Other non documented errors
  */
  virtual HRESULT CreateFilterAttribute(CATPLMType* iType,
    const CATString& iAttrName,
    RelationalOperator::Op iOp,
    CATIPLMFilterAttribute*& oFilterAttribute) = 0;

  /**
  * Combined filter
  */
  virtual HRESULT CreateFilterAttributeWithPath(const CATLISTV(CATPLMTypeId)& iRequestedTypePath,
    CATPLMType* iType,
    const CATString& iAttrName,
    RelationalOperator::Op iOp,
    CATIPLMFilterAttribute*& oFilterAttribute) = 0;

  /**
   * Get the attribute Filter set in the Criteria.
   * @param oFilterAttribute [out, CATBaseUnknown#Release]
   *    The Filter attribute
   *    NULL if no FilterAttribute defined
   */
  virtual HRESULT GetFilterAttribute(CATIPLMFilterAttribute** oFilterAttribute) = 0;

  /**
  * Create a filter function.
  * @param iFunc [in]
  *   The function to use to evaluate the filter
  * @param iOp [in]
  *   The operator to use.
  * @param oFilterFunction [out, CATBaseUnknown#Release]
  *   The created filter attribute.
  *   Use @href CATIPLMFilterFunction#SetValue to end valuating the filter.
  *
  * @return
  * <dt> <code>S_OK</code>     <dd> Success.
  * <dt> <code>E_FAIL</code>   <dd> Failure.
  *
  */
  virtual HRESULT CreateFilterFunction(CATIPLMFunction* iFunc, RelationalOperator::Op iOp,
    CATIPLMFilterFunction*& oFilterFunction) = 0;

  /**
  * Get the function Filter set in the Criteria.
  * @param oFilterFunction [out, CATBaseUnknown#Release]
  *    The Filter function
  *    NULL if no FilterAttribute defined
  */
  virtual HRESULT GetFilterFunction(CATIPLMFilterFunction** oFilterFunction) = 0;

  /**
  * Create a CATPLMFilterVolume in the FilterCriteria.
  * CATPLMFilterVolume is used for applying volume filter.
  * After creation, call the API of CATIPLMFilterVolume to define it,
  * t* set for example the value of Matching bounding box parameters, the clearance, the existing zones…
  * @param oFilterVolume [out, CATBaseUnknown#Release]
  *   the created FilterVolume.
  */
  virtual HRESULT CreateFilterVolume(CATIPLMFilterVolume** oFilterVolume) = 0;

  /**
  * Returns the CATPLMFilterVolume in the FilterCriteria.
  * @param oFilterVolume [out, CATBaseUnknown#Release]
  *   the FilterVolume used for applying volume filter.
  *   NULL if no CATPLMFilterVolume.
  */
  virtual HRESULT GetFilterVolume(CATIPLMFilterVolume** oFilterVolume) = 0;

  /**
  * Sets the CATPLMFilterConfig in the FilterCriteria.
  * @param iFilterConfig [in, CATBaseUnknown#Release]
  *   the FilterConfig used for applying a configuration handler.
  * @return
  *    S_OK
  *    E_INVALIDARG iFilterConfig is NULL
  *    E_INVALIDITERATIVE (from CATPLMServicesHRESULT.h) Attempting to add a config filter in an iterative criteria
  *    E_??? Other non documented errors
  */
  virtual HRESULT SetFilterConfig(CATIPLMFilterConfig* iFilterConfig) = 0;

  /**
  * Returns the CATPLMFilterConfig contained in the FilterCriteria.
  * @param oFilterConfig [out, CATBaseUnknown#Release]
  *   the FilterConfig used for applying a configuration handler.
  *   NULL if no CATPLMFilterConfig
  */
  virtual HRESULT GetFilterConfig(CATIPLMFilterConfig** oFilterConfig) = 0;

  /**
  * Creates a CATIPLMFilterRelation in the Filter.
  * CATIPLMFilterRelation is used for specifying on which relation you want to navigate during the expand operation.
  * @param iSource
  *    the source Type of this relation
  * @param iTarget
  *    the target Type of this relation.
  * @param iDirection
  *    The RelDirection of this relation.
  * @param iCategory
  *    The Category of this relation.
  * @param iRole
  *    The Role of this relation.
  */
  virtual HRESULT CreateFilterRelation(CATPLMType* iSource,
    CATPLMType* iTarget,
    RelDirection iDirection) = 0;

  /**
  * Returns the CATIPLMFilterRelation in the FilterCondition.
  * @param oFilterRelation [out, CATBaseUnknown#Release]
  *   the FilterRelation used for filtering query result from relations. NULL if no CATIPLMFilterRelation has been Created.
  */
  virtual HRESULT GetFilterRelation(CATIPLMFilterRelation** oFilterRelation) = 0;

  /**
  * Create a CATPLMFilterCondition in the FilterCondition.
  * CATPLMFilterCondition is used for applying a subset of filters of any kind, with a certain condition.
  * @param oFilterCondition [out, CATBaseUnknown#Release]
  * @param ConditionType [in] FILTERCOND_AND or FILTERCOND_OR
  */
  virtual HRESULT CreateFilterCondition(CATIPLMFilterCondition** oFilterCondition, FilterConditionOperator ConditionType = FILTERCOND_AND) = 0;

  /**
  * Returns the CATPLMFilterCondition in the FilterCondition.
  * @param oFilterCondition [out, CATBaseUnknown#Release]
  *   the FilterCondition used for applying a filter condition.
  *   NULL if no FilterCondition
  */
  virtual HRESULT GetFilterCondition(CATIPLMFilterCondition** oFilterCondition) = 0;

  /**
  * Returns the CATPLMFilterCondition in the FilterCondition, then detach it from this criterion.
  * NULL if the criteria does not contain a condition.
  * @param oFilterCondition [out, CATBaseUnknown#Release]
  *   the FilterCondition used for applying a filter condition. NULL if no FilterCondition
  */
  virtual HRESULT DetachFilterCondition(CATIPLMFilterCondition** oFilterCondition) = 0;

  /**
  * Defines the context in which the criteria will be applied
  * @param iObjectId
  *    The object plmId.
  */
  virtual HRESULT SetObjectContext(const CATPLMID& iObjectId) = 0;

  /**
  * Returns the context in which the criteria will be applied.
  * @param oObjectId
  *    The object plmId.
  */
  virtual HRESULT GetObjectContext(CATPLMID& oObjectId) = 0;

  /**
  * Remove filter category.
  * @param iListOfCategory
  *    The bitfield of categories. @see CATIPLMQueryFilter#RemoveFilterCategory
  * @param oToRemove
  *    If the criteria is empty after the remove, informs the caller to remove the criteria.
  */
  virtual HRESULT RemoveCategory(int iListOfCategory, int& oToRemove) = 0;

  /**
  * Retrieve Iterative filtering information, if any.
  * @param oMode
  *    Iterative filter mode.
  * @param oOverlay
  *    overlay filter mode.
  *    see CATIPLMQueryFilter::AddIterativeCriteria for explaination
  * @param oType [out, CATBaseUnknown#Release]
  *    Type associated to the Iterative filtering operation.
  * @return
  *    S_OK  : query is perfomed using an Iterative filtering
  *    E_FAIL: no Iterative filtering information.
  */
  virtual HRESULT IsIterativeFilter(Iterative::Mode& oMode, CATPLMType*& oType) = 0;
  virtual HRESULT IsIterativeFilter(Iterative::Mode& oMode, bool& oOverlay, CATPLMType*& oType) = 0;

  /**
  * Checks if Filter attributes inside the Criteria are always TRUE.
  */
  virtual CATBoolean ContainsOnlyTrueFilterAttribute() = 0;

  /**
  * By default, expand are made:
  * a- on IRPC instance(s) / repinstance(s) (MQL view: <param name="relpattern">PLMInstance,VPLMrel/PLMPort/V_Owner,VPLMrel/PLMConnection/V_Owner</param>).
  * b- on IRPC reference(s) / repreference(s) / PLMPort(s) / PLMConnection(s) (MQL view: <param name="typepattern">PLMEntity</param>).
  *
  * Current API EXPLICITLY specifies on which BusinessType(s)/RelationType(s)  expand is made. Pure ER types are taken into account.
  *
  * Note: API can be used on mixed ER / IRPC data.
  * Note: API can be called several times. BusinessType(s) and RelationType(s) are accumulated.
  * Note: If no BusinessType is specified and if RelationType(s) only contains IRPC, expand is made on IRPC reference / repreference / PLMPort / PLMConnection (MQL view: <param name="typepattern">PLMEntity</param>)..
  * Note: If no BusinessType is specified and if RelationType(s) contains pure ER types, expand is made on *
  * Note: If no RelationType type specified and if BusinessType(s) only contains IRPC, expand is made on IRPC instance / repinstance (MQL view: <param name="relpattern">PLMInstance,VPLMrel/PLMPort/V_Owner,VPLMrel/PLMConnection/V_Owner</param>)..
  * Note: If no RelationType type specified and if BusinessType(s) contains pure ER types, expand is made on *
  * @return
  *    S_OK
  *    E_INVALIDARG : ERTypeH is not a valid type
  *    E_INVALIDCRITERIA (from CATPLMServicesHRESULT.h)  Attempting to store that information in a critieria that contains something else that TypeToExpand / ExpandDirection / TrimOption
  */
  virtual HRESULT AddTypeToExpand(const CATPLMTypeH& ERTypeH) = 0;

  /**
  * Specifies the direction of the expand.
  * Defaut or Direct mode is to navigate relationships from its from end-side to its to end-side.
  * Reverse mode means navigating in the other direction hence from  the to end-side to the from end-side.
  * The selected mode applies to all navigations.
  * @return
  *    S_OK  :
  *    E_INVALIDCRITERIA (from CATPLMServicesHRESULT.h)  Attempting to store that information in a critieria that contains something else that TypeToExpand / ExpandDirection / TrimOption
  */
  virtual HRESULT SetExpandDirection(ExpandDirection::Mode direction) = 0;

  /**
  * Specifies whether elements at the end of push expand branches should be removed if no attributes have been selected for their type in the select clause.
  * The default behavior is to remove them.
  * Whatever the value of this parameter, elements with no selected attributes can only be removed if there are no elements with any selected attribute later in the branch.
  * Thus, only the last elements of a branch can be removed.
  *
  * Does not apply actually to QueryExpand (only elements with selected attr are returned, but this will change)
  *
  * @return
  *    S_OK  :
  *    E_INVALIDCRITERIA (from CATPLMServicesHRESULT.h) Attempting to store that information in a critieria that contains something else that TypeToExpand / ExpandDirection / TrimOption
  */
  virtual HRESULT SetTrimElementWithoutSelect(TrimMode::Mode Triming) = 0;

  /*******************************************************************************************************************************************
  *
  *  All the APIs below are deprecated, use instead as documented the non deprecated version
  *
  *******************************************************************************************************************************************/

  /* @deprecated  R419
  * Use instead the non deprecated signature
  * @return Additional return code for the deprecated signature
  *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOp, iValue
  *    E_INVALIDOPERATOR : iOp is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
  */
  virtual HRESULT CreateFilterAttribute(CATPLMType* iType,
    CATString* iAttrName,
    CATUnicodeString* iOp,
    CATUnicodeString* iValue,
    CATUnicodeString* iEndValue = NULL) = 0;

  /* @deprecated  R419
   * Use instead the non deprecated signature
   * @param oFilterAttribute [out, CATBaseUnknown#Release]
   * @return Additional return code for the deprecated signature
   *    E_INVALIDARG : NULL ptr for oFilterAttribute, iAttrName, iOp, iValue
   *    E_INVALIDOPERATOR : iOp is an unkwnown operator. List of possible operators defined in CATPLMQueryFilterEnum.h
   */
  virtual HRESULT CreateFilterAttribute(CATPLMType* iType,
    CATString* iAttrName,
    CATUnicodeString* iOp,
    CATIPLMFilterAttribute** oFilterAttribute) = 0;

  /* @deprecated  R419
   * Use instead the non deprecated signature
   */
  virtual HRESULT CreateFilterFunction(CATIPLMFunction* iFunc, CATUnicodeString* iOp,
    CATUnicodeString* iValue,
    CATUnicodeString* iEndValue = NULL) = 0;

  /* @deprecated  R419
   * Use instead the non deprecated signature
   * @param oFilterFunction [out, CATBaseUnknown#Release]
   */
  virtual HRESULT CreateFilterFunction(CATIPLMFunction* iFunc, CATUnicodeString* iOp,
    CATIPLMFilterFunction** oFilterFunction) = 0;
};
#endif
