// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATOmyOutputStreamKeyAndVersionExtractor.h
// Provide implementation to interface
//    CATIComSidlOutputStream

//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//IMPLEMENTATION
//    BOA: CATIComSidlOutputStream

//End CAA2 Wizard Generation Report
//
//  Aug 2008  Creation: Code generated by the CAA wizard  PJQ
//===================================================================
#ifndef CATOmyOutputStreamKeyAndVersionExtractor_H
#define CATOmyOutputStreamKeyAndVersionExtractor_H

#include "CATOMYCommunication.h"
#include "CATIComSidlOutputStream.h"
#include "CATOmyOutputStreamVPLMSessionPLMQLDetector.h"

//-----------------------------------------------------------------------

/**
* Class representing xxx.
*
* <br><b>Role</b>: Provide the basic class function...
* <p>
* It implements the interfaces :
*  <ol>
*  <li>@href CATIComSidlOutputStream
*  </ol>
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
enum KeyAndVersionExtractorStatus{none,keyonly,versiononly,both};
class ExportedByCATOMYCommunication CATOmyOutputStreamKeyAndVersionExtractor: 
  public CATOmyOutputStreamVPLMSessionPLMQLDetector

{
  CATDeclareClass;

public:

  // Standard constructors and destructors for an implementation class
  // -----------------------------------------------------------------
  CATOmyOutputStreamKeyAndVersionExtractor ();
  virtual ~CATOmyOutputStreamKeyAndVersionExtractor ();

  /** 
  * Return the key and version if founded. It can be called at any time.
  *
  * @param oKey [out]
  *   The scrambling key. Note that it will always be valuated with the current 
  * @param oVersion [out]
  *   The scrambling version
  * @return
  *   The retrieve status.
  */
  KeyAndVersionExtractorStatus GetScramblingKeyAndVersion(unsigned int & oKey,unsigned int & oVersion);

protected:
  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#BeginStream
  * Note the calling BeginStream will reset the extraction.
  */
  HRESULT DoBeginStream () ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteDouble
  */
  HRESULT DoWriteDouble (double  iNum ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteInt
  */
  HRESULT DoWriteInt (int  iNum ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteString
  */
  HRESULT DoWriteString (const CATUnicodeString &  iChar ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#WriteBinary
  */
  HRESULT DoWriteBinary (const char *  iSrc   , int  iLen ) ;

  /**
  * Implements a function from an interface.
  * @href CATIComSidlOutputStream#EndStream
  */
  HRESULT DoEndStream () ;

private:
  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  CATOmyOutputStreamKeyAndVersionExtractor (CATOmyOutputStreamKeyAndVersionExtractor &);
  CATOmyOutputStreamKeyAndVersionExtractor& operator=(CATOmyOutputStreamKeyAndVersionExtractor&);

  CATBoolean _KeyStatus, _VersionStatus;
  unsigned int _FoundKey, _FoundVersion;
};

//-----------------------------------------------------------------------

#endif
