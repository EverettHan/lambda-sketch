#ifndef HashTableAssocList_h
#define HashTableAssocList_h

//**********************************************************************************************************************
// class HashTableAssocList
//---------------------------------------------------------------------------------------------------------------------
// Class implementing an hash table associating each element to a list.
// In this way you can add a link A->B between 2 elements A and B.
// We say that A "generates" B and B "is generated by" A.
//
// Creation:
//    HashTableAssocList * Table = new HashTableAssocList(int iAllocatedSize);
//
// Deletion:
//    delete Table;
//    Table = NULL;
//
// Add a link A->B: (cost 1)
//    Table->AddAssoc(A, B);
//
// Remove all links generated by A: (cost 1)
//    Table->Remove(A);
//
// Test if there is something generated by A: (cost 1)
//    CATBoolean ItemExists = Table->IsInside(A);
//
// Get number of elements generating something: (cost 1)
//    int NbItems = Table->Size();
//
// Get number of elements generated by A: (cost 1)
//    int NbGeneratedByA = Table->GetNbAssoc(A);
//
// Scan all generating elements of the table:
//    HashTableAssocList_Begin(*Table, CurrentGenerating, CastedItemType)
//    {
//       CurrentGenerating->CastedItemType::...
//    } HashTableAssocList_End;
//
// Scan all elements generated by A:
//    HashTableAssocList_AssocBegin(*Table, A, CurrentGeneratedFromA, CastedAssocType)
//    {
//       CurrentGeneratedFromA->CastedAssocType::...
//    } HashTableAssocList_AssocEnd;
//---------------------------------------------------------------------------------------------------------------------
// 2011 WEEK 17      Creation                                                                                      LD2
//**********************************************************************************************************************

#include "CATListPV.h"
#include "CATMathInline.h"
#include "CATGMModelInterfaces.h"
#include "CATCGMPointerPList.h"
#include "CATAdaptiveHashTable.h"
#include "GMScanMacros.h"

#define HTAL_InheritFromAHT

class CATNewHashTable2Entries;
class HTAL_InternalList;

class ExportedByCATGMModelInterfaces HashTableAssocList : public CATAdaptiveHashTable
{
public:
  HashTableAssocList(int iEstimatedSize = 31);
  virtual ~HashTableAssocList();

  void AddAssoc(void * iElem, void * iAssoc);
  int GetNbAssoc(void * iElem);
  CATCGMPointerPList * GetAssoc(int iPos) const;
  CATCGMPointerPList * GetOrCreateAssoc(void * iElem);

  /**
  * Returns -1 if the element is not in the table.
  * Otherwise, returns the number of associated elements.
  */
  int GetNbAssocOrMinus1(void * iElem);
	
	void GetAllAssocElems(void * iElem, CATListPV & List);

	CATCGMPointerPList * LocateAssoc(void * iElem);

  void SetDuplicataAutorized (CATBoolean iDuplicataAutorized);
  CATBoolean  GetDuplicataAutorized();

  /**
  * If iElement is not in this or has 0 associations, add iElement to oAssociated.
  * Otherwise, add associated elements to oAssociated.
  * An element X associated to iElement will not be added to oAssociated if the couple (iElement, X) is in iBrokenLinks.
  */
  void GetAssociatedOrElement(
    void * iElement,
    CATAdaptiveHashTable & oAssociated,
    CATNewHashTable2Entries * iBrokenLinks = NULL);

protected:

  virtual void Reallocate();
  virtual void CreateEmptyTables();
  virtual void ResetTables();
  virtual void ReplaceByLastElement(int iPos);

private:
  CATBoolean _DuplicataAutorized;
  HTAL_InternalList ** _Lists;
};

#define HashTableAssocList_Begin(TABLE, CURRENT, TYPE)     CATCGMHashTableBegin(TABLE, CURRENT, TYPE)

#define HashTableAssocList_End                             CATCGMHashTableEnd

#define HashTableAssocList_AssocBegin(TABLE, ELEMENT, CURRASSOC, ASSOCTYPE)                                           \
{                                                                                                                     \
  CATCGMPointerPList * Lista##CURRASSOC = (TABLE).LocateAssoc(ELEMENT);                                               \
  if (Lista##CURRASSOC)                                                                                               \
  {                                                                                                                   \
    int ListaIndex##CURRASSOC, ListaSize##CURRASSOC(Lista##CURRASSOC->Size());                                        \
    for (ListaIndex##CURRASSOC = 1; ListaIndex##CURRASSOC <= ListaSize##CURRASSOC; ListaIndex##CURRASSOC++)           \
    {                                                                                                                 \
      ASSOCTYPE CURRASSOC = (ASSOCTYPE)(*Lista##CURRASSOC)[ListaIndex##CURRASSOC];                                    \
      if (CURRASSOC)                                                                                                  \
      {


#define HashTableAssocList_AssocEnd     \
      }                                 \
    }                                   \
  }                                     \
}



#endif





