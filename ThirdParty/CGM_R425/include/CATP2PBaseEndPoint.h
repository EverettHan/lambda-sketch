// COPYRIGHT Dassault Systemes 2002
//===================================================================
//
// CATP2PBaseEndPoint.h
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  May 2002  Creation: Code generated by the CAA wizard  JBF
//===================================================================
#ifndef CATP2PBaseEndPoint_H
#define CATP2PBaseEndPoint_H

#include "CATP2PEndPoint.h"
#include "CATErrorDef.h"
#include "CATEventSubscriber.h"


class ExportedByCATP2PCore CATP2PBaseEndPoint : public CATP2PEndPoint
{
	CATDeclareClass;

public:

	// Standard constructors and destructors for an implementation class
	// -----------------------------------------------------------------
	CATP2PBaseEndPoint ();
	virtual ~CATP2PBaseEndPoint ();

	// Need to be implemented by derivation classes
	// ------------------------------------------------------------------
	virtual int IsUnicast()=0;
	virtual int IsMulticast()=0;

	// local implementation that initialize EndPointInfo
	// ------------------------------------------------------------------
	HRESULT Initialize(const char* adrs, int port);

	// local implementation that call SplitAndSend
	// ------------------------------------------------------------------
	HRESULT SendToGroup	(	CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size);
	HRESULT SendToPeer	(	CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size,CATP2PEndPointInfo* destination, CATP2PPeerInfo* remotePeerInfo);

protected:
	  // CATP2PEndPoint Virtual method for reception
	HRESULT ReceiveData();

private:
	// The copy constructor and the equal operator must not be implemented
	// -------------------------------------------------------------------
	CATP2PBaseEndPoint (CATP2PBaseEndPoint &);
	CATP2PBaseEndPoint& operator=(CATP2PBaseEndPoint&);

	 // 1 methodes à implémenter si on veut supporter le split
	 // -------------------------------------------------------------------
  virtual  HRESULT SendData(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size)=0;

  // We keep this one at base class level because of CATP2PHeader
  // -------------------------------------------------------------------
  HRESULT BuildMessage (CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size, CATP2PHeader& head);
  HRESULT SendData(CATUnicodeString& destGroup, const char* destSrv, char* buffer, int size, CATP2PEndPointInfo* destination,  CATP2PPeerInfo* remotePeerInfo);

};

//-----------------------------------------------------------------------

#endif




