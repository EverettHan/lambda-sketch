// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMDispIIOPConnectionToken.h
// Define the CATIPLMDispIIOPConnectionToken interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mar 2005  Creation: Code generated by the CAA wizard  sbq
//===================================================================
#ifndef CATIPLMDispIIOPConnectionToken_H
#define CATIPLMDispIIOPConnectionToken_H

// PPRDispatcherCClient framework
#include "CATPLMDispatcherSpecificItf.h"
// #include "PPRDCCServerTokenProvider.h"

// System framework
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMDispatcherSpecificItf IID IID_CATIPLMDispIIOPConnectionToken;
#else
extern "C" const IID IID_CATIPLMDispIIOPConnectionToken ;
#endif

class PPRDCCServerTokenProvider;

//------------------------------------------------------------------

/**
* Interface representing a connection token that contains all the 
* required information to connect to a Orbix data source.
* <p>
* This is an additional interface for a CATIPLMDispConnectionToken.
*
* @see PPRDispatcherCClient.CATIPLMDispConnectionToken
*/
class ExportedByCATPLMDispatcherSpecificItf CATIPLMDispIIOPConnectionToken: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
  
   /**
    * Returns a ServerTokenProvider
    * <br><b>Role:</b>This method allows to get a server token provider
    * @param oServerTokenProvider
    *   Ouput parameter, server token provider.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: Error. Report to GetLastError for more information.</li>
    *  </ul>
    */
  virtual HRESULT GetServerTokenProvider(PPRDCCServerTokenProvider **oServerTokenProvider)= 0;

   /**
    * Sets a ServerTokenProvider
    * <br><b>Role:</b>This method allows to set a server token provider
    * @param iServerTokenProvider
    *   Server token provider.
    * @return
    *   <ul>
    *   <li><tt>S_OK</tt>: Successfull. </li> 
    *   <li><tt>E_FAIL</tt>: The ServerTokenProvider has already been set.</li>
    *  </ul>
    */
  virtual HRESULT SetServerTokenProvider(const PPRDCCServerTokenProvider *iServerTokenProvider)= 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
