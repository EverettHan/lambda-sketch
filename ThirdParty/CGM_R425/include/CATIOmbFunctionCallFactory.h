/**
* @level Protected
* @usage U4 CATOmbFunctionCallFactoryAdapter
*/

// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
//  May 2008  Creation: Code generated by the CAA wizard  KWU
//===================================================================
#ifndef CATIOmbFunctionCallFactory_H
#define CATIOmbFunctionCallFactory_H

#include "CATObjectModelerBase.h"
#include "CATBaseUnknown.h"
#include "sequence_octet.h"

class CATIOmbFunction;
class CATILinkableObject_var;
class CATILinkableObject;
class CATIOmbFunctionCall_var;
class CATIOmbFunctionCall;
class CATOmbUniversalLinkResult;
class CATIOmbFunction_var;
class CATListValCATIOmbFunctionCall_var;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATObjectModelerBase IID IID_CATIOmbFunctionCallFactory;
#else
extern "C" const IID IID_CATIOmbFunctionCallFactory ;
#endif

/**
* Interface representing Function Call factories.
*
* <br><b>Role</b>: Implement this interface if you want to create a Function Call Factory.
* CATIOmbFunctionCallFactory are applicative objects able to create and unmarshal Function Calls.
* Before implementing this interface you must ask a persistent ID to Omb.
* Persistent Ids are registered in CATOmbUniversalLinkFactoryRegisterKey.h
* Function Call factories are instanciated and called only by Omb when creating CATOmbUniversalLinkResult.
* <p>

* @href CATOmbUniversalLinkResult, CATIOmbFunctionCall, CATIOmbFunction
*/
class ExportedByCATObjectModelerBase CATIOmbFunctionCallFactory: public CATBaseUnknown
{
    CATDeclareInterface;

public:


    /** 
    * Creates a Function Call.
    *
    * <br><b>Role</b>: Creates a Function Call from a Function and applicative data. 
    *                  Created A Function Call needs an applicative Context to compute the result of its function.
    *                  Extracts this Applicative Context from Applicative Data. 
    *
    * @param iData [in]
    *   The input given by pointing application for the creation of a functional pointing.
    *   iData holds the argument and the Applicative Context that Function Call will need to compute its result. 
    * @param iFunction [in]
    *   The function that Function Call will apply.
    * @param oFunctionCall [out]
    *   The created Function Call
    * @param oContext [out]
    *   The Applicative Context oFunctionCall will need to compute its function result.
    *
    * @return
    *   <code>S_OK</code>         if everything ran ok
    *   <code>E_INVALIDARG</code> if iData and iFunction are not compatible: for instance if iData and iFunction 
    *                             do not belong to the same application.
    *   <code>E_FAIL</code>       otherwise
    *
    */
    virtual HRESULT CreateFunctionCall ( CATBaseUnknown *iData, CATIOmbFunction *iFunction, CATIOmbFunctionCall_var &oFunctionCall, CATILinkableObject_var &oContext) = 0;
    

    /** 
    * Creates a Function Call at unmarshalling
    *
    * <br><b>Role</b>: Creates a Function Call from a function and an unmarshalled streams
    *
    * @param iFunction[in]
    *   The Function Call function.
    * @param iArgumentStream [in]
    *   The unmarshalled stream of the function input argument.
    * @param iContext [in]
    *   The applicative context the FunctionCall will need to compute its function result.
    * @param oFunctionCall [out]
    *   The created Function Call
    * @return
    *   <code>S_OK</code>         if everything ran ok
    *   <code>E_INVALIDARG</code> if stream, function or context are not recognized.
    *   <code>E_FAIL</code>       otherwise
    *
    */
    virtual HRESULT UnmarshallFunctionCall ( CATIOmbFunction *iFunction, SEQUENCE(octet) &iArgumentStream, CATILinkableObject *iContext, CATIOmbFunctionCall_var &oFunctionCall) = 0;


    /** 
    * Creates a Function at unmarshalling
    *
    * <br><b>Role</b>: Creates a Function from a unmarshalled stream
    *
    * @param iFunctionStream [in]
    *   The unmarshalled stream of the function.
    * @param oFunction [out]
    *   The created Function
    *
    * @return
    *   <code>S_OK</code>         if everything ran ok
    *   <code>E_INVALIDARG</code> if stream is not recognized.
    *   <code>E_FAIL</code>       otherwise
    *
    */
    virtual HRESULT UnmarshallFunction ( SEQUENCE(octet) &iFunctionStream, CATIOmbFunction_var &oFunction) = 0;

    /**
    *
    *
    * Gives List of FC pointing iDATA for Cross-Highlight
    */
    virtual HRESULT GetExistingFunctionCall(CATBaseUnknown* iData, CATIOmbFunction* iFunction, CATIOmbFunctionCall_var & oFunctionCalls)=0;

	virtual HRESULT GetExistingFunctionCalls(CATBaseUnknown* iData, CATIOmbFunction* iFunction, CATListValCATIOmbFunctionCall_var& oFunctionCallList)=0;

};

CATDeclareHandler(CATIOmbFunctionCallFactory, CATBaseUnknown);

#endif
