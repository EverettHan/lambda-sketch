//===================================================================
// COPYRIGHT Dassault Systemes 2014/09/29
//===================================================================
// SWXUtStateManager.cpp
// Header definition of class SWXUtStateManager
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2014/09/29 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtStateManager_H
#define SWXUtStateManager_H

#include "SWXUtGeneral.h"

#include "CATBaseUnknown_WR.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"
#include "SWXUtMap.h"
#include "SWXUtVector.h"

class SWXIUtStateController;
class SWXIUtStateListener;

//-----------------------------------------------------------------------

class ExportedBySWXUtGeneral SWXUtStateManager
{
	typedef SWXUtMap<CATUnicodeString, bool> SWXUtStateMap_t;

	typedef SWXUtVector<CATBaseUnknown_WR> SWXUtControllerList_t;
	typedef SWXUtMap<CATUnicodeString, SWXUtControllerList_t> SWXUtControllerMap_t;

	typedef SWXUtVector<CATBaseUnknown_WR> SWXUtListenerList_t;
	typedef SWXUtMap<CATUnicodeString, SWXUtListenerList_t> SWXUtListenerMap_t;

public:
	// Standard constructors and destructors
	// -------------------------------------
	SWXUtStateManager ();
	virtual ~SWXUtStateManager ();

	HRESULT GetCurrentState(CATUnicodeString & oState) const;
	HRESULT GetRegisteredStates(CATListOfCATUnicodeString & oStates) const;

	HRESULT SwitchTo(const CATUnicodeString & iState);

	HRESULT IsStateRegistered(const CATUnicodeString & iState) const;
	HRESULT RegisterState(const CATUnicodeString & iState);
	HRESULT UnregisterState(const CATUnicodeString & iState);

	HRESULT RegisterStates(const CATListOfCATUnicodeString & iStates);
	HRESULT UnregisterStates();

	HRESULT RegisterController(SWXIUtStateController * ipController);
	HRESULT UnregisterController(const SWXIUtStateController * ipController);

	HRESULT RegisterListener(SWXIUtStateListener * ipListener);
	HRESULT UnregisterListener(const SWXIUtStateListener * ipListener);
private:
	// Copy constructor and equal operator
	// -----------------------------------
	SWXUtStateManager (SWXUtStateManager &);
	SWXUtStateManager& operator=(SWXUtStateManager&);

	HRESULT EnterState(const CATUnicodeString & iState);
	HRESULT ExitState();

	CATUnicodeString mCurrentState;
	SWXUtStateMap_t mStates;

	SWXUtControllerMap_t mControllers;
	SWXUtListenerMap_t mListeners;
};

//-----------------------------------------------------------------------

#endif
