/*====================================================
 *  (c) 1999 Dassault Systemes. All rights reserved  =
 *     Generated by CNextBackEnd version 0.1 on      =
 *===================================================*/
// COPYRIGHT DASSAULT SYSTEMES 2003
#ifndef CATIACacheSettingAtt_h
#define CATIACacheSettingAtt_h

#include "CATCORBABoolean.h"
#include "CAT_VARIANT_BOOL.h"
#include "JS0MRSHL.h"


#include "CATBSTR.h"
#include "CATIASettingController.h"
#include "CATSafeArray.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByJS0MRSHL IID IID_CATIACacheSettingAtt;
#else
extern "C" const IID IID_CATIACacheSettingAtt;
#endif

class ExportedByJS0MRSHL CATIACacheSettingAtt : public CATIASettingController
{
  CATDeclareInterface;
  
public:
  virtual HRESULT __stdcall get_ActivationMode(CAT_VARIANT_BOOL & oIsActive)=0;
  
  virtual HRESULT __stdcall put_ActivationMode(CAT_VARIANT_BOOL iIsActive)=0;
  
  virtual HRESULT __stdcall SetActivationModeLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetActivationModeInfo(CATBSTR &AdminLevel, 
						  CATBSTR &oLocked,
						  CAT_VARIANT_BOOL &oModified)=0;

  virtual HRESULT __stdcall get_LocalPath(CATBSTR & oLocalPath)=0;
  
  virtual HRESULT __stdcall put_LocalPath(const CATBSTR & iLocalPath)=0;
  
  virtual HRESULT __stdcall SetLocalPathLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetLocalPathInfo(CATBSTR & AdminLevel,
					     CATBSTR & oLocked,
					     CAT_VARIANT_BOOL &oModified)=0;

  virtual HRESULT __stdcall GetReleasePath(CATSafeArrayVariant *&oRelPath)=0;
  
  virtual HRESULT __stdcall PutReleasePath(const CATSafeArrayVariant & iRelPath)=0;
  
  virtual HRESULT __stdcall SetReleasePathLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetReleasePathInfo(CATBSTR & AdminLevel,
					       CATBSTR &oLocked,
					       CAT_VARIANT_BOOL &oModified)=0;

  virtual HRESULT __stdcall get_SizeControl(CAT_VARIANT_BOOL & oIsActive)=0;
  
  virtual HRESULT __stdcall put_SizeControl(CAT_VARIANT_BOOL iIsActive)=0;
  
  virtual HRESULT __stdcall SetSizeControlLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetSizeControlInfo(CATBSTR &AdminLevel,
					       CATBSTR &oLocked,
					       CAT_VARIANT_BOOL &oModified)=0;

  virtual HRESULT __stdcall get_CacheMaxSizeMo(CATLONG & oValue)=0;
  
  virtual HRESULT __stdcall put_CacheMaxSizeMo(CATLONG iValue)=0;
  
  virtual HRESULT __stdcall SetCacheMaxSizeMoLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetCacheMaxSizeMoInfo(CATBSTR &AdminLevel, 
						  CATBSTR &oLocked,
						  CAT_VARIANT_BOOL &oModified)=0;
   
  virtual HRESULT __stdcall get_TimestampMode(CAT_VARIANT_BOOL &oTimeStampOn)=0;
  
  virtual HRESULT __stdcall put_TimestampMode(CAT_VARIANT_BOOL iTimeStampOn)=0;
  
  virtual HRESULT __stdcall SetTimestampModeLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetTimestampModeInfo(CATBSTR & AdminLevel,
						 CATBSTR &oLocked,
						 CAT_VARIANT_BOOL & oModified)=0;
  

  virtual HRESULT __stdcall get_UTCTimeFormat(CAT_VARIANT_BOOL &oTimeStampOn)=0;
  
  virtual HRESULT __stdcall put_UTCTimeFormat(CAT_VARIANT_BOOL iTimeStampOn)=0;
  
  virtual HRESULT __stdcall SetUTCTimeFormatLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetUTCTimeFormatInfo(CATBSTR & AdminLevel,
						 CATBSTR &  oLocked,
						 CAT_VARIANT_BOOL & oModified)=0;

  virtual HRESULT __stdcall get_LODMode(CAT_VARIANT_BOOL& oMode)=0;
  
  virtual HRESULT __stdcall put_LODMode(CAT_VARIANT_BOOL iMode)=0;
  
  virtual HRESULT __stdcall SetLODModeLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetLODModeInfo(CATBSTR & AdminLevel,
					   CATBSTR & oLocked,
					   CAT_VARIANT_BOOL &oModified)=0;

  virtual HRESULT __stdcall get_ReleasedVoxel(float & oVoxel)=0;
  
  virtual HRESULT __stdcall put_ReleasedVoxel(float iVoxel)=0;
  
  virtual HRESULT __stdcall SetReleasedVoxelLock(CAT_VARIANT_BOOL iLocked)=0;
  
  virtual HRESULT __stdcall GetReleasedVoxelInfo(CATBSTR & AdminLevel,
						 CATBSTR & oLocked,
						 CAT_VARIANT_BOOL & oModified)=0;
};

CATDeclareHandler(CATIACacheSettingAtt, CATIASettingController);

#include "CATBaseDispatch.h"
#include "CATBaseUnknown.h"
#include "CATIABase.h"
#include "CATVariant.h"
#include "IDispatch.h"
#include "IUnknown.h"


#endif
