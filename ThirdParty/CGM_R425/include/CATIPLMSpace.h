// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMSpace.h
// Define the CATIPLMSpace interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2005  Creation: Code generated by the CAA wizard  PBV
//===================================================================
/**
* @level Protected
* @usage U1
*/
#ifndef CATIPLMSpace_H
#define CATIPLMSpace_H

#include "CATPLMIdentificationAccess.h"
#include "CATBaseUnknown.h"
#include "CATLISTV_CATPLMTypeId.h"
#include "CATLISTV_CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATPLMTypeHArray.h"
#include "CATOmxIter.h"
class CATPLMID_Any;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIdentificationAccess IID IID_CATIPLMSpace;
#else
extern "C" const IID IID_CATIPLMSpace;
#endif

class CATIAdpPLMIdentificator;
class CATPLMID;


/**
* Interface representing a resolution space
*/
class ExportedByCATPLMIdentificationAccess CATIPLMSpace : public CATBaseUnknown
{
  CATDeclareInterface;

public:

  // possible space type
  enum CatType
  {
    CatAuthoring
  };

  /**
  * Search component in session for a given Interface
  *
  * @param iPLMID [in]
  *   PLMID of PLM components (Complex PLMID are not authorized).
  *
  * @param iIID [in]
  *   The IID associated to the request
  *
  * @param oPPV [out, CATBaseUnknown#Release]
  *   associated result.
  *
  * @return
  *   S_OK if request succeeded <br>
  *   E_PENDING if component is not in session <br>
  *   E_NOINTERFACE if component is in session but QueryInterface failed <br>
  *   E_INVALIDARG if invalid parameters <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT SearchComponentInSession(const CATPLMID          & iPLMID,
    const IID               & iIID,
    void                    **oPPV) const = 0;

  /**
  * Search component in session for a given Interface
  *
  * @param iIdentifier [in]
  *   Identifier of PLM components.
  *
  * @param iIID [in]
  *   The IID associated to the request
  *
  * @param oPPV [out, CATBaseUnknown#Release]
  *   associated result.
  *
  * @return
  *   S_OK if request succeeded <br>
  *   E_PENDING if component is not in session <br>
  *   E_NOINTERFACE if component is in session but QueryInterface failed <br>
  *   E_INVALIDARG if invalid parameters <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT SearchComponentInSession(CATIAdpPLMIdentificator * iIdentifier,
    const IID               & iIID,
    void                    **oPPV) const = 0;

  /**
  * Search component by its PLMTypeId
  *
  * @param iListOfPLMTypeId [in]
  *   List of the PLMTypeId to use as a filter
  *
  * @param oListOfComponentAsCBU [out]
  *  The list of components as CATBaseUnknown
  *
  * @return
  *   S_OK if request succeeded <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT SearchComponentByPLMTypeId(CATLISTV(CATPLMTypeId)       & iListOfPLMTypeId,
    CATLISTV(CATBaseUnknown_var) & oListOfComponentAsCBU) const = 0;

  /**
 * Search component by its PLMTypeH
 *
 * @param iListOfPLMType [in]
 *   List of the PLMTypeH to use as a filter
 *
 * @param oListOfComponentAsCBU [out]
 *  The list of components as CATBaseUnknown
 *
 * @return
 *   S_OK if request succeeded <br>
 *   E_FAIL otherwise <br>
 */
  virtual HRESULT SearchComponentByPLMTypeH(CATPLMTypeHArray       & iListOfPLMType,
    CATLISTV(CATBaseUnknown_var) & oListOfComponentAsCBU) const = 0;

  /**
  * Check if the Component is deleted in Session and not yet commited to the database.
  *
  * @param iPLMID [in]
  *   Identifier of PLM components.
  *
  * @return
  *   S_OK if the Component is Deleted in the Session <br>
  *   S_FALSE if the Component is not Deleted in the Session <br>
  *   E_XXX otherwise <br>
  */
  virtual HRESULT IsDeleted(const CATPLMID & iPLMID) const = 0;
  virtual HRESULT IsDeleted(CATIAdpPLMIdentificator * iPLMID) const = 0;

  /**
  * Search component in session from its Physical Identifier
  *
  * @param iPhysicalId [in]
  *   Physical Identifier of PLM components.
  *
  * @param iIID [in]
  *   The IID associated to the request
  *
  * @param oPPV [out, CATBaseUnknown#Release]
  *   associated result.
  *
  * @return
  *   S_OK if request succeeded <br>
  *   E_PENDING if component is not in session <br>
  *   E_NOINTERFACE if component is in session but QueryInterface failed <br>
  *   E_INVALIDARG if invalid parameters <br>
  *   E_FAIL otherwise <br>
  */
  virtual HRESULT SearchComponentInSessionFromPhysicalId(const CATPLMID_Any & iPhysicalId,
    const IID               & iIID,
    void                    **oPPV) const = 0;


  /**
  * Retrieve the list of components loaded in session that share the same logical identifier
  */
  virtual CATOmxIter<CATBaseUnknown> GetLogicalFamily(const CATPLMID_Any& iLogicalId) const = 0;

};

//------------------------------------------------------------------

#endif
