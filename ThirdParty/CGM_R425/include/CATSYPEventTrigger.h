// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATSYPEventTrigger.h
// Header definition of CATSYPEventTrigger
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2007  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATSYPEventTrigger_H
#define CATSYPEventTrigger_H

#include <IntroInfra.h>
#include <CATSYPTriggerBase.h>
#include <CATISYPCollection.h>
#include <CATUnicodeString.h>

class CATISYPIntrospectable;
class CATSYPEventArgs;

//-----------------------------------------------------------------------

/**
 * A CATSYPEventTrigger reacts to a given event, sent by a given introspectable class.
 * It works with both versions od VID events.
 * It can triggers multiple CATSYPSetter and/or CATSYPBeginStoryboard (animations).
 */
class ExportedByIntroInfra CATSYPEventTrigger: public CATSYPTriggerBase
{
  CATDeclareClass;
public:
  CATSYPEventTrigger ();
  void SetRoutedEvent (const CATUnicodeString& i_routedEvent);
  const CATUnicodeString& GetRoutedEvent () const;
  void ReactOnSendEvent();
  /**
   * Install this event trigger for the given sender object.
   *
   * This function will add an event handler on @a i_pSenderObj for
   * the event described by this object. Note that after installation
   * it won't be possible to change the `RoutedEvent' property anymore
   * (@ref #SetRoutedEvent will fail with a @ref FAILURE).
   *
   * The event (@ref CATSYPEvent) will be found with the given
   * algorithm:
   *   - if the event name (`RoutedEvent' property) is a qualified 
   *     name, i.e. it is of the form <tt>className.eventName</tt>,
   *     then the @ref CATSYPMetaClass of the class specified in the
   *     name is retrieved and then the event is found on this meta class.
   *   - if the event name is not qualitifed, i.e. it is of the form 
   *     <tt>eventName</tt>, then we find the @ref CATSYPMetaClass of
   *     @a i_pSenderObj using @ref CATISYPIntrospectable::GetSYPMetaClass
   *     and then get the event on this meta class.
   *
   * The event handler will be registered on @a i_pSenderObj using its
   * exposed event handlers support available on its meta class (see
   * @ref CATSYPMetaClass#GetEventHandlersSupportDescriptor). As a
   * consequence @a i_pSenderObj must have:
   *   - a meta-class; i.e. @ref CATISYPIntrospectable::GetSYPMetaClass
   *     must not return @c NULL.
   *   - an introspectable event handlers support (i.e. 
   *     @ref CATSYPMetaClass#GetEventHandlersSupportDescriptor should
   *     not be @c NULL).
   *
   * No test is made to prevent multiple installations for the same @a
   * i_pSenderObj. This function can be called multiple times. As of
   * today uninstallation is not available. Since we are using a @ref
   * CATSYPWRefMethEventHandler, the destruction of this trigger will
   * automatically unregister it from @a i_pSenderObj.
   *
   * @param i_pSenderObj the object. Can't be @c NULL. Must have a
   * meta-class and an introspectable event handlers support.
   */
  void Install(CATISYPIntrospectable *i_pSenderObj);
protected:
  virtual ~CATSYPEventTrigger ();
private:
  /**
   * Callback function for @a _pHandler.
   */
  void HandlerCallback(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs);
private:  
  CATSYPEventTrigger (CATSYPEventTrigger &);
  CATSYPEventTrigger& operator=(CATSYPEventTrigger&);
private:  
  CATUnicodeString _routedEvent;
  /** The handler for the event of this trigger. @c NULL until this
      trigger has been installed (see @ref #Install). */
  CATSYPEventHandler *_pHandler;
};
//-----------------------------------------------------------------------

#endif
