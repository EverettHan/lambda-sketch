// COPYRIGHT DASSAULT SYSTEMES 2003-2004, ALL RIGHTS RESERVED.
//===================================================================
//
// CATFuzVolRep.h
// Header definition of CATFuzVolRep
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
// Mar 2003  Creation: Code generated by the CAA wizard  JXV+MQP
//===================================================================
#ifndef CATFuzVolRep_H
#define CATFuzVolRep_H

#include "CATFuzVolumeRep.h"
#include "CATFuzVolRepUtilities.h"
#include "CATFuzMathFunctionXYZ.h"
#include "CATMathPoint.h"
#include "CATIACGMLevel.h"

class CATFuzVolRepIEOper;

#ifdef CATIACGMV5R17
class CATCGMProgressBar;
#else
class CATPolyCallback;
#endif

#ifdef ENABLE_CATFuzVolRepGraphicRepOperator
class CATFuzVolRepGraphicRepOperator;
#endif

//----------------------------------------------------------------------------------

/**
* Class enabling V-Rep (Volumetric Representation) management.
*
* <p><b>NOTE:</b> At the moment, the only class derivating from <tt>CATFuzVolRep</tt> is
* <tt>CATFuzVolRepMultiResOctree</tt>, an octree data structure used to store distance
* information. However, other kinds of storage could become useful : in this case an
* intermediate class, <tt>CATDiscreteVolRep</tt>, would have to be derivated from
* <tt>CATFuzVolRep</tt>, to become the root class of regular-grid based storage classes.
* It would contain some of the methods implemented today in
* <tt>CATFuzVolRepMultiResOctree</tt>, such as the <tt>GetValue</tt>/<tt>SetValue</tt>
* methods.</p>
*
* <p>For example, the VPS method (Voxmap Point Shell, a boeing technology), which uses a
* 8^N-tree (limits the numbers of levels to 3), could be implemented in this way.</p>
*/
class ExportedByCATFuzVolumeRep CATFuzVolRep : public CATFuzMathFunctionXYZ
{
	
public:
	
	//------------------------------------------------------------------------------
	// Standard constructor
	//------------------------------------------------------------------------------
	/**
	* Standard constructor.
	*/
	CATFuzVolRep ();
	
	
	//------------------------------------------------------------------------------
	// Standard destructor
	//------------------------------------------------------------------------------
	/**
	* Standard destructor.
	*/
	virtual ~CATFuzVolRep ();
	
	
	//------------------------------------------------------------------------------
	// GetBoundingBox
	//------------------------------------------------------------------------------
	/**
	* Returns the bounding box of the volumetric representation.
	*
	* <P>
	* @param iMin,iMax
	*   The two opposite points defining the bounding box.
	* </P>
	*/
	virtual void GetBoundingBox (CATMathPoint & oMin, CATMathPoint & oMax) const = 0;

  
	//------------------------------------------------------------------------------
	// GetValue - XYZ version (global evaluator)
	//------------------------------------------------------------------------------
	/**
	* Returns the distance and normal value for any point inside the active voxel space.
	*
	* <P>The (<TT>iX</TT>, <TT>iY</TT>, <TT>iZ</TT>) point does not have to be a vertex
	* of the grid : the returned distance is calculated as an interpolation of neighboring
	* values previously stored in the V-Rep using the SetValue() method.</P>
	*
	* <P>
	* @param iX
	* @param iY
	* @param iZ
	*   Global coordinates of the 3D point where the distance must be evaluated.
	*
	* @param oValue
	*   Distance evaluated (interpolation of neighboring value), or <TT>UNKNOWN_VALUE</TT>
	*   if this value is not available (in this case, the return value is <TT>FALSE</TT>).
	*
	* @return
	*   Succes (<TT>TRUE</TT>) or failure (<TT>FALSE</TT>) of this evaluation.
	* </P>
	*/
	virtual CATBoolean GetValue (const double iX, const double iY, const double iZ, double& oValue) const = 0;

	
	//------------------------------------------------------------------------------
	// Friend classes
	//------------------------------------------------------------------------------
	/**
	* The <TT>CATFuzVolRepIEOper</TT> class must be declared <TT>friend class</TT>
	* as it must be allowed to access the protected method <TT>RunIE()</TT>.
	*/
	friend class CATFuzVolRepIEOper;
	

#ifdef ENABLE_CATFuzVolRepGraphicRepOperator
	/**
	* The <TT>CATFuzVolRepGraphicRepOperator</TT> class must be declared <TT>friend
	* class</TT> as it must be allowed to access the protected method
	* <TT>CreateGraphicRep()</TT>.
	*/
	friend class CATFuzVolRepGraphicRepOperator;
#endif


protected:

	//------------------------------------------------------------------------------
	// RunIE
	//------------------------------------------------------------------------------
	/**
	* Runs an iso surface extraction to build a triangularized mesh from the
	* volumetric representation.
	*
	* <P><B>R&I DEPT. - THIS PART OF THE DOCUMENTATION IS ONLY FOR INTERNAL USE.</B></P>
	*
	* <P>This method is protected, as it must only be accessed by the friend class
	* <TT>CATFuzVolRepIEOper</TT>.</P>
	*
	* <P>
	* @param iIEOperator
	*   <TT>CATFuzVolRepIEOper</TT> instance whose callbacks should be called
	*   during the IE operation. In normal use case, this parameter should be a
	*   pointer on the calling IE operator.
	*
	* @return
	*   <TT>TRUE</TT> if no problem occured during the extraction, <TT>FALSE</TT>
	*   otherwise.
	* </P>
	*/
#ifdef CATIACGMV5R17
	virtual CATBoolean RunIE (CATFuzVolRepIEOper * iIEOperator, int& errorCode, CATCGMProgressBar* callback = 0);
#else
	virtual CATBoolean RunIE (CATFuzVolRepIEOper * iIEOperator, int& errorCode, CATPolyCallback* callback = 0);
#endif


#ifdef ENABLE_CATFuzVolRepGraphicRepOperator
	//------------------------------------------------------------------------------
	// CreateGraphicRep
	//------------------------------------------------------------------------------
	/**
	* Builds a graphic representation of the volumetric representation.
	*
	* <P><B>R&I DEPT. - THIS PART OF THE DOCUMENTATION IS ONLY FOR INTERNAL USE.</B></P>
	*
	* <P>This method is protected, as it must only be accessed by the friend class
	* <TT>CATFuzVolRepGraphicRepOperator</TT>.</P>
	*
	* <P>
	* @param iGROperator
	*   <TT>CATFuzVolRepGraphicRepOperator</TT> instance whose callbacks should be
	*   called during the graphic representation construction. In normal use case,
	*   this parameter should be a pointer on the calling graphic rep operator.
	*
	* @return
	*   <TT>TRUE</TT> if no problem occured during the construction, <TT>FALSE</TT>
	*   otherwise.
	* </P>
	*/
	virtual CATBoolean CreateGraphicRep(CATFuzVolRepGraphicRepOperator * iGROperator);
#endif

};

//----------------------------------------------------------------------------------

#endif
