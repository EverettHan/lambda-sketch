// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMCompAutoNamingService.h
// Define the CATIPLMCompAutoNamingService interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2007  Creation: Code generated by the CAA wizard  jvm
//===================================================================
#ifndef CATIPLMCompAutoNamingService_H
#define CATIPLMCompAutoNamingService_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompAutoNamingService;
#else
extern "C" const IID IID_CATIPLMCompAutoNamingService ;
#endif

//------------------------------------------------------------------

/**
 * @level Protected
 * @usage U3
 */

//------------------------------------------------------------------
#include "CATCollec.h"
class CATPLMAutoNamingInput;
class CATPLMAutoNamingOutput;
class CATLISTP(CATPLMAutoNamingInput);
#include "CATOmxVector.h"

/**
* Interface to retrieve a unique name from a server. Interface belonging to the Component services.<br>
* To retrieve a valid pointer on this interface, use the static method 
* @href CATPLMComponentServices#GetAutoNamingService.<br>
*
* The service is responsible for providing a Pool of values to decrease the client/provider chat.
* The size of the pool is 20 by default.
* 2017/02: The service is now also resposible to provide a persistent cache (on the filesystem),
* to keep stored unused names between two session.
*
* To ask for a specific number of values, use @href CATIPLMCompAutoNamingService::ReserveNames.
*/
class ExportedByCATPLMServicesItf CATIPLMCompAutoNamingService: public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /**
  * Retrieves the requested number of unique names from (by priority order):
  * Online mode: CATOmyOnlineOfflineSwitch::IsOnline()
  *   1- The auto name cache
  *   2- The given provider
  * Offline mode: CATOmyOnlineOfflineSwitch::IsOffline()
  *   1- Locally (generate them)
  *
  * @param iRepository [in]
  *   Provider on which the service will be called. Can be NULL : will use the connected provider.
  * @param iInputs [in]
  *   List of inputs. 
  *   /!\ Each input must have a reservation number left to 1. Other values are not allowed (ie you cannot use CATPLMAutoNamingInput::SetReservationNumber) /!\
  * @param oOutput [out]
  *   Object created to retrieve an output string from any input.
  *
  * @result
  *   S_OK : Online mode: Names have been retrieved from cache and/or provider
  *   S_FALSE: Offline mode: Names have been generated locally
  *   E_FAIL : Error while accessing provider data (operation not allowed, session expired, network issues, issue on the server...)
  *   E_INVALIDARG : oOutput is null OR at least one given input has a reservation number different to 1.
  */
  virtual HRESULT GenerateNames (const char *iRepository, const CATOmxVector<CATPLMAutoNamingInput> &iInputs, CATPLMAutoNamingOutput *oOutput) = 0;

  /**
  * Retrieves one unique name from (by priority order):
  * Online mode: CATOmyOnlineOfflineSwitch::IsOnline()
  *   1- The auto name cache
  *   2- The given provider
  * Offline mode: CATOmyOnlineOfflineSwitch::IsOffline()
  *   1- Locally (generate it)
  *
  * <b>Note:</b> If no output can be found from the cache, 20 values will be asked to the provider. 
  *              The number of values asked to the provider is multiply per two each time that two requests are made during the same minute.
  *              Maximum number of value that could be asked to the provider is 640
  *              Example:
  *                  hh:mm:ss
  *                - 11:55:24  no output can be found from the cache, 20 values will be asked to the provider
  *                - 11:55:55  no output can be found from the cache, 40 values will be asked to the provider
  *                - 11:56:21  no output can be found from the cache, 60 values will be asked to the provider
  *                - 11:57:35  no output can be found from the cache, 20 values will be asked to the provider
  *
  * @param iRepository [in]
  *   Provider on which the service will be called. Can be NULL : will use the connected provider.
  * @param iInput [in]
  *   The input.
  *   /!\ The reservation number must be set to 1. Other values are not allowed (ie you cannot use CATPLMAutoNamingInput::SetReservationNumber) /!\
  * @param oOutput [out]
  *   Object created to retrieve the output string from the input.  
  *
  * @result
  *   S_OK : Online mode: Name has been retrieved from cache or provider
  *   S_FALSE: Offline mode: Name has been generated locally
  *   E_FAIL : Error while accessing provider data (operation not allowed, session expired, network issues, issue on the server...)
  *   E_INVALIDARG : iInput or oOutput is null
  */
  virtual HRESULT GenerateName (const char *iRepository, const CATPLMAutoNamingInput *iInput, CATPLMAutoNamingOutput *oOutput) = 0;

  /**
  * Fills the pool with unique names from provider.
  * Only works when Online mode.
  * Usage of CATPLMAutoNamingInput::SetReservationNumber is allowed to reserve more than 1 autoname.
  *
  * @param iRepository [in]
  *   Provider on which the service will be called. Can be NULL : will use the connected provider.
  * @param iInputs [in]
  *   The list of input values used to fill the pool.
  *
  * @result
  *   S_OK : Online mode: The pool has been filled with provider auto names
  *   S_FALSE : Offline mode: nothing retrieved
  *   E_FAIL : Error while accessing provider data (operation not allowed, session expired, network issues, issue on the server...)
  */
  virtual HRESULT ReserveNames (const char *iRepository, const CATOmxVector<CATPLMAutoNamingInput> &iInputs) = 0;

  /**
  * DEPRECATED: do not USE THIS.
  * Instead, use ReserveNames with CATPLMAutoNamingInput::SetReservationNumber.
  *
  * Sets the pool size for the next fill.
  * @param iPoolSize [in]
  *   Must be between 1 and 40.
  * @result
  *   S_OK : The size has been set.
  *   E_FAIL : The input size is out limits.
  */
  virtual HRESULT SetPoolSizeForNextFill (int iPoolSize) = 0;

  /**
  * Deprecated, use GenerateNames with CATOmxVector input instead
  */
  virtual HRESULT GenerateNames (const char *iRepository, const CATLISTP (CATPLMAutoNamingInput) &iInputs, CATPLMAutoNamingOutput *oOutput) = 0;

  /**
  * Deprecated, use ReserveNames with CATOmxVector input instead
  */
  virtual HRESULT ReserveNames (const char *iRepository, const CATLISTP (CATPLMAutoNamingInput) &iInputs) = 0;
};


#endif
