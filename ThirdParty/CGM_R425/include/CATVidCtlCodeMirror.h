//===================================================================
// COPYRIGHT Dassault Systemes 2013/09/05
//===================================================================
// CATVidCtlCodeMirror.cpp
// Header definition of class CATVidCtlCodeMirror
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/09/05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATVidCtlCodeMirror_H
#define CATVidCtlCodeMirror_H

#include "VisuDialog.h"
#include "CATVidCtl.h"
#include <functional>

class CATVidCtlImageAndLabelCombo;
class CATVidCtlLineEditor;
class CATVidCtlWebViewer;
class CATVidJSMessageEventArgs;
class CATVidCtlImageAndLabelCombo;
class CATVidCtlLineEditor;
class CATVidCtlWebViewer;
class CATVidJSMessageEventArgs;
class CATKeybdEvent;
//class CATVidWebContextMenuEventArgs;
//-----------------------------------------------------------------------

class ExportedByVisuDialog CATVidCtlCodeMirror: public CATVidCtl
{
  CATDeclareClass;
  friend class l_CATVidCtlCodeMirror;
  DeclareResource(CATVidCtlCodeMirror, CATVidCtl);

public:
  // Standard constructors and destructors
  // -------------------------------------
  CATVidCtlCodeMirror ();
  static CATVidCtlCodeMirror* CreateCodeMirror(CATCommand* i_pParent, const CATString& i_pIdentifier);

  /**
  * Sets the text to be displayed
  */
  void SetText(const CATUnicodeString& iText);
  /**
  * Requests the text currently displayed
  */
  void RequestText(); 
  /**
  * Sets the size of the text to be displayed
  */
  void SetFontSize(int i_Size);
  /**
  * Gets the size of the text displayed
  */
  int GetFontSize() const { return _fontSize; }
  /**
  * Whether to show line numbers to the left of the editor
  */
  void SetShowLineNumbers(CATBoolean i_ShowLineNumbers);
  /**
  * Returns whether the line numbers are displayed in the left of the editor
  */
  CATBoolean GetShowLineNumbers() const { return _showLineNumbers; }
  /**
  * Whether editor should scroll or wrap for long lines
  */
  void SetLineWrappingFlag(CATBoolean i_LineWrappingFlag);
  /**
  * Returns whether editor scrolls or not for long lines
  */
  CATBoolean GetLineWrappingFlag() const { return _lineWrappingFlag; }
  /**
  * Whether to disable editing of the editor content by the user
  */
  void SetReadOnlyFlag(CATBoolean i_ReadOnlyFlag);
  /**
  * Returns whether editing of the editor content is disabled or not
  */
  CATBoolean GetReadOnlyFlag() const { return _readOnlyFlag; }
  /**
  * Whether to enable a syntax mode on the editor content
  */
  void SetSyntaxMode(const CATUnicodeString& i_SyntaxMode);
  /**
  * Returns syntax mode of the editor
  */
  CATUnicodeString GetSyntaxMode() const { return _syntaxMode; }
  /**
   * Sets the theme to be used by CodeMirror
   */
  void SetTheme(const CATUnicodeString& i_Theme);
  /**
   * Returns the theme used by CodeMirror
   */
  CATUnicodeString GetTheme() const { return _theme; }
  /**
  * Whether to allow the user to add/remove breakpoints
  */
  void SetBreakpointsSupport(CATBoolean i_BreakpointsSupport);
  /**
  * Returns whether adding/removing breakpoints is allowed
  */
  CATBoolean GetBreakpointsSupport() const { return _breakpointsSupport;}
  /**
  * Whether to set how bold or thin characters in text should be displayed.
  */
  void SetBoldFlag(CATBoolean i_BoldFlag);
  /**
  * Returns how bold or thin characters in text are displayed.
  */
  CATBoolean GetBoldFlag() const { return _boldFlag; }
  /**
  * Whether to set italic characters or not in text should be displayed.
  */
  void SetItalicFlag(CATBoolean i_ItalicFlag);
  /**
  * Returns TRUE if text is displayed in italic mode.
  */
  CATBoolean GetItalicFlag() const { return _italicFlag; }
  /**
  * Whether to set the font name of the editor content
  */
  void SetFontName(const CATUnicodeString& i_FontName);
  /**
  * Returns font name used by the editor
  */
  CATUnicodeString GetFontName() const { return _fontName; }
   /**
  * Returns the cursor position in the editor
  */
  CATMathPoint2Df GetCursorPosition() const { return _cursorPosition; }
  /**
  * Whether to show editor's status bar
  */
  void SetShowStatusBar(CATBoolean i_ShowStatusBar);
  /**
  * Returns whether the status bar is displayed or not
  */
  CATBoolean GetShowStatusBar() const { return _showStatusBar; }
  /**
  * Returns status bar information
  */
  CATUnicodeString GetStatusBarInfo() const { return _statusBarInfo; }
  /**
  * If a debugger is used with this component, it allows to manage that the debugger is currently in a break state.
  */
  void SetBreakState(CATBoolean i_BreakState); 
  /**
  * If a debugger is used with this component, it returns TRUE if the debugger is currently in a break state. 
  */
  CATBoolean GetBreakState() const { return _breakState; }
  /**
  * Whether to show editor's find bar
  */
  void SetShowFindBar(CATBoolean i_ShowFindBar);
  /**
  * Returns whether the find bar is displayed or not
  */
  CATBoolean GetShowFindBar() const { return _showFindBar; }
  /**
  * Whether to toggle a breakpoint at current selected line. 
  */
  void ToggleBreakpoint();
   /**
  * Whether to toggle a breakpoint activity at current selected line. 
  */
  void ToggleBreakpointActivity();
  /**
  * Whether to enable all breakpoints
  */
  void EnableAllBreakpoints(); 
  /**
  * Whether to disable all breakpoints
  */
  void DisableAllBreakpoints(); 
  /**
  * Whether to delete all breakpoints
  */
  void DeleteAllBreakpoints(); 
  /**
  * Whether to enable a breakpoint at given line
  */
  void EnableBreakpoint(int i_Line);
  /**
  * Whether to disable a breakpoint at given line
  */
  void DisableBreakpoint(int i_Line);
  /**
  * Whether to delete a breakpoint at given line
  */
  void DeleteBreakpoint(int i_Line);
  /**
  * Whether to display execution marker at given line
  */
  void DisplayExecutionMarker(int i_Line);
   /**
  * Whether to display (and scroll to if necessary) the given line
  */
  void ScrollToLine(int i_Line);
  /**
  * Whether to clear undo history 
  */
  void ClearHistory();
  /** 
  * Request the currently selected code .
  */
  void RequestSelection();
  /**
  * Set the current selection
  */
  void SetSelection(int i_LineStart, int i_CharStart, int i_LineEnd, int i_CharEnd);
  /**
  * Register external css file
  */
  void RegisterExternalCss(const CATUnicodeString& i_CssPath);
  /** 
  * Request the currently selected code range.
  */
  void RequestSelectionRange();
  /**
  * Can be use to mark a range of text with a specific CSS class name
  */
  void MarkText(int i_LineStart, int i_CharStart, int i_LineEnd, int i_CharEnd, CATUnicodeString i_ClassName);
  /**
  * Can be use to unmark a range of text
  */
  void UnMarkText(int i_LineStart, int i_CharStart, int i_LineEnd, int i_CharEnd);
  /**
  * Set focus on code editor
  * @param iDisplayVirtualKeyboard in Touch environment, enables to display virtual keyboard
  */
  void SetFocus(CATBoolean iDisplayVirtualKeyboard=FALSE);
  /**
  * Reset focus on code editor
  */
  void ResetFocus();
  /**
  * Insert text at the given position
  */
  void InsertText(const CATUnicodeString& i_Text, int i_LineStart, int i_CharStart);
  /**
  * Replace text from start position to end position 
  */
  void ReplaceText(const CATUnicodeString& i_Text, int i_LineStart, int i_CharStart, int i_LineEnd, int i_CharEnd);
  /**
  * Emitted whenever the text changes
  */
  static CATSYPEvent* TextChanged();
  /**
  * Emitted whenever the text is requested by code
  */
  static CATSYPEvent* TextRequested(); 
  /**
  * Emitted whenever the text selection is requested by code.
  */
  static CATSYPEvent* SelectionRequested();
  /**
  * Emitted whenever the text selection range is requested by code.
  */
  static CATSYPEvent* SelectionRangeRequested();
  /**
  * Emitted whenever Ctrl+S is activated on the editor
  */
  static CATSYPEvent* AskForSave();
  /**
  * Emitted whenever F5 is activated on the editor during debugging session 
  */
  static CATSYPEvent* Continue();
  /**
  * Emitted whenever F10 is activated on the editor during debugging session
  */
  static CATSYPEvent* StepOver(); 
   /**
  * Emitted whenever F11 is activated on the editor during debugging session
  */
  static CATSYPEvent* StepIn();
   /**
  * Emitted whenever Shift+F11 is activated on the editor during debugging session
  */
  static CATSYPEvent* StepOut();
   /**
  * Emitted whenever Shift+F5 is activated on the editor during debugging session
  */
  static CATSYPEvent* Stop(); 
   /**
  * Emitted whenever Ctr+F5 is activated on the editor
  */
  static CATSYPEvent* Break();
   /**
  * Emitted whenever F5 is activated on the editor
  */
  static CATSYPEvent* Run();
  /**
  * Emitted whenever F9 is activated on the editor 
  */
  static CATSYPEvent* BreakpointToggled(); 
  /**
  * Emitted whenever Ctrl+F9 is activated on the editor 
  */
  static CATSYPEvent* BreakpointActivityToggled();
  /**
  * Emitted whenever Shift+Ctrl+F10 is activated on the editor and all breakpoints have been enabled
  */
  static CATSYPEvent* AllBreakpointsEnabled();
  /**
  * Emitted whenever Shift+Ctrl+F10 is activated on the editor and all breakpoints have been disabled
  */
  static CATSYPEvent* AllBreakpointsDisabled();
  /**
  * Emitted whenever Shift+Ctrl+F9 is activated on the editor 
  */
  static CATSYPEvent* AllBreakpointsDeleted();
  /**
  * Emitted whenever the editor is ready to use
  */
  static CATSYPEvent* Ready();
  /**
  * Emitted whenever the selection or cursor moves
  */
  static CATSYPEvent* CursorActivity();
  /**
  * Emitted whenever the editor is focused
  */
  static CATSYPEvent* Focus();
  /**
  * Emitted whenever the editor focus is lost
  */
  static CATSYPEvent* Blur();
  /**
  * Emitted whenever a context menu is about to be displayed.
  */
  //static CATSYPEvent* ContextMenu();
  /**
  * Handled whenever find feature is cancelled.
  */
  void OnCancelFind(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs); 
  /**
  * Handled whenever find next occurence is asked.
  */
  void OnFind(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs); 
  /**
  * Handled whenever find previous occurence is asked.
  */
  void OnFindPrev(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs); 
  /**
  * Handled whenever text to find is changed.
  */
  void OnFindTextChanged(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs); 
  /**
  * Handled whenever find is asked.
  */
  void OnFindReturnPressed(CATBaseUnknown *i_pSender, CATSYPEventArgs *i_pArgs); 

  /*
    By default, all accelarators are consumed by the CATVidCtlCodeMirror (when it has the focus)
    except the "Ctrl+s" which is commonly the accelerator for the Save command.
    This means that, by default, on a 3DExperience session, the "Ctrl+s" does not reach
    the CATVidCtlCodeMirror and no AskForSave event is dispatched.
    With the above function, you have the ability to consume, not consume or use default behavior.
    If you decide to consume an accelerator and
      - if a 3DExperience command defines this accelerator, the 3DExperience command is not started
      - if no 3DExperience command defines this accelerator, the accelerator reaches the CATVidCtlCodeMirror
    If you decide to not consume an accelerator and
      - if a 3DExperience command defines this accelerator, the 3DExperience command is started.
      - if no 3DExperience command defines this accelerator, the accelerator reaches the CATVidCtlCodeMirror anyway
    Examples for a 3DExperience session:
      - For "Ctrl+s", if you return 1, the command associated to the "Ctrl+s" (Save) won't be started
      - For "Ctrl+a", if you return 0, as currently there is no command defining the "Ctrl+a" accelerator, the "Ctrl+a" reaches
        the CATVidCtlCodeMirror and the whole text is selected.
    Return:
      1: to consume the accelerator and prevent the command with the accelerator to be started
      0: to not consume the accelerator and allow the command with the accelerator to be started
      -1: to execute the default behavior for the accelerator
  */
  void SetConsumeAcceleratorFunction(std::function<int(const CATUnicodeString&)> const &iConsumeAcceleratorFunction);

protected: 
  virtual ~CATVidCtlCodeMirror ();
  virtual unsigned int KeyboardAction(CATKeybdEvent* i_pEvent);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlCodeMirror (CATVidCtlCodeMirror &);
  CATVidCtlCodeMirror& operator=(CATVidCtlCodeMirror&);

  virtual void TemplateDataUpdated();
  void OnModesComboSelect(CATBaseUnknown* i_pSender, CATSYPEventArgs* i_spArgs);
  void HandleCEFEvent(CATBaseUnknown* i_pSender, CATVidJSMessageEventArgs* i_spArgs);
  //void HandleCEFContextMenu(CATBaseUnknown* i_pSender, CATVidWebContextMenuEventArgs* i_spArgs);
  CATUnicodeString _GetEditorRscPath(); 
  void    _SetCMBoolOption(const CATUnicodeString& i_Option, CATBoolean i_Value);
  void    _SetCMStringOption(const CATUnicodeString& i_Option, const CATUnicodeString& i_Value);
  void    _SetCMStyleAttribute(const CATUnicodeString& i_Attribute, const CATUnicodeString& i_Value);
  void    _SetCMArg(const CATUnicodeString& i_Arg, const CATUnicodeString& i_Attribute, const CATUnicodeString& i_Value);
  void    _SendCommand(const CATUnicodeString& i_CommandID, const CATUnicodeString& i_CommandData);
  void    _CallJSOnEditor(const CATUnicodeString& iFunction);
  void    _OnJavaScriptNotification(const CATUnicodeString& i_CommandArgs);
  HRESULT _URLDecode(const CATUnicodeString& iUrl, CATUnicodeString& oUrl);
  void    _URLEncode(CATUnicodeString& ioUrl);
  void    _HandleJavaScriptCommand(const CATUnicodeString& i_Command);
  void    _SetCursorPosition(const CATMathPoint2Df& iCursorPosition); 
  void    _SetStatusBarInfo(const CATUnicodeString& iStatusBarInfo);
  void    _TreatParams(const CATUnicodeString& iParams);
  void    _SetReady();
  void    _BuildStatusBarInfo(int iLine, int iChar);
  CATUnicodeString _BuildStartAndEndPosition(int i_LineStart, int i_CharStart, int i_LineEnd, int i_CharEnd);

  CATVidCtlWebViewer* _webViewer;
  CATVidCtlImageAndLabelCombo* _modesCombo; 
  CATVidCtlLineEditor*  _findEditor;

  int _fontSize;
  CATBoolean _showLineNumbers;
  CATBoolean _lineWrappingFlag; 
  CATBoolean _readOnlyFlag;
  CATUnicodeString _syntaxMode;
  CATUnicodeString _theme;
  CATBoolean _breakpointsSupport;
  CATBoolean _boldFlag;
  CATBoolean _italicFlag;
  CATUnicodeString _fontName; 
  CATMathPoint2Df _cursorPosition;
  CATBoolean _showStatusBar;
  CATUnicodeString _statusBarInfo; 
  CATBoolean _breakState;
  CATBoolean _showFindBar;
  CATBoolean _findQueryDirty;
  CATUnicodeString _searchedPattern;

  friend class CATVidTstCATVidCtlCodeMirrorEventsHandler;
};

//-----------------------------------------------------------------------

#endif
