// COPYRIGHT DASSAULT SYSTEMES 2008, ALL RIGHTS RESERVED.
//===================================================================
//
// CATPolyVisuOrthographicProjector.h
//
//===================================================================
//
// Usage notes: class to handle the orthographic frustums (cuboids or
// rectangular parallelepipeds, view as pyramid portions with
// rectangular bases and apices at infinity) generated by a box. Six
// different orthographic frustums can be obtained from a box: one for
// each of its faces.
//
// The box is defined by a CATPolyBody. Some tests are made to verify
// it is indeed a box (tree pairs of parallel faces with normal
// orthogonal to each others and common vertices) during the data
// initialization.
//
// Mainly gives a way to convert a point, from the world space
// coordinates system to one of the six frustum coordinates system,
// generated from the box used during the initialization.
//
//===================================================================
//
// Dec 2008  Creation: XXC (from CATPolyVisuFrustum)
//===================================================================

#ifndef CATPolyVisuOrthographicProjector_H
#define CATPolyVisuOrthographicProjector_H

#include "CATErrorDef.h"
#include "CATPolyVisuProjectionOper.h"
#include "CATBoolean.h"
#include "CATMathPoint.h"
#include "CATMathPointf.h"
#include "CATMathVector.h"
#include "CATPolyBody.h"

// Local structure
// ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
typedef struct s_OrthographicFaceMap {
  unsigned short U, V, W;
  CATBoolean WOrientation; // True if W is correctly oriented, FALSE
                           // ortherwise. The orientations of U and V
                           // do not really matter.
} OrthographicFaceMap;

class ExportedByPolyVisuProjectionOper CATPolyVisuOrthographicProjector
{
public:
  //constructor and destructor
  CATPolyVisuOrthographicProjector();  
  virtual ~CATPolyVisuOrthographicProjector();

  /** Sets the box to use to generate automatically the six
   *  orthographic frustums.
   *@param iPolyBody: a CATPolyBody that should define a box (in six
   *CATFace's)
   *@return S_OK if the CATPolyBody is indeed detected as a box and
   *initialization is done correctly, E_FAIL otherwise.
   */
  HRESULT SetParam(const CATPolyBody& iPolyBody);

  /** Return the orthonormal basis of the local orthographic frustum
   *  coordinate system. The frustum is identified by its number (the
   *  number of the face in the CATPolyBody box generating the
   *  frustums considered as the front of the frustum).
   *@param iNumFace: the number of the orthographic frustum, from 1 to
   *6 included.
   *@param oU: the U (width) direction vector in the local basis.
   *@param oV: the V (height) direction vector in the local basis.
   *@param oW: the W (depth) direction vector in the local basis.
   *@return S_OK if the class has been correctly initialized and the
   *basis is correctly defined, E_FAIL otherwise.
   */
  HRESULT GetBase (const int iNumFace, CATMathVector& oU, 
                   CATMathVector& oV, CATMathVector& oW) const;

  /** Return the size of the orthographic frustum in each direction.
   *@iNumFace: the number of the orthographic frustum, from 1 to
   *6 included.
   *@oWidth: the width of the base of the frustum.
   *@oHeight: the height of the base of the frustum.
   *@oDepth: the depth  of the frustum.
   *@return S_OK if the class has been correctly initialized and the
   *frustum number is valid, E_FAIL otherwise.
   */
  HRESULT GetLimits (const int iNumFace, double& oWidth, 
                   double& oHeight, double& oDepth) const;

  /** Change of coordinate system. Gets, from a point expressed in the
   *  world space coordinate system, the same point but expressed in
   *  the local frustum coordinate system, translated to have three
   *  coordinates in the range [0;1] for all points contained in the
   *  frustum (i.e. in the box).
   *@param iNumFace: the number of the orthographic frustum, from 1 to
   *6 included.
   *@param iOldCoords: original point in the worlds space coordinate
   *system.
   *@param oNewCoords: new point in the local orthographic frustum
   *coordinate system.
   *@return S_OK if the class has been correctly initialized and the
   *frustum number is valid, E_FAIL otherwise.
   */
  HRESULT GetNDCCoords(const int iNumFace, const CATMathPointf& iOldCoords, CATMathPointf& oNewCoords)const;

  /** Gets the radius of the sphere bounding the box/frustums.
   */
  double Rad() const;
  /** Gets the center of the box/frustums
   */
  const CATMathPoint& Center()const;

private:
  CATMathPoint _Center;
  CATMathVector _Basis[3]; // In this following order: U, V, W;
  double _Limits[3]; // In this following order: Width, Height,
                    // Depth. For the other values, they are the same
                    // with a change of sign. But the coordinates are
                    // computed according to this.
  OrthographicFaceMap _Maps[6];
};

#endif
