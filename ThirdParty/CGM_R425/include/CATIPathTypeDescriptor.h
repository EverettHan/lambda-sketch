//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2013/10/14
//===================================================================
// CATIPathTypeDescriptor.cpp
// Header definition of class CATIPathTypeDescriptor
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/10/14 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIPathTypeDescriptor_H
#define CATIPathTypeDescriptor_H

#include "CATLifSpecs.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATUnicodeString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern IID ExportedByCATLifSpecs IID_CATIPathTypeDescriptor;
#else
extern "C" const IID IID_CATIPathTypeDescriptor;
#endif


//----------------------------------------------------------------------------------------------------------------------------------------
// This interface represents a path type (a category of paths, local or global)
// From this path type, we can deduce some behavioral patterns regarding the paths that belong to this type
// - synchronization sensitivity
// - minor sensitivity
// - orientation
// - visibility
// We can also compute the NLS name of the path type that can be used to present paths in user interfaces
// A path descriptor can be retrieved by its name thanks to CATPathTypeDescriptorDictionary::FindPathType
// A path descriptor can be retrieved from the path thanks to CATPathDescriptor::PathDescriptor
//----------------------------------------------------------------------------------------------------------------------------------------
class ExportedByCATLifSpecs CATIPathTypeDescriptor: public CATBaseUnknown
{
CATDeclareInterface;

public:

	/**
	 * A path may be sensitive or not to the modification of the pointed elements of the path.
	 * This enum represents how path of this particular path types are sensitive
	 * None means that the path is not interested at all in update status of the pointed elements
	 * Last means that the path is interested in the update status of the last element in the path
	 * PathAndLast means that the path is interested in the update status of all the elements in the path
	 */
	enum SynchroSensitivity { None = 0,
							  Last = 1,
							  PathAndLast = 2};
	
	/**
	 * A path may be oriented (mainly used from a User interface perspective.
	 */
	enum Orientation { Neutral = 0, 
					   In = 1,
					   Out = 2,
					   InOut = 3};

	/**
	 * Indicates how the paths of this particular path types, are interested regarding update status
	 */
	virtual CATIPathTypeDescriptor::SynchroSensitivity SynchronizationSensitivity () const = 0;

	/**
	 * Indicates if the path of this particular PathType will adapt to minor versions (or stay on initial version)
	 */
	virtual CATBoolean AdaptativeToMinor () const = 0;


	/**
	 * Indicates if the path of this particular PathType will react to effectivity change, by duplicating the pointing objects
	 */
	virtual CATBoolean RerouteOnEffectivityChange () const = 0;

	/**
	 * Indicates how the paths of this particular path types, are oriented
	 */
	virtual CATIPathTypeDescriptor::Orientation GetOrientation () const = 0;

	/**
	 * Indicates if the path of this particular PathType will be presented in UI 
	 */
	virtual CATBoolean VisibilityInUI () const = 0;

  
	/** 
	 * Returns the NLS name to display in the user interface if the path was valid
	 */
	virtual CATUnicodeString PathTypeDisplayName() const =0;

  /**
   * Tests if the path corresponds to a particular type (that is expressed with a path type name)
   * Here again, it is important to understand that the PathTypeName in input is the path type known by the application
   * @param  iPathTypeName is the name of the path type known by the application
   * @return TRUE if the semantic relation is of the right path type
   */
  virtual CATBoolean Recognize (const CATUnicodeString &iPathTypeName) const=0;

  /** 
	 * Returns the name of the path type. DO NOT USE FOR THE MOMENT.
	 */
	virtual CATUnicodeString Name() const =0;

  /** 
	 * Returns the required information to operate a query/navigate on paths of this particular path type.
   * It can also be used to generate information that must be set on the path at creation time
   * @param oPathTypeNameOnPath : name of the path type to store on the path
   * @param oRoleNameOnPath : value to be put in the role attribute
   * @param oCategoryNameOnPath : value to be put in the category attribute
   * @return
  *    <ul>
  *    <li>S_OK     Operation succeeded, the list is not empty.</li>
  *    <li>E_FAIL   Operation failed.</li>
  *    </ul>
  */
  virtual HRESULT ProducePathCharacteristics ( CATUnicodeString &oPathTypeNameOnPath, CATUnicodeString &oRoleNameOnPath, CATUnicodeString &oCategoryNameOnPath) const = 0;



};

//-----------------------------------------------------------------------
CATDeclareHandler( CATIPathTypeDescriptor, CATBaseUnknown );

#endif
