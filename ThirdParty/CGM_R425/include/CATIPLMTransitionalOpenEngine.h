// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIPLMTransitionalOpenEngine.h
// Define the CATIPLMTransitionalOpenEngine interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  pbv 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMTransitionalOpenEngine_H
#define CATIPLMTransitionalOpenEngine_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATCollec.h"

class CATIPLMTransitionalOpenCallback;
class CATProxySpace;
class CATIPLMSpace;
class CATIAdpPLMIdentificator;
class CATLISTV(CATIAdpPLMIdentificator);
class CATIPLMComponent;
class CATLISTP(CATIAdpPLMIdentificator);
class  CATIPLMAsyncTask_var;
class CATPLMIDSet;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMTransitionalOpenEngine;
#else
extern "C" const IID IID_CATIPLMTransitionalOpenEngine ;
#endif

//------------------------------------------------------------------

/**
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMTransitionalOpenEngine: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  * The working context is a list of components.
  *
  * @param iWorkingSet
  *        The list of components to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet (const CATLISTP(CATIAdpPLMIdentificator) & iWorkingSet) = 0;

  /**
  * The working context is a list of components.
  *
  * @param iWorkingSet
  *        The list of components to work on.
  * @return
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.
  */
  virtual HRESULT SetUserWorkingSet (const CATPLMIDSet & iWorkingSet) = 0;


  // load mode .....


  /**
  * Launch transitional open (Synchronous way)
  *
  * @param iCallback
  *			The callback called during the transitional open engine.
  *
  * @return 
  *        S_OK if request succeeded.
  *        E_FAIL if request failed.  
  */
  virtual HRESULT RunTask (CATIPLMTransitionalOpenCallback * iCallback) const = 0 ;

  /**
  * Launch transitional open (Asynchronous way)
  *
  * @param iCallback
  *			The callback called during the Transitional Open Engine.
  *
  * @return 
  *        Holder managing asynchronous request.
  */
  virtual CATIPLMAsyncTask_var DeclareTask (CATIPLMTransitionalOpenCallback * iCallback) const = 0  ;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler( CATIPLMTransitionalOpenEngine, CATBaseUnknown );
//------------------------------------------------------------------

#endif
