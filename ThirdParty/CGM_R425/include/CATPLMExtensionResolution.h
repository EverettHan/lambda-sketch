//===================================================================
// COPYRIGHT Dassault Systemes 2017/12/11
//===================================================================
// CATPLMExtensionResolution.cpp
// Header definition of class CATPLMExtensionResolution
//===================================================================
//
// Usage notes:
//The extension is a set of resolved commit references. Commit references are a triplet made of:
//  •	iterationref : either a commit id or the string “SYSTAG : STAGING”
//  •	branchid
//  •	repositoryid
// This class implment a commit references. So a real extension could be seen as a set of object
// of this class
//===================================================================
//  2017/12/11 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMExtensionResolution_H
#define CATPLMExtensionResolution_H
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATPLMServicesPPrime.h"

#include "CATOmxDefaultCollecManager.h"
#include "CATOmxClassManager.h"
#include "CATOmxCollecManager.h"

class CATOmxJsonObject;

class ExportedByCATPLMServicesPPrime CATPLMExtensionResolution
{
public:

  // Default Constructor mandatory for DefaultCollectManager, should not be used
  CATPLMExtensionResolution();

  // Standard constructors and destructors
  // -------------------------------------

  /* Constructor of CATPLMEXtensionResolution
  * @param iIterationRef  [in]
  *     'iterationref'  belonging to the commit reference triplet coulb be either either a commit id or the string “SYSTAG:STAGING”
  * @param iBranchId      [in]
  *     'branchid' belonging to the commit reference triplet
  * @param iRepositoryId  [in]
  *     'repositoryid' belonging to the commit reference triplet
  */
  CATPLMExtensionResolution(CATUnicodeString &iIterationRef, CATUnicodeString &iBranchId, CATUnicodeString &iRepositoryId);
  virtual ~CATPLMExtensionResolution();

  // Standart accessor to attributes
  // ---------------------------------
  /*
  *  Accessor to '_iterationRef' class attribute which coresponds to Commit references triplet member 'branchid'
  * @param oIterationRef [out]
  *     either a commit id or the string “SYSTAG : STAGING”
  * @return
  * <dt> <code>E_FAIL</code> <dd> if '_iterationRef' is NULL
  * <dt> <code>S_OK</code>   <dd> otherwise
  */
  HRESULT GetIterationRef(CATUnicodeString &oIterationRef)const;

  /*
  *  Accessor to '_branchId' class attribute which coresponds to Commit references triplet member 'iterationref'
  * @param oBranchId  [out]
  * @return
  * <dt> <code>E_FAIL</code> <dd> if '_branchId' is NULL
  * <dt> <code>S_OK</code> <dd>   otherwise
  */
  HRESULT GetBranchId(CATUnicodeString &oBranchId)const;

  /*
  *  Accessor to '_repositoryId' class attribute which coresponds to Commit references triplet member 'repositoryId'
  * @param oRepositoryId  [out]
  * @return
  * <dt> <code>E_FAIL</code> <dd> if '_repositoryId' is NULL
  * <dt> <code>S_OK</code>   <dd> otherwise
  */
  HRESULT GetRepositoryId(CATUnicodeString &oRepositoryId)const;

  /*
  *  Accessor to '_iterationRef' class attribute which coresponds to Commit references triplet member 'branchid'
  * @param oIterationRef [out]
  *     either a commit id or the string “SYSTAG : STAGING”
  * @return
  * <dt> <code>E_FAIL</code> <dd>  if '_iterationRef' is NULL
  * <dt> <code>S_OK</code>   <dd>  otherwise
  */
  HRESULT GetIterationRef(CATUnicodeString &oIterationRef);

  /*
  *  Accessor to '_branchId' class attribute which coresponds to Commit references triplet member 'iterationref'
  * @param oBranchId [out]
  * @return
  * <dt> <code>E_FAIL</code> <dd> if '_branchId' is NULL
  * <dt> <code>S_OK</code>   <dd> otherwise
  */
  HRESULT GetBranchId(CATUnicodeString &oBranchId);

  /*
  *  Accessor to '_repositoryId' class attribute which coresponds to Commit references triplet member 'repositoryId'
  * @param oRepositoryId [out]
  * @return
  * <dt> <code>E_FAIL</code> <dd> if '_repositoryId' is NULL
  * <dt> <code>S_OK</code>   <dd> otherwise
  */
  HRESULT GetRepositoryId(CATUnicodeString &oRepositoryId);

  /*
  *  Accessor to '_repositoryId' class attribute which coresponds to Commit references triplet member 'repositoryId'
  * @param oIterationRef [out]
  * @param oBranchId     [out]
  * @param oRepositoryId [out]
  * @return
  * <dt> <code>E_FAIL</code> <dd>  if '_repositoryId' is NULL or '_branchId' is NULL or '_iterationRef' is NULL
  * <dt> <code>S_OK</code>   <dd>  otherwise
  */
  HRESULT GetAllAttributes(CATUnicodeString &oIterationRef, CATUnicodeString &oBranchId, CATUnicodeString &oRepositoryId);

  /*
  * Hash function
  *
  */
  CATHashKey Hash() const;
  int  Compare(const CATPLMExtensionResolution*) const;

  /*
  *  Get the Extension in CATOmxJsonObject : the format is the following :
  *  Example :
  * {
  * 	"iterationref": "SYSTAG:STAGING",
  * 	"branchid": "0023456789ABCDEF0123456789AB6543",
  * 	"repositoryid": "0003456789ABCDEF0123456789A5432"
  * }
  * @param oJson   [out]
  *     Jason object,  needs to be empty
  * @return
  * <dt> <code>S_OK</code>            <dd>  if everythings is alright
  * <dt> <code>E_INVALIDARGS</code>   <dd>  if 'oJson' is not empty
  */
  HRESULT GetAsJson(CATOmxJsonObject& oJson) const;

  // Copy constructor and equal operator
  // -----------------------------------
  CATPLMExtensionResolution(const CATPLMExtensionResolution &);
  CATPLMExtensionResolution& operator=(const CATPLMExtensionResolution&);

private:

  CATUnicodeString _IterationRef;
  CATUnicodeString _BranchId;
  CATUnicodeString _RepositoryId;
  CATUnicodeString _Name;

};

template <> ExportedByCATPLMServicesPPrime CATOmxCollecManager & CATOmxDefaultCollecManager <CATPLMExtensionResolution>::manager();
#endif
