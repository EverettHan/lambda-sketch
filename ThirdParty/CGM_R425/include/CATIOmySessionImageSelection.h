/* -*-c++-*- */
/**
 * @level Protected
 * @usage U3
 */

// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIOmySessionImageSelection.h
// Define the CATIOmySessionImageSelection interface
//
//===================================================================
//
// Interface dedicated to Session Image selection
//
// Declares the Session Image to be opened and/or used by the current V5 PLM Session
//
//===================================================================
//  Mar 2007  Creation: Code generated by the CAA wizard  vcs
//===================================================================
#ifndef CATIOmySessionImageSelection_H
#define CATIOmySessionImageSelection_H

#include "CATOMYBaseSession.h"
#include "CATBaseUnknown.h"

class CATOmySessionImageDescriptor;
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYBaseSession IID IID_CATIOmySessionImageSelection;
#else
extern "C" const IID IID_CATIOmySessionImageSelection ;
#endif

//------------------------------------------------------------------

/**
* Interface dedicated to Session Image selection. During session initialisation, the list of
* available images will be provided through @href CATIOmySessionImageChooser#ChooseImage. To
* select an image, one of the following methods should be called. Once selected, the image's
* content (if any) will be restored and all further modifications will be logged in the image.
*
* The selected image may be: <ul>
* <li> A new empty image generated at the beginning of this current session. As a
*      new session, nothing is to be restored.</li>
* <li> The image of a previously finished session. All data opened in edition in
*      this previous session will be restored.</li>
* </ul>
* 
*/
class CATListPtrCATOmySessionImageDescriptor;
class ExportedByCATOMYBaseSession CATIOmySessionImageSelection: public CATBaseUnknown
{
  CATDeclareInterface;

 public:

  /**
   * Selects a Session Image. The connection to the server will be done automatically.
   * If iImagesToRemove is left null, all images except the selected one will be deleted.
   * 
   * @param iImageDescriptor :
   *     The selected image taken from the list provided through
   *     @href CATIOmySessionImageChooser#ChooseImage.
   * @param iPassword :
   *     If the selected image is an image to restore, iPassword should be the password
   *     necessary to login to the server, according to the login informations contained
   *     in the image to restore. If the image is new, the classic login porcess prevail
   *     and this information won't be used.
   * @param iImagesToRemove :
   *     List of images to remove. If left NULL, all images except the selected one will
   *     be removed. Note that the new image will always be deleted if it is not selected,
   *     even if it is not in this list.
   * @return
   *	  S_OK    : Successfully ended
   *    S_FALSE : Connection error (the Password is wrong or there is a server problem)
   *              Call this method again until it returns S_OK
   *    E_FAIL  : No ImageDescriptor as input/ a software error occured
   */
  virtual HRESULT SelectImage(CATOmySessionImageDescriptor * iImageDescriptor, const CATUnicodeString & iPassword,
    const CATListPtrCATOmySessionImageDescriptor * iImagesToRemove = NULL)= 0;

  /**
   * Selects a Session Image. The connection to the server will be done through classic logon.
   * If iImagesToRemove is left null, all images except the selected one will be deleted. Using
   * this method is mandatory in case of SSO login.
   * 
   * @param iImageDescriptor :
   *     the selected image taken from the list provided through
   *     @href CATIOmySessionImageChooser#ChooseImage.
   * @param iImagesToRemove :
   *     List of images to remove. If left NULL, all images except the selected one will
   *     be removed. Note that the new image will always be deleted if it is not selected,
   *     even if it is not in this list.
   * @return
   *	  S_OK    : Successfully ended
   *    E_FAIL  : No ImageDescriptor as input/ a software error occured
   */
  virtual HRESULT SelectImage(CATOmySessionImageDescriptor * iImageDescriptor,
    const CATListPtrCATOmySessionImageDescriptor * iImagesToRemove = NULL)=0;

};
//------------------------------------------------------------------

#endif
