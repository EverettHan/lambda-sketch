/* -*-c++-*-*/
#ifndef CATOffsetSurface_h
#define CATOffsetSurface_h

// COPYRIGHT DASSAULT SYSTEMES  1999

/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */ 

#include "CATSurface.h"
#include "CATMathDef.h"
class CATPCurve ;
class CATSetOfCrvParams ;
class CATNurbsSurface;

#include "ExportedByCATGMGeometricInterfaces.h"
/** @nodoc */
#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATGMGeometricInterfaces IID IID_CATOffsetSurface ;
#else
extern "C" const IID IID_CATOffsetSurface ;
#endif

/**
 * Interface representing an offseted surface.
 *<br> The CATOffsetSurface is created by the @href CATGeoFactory#CreateOffsetSurface method. 
 *<br>A CATOffsetSurface is the surface generated by offseting each point of a reference
 * surface in the direction of the reference surface normal and of length a given
 * offset that may be positive or negative.
 * A CATOffsetSurface keeps as much as possible its canonicity, according to 
 * the reference surface and the offset value. The canonical
 * surface is retrieved thanks to the <tt>GetGeometricRep</tt> inherited method.
 *<table>
 * <tr><td>CATSurface</td><td><tt> Reference </tt></td>
 *                <td> The surface to offset </td></tr>
 * <tr><td>CATLength</td><td><tt> Offset </tt></td>
 *                <td> The value of the offset </td></tr>
 *</table>
 */
class ExportedByCATGMGeometricInterfaces CATOffsetSurface : public CATSurface
{
  CATDeclareInterface;

  public :

  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //            C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  
/**
 * Returns the offset value of <tt>this</tt> CATOffsetSurface with regards to its 
 * reference surface. 
 *<br>The offset is related to normalized <tt>&eth;S/&eth;U ^ &eth;S/&eth;V</tt>
 * direction of the reference surface S. It may be positive or negative.
 */
  virtual CATLength GetOffset()  const  = 0;

/**  
 * Returns a pointer to the reference surface of <tt>this</tt> CATOffsetSurface.
 * @return
 * The pointer to the reference surface.
 */
  virtual CATSurface* GetReference()  const  = 0;

/**
 * Modifies the characteristics of <tt>this</tt> CATOffsetSurface.
 * @param iOffset
 * The new offset value.
 * @param iReference
 * The pointer to the new surface reference.
 * @param iLimits
 * The new limitations on the surface reference.
 */
  virtual void Set ( const CATLength iOffset, CATSurface* iReference, const CATSurLimits & iLimits) = 0;


  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  //
  //               N O N - C A A             M E T H O D S
  //
  //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

/**  
 * @nodoc 
 */
	virtual void GetEquivalentParam(const CATSurParam &iParam, CATSurParam &oEquivalentParam) const = 0; 

    /**  
    * @nodoc 
    */
    virtual void FindEquivalentParamOnRef(const CATSurParam &iParamOnRep,CATSurParam &oEquivalentParamOnRef) const = 0; 


/**  
 * @nodoc 
 */
	virtual CATPCurve* CreatePCurve(const CATPCurve * iPCurve, CATSetOfCrvParams *ioIndexOnPCurve=0) const =0;

/**  
 * @nodoc 
 * DO NOT USE -- STRICTLY FORBIDDEN
 */
  virtual void SetApproximation(CATNurbsSurface * iApproximation) =0;  


/**  
 * @nodoc 
 * DO NOT USE -- STRICTLY FORBIDDEN
 */
  virtual void Set (const CATLength iOffset, CATSurface* iReference, CATSurface * iGeometricRep) = 0;


};

CATDeclareHandler(CATOffsetSurface,CATSurface);

#endif
