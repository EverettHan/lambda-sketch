//===================================================================
// COPYRIGHT Dassault Systemes 2017/05/30
//===================================================================
// CATIPLMCompJSProcedureCallService.cpp
// Header definition of class CATIPLMCompJSProcedureCallService
//===================================================================
//
// Usage notes:
// Retrieve this service with CATPLMComponentServices factory.
//
// Usage example:
//    CATOmxSR<CATIPLMCompJSProcedureCallService> spJSProcedureCallService;
//    if(CATPLMComponentServices::GetJSProcedureCallService(&spJSProcedureCallService) == S_OK)
//    {
//      ... launch your procedure
//    }
//    else
//    {
//      ... manage error
//    }
//
//===================================================================
//  2017/05/30 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIPLMCompJSProcedureCallService_H
#define CATIPLMCompJSProcedureCallService_H

#include "CATPLMServicesProc.h"
#include "CATBaseUnknown.h"
#include "CATxMQLProcedure.h"
#include "CATOmxKeyValueBlock.h"
#include "CATIPLMError.h"
#include "CATOmxOMap.h"
#include "CATOmxOSet.h"
#include "CATPLMRepositoryName.h"
#include "CATOmxJsonArray.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesProc  IID IID_CATIPLMCompJSProcedureCallService;
#else
extern "C" const IID IID_CATIPLMCompJSProcedureCallService;
#endif

class ExportedByCATPLMServicesProc CATIPLMCompJSProcedureCallService : public CATBaseUnknown
{
  CATDeclareInterface;

public:
  /*
  * Returns the available procedures versions sorted by procedure name.
  * The map key is the procedure's name.
  * The map value is the available procedure's versions (1..n version).
  *
  * @param oProcedures [out]
  *   Available procedures: procedure name -> procedure versions
  *
  * @return
  * <dt> <code>S_OK</code>       <dd> Available procedures returned correctly
  */
  virtual HRESULT GetAvailableProcedures(CATOmxOMap<CATUnicodeString, CATOmxOSet<CATxMQLProcedure> >& oProcedures) = 0;

  /*
  * Checks if the given procedure is available on the server.
  * First it checks if the procedure name exists.
  * Then it checks if the given version exists.
  *
  * @return
  * <dt> <code>S_OK</code>       <dd> The given procedure is available
  * <dt> <code>S_FALSE</code>    <dd> The given procedure's name exists, but the given procedure's version doesn't exist
  * <dt> <code>E_FAIL</code>     <dd> The given procedure's name doesn't exists
  */
  virtual HRESULT IsProcedureAvailable(const CATxMQLProcedure& iProcedure) = 0;

  /*
  * Execute the given procedure, with the input parameters, on the server.
  * Result can be retrieved in outputs object.
  * Input data format is KeyValueBlock (key value pairs) and output data format is JSON.
  * The input and output schema is defined in the procedure javascript file (customizable).
  * Please contact the procedure owner to get the expected input and output schema.
  *
  * Example:
  * --------
  * Given the procedure 'expand_completion.1.2.3' deployed on the server with the following code:
  *     var params = proc.declareParameters([{name:"NavigationSetVal1", type:"NavigationSet"}], [{name:"ConfigurationsVal1", type:"Configurations"}]);
  *     var ExpandPrimitives  = Java.type("com.dassault_systemes.completion.service.ExpandPrimitives");
  *
  *     CompletionProcedure.runFunction (ConfigurationsVal1, function(context, outputData) {
  *         var resultExpandNavSet = ExpandPrimitives.expandProduct(context, NavigationSetVal1, 0);
  *         outputData.add("result_ExpandNavSet", resultExpandNavSet);
  *     });
  *
  * Here is how you can execute this procedure and retrieve the output result.
  *
  * === 1 ===
  * Define the procedure to launch: name + version:
  *   CATxMQLProcedure expandProcedure(<PROCEDURE_NAME>, <MAJOR>, <MINOR>, <PATCH>);
  *     PROCEDURE_NAME: is the name of the procedure, here: "expand_completion"
  *     MAJOR: is the major version of the procedure, here: 1
  *     MINOR: is the major version of the procedure, here: 2
  *     PATCH: is the major version of the procedure, here: 3
  *
  * For our example:
  *  CATxMQLProcedure expandProcedure("expand_completion", 1, 2, 3);
  *
  * Note: CATIPLMCompJSProcedureCallService provides methods to retrieve the available procedure on the server,
  * and to check if a procedure exists.
  *
  * === 2 ===
  * Define the input parameters as CATOmxKeyValueBlock.
  * The xMQL result will be:
  *   <param name="<key>"><value></param>
  *     key: is the entry key
  *     value: is the entry value
  *
  * To create the input parameters, you can use CATOmxJsonObject, CATOmxJsonArray and CATUnicodeString:
  * For our example, the navigation set parameter:

    CATOmxJsonArray select;
    select.PutString("member.name");
    select.PutString("member.property[ProcDisplayName].value");
    select.PutString("member.property[ProcShortDescription].value");

    CATOmxKeyValueBlock inputs;
    inputs.SetValue("label", "package");
    inputs.SetValue("PackageName", "UDOProcedures");
    inputs.SetValue("ProcUsageContexts", "UserDefCompletionForOpen");
    inputs.SetValue("select", select.AsCATOmxAny());

  *
  * Result (in the http sent request) will be:
  *   <param name="label">package</param>
  *   <param name="PackageName">UDOProcedures</param>
  *   <param name="ProcUsageContexts">UserDefCompletionForOpen</param>
  *   <param name="select">["member.name","member.property[ProcDisplayName].value", "member.property[ProcShortDescription].value"]</param>
  *
  * === 3 ===
  * Read the procedure output:
  *   oOutputs.Length() returns the number of result.
  *   oOutputs array may be empty.
  *   opError is NULL if no error.
  *   opError is not NULL if there is an error.
  *     Use the following CATIPLMError methods to retrieve error details
  *       HRESULT GetSeverity(CATPLMSeverity * oSeverity);
  *       HRESULT GetErrorCode(CATString ** oErrorCode, CATString ** oCatalogName);
  *       HRESULT GetDiagnostic(CATUnicodeString ** oMsg);
  *
  * Outputs read example:
  *   CATOmxJsonObject firstResultObject;
  *   outputs.GetJsonObject(1, firstResultObject);
  *
  *   CATOmxJsonObject outputObject;
  *   firstResultObject.GetJsonObject("output", outputObject);
  *
  *   CATOmxJsonArray occurrencesArray;
  *   outputObject.GetJsonArray("occurrences", occurrencesArray);
  *
  *   CATOmxJsonObject firstOccurenceObject;
  *   occurrencesArray.GetJsonObject(1, firstOccurenceObject);
  *
  *   CATOmxJsonArray pidsArray;
  *   firstOccurenceObject.GetJsonArray("pids", pidsArray);
  *
  *   for (int i = 1; i <= pidsArray.Length(); i++)
  *   {
  *     CATUnicodeString currentPid;
  *     pidsArray.GetString(i, currentPid);
  *     cout << "PID #" << i <<  ": " << currentPid.CastToCharPtr() << endl;
  *   }
  *
  * @param CATxMQLProcedure [in]
  *   The procedure to execute: procedure name + major version + minor version + patch version.
  *   Example: expand_completion.1.2.3
  * @param iInputs [in]
  *   Inputs paramters sent with the request. Key is the parameter name. Value is CATOmxJsonArray/CATOmxJsonObject or  CATUnicodeString as CATOmxAny value.
  * @param oOutputs [out]
  *   Procedure results. Contains from 0 to n result. Use CATOmxJsonObject/CATOmxJsonArray to read them.
  * @param opError [out, Release]
  *   The procedure return error.
  *   If there is no error (procedure execution OK): NULL
  *   If there is an error: use GetSeverity / GetErrorCode / GetDiagnostic to have error details.
  *   Do not forget to release the object (use CATOmxSR<CATIPLMError>)
  * @param iRepository [in, Optional]
  *   The provider used to execute the procedure. Default is the first connected provider. Use this if you are connected to multiple provider.
  *
  * @return
  * <dt> <code>S_OK</code>            <dd> The procedure has been correctly executed
  * <dt> <code>E_INVALIDARG</code>    <dd> The given procedure's name doesn't exist
  * <dt> <code>E_FAIL</code>          <dd> Something wrong happened: Provider doesn't implement JS Procedure call, or the procedure failed. Check opError for details.
  */
  virtual HRESULT LaunchProcedure(const CATxMQLProcedure& iProcedure, CATOmxKeyValueBlock& iInputs, CATOmxJsonArray& oOutputs, CATIPLMError*& opError, const CATPLMRepositoryName iRepository = NULL) = 0;


private:
  //------------------------------------------------------------------------------------------
  // Internal use only!!!
  //------------------------------------------------------------------------------------------
  /*
  * Execute the given procedure, with the input parameters, on the server.
  * Result can be retrieved in outputs object.
  * Input and output data format is JSON.
  * The input and output schema is defined in the procedure javascript file (customizable).
  * Please contact the procedure owner to get the expected input and output schema.
  *
  * Example:
  * --------
  * Given the procedure 'expand_completion.1.2.3' deployed on the server with the following code:
  *     var params = proc.declareParameters([{name:"NavigationSetVal1", type:"NavigationSet"}], [{name:"ConfigurationsVal1", type:"Configurations"}]);
  *     var ExpandPrimitives  = Java.type("com.dassault_systemes.completion.service.ExpandPrimitives");
  *
  *     CompletionProcedure.runFunction (ConfigurationsVal1, function(context, outputData) {
  *         var resultExpandNavSet = ExpandPrimitives.expandProduct(context, NavigationSetVal1, 0);
  *         outputData.add("result_ExpandNavSet", resultExpandNavSet);
  *     });
  *
  * Here is how you can execute this procedure and retrieve the output result.
  *
  * === 1 ===
  * Define the procedure to launch: name + version:
  *   CATxMQLProcedure expandProcedure(<PROCEDURE_NAME>, <MAJOR>, <MINOR>, <PATCH>);
  *     PROCEDURE_NAME: is the name of the procedure, here: "expand_completion"
  *     MAJOR: is the major version of the procedure, here: 1
  *     MINOR: is the major version of the procedure, here: 2
  *     PATCH: is the major version of the procedure, here: 3
  *
  * For our example:
  *  CATxMQLProcedure expandProcedure("expand_completion", 1, 2, 3);
  *
  * Note: CATIPLMCompJSProcedureCallService provides methods to retrieve the available procedure on the server,
  * and to check if a procedure exists.
  *
  * === 2 ===
  * Define the input parameters as CATOmxJsonObject.
  * The xMQL result will be:
  *   <param name="<json_object_key>"><json_object_value></param>
  *     json_object_key: is the entry key
  *     json_object_value: is the entry value in JSON format
  *
  * To create the input JSON parameters, you can use CATOmxJsonObject and CATOmxJsonArray:
  * For our example, the navigation set parameter:
  *   // Build intput navigationset
  *   CATUnicodeString modelerName = "product";
  *   CATOmxJsonObject navigationSetObject;
  *   navigationSetObject.PutString("modelerName", modelerName);
  *
  *   CATOmxJsonArray pidsArray;
  *   pidsArray.PutString("60FA2FB100004A085937B8B500009370");
  *
  *   CATOmxJsonObject firstOccurenceObject;
  *   firstOccurenceObject.PutArray("pids", pidsArray);
  *
  *   CATOmxJsonArray occurencesArray;
  *   occurencesArray.PutObject(firstOccurenceObject);
  *   navigationSetObject.PutArray("occurrences", occurencesArray);
  *
  *   // Build inputs
  *   CATOmxJsonObject inputs;
  *   inputs.PutJsonObject("NavigationSetVal1", navigationSetObject);
  *
  * Result (in the http sent request) will be:
  *   <param name="NavigationSetVal1">{"modelerName":"product","occurrences":[{"pids":["60FA2FB100004A085937B8B500009370"]}]}</param>
  *
  * === 3 ===
  * Read the procedure output:
  *   oOutputs.Length() returns the number of result.
  *   oOutputs array may be empty.
  *   opError is NULL if no error.
  *   opError is not NULL if there is an error.
  *     Use the following CATIPLMError methods to retrieve error details
  *       HRESULT GetSeverity(CATPLMSeverity * oSeverity);
  *       HRESULT GetErrorCode(CATString ** oErrorCode, CATString ** oCatalogName);
  *       HRESULT GetDiagnostic(CATUnicodeString ** oMsg);
  *
  * Outputs read example:
  *   CATOmxJsonObject firstResultObject;
  *   outputs.GetJsonObject(1, firstResultObject);
  *
  *   CATOmxJsonObject outputObject;
  *   firstResultObject.GetJsonObject("output", outputObject);
  *
  *   CATOmxJsonArray occurrencesArray;
  *   outputObject.GetJsonArray("occurrences", occurrencesArray);
  *
  *   CATOmxJsonObject firstOccurenceObject;
  *   occurrencesArray.GetJsonObject(1, firstOccurenceObject);
  *
  *   CATOmxJsonArray pidsArray;
  *   firstOccurenceObject.GetJsonArray("pids", pidsArray);
  *
  *   for (int i = 1; i <= pidsArray.Length(); i++)
  *   {
  *     CATUnicodeString currentPid;
  *     pidsArray.GetString(i, currentPid);
  *     cout << "PID #" << i <<  ": " << currentPid.CastToCharPtr() << endl;
  *   }
  *
  * @param CATxMQLProcedure [in]
  *   The procedure to execute: procedure name + major version + minor version + patch version.
  *   Example: expand_completion.1.2.3
  * @param iInputs [in]
  *   Inputs paramters sent with the request. Key is the parameter name. Value is the JSON value.
  * @param oOutputs [out]
  *   Procedure results. Contains from 0 to n result. Use CATOmxJsonObject/CATOmxJsonArray to read them.
  * @param opError [out, Release]
  *   The procedure return error.
  *   If there is no error (procedure execution OK): NULL
  *   If there is an error: use GetSeverity / GetErrorCode / GetDiagnostic to have error details.
  *   Do not forget to release the object (use CATOmxSR<CATIPLMError>)
  * @param iRepository [in, Optional]
  *   The provider used to execute the procedure. Default is the first connected provider. Use this if you are connected to multiple provider.
  *
  * @return
  * <dt> <code>S_OK</code>            <dd> The procedure has been correctly executed
  * <dt> <code>E_INVALIDARG</code>    <dd> The given procedure's name doesn't exist
  * <dt> <code>E_FAIL</code>          <dd> Something wrong happened: Provider doesn't implement JS Procedure call, or the procedure failed. Check opError for details.
  */
  virtual HRESULT LaunchProcedure(const CATxMQLProcedure& iProcedure, CATOmxJsonObject& iInputs, CATOmxJsonArray& oOutputs, CATIPLMError*& opError, const CATPLMRepositoryName iRepository = NULL) = 0;
};

#endif
