//===================================================================
// COPYRIGHT Microsoft 2012/06/27
//===================================================================
// CATAdpGenealogyInformation.cpp
// Header definition of class CATAdpGenealogyInformation
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/06/27 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAdpGenealogy_H
#define CATAdpGenealogy_H

#include "CATPLMIntegrationAccess.h"
#include "CATPLMID.h"

class CATPLMIDSet;
class CATAdpGenealogyImpl;
class CATIAdpErrorMonitor;
class CATAdpGenealogyInformationIter;
struct CATAdpGenealogyInformation;

//-----------------------------------------------------------------------


class ExportedByCATPLMIntegrationAccess CATAdpGenealogy
{
public:
// Standard constructors and destructors
// -------------------------------------

/**
* PLMID to get the child(ren) and/or the ancestor
* <br><b>Role</b>: Constructor
* @param iPLMID
*        may be a ref or a rep ref only
* @param ioMonitor
*        must be initialized. Contains errors (see other methods)
*/
CATAdpGenealogy (const CATPLMID &iPLMID, CATIAdpErrorMonitor *ioMonitor = NULL);

/**
* PLMIDs to get the child(ren) and/or the ancestor(s)
* <br><b>Role</b>: Constructor
* @param iPLMID
*        may be a ref or a rep ref only
* @param ioMonitor
*        must be initialized. Contains errors (see other methods)

*/
CATAdpGenealogy (const CATPLMIDs &iPLMIDs, CATIAdpErrorMonitor *ioMonitor = NULL);

/**
* PLMID to get the child(ren) and/or the ancestor(s)
* <br><b>Role</b>: Constructor
* @param iPLMID
*        may be a ref or a rep ref only
* @param ioMonitor
*        must be initialized. Contains errors (see other methods)

*/
CATAdpGenealogy (const CATPLMIDSet &iPLMIDs, CATIAdpErrorMonitor *ioMonitor = NULL);


/**
* Get every children of input components
* <br><b>Role</b>: Make a query (if not already done) to generate the list of each input component 
* and its related (child) element(s), and the operation leading to the related element.
* The query is generated once. @see CATAdpGenealogyInformation for the structure.
* Input can be found many times if multiple descendants were created.
* It's possible to call other methods after this one.
* @param &oData Iterator on the return set. @see CATAdpGenealogyInformationIter
* elements not found are linken like this : input, NoOperation, CATPLMID_Null
* The order is, for each element : input, lifecycle operation relating the two elements, related is child
* @return
* <dl>
* <dt><code>S_OK</code> Operation was successful <dd>
* <dt><code>S_FALSE</code> <dd> No children </dd>
* <dt><code>E_FAIL</code> An error was encountered. See the error monitor<dd>
* </dl>
*/
HRESULT GetChildren(CATAdpGenealogyInformationIter &oData);
/**
* Get every ancestor of input components
* <br><b>Role</b>: Make a query (if not already done) to generate the list of each input component 
* and its related (ancestor) element, and the operation leading to the related element.
* The query is generated once. @see CATAdpGenealogyInformation for the structure.
* It's possible to call other methods after this one.
* @param &oData Iterator on the return set. @see CATAdpGenealogyInformationIter
* elements not found are linken like this : input, NoOperation, CATPLMID_Null
* The order is, for each element : input, lifecycle operation relating the two elements, related is ancestor
* @return
* <dl>
* <dt><code>S_OK</code> Operation was successful <dd>
* <dt><code>S_FALSE</code> <dd> No ancestors </dd>
* <dt><code>E_FAIL</code> An error was encountered. See the error monitor<dd>
* </dl>
*/
HRESULT GetAncestors(CATAdpGenealogyInformationIter &oData);

/**
* Get every children of input component
* <br><b>Role</b>: Make a query (if not already done) to generate the list of each input component 
* and its related (child) element(s), and the operation leading to the related element.
* The query is generated once. @see CATAdpGenealogyInformation for the structure.
* Then returns only the children iterator of the method's input component.
* Input can be found many times if multiple descendants were created.
* It's possible to call other methods after this one.
* @param &oData Iterator on the return set if any found. @see CATAdpGenealogyInformationIter
* The order is, for each element : input, lifecycle operation relating the two elements, related is child
* @return
* <dl>
* <dt><code>S_OK</code> Operation was successful <dd>
* <dt><code>S_FALSE</code> <dd> No children, iterator is not populated by the method </dd>
* <dt><code>E_FAIL</code> An error was encountered. See the error monitor<dd>
* </dl>
*/
HRESULT GetChildren(const CATPLMID &iKey, CATAdpGenealogyInformationIter &oData);

/**
* Get every ancestor of input components
* <br><b>Role</b>: Make a query (if not already done) to generate the list of each input component 
* and its related (ancestor) element, and the operation leading to the related element.
* The query is generated once. @see CATAdpGenealogyInformation for the structure.
* Then returns only the ancestor of the method's input component.
* It's possible to call other methods after this one.
* @param &oData CATAdpGenealogyInformation corresponding to found element if found. @see CATAdpGenealogyInformation
* The order is : input, lifecycle operation relating the two elements, related is ancestor
* @return
* <dl>
* <dt><code>S_OK</code> Operation was successful <dd>
* <dt><code>S_FALSE</code> <dd> No ancestor found, return parameter is not valid </dd>
* <dt><code>E_FAIL</code> An error was encountered. See the error monitor<dd>
* </dl>
*/
HRESULT GetAncestor(const CATPLMID &iKey, CATAdpGenealogyInformation &oData);

/**
* Get the relation between two components given in input, provided it exists
* <br><b>Role</b>: Make a query (if not already done) to generate the list of each input component 
* and its related (ancestor) element, and the operation leading to the related element.
* The query is generated once. @see CATAdpGenealogyInformation for the structure.
* Then returns only the ancestor of the method's input couple.
* Query is the same as GetAncestors but only PLMIDs given to constructor are bound to be taken into account.
* Search is done two ways, but result is always from child to ancestor.
* It's possible to call other methods after this one.
* @param &oData CATAdpGenealogyInformation corresponding to found element if found. @see CATAdpGenealogyInformation
* The order is : input, lifecycle operation relating the two elements, related is *always* ancestor
* @return
* <dl>
* <dt><code>S_OK</code> Operation was successful <dd>
* <dt><code>S_FALSE</code> <dd> No relation found, return parameter is not valid</dd>
* <dt><code>E_FAIL</code> An error was encountered. See the error monitor<dd>
* <dt><code>E_INVALIDARG</code> One of the requested elements is not in input<dd>
* </dl>
*/
HRESULT GetInnerRelated(const CATPLMID &iFirst, const CATPLMID &iSecond, CATAdpGenealogyInformation &oData);

virtual ~CATAdpGenealogy ();

//
// TODO: Add your methods for this class here.
//

private:
// Copy constructor and equal operator
// -----------------------------------
CATAdpGenealogy (CATAdpGenealogy &);
CATAdpGenealogy& operator=(CATAdpGenealogy&);

CATAdpGenealogyImpl* pImpl;

};

//-----------------------------------------------------------------------

#endif
