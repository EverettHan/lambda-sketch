//===================================================================
// COPYRIGHT DS SolidWorks 2010/04/22
//===================================================================
// SWXUtBSpline.cpp
// Header definition of class SWXUtBSpline
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/04/22 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtBSpline_H
#define SWXUtBSpline_H

#include "SWXMathematics.h"
#include "CATListOfInt.h"
#include "CATListOfDouble.h"
#include "SWXUtGeometry.h"
#include "SWXUtBSpline_Ptr.h"

#include <CATMathSetOfPoints.h>
#include "CATMathVector.h"

class CATMathTransformation;
class CATMathDirection;
class CATMathBox;


//-----------------------------------------------------------------------

class ExportedBySWXMathematics SWXUtBSpline: public SWXUtGeometry
{
public:
	SWXUtBSpline (int iDegree, int iNbOfKnots, double *iKnots, int *iMultiplicities, 
        bool iPeriodic,  CATMathSetOfPoints const &iCPoints);
	SWXUtBSpline (int iDegree, int iNbOfKnots, double *iKnots, int *iMultiplicities, 
        int iNWeights, double* iWeights, bool iPeriodic,  CATMathSetOfPoints const &iCPoints);
    SWXUtBSpline(const SWXUtBSpline &iBSpline);
    SWXUtBSpline();
	virtual ~SWXUtBSpline ();

	SWXUtBSpline& operator= (const SWXUtBSpline & iBSpline);
    int GetDegree() const;
    int GetNbOfKnots() const;
    const double *GetKnots() const;
    const int *GetMultiplicities() const;
    bool GetPeriodic() const;
    int GetNumberOfCPoints() const;
    const CATMathSetOfPoints &GetCPoints() const;
	virtual void ApplyTransformation(CATMathTransformation const &iTransformation);
	virtual SWXUtGeometry_Ptr Clone() const;

    int GetNumberOfWeights() const;
    const double *GetWeights() const;

	virtual bool Accept(SWXUtGeomVisitor *iVis); 
	virtual bool Accept(SWXUtGeomVisitor *iVis) const;

	bool TangentAtEnd(const CATMathPoint &iPt, CATMathDirection &oDir) const;
	virtual bool GetTangentAtPoint(CATMathPoint const &iPnt,CATMathVector &oV) const;	// warning - fails unless the point is at the end

	bool GetBoundingBox(CATMathBox &oBoundingBox) const;
	bool ProjectPoint( const CATMathPoint& iv2point, CATMathPoint *oPnt, double *oParam=NULL);

	void SetClosureCondition(CATMathVector const &iDer1, CATMathVector const &iDer2) { mDer1 = iDer1; mDer2 = iDer2;};
	void GetClosureCondition(CATMathVector  &oDer1, CATMathVector  &oDer2) const { oDer1 = mDer1; oDer2 = mDer2;};

	void SetCPoints( CATMathSetOfPoints &iPoints );

	static void PackKnots(const CATListOfDouble &iKnots, CATListOfDouble &oCompactKnots, CATListOfInt &oMultList);
	static bool IsCGMCompatible(double const* ipKnots, int iNKnots, int iDegree, bool bPeriodic);

private:
    void InitKnots(int iNbOfKnots, double *iKnots);
    void InitMultiplicities(int iNbOfKnots, int *iMultiplicities);
	void InitWeights(int iNWeights, double *iWeights);
	void Clear();

	int mDegree;
    int mNbOfKnots;
    double *mKnots;
    int *mMultiplicities;
    bool mPeriodic;
    int mNWeights;
    double *mWeights;
    CATMathSetOfPoints mCPoints;
	
	CATMathVector mDer1;
	CATMathVector mDer2;
};

//-----------------------------------------------------------------------
#endif
