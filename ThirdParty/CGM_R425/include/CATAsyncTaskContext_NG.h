//===================================================================
// COPYRIGHT Microsoft 2012/05/21
//===================================================================
// CATAsyncTaskContext
// Header definition of class CATAsyncTaskContext
//===================================================================
//
// Usage notes:
//
// Infomation about a particular CATAsyncTask
// @see CATAsyncTask
//
//===================================================================
//  2012/05/21 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncTaskContextBase
#define CATAsyncTaskContextBase CATAsyncTaskContextBase_NG
#endif
#ifndef CATAsyncTaskContext
#define CATAsyncTaskContext CATAsyncTaskContext_NG
#endif

#ifndef CATAsyncTaskContext_NG_H
#define CATAsyncTaskContext_NG_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncTaskID_NG.h"
#include "CATAsyncTasksUtils.h"
#include "CATSysMacroPtr.h"
#include "CATUnicodeString.h"
#include "CATOmxArray.h"
#include "CATAsyncTaskStatistics.h"

struct CATAsyncTaskContextExtBase;

//===================================================================
//   CATAsyncTaskContextBase
//===================================================================  
struct ExportedByCATAsyncTasksPlatform CATAsyncTaskContextBase
{
  // METHODS  
  CATAsyncTaskContextBase();
  CATAsyncTaskContextBase(const CATAsyncTaskContextBase& iAsyncTaskContext); // Context can be copied only once  
  virtual ~CATAsyncTaskContextBase();
  void Copy(const CATAsyncTaskContextBase& iAsyncTaskContext); // Copy Primitive values - Never Locked    
  void LockCopy()                 { _CopyAuthorized = FALSE; }
  CATBoolean IsCopyLocked() const { return !_CopyAuthorized; }  
  CATBoolean IsExtended() const   { return (!!_CtxExtension) ? TRUE : FALSE; }   
  
  // DATA   
  //  Async Task General Information  
  CATUnicodeString TaskName;
  CATBoolean IsPhysicalTask;
  CATBoolean HasParent;
  CATAsyncTaskID CurrentTaskID;
  CATAsyncTaskID CurrentParentTaskID;
  CATAsyncRequest_Type RequestType; // @see CATAsyncBasicTypes
  CATAsyncAnswer_Type AnswerType;
  CATAsyncTaskStatus TaskStatus; // @see CATAsyncBasicTypes
  CATUnicodeString Error; // Error message
  // Extension information
  CATAsyncTaskContextExtBase * _CtxExtension;  
  //  Logical Tasks Information
  int PhysicalTasksCompleted;
  int PhysicalTasksNotCompleted;
  //  Async Tasks Builder Information
  // Builder Data
  CATBoolean IsTasksBuilder;
  CATOmxArray<CATAsyncTaskID> NewTasksCreated;
  CATOmxArray<CATAsyncTaskID> AllTasksCreated;
  CATBoolean AllBuiltTasksCompleted;
  // Created by Builder data
  CATBoolean IsBuilt;
  CATAsyncTaskID TasksBuilderID;
  CATAsyncStatistics* pStatistics; // Handled by the task. Do not release it. Available only when task is completed.
  
private:

  mutable CATBoolean _CopyAuthorized; // Copy flags - Context can be copied only once
   
  CATAsyncTaskContextBase& operator=(const CATAsyncTaskContextBase& iAsyncTaskContext); // Not implemented

  #undef CATAsyncTaskContext
  friend class CATAsyncTaskContext;
  #define CATAsyncTaskContext CATAsyncTaskContext_NG
};

//===================================================================
//   CATAsyncTaskContextExtBase
//===================================================================  
struct CATAsyncTaskContextExtBase
{
  CATAsyncTaskContextExtBase() {}  
  virtual ~CATAsyncTaskContextExtBase() {}
  virtual CATAsyncTaskContextExtBase * Clone(const CATAsyncTaskContextBase * iCtxBase) const = 0;
  CATAsyncTaskContextExtBase(const CATAsyncTaskContextExtBase& iAsyncTaskCtxExtBase) {}
  CATAsyncTaskContextExtBase& operator=(const CATAsyncTaskContextExtBase& iAsyncTaskCtxExtBase); // Not implemented     
};

//===================================================================
//   CATAsyncTaskContextExt
//===================================================================  
template < class R >
struct CATAsyncTaskContextExt : public CATAsyncTaskContextExtBase
{
  CATAsyncTaskContextExt() {}
  virtual ~CATAsyncTaskContextExt() {}
  virtual CATAsyncTaskContextExtBase * Clone(const CATAsyncTaskContextBase * iCtxBase) const 
  {
    CATAssert(iCtxBase);
    CATAsyncTaskContextExt<R> * ClonedCtxExt = new CATAsyncTaskContextExt<R> (*this);    
    return ClonedCtxExt;
  }
  
  typename R::Result       _Result;
  typename R::ProgressData _ProgressData;

private:

  CATAsyncTaskContextExt(const CATAsyncTaskContextExt& iAsyncTaskCtxExt) : 
    CATAsyncTaskContextExtBase(iAsyncTaskCtxExt),
    _Result(iAsyncTaskCtxExt._Result),
    _ProgressData(iAsyncTaskCtxExt._ProgressData)
    {}  
  CATAsyncTaskContextExt& operator=(const CATAsyncTaskContextExt& iAsyncTaskContext); // Not implemented     
};

//===================================================================
//   CATAsyncTaskContext
//===================================================================  
template < class R >
struct CATAsyncTaskContext : public CATAsyncTaskContextBase
{
  CATAsyncTaskContext(): CATAsyncTaskContextBase()                                    { CATAsyncTaskContext::ExtendCtxBase(*this); }  
  virtual ~CATAsyncTaskContext()                                                      {}
    
  typename R::Result      & GetResult()                                               {return _GetExt(*this)._Result;}
  typename R::ProgressData& GetProgressData()                                         {return _GetExt(*this)._ProgressData;}
  
  static typename R::Result      & GetResult(CATAsyncTaskContextBase& iContext)       {return _GetExt(iContext)._Result;}
  static typename R::ProgressData& GetProgressData(CATAsyncTaskContextBase& iContext) {return _GetExt(iContext)._ProgressData;}
  
  static void ExtendCtxBase(CATAsyncTaskContextBase& iContextToExtend) 
  {
    if (!iContextToExtend._CtxExtension)
    {    
      CATAsyncTaskContextExt<R> * CurExt = new CATAsyncTaskContextExt<R> ();
      iContextToExtend._CtxExtension = CurExt;
    }
  }
  void SetResult(typename R::Result& iResult)                   {_GetExt(*this)._Result       = iResult;}
  void SetProgressData(typename R::ProgressData& iProgressData) {_GetExt(*this)._ProgressData = iProgressData;}
  
private:

  CATAsyncTaskContext(const CATAsyncTaskContext& iAsyncTaskContext): CATAsyncTaskContextBase(iAsyncTaskContext) {}  
  CATAsyncTaskContext& operator=(const CATAsyncTaskContext& iAsyncTaskContext); // Not implemented  
  static CATAsyncTaskContextExt<R>& _GetExt(CATAsyncTaskContextBase& iContext)
  {
    CATAssert(iContext._CtxExtension);
    return static_cast<CATAsyncTaskContextExt<R>&>(*(iContext._CtxExtension));
  }  
};

#endif
