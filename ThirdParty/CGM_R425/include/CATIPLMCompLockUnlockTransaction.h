// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATIPLMCompLockUnlockTransaction.h
// Define the CATIPLMCompLockUnlockTransaction interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2005  Creation: Code generated by the CAA wizard  mqv
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompLockUnlockTransaction_H
#define CATIPLMCompLockUnlockTransaction_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompLockUnlockTransaction;
#else
extern "C" const IID IID_CATIPLMCompLockUnlockTransaction ;
#endif

class CATIPLMCompLockUnlockRecordWrite;
class CATPLMID;
class CATUnicodeString;
class CATIPLMCompRecordReadSet;
//------------------------------------------------------------------

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
 *
 * CATIPLMCompLockUnlockTransaction  manages the list of record (the table of data).
 * The LockUnlock message can be seen as a set of Record and in a record through the CATIPLMCompLockUnlockRecordWrite interface,  you will lock or unlock an Object.
 */
class ExportedByCATPLMServicesItf CATIPLMCompLockUnlockTransaction: public CATBaseUnknown
{
  CATDeclareInterface;

public:

 /**
  *	Returns the name of the transaction. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param oName
  *   The name
  */
  virtual HRESULT GetName ( CATUnicodeString **oName) = 0;

 /**
  * Creates the next CATIPLMCompLockUnlockRecordWrite corresponding to the given CATPlmID.
  * through the CATIPLMCompLockUnlockRecordWrite interface, you can lock or unlock an Object.
  *
  *	@param  iId
  *			The CATPlmID of the object to modify within the RecordWrite.
  *	@param  oRecordWrite [out, CATBaseUnknown#Release]
  *			The new CATIPLMCompLockUnlockRecordWrite object.
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>successfully</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation. get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT Next (const CATPLMID & iId, CATIPLMCompLockUnlockRecordWrite ** oRecordWrite) = 0;
  
 /**
  * Execute all the lock or unlock operations included in the transaction. 
  * 
  * This method returns a CATIPLMCompRecordReadSet which allows accessing to the return message. 
  * By calling Next method, analyse the report on each Operation (record) done.
  *
  *	@param  oRecordReportSet [out, CATBaseUnknown#Release]
  *			Provides access to the list of record.(The message)
  * @return
  *   Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>Save is successfully.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>Save entirely or partially failed. A report is available.
  *     Get further information by using CATIPLMCompRecordReadSet returned
  *     </dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A fatal communication problem occurs during the operation.
  *     Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT ExecuteLockRequest(CATIPLMCompRecordReadSet ** oRecordReportSet) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
