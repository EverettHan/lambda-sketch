//===================================================================

//===================================================================
// SWXUtSplineCondition.cpp
// Header definition of class SWXUtSplineCondition
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/06/19 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef SWXUtSplineCondition_H
#define SWXUtSplineCondition_H

#include "SWXMathematics.h"
#include "SWXUtBSpline.h"
#include "CATMathVector.h"
#include "CATMathPoint.h"
#include "SWXUtMap.h"
#include "SWXUtUniqueId.h"


//-----------------------------------------------------------------------

class ExportedBySWXMathematics SWXUtSplineCondition
{
public:

enum SWXUtParameterizationMode
{
	SWXUtParameterizationUniformType = 0,
	SWXUtParameterizationNormalizedUniformType = 1,
	SWXUtParameterizationChordType,
	SWXUtParameterizationNormalizedChordType
};

// Standard constructors and destructors
// -------------------------------------
SWXUtSplineCondition ();
virtual ~SWXUtSplineCondition ();

//
// TODO: Add your methods for this class here.
//
	void AddTangentAngles(int iIndex, double iValue);
	void AddTangentLines(int iIndex, SWXUtUniqueId &iId);
	void AddTangentialSpeeds(int iIndex, double iValue);
	void AddSecondDerivativeNorms(int iIndex, double iValue);
	void AddSecondDerivativeLines(int iIndex, SWXUtUniqueId &iId);

	void RemoveTangentLine(int iIndex);
	void RemoveTangentialSpeeds(int iIndex);
	void RemoveSecondDerivativeNorms(int iIndex);
	void RemoveSecondDerivativeLines(int iIndex);

	bool HasTangentLine(int iIndex, SWXUtUniqueId &oId);
	bool HasTangentialSpeed(int iIndex, double &oValue);
	bool HasSecondDerivativeNorm(int iIndex, double &oValue);
	bool HasSecondDerivativeLine(int iIndex, SWXUtUniqueId &oId);

	SWXUtMap<int, double>& GetSecondDerivativeNorms() {return mSecondDerivativeNorms;};
	SWXUtMap<int, SWXUtUniqueId>& GetTangentLines() {return mTangentLines;};
	SWXUtMap<int, double>& GetTangentialSpeeds() {return mTangentialSpeeds;};
	SWXUtMap<int, SWXUtUniqueId>& GetSecondDerivativeLines() {return mSecondDerivLines;};

	SWXUtMap<int, void*>& GetTangentLinePointers() {return mTangentLinePointers;};
	SWXUtMap<int, void*>& GetSecondDerivativeLinePointers() {return mSecondDerivativeLinePointers;};

	bool ToNormalise() { return mbToNormalise; };
	void SetToNormalise( bool ibToNormalise = true ) { mbToNormalise = ibToNormalise; };

	SWXUtParameterizationMode GetParameterizationMode() { return mParameterizationMode; };
	void SetParameterizationMode( SWXUtParameterizationMode iParameterizationMode ) { mParameterizationMode = iParameterizationMode; };

	bool IsPeriodic() const { return mbIsPeriodic; };
	void SetIsPeriodic( bool ibIsPeriodic );

	int GetDegree() const { return mDegree;} ;
	void SetDegree( int iDegree ) { mDegree = iDegree; };

	bool IsSolverEntity() const { return mbIsSolverEntity; };
	void SetIsSolverEntity( bool ibIsSolverEntity ) { mbIsSolverEntity = ibIsSolverEntity; };

	bool UseFullClamping() const { return mbUseFullClamping; };
	void SetUseFullClamping( bool ibUseFullClamping ) { mbUseFullClamping = ibUseFullClamping; };

	bool IsCreating() const { return mbCreating; };
	void SetIsCreating( bool ibCreating ) { mbCreating = ibCreating; };

	int Count() const;

	void AddTangentHandleEnds(int iIndex, SWXUtUniqueId &iId0, SWXUtUniqueId &iId1);
	SWXUtMap<int, SWXUtPair<SWXUtUniqueId, SWXUtUniqueId> >& GetTangentHandleEnds() {return mTangentHandleEnds;};
	SWXUtMap<int, SWXUtPair<void*, void*> >& GetTangentHandleEndsPointers() {return mTangentHandleEndsPointers;};

	void AddHandleRatios(int iIndex, double iValue);
	SWXUtMap<int, double>& GetHandleRatios() {return mHandleRatios;};

	void GetClosureData(CATMathPoint &oPoint, CATMathVector &oDir, double &oCurvature);
	void SetClosureData(CATMathPoint const &iPoint, CATMathVector const &iDir, double iCurvature);

	void SetGeom(SWXUtBSpline const &iUtBSpline) { mGeom = iUtBSpline;};
	void GetGeom(SWXUtBSpline &oUtBSpline) { oUtBSpline = mGeom;};

	void AddHandleDims(int iIndex, SWXUtUniqueId &iId);
	void RemoveHandleDim(int iIndex);
	bool HasHandleDim(int iIndex, SWXUtUniqueId &oId);
	SWXUtMap<int, SWXUtUniqueId>& GetHandleDims() {return mHandleDims;};
	SWXUtMap<int, void*>& GetHandleDimPointers() {return mHandleDimPointers;};

private:

	SWXUtMap<int, double> mTangentAngles;
	SWXUtMap<int, SWXUtUniqueId> mTangentLines;
	SWXUtMap<int, double> mTangentialSpeeds;
	SWXUtMap<int, SWXUtUniqueId> mSecondDerivLines;
	SWXUtMap<int, double> mSecondDerivativeNorms;

	SWXUtMap<int, void*> mTangentLinePointers;
	SWXUtMap<int, void*> mSecondDerivativeLinePointers;

	bool mbToNormalise;
	bool mbIsPeriodic;
	int mDegree; 
	SWXUtParameterizationMode mParameterizationMode;

	SWXUtMap<int, SWXUtPair<SWXUtUniqueId, SWXUtUniqueId> > mTangentHandleEnds;
	SWXUtMap<int, SWXUtPair<void*, void*> > mTangentHandleEndsPointers;

	SWXUtMap<int, double> mHandleRatios;

	SWXUtMap<int, SWXUtUniqueId> mHandleDims;
	SWXUtMap<int, void*> mHandleDimPointers;

	bool mbIsSolverEntity;
	bool mbUseFullClamping;
	bool mbCreating;

	CATMathPoint mClosurePoint;
	CATMathVector mClosureDir;
	double mClosureCurvature;
	SWXUtBSpline mGeom;

private:
// Copy constructor and equal operator
// -----------------------------------
SWXUtSplineCondition (SWXUtSplineCondition &);
SWXUtSplineCondition& operator=(SWXUtSplineCondition&);

};

//-----------------------------------------------------------------------

#endif


