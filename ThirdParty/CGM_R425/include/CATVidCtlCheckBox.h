// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATVidCtlCheckBox.h
// Header definition of CATVidCtlCheckBox
//
//===================================================================
//  Oct 2005  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATVidCtlCheckBox_H
#define CATVidCtlCheckBox_H

#include <VisuDialog.h>
#include <CATVidCtlButton.h>
#include <CATVidColor.h>
#include <CATMathPointf.h>
#include <CAT4x4Matrix.h>
#include <CATVidLaySideAttachConstraints.h>

#include <CATUnicodeString.h>

//-----------------------------------------------------------------------
/**
 * @ingroup VIDControls
 * This widget provides a checkbox with a text label and an icon. <br/>
 * It is simply a @ref CATVidCtlButton with its CheckMode property
 * set, and a specific template.
 * @par Creation
 * @code
 * CATVidCtlCheckBox* pButton = CATVidCtlCheckBox::CreateCheckBox(myCommandParent, "ButtonName");
 * @endcode
 * @par MixedState
 * You can set the checkbox as being in a mixed state, in some particular cases.
 * @see CATVidCtlButton::SetMixedState
 * @see CATVidCtlButton::SetCyclingThreeStateFlag
 * @see CATVidCtlButton::SetAllCheckedAfterMixedStateFlag
 * @par Look
 * @image html CATVidCtlCheckBox.png V6 theme
 * @image html CATVidCtlCheckBox-Bright.png V6 theme, bright ambiance
 * @image html CATVidCtlCheckBox-3DViaShape.png 3DViaShape
 */
class ExportedByVisuDialog CATVidCtlCheckBox: public CATVidCtlButton
{
  CATDeclareClass;
public:
   /** Constructor */
   CATVidCtlCheckBox ();
   /** Constructor */
   CATVidCtlCheckBox (CATCommand *i_pParent, const CATString & i_pIdentifier);
   /** 
    * Factory to create a styled checkbox in current theme 
    * @param i_pParent the parent of the button.
    * @param i_pIdentifier the name of the button.
    */
   static CATVidCtlCheckBox* CreateCheckBox(CATCommand *i_pParent, const CATString & i_pIdentifier);

   static CATVidCtlCheckBox* CreateImmersiveCheckBox(CATCommand* i_pParent, const CATString& i_pIdentifier);

   void SetInternalLabelsFlag(const CATBoolean i_internalLabelsFlag);

   CATBoolean GetInternalLabelsFlag()const { return _internalLabelsFlag; };

protected:
   /** Constructor */
   CATVidCtlCheckBox (CreateLetterFunc i_pCreateLetterFunc);
   /** Constructor */
   CATVidCtlCheckBox (CATCommand *i_pParent, const CATString & i_pIdentifier,CreateLetterFunc i_pCreateLetterFunc);
   virtual ~CATVidCtlCheckBox ();
private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATVidCtlCheckBox (CATVidCtlCheckBox &);
  CATVidCtlCheckBox& operator=(CATVidCtlCheckBox& original);
  unsigned int _internalLabelsFlag : 1;

};
//-----------------------------------------------------------------------

#endif
