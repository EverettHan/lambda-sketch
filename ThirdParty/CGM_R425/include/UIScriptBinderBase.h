//===================================================================
// COPYRIGHT Dassault Systemes 2013/04/16
//===================================================================
// UIScriptBinderBase.cpp
// Header definition of class UIScriptBinderBase
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/04/10 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef UIScriptBinderBase_H
#define UIScriptBinderBase_H

#include "UIScriptBase.h"

// System 
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"

// ECMAScriptEngine
#include "ESValue.h"

class UIScriptContext;
class CATCommand; 

/**
* <b>Role</b>: Base class to create a binder that will register several features in a given context.
*
* This interface has to be implemented for your own bindings. It allows you to register new types
* and methods that will can be used in your scripts.
*
* @see UIScriptContext
* @see UIScriptContextFactory
*/
class ExportedByUIScriptBase UIScriptBinderBase : public CATBaseUnknown
{
  CATDeclareClass; 
public:
  /**
  * constructor
  * @param i_Ctx the context where the binder will be registered.
  */
  UIScriptBinderBase (UIScriptContext* i_Ctx);
  /**
  * destructor
  */
  virtual ~UIScriptBinderBase ();
  /**
  * @return the context where the binder instance is registered.
  */
  UIScriptContext* GetCtx() { return m_Ctx; }
  /**
  * Register the types defined by the binder in the context where the binder has been registered.
  */
  virtual void RegisterTypes()= 0;
  /**
  * Unregister the types defined by the binder in the context where the binder has been registered.
  */
  virtual void UnregisterTypes() = 0;
  /**
  * Commit all the new binder features to be accessible in script context. 
  * In a standard usage, this method contains only a specific binder initialization script.
  */
  virtual void Commit() = 0;
 /**
  * Get a list of all properties of a given c++ object. 
  * @param i_This the c++ object to get list of properties
  * @param o_Properties the list of properties as strings.
  */
  virtual void GetProperties(CATCommand* iThis, CATListOfCATUnicodeString& oProperties) = 0;
  /**
  * Get an ECMAScript object that represents a property value of a given c++ object.
  * For instance, get an integer property will return an ES::Integer. 
  * @param i_This the c++ object to get the property value.
  * @param i_PropName the property name to search for.
  * @return the ECMAScript object that represents the given property value of the given c++ object.
  */
  virtual ES::Value GetProperty(CATCommand* iThis, const CATUnicodeString& iPropName) = 0; 
  /**
  * Set a property on a c++ object based on an ECMAScript object that represents the new property value
  * For instance, set an integer property on the c++ object based on an ES::Integer value.
  * @param i_This the c++ object to set the property value.
  * @param i_PropName the property name to search for.
  * @param i_Value the new property value to set.
  * @return TRUE if the property value has been correctly set, FALSE otherwise.
  */
  virtual CATBoolean SetProperty(CATCommand* iThis, const CATUnicodeString& iPropName, const ES::Value& iValue) = 0;

private:
  // Copy constructor and equal operator
  // -----------------------------------
  UIScriptBinderBase (UIScriptBinderBase &);
  UIScriptBinderBase& operator=(UIScriptBinderBase&);

  UIScriptContext* m_Ctx; 

};

//-----------------------------------------------------------------------

#endif
 
