#ifndef CAT_3DCURVEDPIPE_OUTLINE_BUILDER_H
#define CAT_3DCURVEDPIPE_OUTLINE_BUILDER_H

//******************************************************************************
// CATIA Version 5 Release 1 Framework VISUALIZATION
// Copyright Dassault Systemes 1998
//******************************************************************************
//  Abstract:
//  ---------
//    Computes the outlines of a given 3DCurvedPipe 
//   
//
//******************************************************************************
//  Usage:
//  ------
//    First, CurvedPipe parameters  have to be added. Second, visualization parameters
//    have to be properly set. When this is finished, a call to
//    ComputeOutlines can be performed in order to produce the outlines.
//    Call sequence looks like this:
//      . SetViewing parameters(...)
//      . AddTesselation(...)
//      . ComputeOutlines(...)
//
//******************************************************************************
//  Inheritance:  CAT3DCurvedPipeOutlineBuilder
//  		     CATOutlineBuilder
//                
//
//******************************************************************************
//  Main Methods:
//  -------------
//
//******************************************************************************

#include "SGInfra.h"
#include "CATOutlineBuilder.h"

class ExportedBySGInfra CAT3DCurvedPipeOutlineBuilder : public CATOutlineBuilder
{
  public:
    
    // Construction and destruction methods:
    // -------------------------------------
    CAT3DCurvedPipeOutlineBuilder          (void);
    virtual ~CAT3DCurvedPipeOutlineBuilder (void);
    
    // Tesselation addition method:
    // ----------------------------
    //   <tesselation_id> is an identifier for the added tesselation. Each
    //   created outline belongs to one or two tesselations and is returned with
    //   the identifiers for those tesselations.
    void AddTesselation (float *curve_vertex,
                         int    nb_curve_vertex,
                         float *circle_vertex,
                         int    nb_circle_vertex,
                         float *base_normal,
                         float *end_normal);
    
    // Outlines computation methods:
    // -----------------------------
    //   - ComputeOutlines: Internally performs the generation of outlines.
    //
    virtual void ComputeOutlines     (void);
    
  private:

    //compute approach visibility for each circle composing the Curvedpipe
    //and returns the bounding point of the visibility zone
    //we only estimate the triangles normal by using the point normal
    void ComputeVisibility (float *circle,
                            float *curvePoint,
                            int *deb, 
                            int *fin);

    //computes exact visibility (we have to take the correct the value of deb
    // and fin due to the chordal deviation)
    //we use the trianlge normal here
    //we uses this method too  to calculate the visibility
    //limits of the others circle once we have the one of the first circle
    void ComputeExactVisibility(float *circle,
			        int *deb, 
			        int *fin);

    //compute the outlines generated by 2 given strips of triangles
    // one for the given circle and one for the next circle
    void ComputeOutlinesWithTriangle(float *circle,
				     signed char *scal1,
				     signed char *scal2, 
				     int *nb_segments,
				     int last_strip);
				     


    //compute the value of the scalar product between sight
    // and a section of a Pipe

    void ComputeSectionScal(float *circle, char *scal);

    float *_curve_vertex;
    int    _nb_curve_vertex;
    float *_circle_vertex;
    int    _nb_circle_vertex;
    float *_base_normal;
    float *_end_normal;
				
		
    //array where the bounding indices of the visibility zone are stored
    int   *_debVisibility;
    int   *_finVisibility;

    //array used to determine if we will use the computed 
    //visibility or not to compute the Outlines
    //of a strip of the pipe
        
    char *_sectionScal;
    
};

#endif
