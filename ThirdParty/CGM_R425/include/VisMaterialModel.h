//===================================================================
// COPYRIGHT Dassault Systemes 2017-02-07
//===================================================================
// VisMaterialModel.cpp
// Header definition of class VisMaterialModel
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2017-02-07 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisMaterialModel_H
#define VisMaterialModel_H

#include "SGInfra.h"
#include "VisMaterialModelVersion.h"
#include "VisMaterialParameter.h"

class l_VisMaterialModel;
class VisMaterialBuilder;
class CATIShader;


//-----------------------------------------------------------------------
// This class forms the basis of material definition. It holds information about
// paramters defined by this type of material.
// For list of pareters defined in a type of material model, please refer to..
//  .\SGInfra\SGInfra.m\src\VisMaterialModelParameterInfo.md
//-----------------------------------------------------------------------

class ExportedBySGInfra VisMaterialModel
{
public:
  enum EBackFaceCullingForced {
    BACK_FACE_CULLING_DONTFORCE = 0,
    BACK_FACE_CULLING_FORCE_ENABLE,
    BACK_FACE_CULLING_FORCE_DISABLE
  };

  // Standard constructors and destructors
  // -------------------------------------
  VisMaterialModel(l_VisMaterialModel *pLetter);
  virtual ~VisMaterialModel ();

  /**
  * Returns the number of techniques defined for this material model
  */
  int GetNumberOfTechniques() const;

  /**
  * Returns the name of the technique that has index iIndex
  */
  const CATUnicodeString& GetTechniqueName(int iIndex) const;

  /**
  * Returns the index of the technique that has name iName
  */
  int GetTechniqueIndex(const CATUnicodeString& iName) const;

  /**
  * Returns number of parameters defined for this material model
  */
  int GetNumberOfParameters() const;

  /**
  * Return name of parameter when provided with index.
  * Valid range of iIndex is [0, GetNbParams()-1].
  * In case of invalid index this function returns "Invalid" name
  */
  const CATUnicodeString& GetParameterName(int iIndex) const;

  /**
  * Return index of parameter when provided with name.
  * In case of unknown name this function returns -1
  */
  int GetParameterIndex(const CATUnicodeString &iName) const;

  /**
  * Return parameter when provided with param name.
  * In case of unknown name this function returns invalid paramDesc (name: "", type: eInvalid")
  */
  HRESULT GetParameter(const CATUnicodeString &iName, VisMaterialParameter& oParam) const;

  /**
  * Return parameter when provided with param index.
  * Valid range of iIndex is [0, GetNbParams()-1].
  * In case of invalid index this function returns invalid paramDesc (name: "", type: eInvalid")
  */
  HRESULT GetParameter(const int iIndex,              VisMaterialParameter& oParam) const;

  const l_VisMaterialModel * GetLetter() const;

  /**
  *Return custom shader override ... if set
  */
  virtual const CATIShader* GetCustomShader() const;

  /**
  *Return custom shader base material model ... if set
  */
  virtual const VisMaterialModel* GetBaseMaterialModel() const;

  /**
  * Get parameter value range (only applicable for float, floatParam and int types)
  * Returns S_FALSE if range is default (0.0-1.0 for float and int, 0-0 otehrwise)
  */
  HRESULT GetParameterRange(const int iIndex, float &oMin, float &oMax) const;

  /**
  * Returns a string label representing the name of material model
  */
  [[deprecated("Deprecated: Use GetTypeDesc() instead")]]
  const CATUnicodeString& GetType() const;

  /**
  * Returns a detailed description of the material model type
  */
  const VisMaterialModelVersion::TypeDesc& GetTypeDesc() const;

  /**
  * Returns treu if the material model supports setting different UVSlots for different parameters.
  */
  bool IsUvSlotSupported() const;

  /* internal */
  const VisMaterialBuilder* GetMaterialBuilder() const;

  const bool operator==(const VisMaterialModel& m) const;
  const bool operator!=(const VisMaterialModel& m) const;

private:
  // Copy constructor and copy assignment operator //TODO implement?
  // -----------------------------------
  VisMaterialModel(const VisMaterialModel&);
  VisMaterialModel& operator=(const VisMaterialModel&);

private:
  l_VisMaterialModel *_pLetter;

};

//-----------------------------------------------------------------------

#endif
