// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMProviderMgr.h
// To manage the list of providers available in the CATIA Session
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMProviderMgr_H
#define CATIPLMProviderMgr_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"
#include "CATPLMOmxCollections.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMProviderMgr;
#else
extern "C" const IID IID_CATIPLMProviderMgr ;
#endif
#include "CATLISTV_CATPLMRepositoryName.h"

class CATListPtrCATPLMProviderReference;
class CATListPtrCATIPLMProviderDesc;
class CATIPLMProviderDesc;
//class CATListPtrCATIPLMProvider;
//class CATIPLMProvider;
class CATUnicodeString;
class CATPLMRepositoryName;
class CATString;

/**
* Interface To manage the list of providers available in the CATIA Session.
*/
class ExportedByCATPLMServicesItf CATIPLMProviderMgr: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
  *   Returns all the provider descriptors which can be used.
  *   @param iType 
  *			provider type. if empty, all providers are required. @see CATPLMRepositoryName
  *   @param  oListProvDesc 
  *			provider descriptors. Each descriptor of the list must be released after use.
  *	@return
  *			Error code of function.
  */    
  virtual HRESULT ListProviderDescs(const CATPLMRepositoryName& iType, CATListPtrCATIPLMProviderDesc& oListProvDesc ) =0;

  virtual HRESULT ListProviderDescs(const CATPLMRepositoryName& iType, CATIPLMProviderDescList& oListProvDesc ) =0;

  /**
  * Returns all the available repository types.
  * @param  oRepositoryNames 
  *		available repository names.
  *	@return
  *			S_OK.
  */    
  virtual HRESULT ListRepositoryNames(CATPLMRepositoryNames& oRepositoryNames) const = 0;

  /**
  *   Returns the provider descriptor for the given type and instance Id.
  *   @param iType 
  *     provider type. @see CATPLMRepositoryName
  *   @param iInstanceId
  *     instance id.
  *     Be careful, if iInstanceId=="", there is a specific behaviour explained below.
  *   @param oProvDesc [out, CATBaseUnknown#Release]
  *     provider descriptor which instanceid == iInstanceId and with type == iType if it exists.
  *   @return
  *     Error code of function.
  *     The method return E_INVALIDARG if no provider descriptor of the required type has been found.
  *     Teh method return S_FALSE if a provider descriptor of the given type exist but not with the instanceId 
  *
  * Specific behaviour when you give an instanceid that is empty: instanceId == "" :
  * If iInstanceId == "" and iType filled, we return:
  * The first instance of provider already created which type is equal to iType and which instanceid == iInstanceId (so we have, instanceid == "") IF THIS INSTANCE EXISTS.
  * OR
  * The first instance of provider already created which type is equal to iType and which instanceId != "" (so we have instanceId != iInstanceId) IF THIS INSTANCE EXISTS
  * OR
  * We create a new instance of provider which type is equal to iType IF THIS INSTANCE DOESN T ALREADY EXIST.
  */
  virtual HRESULT GetProviderDesc( const CATPLMRepositoryName iType, const CATUnicodeString *iInstanceId, CATIPLMProviderDesc **oProvDesc) =0;


  /**
  *   Creates and declares to the manager a new Provider descriptor. 
  *   This method creates an instance of the provider type if an instance with the given logical instance id doesn't already exist.
  *	  The logical instance id can be mapped on the location of the server.
  *   @param iType 
  *			provider type. @see CATPLMRepositoryName
  *   @param iLogicalInstanceId
  *			logical instance id of the provider.
  *   @param oProviderDesc [out, CATBaseUnknown#Release]
  *			the provider object descriptor.
  *	@return
  *			Error code of function.
  */
  virtual HRESULT AddProviderDesc(const CATPLMRepositoryName& iType, const CATUnicodeString& iLogicalInstanceId, CATIPLMProviderDesc*& oProviderDesc) = 0;

};

#endif
