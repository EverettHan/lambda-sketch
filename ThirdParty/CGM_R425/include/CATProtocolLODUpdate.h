// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATProtocolLODUpdate.h
// Header definition of CATProtocolLODUpdate
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2004  Creation: Code generated by the CAA wizard  jut
//===================================================================
#ifndef CATProtocolLODUpdate_H
#define CATProtocolLODUpdate_H

#include "SGInfra.h"
#include "CATVizBaseCodeExtension.h"

#include "CATVizGlobals.h"
class CATCGRContainer;
//-----------------------------------------------------------------------

/**
 * Describe your class here.
 * <p>
 * Using this prefered syntax will enable mkdoc to document your class.
 */
class ExportedBySGInfra CATProtocolLODUpdate : public CATVizBaseCodeExtension
{
   CATVizDeclareProtocol(CATProtocolLODUpdate);
   
public:
   
   // Standard constructors and destructors
   // -------------------------------------
   CATProtocolLODUpdate();
   virtual ~CATProtocolLODUpdate();

   // This method is to be used if the protocol is used in the main thread (the rep is modified)
   virtual void Update(CATCGRContainer & iContainer, CATVizSemanticLevel iFromLevel, CATVizSemanticLevel iTargetLevel) = 0;
   
   // This method is to be used in an auxiliary thread.
   virtual void * UpdateMT(CATCGRContainer & iContainer, CATVizSemanticLevel iFromLevel, CATVizSemanticLevel iTargetLevel) = 0;
   // Call this method in the main thread with the user data that was given by UpdateMT
   virtual void CommitMT(void * iUserData) = 0;
   // Call this method in the main thread with the user data that was given by UpdateMT in order to free the user data
   virtual void CancelMT(void * iUserData) = 0;
   
   // Copy constructor and equal operator
   // -----------------------------------
   CATProtocolLODUpdate (CATProtocolLODUpdate &);
   CATProtocolLODUpdate& operator=(CATProtocolLODUpdate&);

};

//-----------------------------------------------------------------------

#endif
