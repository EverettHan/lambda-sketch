// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMRecordReadSet.h
// Define the CATIPLMRecordReadSet interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Nov 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMRecordReadSet_H
#define CATIPLMRecordReadSet_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMRecordReadSet;
#else
extern "C" const IID IID_CATIPLMRecordReadSet ;
#endif

class CATIPLMRecordRead;
class CATIPLMError;
class CATPLMClientTasks;

//------------------------------------------------------------------

/**
* A CATIPLMRecordReadSet contains the message which satisfied the conditions in the QueryFilter.
* The message can be seen as a set of Record. 
* CATIPLMRecordReadSet provides access to the records.
* CATIPLMRecord allow access to the various information of the current record. 
* The CATIPLMRecordReadSet.Next method is used to move to the next record of the RecordSet, making the next record become the current record.
*/
class ExportedByCATPLMServicesItf CATIPLMRecordReadSet: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
  
  /**
  * Moves the cursor down one record from its current position and Returns the new record.
  *
  * @param oRecordRead [out, CATBaseUnknown#Release]
  *         next record
  * @return
  *         Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>the new current record is valid.</dd>
  *     <dt>S_FALSE</dt>
  *     <dd>there are no more records.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs</dd>
  *   </dl>
  */  
  virtual HRESULT Next(CATIPLMRecordRead ** oRecordRead) = 0;

	/**
  *	Returns the report of the incident that occurs on the recordSet. NULL if the recordSet is successfully which means All contained records are ok
  *	@param  oError [out, CATBaseUnknown#Release]
  *			The error description.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>recordset is successfully. All records are ok </dd>
  *     <dt>S_FALSE</dt>
  *     <dd>recordset contains at least one error. Get further information by using CATIPLMError</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the operation.</dd>
  *   </dl>
  *
  */
  virtual HRESULT GetReport(CATIPLMError ** oError) = 0;

  /**
  * Returns the report of the incident that occurs on the record read set. NULL if no error found on record read set
  *
  * @return IUnknown#Release
  */
  virtual CATIPLMError* GetReport() = 0;

  /**
  * Return info/notice made by application code executed server side
  * 2 kinds of client tasks can be found:
  * a- simple messages.
  * b- list of modified objects.
  * Only transaction that create/update/delete/modify data are concerned.
  */
  virtual CATPLMClientTasks GetClientTasks() = 0;

};

//------------------------------------------------------------------

#endif

