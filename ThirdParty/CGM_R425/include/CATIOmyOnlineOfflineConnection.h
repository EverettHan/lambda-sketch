// COPYRIGHT Dassault Systemes 2009
//===================================================================
//
// CATIOmyOnlineOfflineConnection.h
// Define the CATIOmyOnlineOfflineConnection interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Jan 2009  Creation: Code generated by the CAA wizard  PJQ
//===================================================================
#ifndef CATIOmyOnlineOfflineConnection_H
#define CATIOmyOnlineOfflineConnection_H

#include "CATOMYBaseSession.h"
#include "CATBaseUnknown.h"
#include "CATEventSubscriber.h"
#include "CATBoolean.h"
class CATUnicodeString;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOMYBaseSession IID IID_CATIOmyOnlineOfflineConnection;
#else
extern "C" const IID IID_CATIOmyOnlineOfflineConnection ;
#endif

/**
 * @level Protected
 * @usage U4
 * Interface representing a class that can handle the connexion process for online/offline switch
 * It should be able to handle both online and offline connection and disconnection.
 */
class ExportedByCATOMYBaseSession CATIOmyOnlineOfflineConnection: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /**
   * Method to handle the disconnection process. It will be called before each switch
   * either to online or offline mode.
   */
  virtual HRESULT Disconnect()=0;

  /**
   * Method to handle the connection process. It will be called after each switch
   * either to online or offline mode.
   *
   * When swithing online, if the result of the connection cannot be known synchronously,
   * like when waiting for the user password, the method NeedsCallbackForConnection should
   * be implemented in order to manage the result.
   *
   * The CATOmyOnlineOfflineConnectionAdapter must be used for the call back management.
   * The callback protocol is pretty light and should not be played with too harshly. It is
   * only used when switching from offline to online. In case of connection failure,
   * the system gets back offline.
   */
  virtual HRESULT Connect()=0;

  /**
   * Tells if the result of the call to connect will need to be handle through the
   * CATOmyOnlineOfflineConnectionFailure and CATOmyOnlineOfflineConnectionSuccess callbacks.
   * It will be called before the call to Connect().
   * Not that the CATOmyOnlineOfflineConnectionAdapter must be used for the call back management.
   */
  virtual CATBoolean NeedsCallbackForConnection()=0;

  /**
   * Adds a subscriber to the CATOmyOnlineOfflineConnection notifications.
   * It will be called before the call to Connect().
   * The CATOmyOnlineOfflineConnectionAdapter must be used for the call back management.
   *
   * See @CATEventSubscriber::RemoveCallback for details on the arguments.
   */
  virtual CATCallback AddConnectionCallbackSubcription(CATBaseUnknown * iEventSubscriber,
      CATSubscriberMethod iMehtodToCall,
      CATSubscriberData iClientData=NULL)=0;

  /**
   * Removes a subscriber to the CATOmyOnlineOfflineConnection notifications.
   * It will be called after the call to Connect().
   * The CATOmyOnlineOfflineConnectionAdapter must be used for the call back management.
   *
   * See @CATEventSubscriber::RemoveCallback for details on the arguments.
   */
  virtual HRESULT RemoveConnectionCallbackSubcription(CATBaseUnknown * iEventSubscriber,
      CATCallback iCallbackOnSwitch)=0;

  /**
  * If offline mode cannot be set, we process it being the same as a click on cancel on
  * the online connection panel. This method emulates this behavior in the FAKE "offline connection" panel
  * (see CATPLMEmptyCmdForLocalSaveCnx)
  */
  virtual HRESULT SetFakeConnectionAbortedForOffline() = 0;
};
CATDeclareHandler(CATIOmyOnlineOfflineConnection,CATBaseUnknown);
//------------------------------------------------------------------

#endif
