//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2010/08/17
//===================================================================
// CATIAfrPLMCompassLegendSelector.cpp
// Header definition of class CATIAfrPLMCompassLegendSelector
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/08/17 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIAfrPLMCompassLegendSelector_H
#define CATIAfrPLMCompassLegendSelector_H

#include "CATBaseUnknown.h"
#include <CATUnicodeString.h>
#include <CATListOfCATUnicodeString.h>
#include "CATAfrItf.h"
#include "CATIAfrVIDCompass.h"
#include "CATLISTP_CATBaseUnknown.h"

class CATPLMCompass;

extern ExportedByCATAfrItf  IID IID_CATIAfrPLMCompassLegendSelector ;

//enum CATLegendFacetUsageContext { ForListOfFacet=0, ForBIEssential=1, ForTagger=2 };
enum CATLegendFacetUsageContext { ForListOfFacet=0, ForCompass=1, ForRefinement=2 };
enum CATRefinementDisplayMode { BothMode=0, RefinementModeOnly=1, CompactModeOnly=2 };

class ExportedByCATAfrItf CATIAfrPLMCompassLegendSelector: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

   /**
    * Get current attribute set
    **/
    virtual HRESULT GetCurrentAttributeSet( CATPLMCompass *iCompass, CATUnicodeString &oAttributeSet ) = 0;
   /**
    * Get list of available attribute sets
    **/
    virtual HRESULT GetAttributeSetList( CATPLMCompass *iCompass, CATListOfCATUnicodeString &oAttributeSetList ) = 0;
   /**
    * User request change of attribute set
    **/
    virtual HRESULT OnCurrentAttributeSet( CATPLMCompass *iCompass, const CATUnicodeString &iAttributeSet ) = 0; 

  /**
   * Get current attribute set
   */
    virtual HRESULT GetCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, CATUnicodeString &oAttributeSet ) = 0;

  /**
   * Get list of available attribute sets
   */
    virtual HRESULT GetAttributeSetList( CATIAfrVIDCompass_var ispCompass, CATListOfCATUnicodeString &oAttributeSetList ) = 0;

  /**
   * Get list of available facet (deprecated)
   */
    virtual HRESULT GetFacetList( CATIAfrVIDCompass_var ispCompass, CATListPtrCATBaseUnknown &oFacetList ) = 0;

  /**
   * StartFacetComputation request engines to compute their facet
   * if return E_NOTIMPL then GetFacetList will be called right after
   * otherwise GetFacetList will be called after receiving notification CATAfrFacetEventManagerServices::SendAfrUpdateFacetNotification(NULL, 3);
   */
    virtual HRESULT StartFacetComputation() = 0;

  /**
   * Get list of available facets for a given quadrant
   * iUsageContext allows the implementation to optimize their facet computation
   * ForListOfFacet means that we need the facet names (for compass combo for example)
   * ForCompass means that we need the facet for the display in the compass
   * ForRefinement means that we need the facet for the display in the refinement panel
   */
    virtual HRESULT GetFacetList( CATIAfrVIDCompass_var ispCompass, CATLegendFacetUsageContext iUsageContext, CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList ) = 0;

  /**
   * Get complete list of available facets (list of facet for all quadrants)
   * iUsageContext allows the implementation to optimize their facet computation
   * ForListOfFacet means that we need the facet names (for compass combo for example)
   * ForCompass means that we need the facet for the display in the compass mini panel
   * ForRefinement means that we need the facet for the display in the refinement panel
   */
    virtual HRESULT GetFacetList( CATLegendFacetUsageContext iUsageContext, CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList ) = 0;

    virtual HRESULT GetFacetListForImmersiveBrowser( CATBoolean ibRefreshRequested, CATListPtrCATBaseUnknown &oFacetList ) = 0;

  /**
   * User request change of attribute set
   */
   virtual HRESULT OnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATUnicodeString &iAttributeSet) = 0;

  /**
   * User request change of attribute set
   */
    //virtual HRESULT OnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATUnicodeString &iAttributeSet, CATSysWeakRef *ipFacetWeakRef ) = 0;

    /**
     * OnCurrentAttributeSet
     * new method to use with new UX, no more compass, attribute name can be retrieved from Facet...
     */
    //virtual HRESULT OnCurrentAttributeSet( CATSysWeakRef *ipFacetWeakRef )=0;

    /**
     * OnCurrentAttributeSet
     * new method to use with new UX, no more compass, attribute name can be retrieved from Facet...
     * ipFacetWeakRef can be NULL, and iFacetName valuated (case of COMPASS_CHECKER for exemple or facet group for refinement)
     * if ipFacetWeakRef is not NULL then facet name will be retrieved from the facet and not from iFacetName
     */
    virtual HRESULT OnCurrentAttributeSet( CATSysWeakRef *ipFacetWeakRef, const CATUnicodeString &iFacetName)=0;

  /**
   * Get check state on the current attribute set
   */
    virtual HRESULT GetCheckStateOnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, CATBoolean & oCheckState ) = 0;

  /**
   * The user click on the check button associated to the current attribute set
   */
    virtual HRESULT OnUserCheckOnCurrentAttributeSet( CATIAfrVIDCompass_var ispCompass, const CATBoolean & iCheckState ) = 0;

  /**
   * GetAuthorizedDisplayMode
   * returns the CATRefinementDisplayMode supported by the current window:
   * BothMode means that refinement facets can be displayed in compact or refinement panel
   * RefinementModeOnly  means that refinement facets can be displayed in refinement panel only
   * CompactModeOnly  means that refinement facets can be displayed in compact panel only
   */
    virtual HRESULT GetAuthorizedDisplayMode(CATRefinementDisplayMode &oDisplayMode)=0;
  /**
   * oDisplayMode = 0 => standard eastcompass should be displayed
   * oDisplayMode = 1 => refinement panel should be displayed
   */
    virtual HRESULT GetDisplayMode ( CATIAfrVIDCompass_var ispCompass, int &oDisplayMode) = 0;

  /**
   * oDisplayMode = 0 => standard eastcompass is displayed
   * oDisplayMode = 1 => refinement panel is displayed
   */
    virtual HRESULT SetDisplayMode ( CATIAfrVIDCompass_var ispCompass, int iDisplayMode) = 0;

    virtual HRESULT IsRefineAuthorized (CATBoolean &oRefineAuthorized)=0;

    virtual HRESULT IsFacetFavorite (const CATIAfrVIDCompass_var &ispCompass, const CATUnicodeString &iAttributeSet, CATBoolean &oFacetFavorite)=0;
    virtual HRESULT SetFacetFavorite (const CATIAfrVIDCompass_var &ispCompass, const CATUnicodeString &iAttributeSet, CATBoolean iFacetFavorite)=0;

    /**
     * To know if we must display refinement panel when no quadrant is activated on the compass
     */
    virtual HRESULT DisplayRefinementPanelWithoutCompassActivated(CATBoolean &oDisplayRefinement)=0;

    virtual HRESULT GetFacetActive(CATBaseUnknown_var & spFacet) = 0;
    virtual HRESULT SetFacetActive(const CATBaseUnknown_var & spFacet) = 0;

    /**
     * used to know if the tagger should be displayed in edition mode (selection exists) or refinement mode
     */
    virtual HRESULT GetEditModeFlag(CATBoolean &obEditMode)=0;

    // Compass Checker management
    virtual HRESULT GetCompassCheckerNLS(CATUnicodeString &ousCompassCheckerNLS)=0;
    virtual HRESULT IsCompassCheckerAvailable(CATBoolean &obIsAvailable)=0;

    virtual HRESULT ResetAllCriteria()=0;
};
//-----------------------------------------------------------------------
CATDeclareHandler( CATIAfrPLMCompassLegendSelector, CATBaseUnknown );
#endif
