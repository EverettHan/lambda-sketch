// COPYRIGHT Dassault Systemes 2003

//===================================================================
//
// CATILieUnitsSheetSettingAtt.h
// Define the CATILieUnitsSheetSettingAtt interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Dec 2003  Creation: Code generated by the CAA wizard  sob
//===================================================================
#ifndef CATILieUnitsSheetSettingAtt_H
#define CATILieUnitsSheetSettingAtt_H

#include "CATLifSpecs.h"
#include "CATCkeScale.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATLifSpecs IID IID_CATILieUnitsSheetSettingAtt;
#else
extern "C" const IID IID_CATILieUnitsSheetSettingAtt ;
#endif

class CATSettingInfo;
class CATUnicodeString;

#include "CATIABase.h"
#include "CATICkeMagnitude.h"
#include "CATSafeArray.h"

//------------------------------------------------------------------

/**  
* The interface to access a CATILieUnitsSheetSettingAtt.
* This interface may be used to read or modify in the CATIA\Tools\Option the settings values
* of Units sheet.
*/
class ExportedByCATLifSpecs CATILieUnitsSheetSettingAtt: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	
	//**********************************************************************
	//**********************************************************************
	//*******            Gestion des Magnitudes Unités               *******
	//**********************************************************************
	//**********************************************************************
	/**
	* Retrieves the list of magnitudes attribute.
	* <br><b>Role</b>:Return the ListOfMagnitudes parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param oListOfMagnitudes
	*	The list of magnitudes
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetListOfMagnitudes(CATSafeArrayVariant & oListOfMagnitudes) = 0;

	/**
	* Retrieves the list of magnitudes size attribute.
	* <br><b>Role</b>:Return the ListOfMagnitudesSize parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param oListOfMagnitudes
	*	address of an object int.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetListOfMagnitudesSize( int* oListOfMagnitudesSize) = 0;
	
	/**
	* Retrieves the MagnitudeValues attribute.
	* <br><b>Role</b>:Return the MagnitudeValues parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iMagnitudeName
	*	The name of the Magnitude.
	* @param oUnitName
	*	The value of the UnitName corresponding to the Magnitude.
	* @param oDecimalPlaceReadWrite
	*	The number of decimals for ReadWrite number.
	* @param oDecimalPlaceReadOnly
	*	<br>The number of decimals for ReadOnly number.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetMagnitudeValues( CATUnicodeString& iMagnitudeName, CATUnicodeString& oUnitName, int* oDecimalPlaceReadWrite, int* oDecimalPlaceReadOnly) = 0;
	
	/**
	* Retrieves the MagnitudeValues attribute.
	* <br><b>Role</b>:Return the UnitName parameter for the given iMagnitude if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iMagnitudeName
	*	The Magnitude
	* @return
	*	The value of the UnitName corresponding to the Magnitude.
	*
	*/
	virtual HRESULT GetMagnitudeUnit(const CATICkeMagnitude_var& iMagnitude, CATUnicodeString& oUnitName) = 0;
	
	
	
    /** 
	* Retrieves information about the ListOfMagnitudes setting parameter.
	* <br>Refer to @href CATSysSettingController for a detailed description.
	*/
	virtual HRESULT GetListOfMagnitudesInfo ( CATSettingInfo*  oInfo ) = 0;
	
    /** 
	* Locks or unlocks the ListOfMagnitudes setting parameter.
	* <br>Refer to @href CATSysSettingController for a detailed description.
	*/
	virtual HRESULT SetListOfMagnitudesLock (unsigned char  iLocked ) = 0;

	/** 
	* Locks or unlocks the DimensionsDisplay setting parameter.
	* <br>Refer to @href CATSysSettingController for a detailed description.
	*/
	virtual HRESULT SetDimensionsDisplayLock (unsigned char  iLocked ) = 0;

    /** 
	* Retrieves information about the DimensionsDisplay setting parameter.
	* <br>Refer to @href CATSysSettingController for a detailed description.
	*/
	virtual HRESULT GetDimensionsDisplayInfo ( CATSettingInfo*  oInfo ) = 0;


	/**
	* Retrieves the DecimalReadWrite attribute.
	* <br><b>Role</b>:Return the DecimalReadWrite parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iMagnitudeName
	*	The name of the Magnitude.
	* @param oDecimalPlaceReadWrite
	*	The value of the DecimalReadWrite attribute corresponding to the Magnitude.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetDecimalReadWrite (CATUnicodeString&  iMagnitudeName, int*  oDecimalPlaceReadWrite) = 0;

	/**
	* Retrieves the DecimalReadOnly attribute.
	* <br><b>Role</b>:Return the GetDecimalReadOnly parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iMagnitudeName
	*	The name of the Magnitude.
	* @param oDecimalPlaceReadOnly
	*	The value of the DecimalReadOnly attribute corresponding to the Magnitude.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetDecimalReadOnly (CATUnicodeString&  iMagnitudeName, int*  oDecimalPlaceReadOnly) = 0;

	/**
	* Sets the MagnitudeValues attribute.
	* <br><b>Role</b>:Set the MagnitudeValues parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iMagnitudeName
	*	The name of the magnitude.
	* @param iUnitName
	*	The name of the unit.
	* @param iDecimalPlaceReadWrite
	*	The number of decimals for read/write number.
	* @param iDecimalPlaceReadOnly
	*	The number of decimals for read/only number.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetMagnitudeValues( CATUnicodeString& iMagnitudeName, CATUnicodeString& iUnitName, int* iDecimalPlaceReadWrite, int* iDecimalPlaceReadOnly) = 0;


	//**********************************************************************
	//**********************************************************************
	//*******           Gestion des Display Trailings Zeros          *******
	//**********************************************************************
	//**********************************************************************
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the DisplayTrailingZeros attribute.
	* <br><b>Role</b>:Return the DisplayTrailingZeros parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param ioDisplayTrailingZeros
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to not display trailing zeros
	* 	<br><tt>1 :</tt>   to display trailing zeros.
	*/
	virtual HRESULT GetDisplayTrailingZeros( int* ioDisplayTrailingZeros) = 0;
	
	/**
	* Sets the DisplayTrailingZeros attribute.
	* <br><b>Role</b>:Set the DisplayTrailingZeros parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iDisplayTrailingZeros
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to not display trailing zeros
	* 	<br><tt>1 :</tt>   to display trailing zeros.
	*/
	virtual HRESULT SetDisplayTrailingZeros( int* iDisplayTrailingZeros) = 0;
	
    /**
    * @deprecated V5R15. Use GetDimensionsDisplayInfo.
	* Retrieves the state of the DisplayTrailingZeros parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetDisplayTrailingZerosInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
    * @deprecated V5R15. Use SetDimensionsDisplayLock.
	* Locks or unlocks the DisplayTrailingZeros parameter.
	* <br><b>Role</b>: Locks or unlocks the DisplayTrailingZeros parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetDisplayTrailingZerosLock( unsigned char      iLocked ) = 0;
	
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the ExpNotationValuesGreater attribute.
	* <br><b>Role</b>:Return the ExpNotationValuesGreater parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param ioExpNotationValuesGreater
	*    The minimum value for exponential notation values.
	*/
	virtual HRESULT GetExpNotationValuesGreater( int* ioExpNotationValuesGreater) = 0;
	
    /**
	* Sets the ExpNotationValuesGreater attribute.
	* <br><b>Role</b>:Set the ExpNotationValuesGreater parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iExpNotationValuesGreater
	*    The minimum value for exponential notation values.
	*/
	virtual HRESULT SetExpNotationValuesGreater( int* iExpNotationValuesGreater) = 0;
	
    /**
    * @deprecated V5R15. Use GetDimensionsDisplayInfo.
	* Retrieves the state of the ExpNotationValuesGreater parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetExpNotationValuesGreaterInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
    * @deprecated V5R15. Use SetDimensionsDisplayLock.
	* Locks or unlocks the ExpNotationValuesGreater parameter.
	* <br><b>Role</b>: Locks or unlocks the ExpNotationValuesGreater parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetExpNotationValuesGreaterLock( unsigned char      iLocked ) = 0;
	
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the ExpNotationValuesLower attribute.
	* <br><b>Role</b>:Return the ExpNotationValuesGreater parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param ioExpNotationValuesLower
	*    The maximum value for exponential notation values.
	*/
	virtual HRESULT GetExpNotationValuesLower( int* ioExpNotationValuesLower) = 0;
	
    /**
	* Sets the ExpNotationValuesLower attribute.
	* <br><b>Role</b>:Set the ExpNotationValuesGreater parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iExpNotationValuesLower
	*    The maximum value for exponential notation values.
	*/
	virtual HRESULT SetExpNotationValuesLower( int* iExpNotationValuesLower) = 0;
	
    /**
    * @deprecated V5R15. Use GetDimensionsDisplayInfo.
	* Retrieves the state of the ExpNotationValuesLower parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetExpNotationValuesLowerInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
    * @deprecated V5R15. Use SetDimensionsDisplayLock.
	* Locks or unlocks the ExpNotationValuesLower parameter.
	* <br><b>Role</b>: Locks or unlocks the ExpNotationValuesLower parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetExpNotationValuesLowerLock( unsigned char      iLocked ) = 0;
	
	
	//**********************************************************************
	//**********************************************************************
	//*******                 Gestion des Same Display               *******
	//**********************************************************************
	//**********************************************************************
	
	//***********************************************************************
    // Ensure consistency with the IDL interface that will delegate its work
    // Check allowed signatures in System.CATSysSettingController
    //***********************************************************************
    /**
	* Retrieves the SameDisplay attribute.
	* <br><b>Role</b>:Return the SameDisplay parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param ioSameDisplay
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to not display same display
	* 	<br><tt>1 :</tt>   to display same display.
	*/
	virtual HRESULT GetSameDisplay( int* ioSameDisplay) = 0;
	
    /**
	/**
	* Sets the SameDisplay attribute.
	* <br><b>Role</b>:Set the SameDisplay parameter if it is possible
	* in the current administrative context. In user mode this method will always
	* return E_FAIL.
	* @param iSameDisplay
	*	<b>Legal values</b>:
	*	<br><tt>0 :</tt>   to not display same display
	* 	<br><tt>1 :</tt>   to display same display.
	*/
	virtual HRESULT SetSameDisplay( int* iSameDisplay) = 0;
	
    /**
    * @deprecated V5R15. Use GetDimensionsDisplayInfo.
	* Retrieves the state of the SameDisplay parameter.
	* @param oInfo
	*	Address of an object CATSettingInfo.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT GetSameDisplayInfo( CATSettingInfo*    oInfo ) = 0;
	
    /** 
    * @deprecated V5R15. Use SetDimensionsDisplayLock.
	* Locks or unlocks the SameDisplay parameter.
	* <br><b>Role</b>: Locks or unlocks the SameDisplay parameter if the
	* operation is allowed in the current administrated environment. In user mode 
	* this method will always return E_FAIL.
	* @param iLocked
	*	the locking operation to be performed
	*	<b>Legal values</b>:
	*	<br><tt>1 :</tt>   to lock the parameter.
	* 	<br><tt>0:</tt>   to unlock the parameter.
	* @return
	*	<b>Legal values</b>:
	*	<br><tt>S_OK :</tt>   on Success
	* 	<br><tt>E_FAIL:</tt>  on failure
	*/
	virtual HRESULT SetSameDisplayLock( unsigned char      iLocked ) = 0;

	/**
	* Saves the unit settings in repository.
	*/
	virtual HRESULT SaveRepositoryForUnits( ) = 0;

	/**
	* Rollbacks the unit settings.
	*/
	virtual HRESULT RollbackForUnits( ) = 0;

	/**
	* Validates the unit settings in session.
	*/
	virtual HRESULT CommitForUnits( ) = 0;

	/**
	* Resets the unit settings to default values.
	*/
	virtual HRESULT ResetToAdminValuesForUnits( ) = 0;

	/* Gets the display unit of a magnitude for a given scale */
	virtual HRESULT GetMagnitudeDisplayUnit(CATCkeScale iScale,const CATUnicodeString&  iMagnitudeName, CATUnicodeString& oDisplayUnitName) = 0;

	/*
	* Sets the display unit of a magnitude for a given scale 
	*/
	virtual HRESULT SetMagnitudeDisplayUnit(CATCkeScale iScale,const CATUnicodeString&  iMagnitudeName, const CATUnicodeString& iDisplayUnitName) = 0;

	
	// No constructors or destructors on this pure virtual base class
	// --------------------------------------------------------------
};
CATDeclareHandler(CATILieUnitsSheetSettingAtt, CATBaseUnknown); 

//------------------------------------------------------------------

#endif
