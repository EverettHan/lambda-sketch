// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATVVSLocalStorageSettingCtrl.h
// Provide implementation to interface
//    CATIOmyPowerIOSettingAtt
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//CAA2 Wizard Generation Report
//   IMPLEMENTATION
//   TIE: CATIOmyPowerIOSettingAtt
//End CAA2 Wizard Generation Report
//===================================================================
//  Aug 2004  Creation: Code generated by the CAA wizard  crx
//===================================================================
#ifndef CATVVSLocalStorageSettingCtrl_H
#define CATVVSLocalStorageSettingCtrl_H

// BSFBuildtimeData
#include "CATIAV5Level.h"
// CATVirtualVaultSystem
#include "CATIVVSLocalStorageSettingAtt.h"
#include "VVSUtils.h"
// System
#include "CATSysMacroSettingCtrl.h"
#include "CATSysSettingController.h"

class CATString;

class ExportedByVVSUtils CATVVSLocalStorageSettingCtrl : public CATSysSettingController
{
  CATDeclareSettingCtrl(CAT, VVS, LocalStorage);

  CATDeclareCBEvent(Updated);

public:

  CATSysDeclareSettingCtrlLocks(LSManagedPath);

  /**
   * Gets the current absolute path of the Local Storage repository
   * Reads the absolute value of the current Local Storage repository path from setting currently set in memory.
   * If the local path is defined from environment variables, it returns the expanded format.
   * The eventual literal (unexpanded) format can be retrieved with @href #GetLocalStoragePathSymb.
   * @param oLocalPath [out]
   *       the local storage expanded path
   * @return
   *        S_OK   : Successfully ended
   *        E_FAIL : A software error occured
   */
  inline HRESULT GetLocalStoragePath(CATUnicodeString& oLocalPath) { return GetLSPathInternal(0, oLocalPath); };

  /**
  * Gets the current literal path of the Local Storage repository.
  * Reads the literal value of the current Local Storage repository path from setting currently set in memory.
  * If the local path is defined with environment variables, it returns the literal format.
  * for example CSIDL_LOCAL_APPDATA\PLM_LocalResult
  * if no literal used, it returns the absolute path, as @href #GetLocalStoragePath does.
  * @param oLocalPath [out]
  *       the local storage symbolic path
  * @return
  *        S_OK   : Successfully ended
  *        E_FAIL : A software error occured
  */
  inline HRESULT GetLocalStoragePathSymb(CATUnicodeString& oLocalPath) { return GetLSPathInternal(1, oLocalPath); };

  /**
  * Sets a user Local Storage repository path
  * Registers a user Local Storage repository path, in absolute or literal format, as the new current setting in memory:
  * This path becomes the new reference path for all File Description files storing/locking.
  * This path is stored into LocalStorage.CATSettings file at next Preferences UI save.
  * This path must exist and be an absolute folder path.
  * This folder must be empty (no file or sub-folder) excepted eventual lsinfo.log lock file from a previous affectation.
  * The current Local Storage repository it replaces must also be empty (no file or sub-folder) excepted eventual lsinfo.log lock file,
  * as the cross usage of several Local Storage repositories is not supported.
  *
  * @param iLocalPath [in]
  *       the new Local Storage repository path.
  * @return
  *        S_OK   : Successfully ended. This new path is registered in setting and LocalStorage locking structure
  *        FAILED : Current path Local Storage does not change
  *        E_FAIL : A software error occured
  *        specific failures (for UI information)
  *        E_VVS_LS_NotAValidDir        : new Local Storage repository does not exist/not a valid absolute folder path
  *        E_VVS_LS_CurrentDirNotEmpty  : current Local Storage repository not empty (most currently, .fd files remaining)
  *        E_VVS_LS_ProposedDirNotEmpty : new Local Storage repository not empty
  */
  HRESULT SetLocalStoragePath(CATUnicodeString& iLocalPath);

  /**
  * Sets back the default Local Storage repository path.
  * This default path is CSIDL_LOCAL_APPDATA\\PLM_LocalResult.
  * It becomes the new reference path for all File Description files storing/locking.
  * It is stored into LocalStorage.CATSettings file at next Preferences UI save.
  * It must be empty (no file or sub-folder) excepted eventual lsinfo.log lock file from a previous affectation.
  * The current Local Storage repository it replaces must also be empty (no file or sub-folder) excepted eventual lsinfo.log lock file,
  * as the cross usage of several Local Storage repositories is not supported.
  *
  ** @return
  *        S_OK   : Successfully ended. This new path is registered in setting and LocalStorage locking structure
  *        FAILED : Current path Local Storage does not change
  *        E_FAIL : A software error occured
  *        specific failures (for UI information)
  *        E_VVS_LS_CurrentDirNotEmpty  : current Local Storage repository not empty (most currently, .fd files remaining)
  *        E_VVS_LS_ProposedDirNotEmpty : new Local Storage repository not empty
  */
  HRESULT SetDefaultLocalStoragePath();

  /** @nodoc */
  HRESULT Rollback();
  HRESULT ResetToAdminValues(char** iAttList, int iNbAtt);
  HRESULT SaveRepository(const char* tmp = 0);

protected:

  virtual ~CATVVSLocalStorageSettingCtrl();

  // Initialize
  inline HRESULT Initialize() { return InitLSCurrentPath(); };

private:

  // The copy constructor and the equal operator must not be implemented
  // -------------------------------------------------------------------
  CATVVSLocalStorageSettingCtrl(CATVVSLocalStorageSettingCtrl&);
  CATVVSLocalStorageSettingCtrl& operator = (CATVVSLocalStorageSettingCtrl&);

  HRESULT InitLSCurrentPath();
  HRESULT GetLSPathInternal(int iSymb, CATUnicodeString& oLocalPath);

  CATUnicodeString _LFDefaultPath;
};
#endif
