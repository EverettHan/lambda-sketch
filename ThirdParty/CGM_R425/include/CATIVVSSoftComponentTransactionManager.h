// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIVVSSoftComponentTransactionManager.h
// Define the CATIVVSSoftComponentTransactionManager interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Aug 2007  Creation: Code generated by the CAA wizard  NLZ
//===================================================================
/**
 * @level Private
 * @usage U3
 */
#ifndef CATIVVSSoftComponentTransactionManager_H
#define CATIVVSSoftComponentTransactionManager_H

#include "VVSCoreProtocol.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByVVSCoreProtocol IID IID_CATIVVSSoftComponentTransactionManager;
#else
extern "C" const IID IID_CATIVVSSoftComponentTransactionManager ;
#endif

class CATVVSTransaction;

//------------------------------------------------------------------

/**
* Interface representing a transactional layer for the Vault Site.
*
* <br><b>Role</b>: Components that implement
* CATIVVSSoftComponentTransactionManager are code/data extensions of transactional Vault Sites.
* <p>
*/
class ExportedByVVSCoreProtocol CATIVVSSoftComponentTransactionManager: public CATBaseUnknown
{
  CATDeclareInterface;

public:

  /** 
  * Start a transaction.
  * @param iTransaction [in]
  *   The transaction .
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise <code>E_FAIL</code>.
  */
  virtual HRESULT StartTransaction (const CATVVSTransaction* const iTransaction) = 0 ;

  /** 
  * End a transaction.
  * @param iTransactionUuid [in]
  *   The transaction .
  * @return
  *   <code>S_OK</code> if everything ran ok, otherwise <code>E_FAIL</code>.
  */
  virtual HRESULT EndTransaction (const CATVVSTransaction* const iTransaction) = 0 ;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
