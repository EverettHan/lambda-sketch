//===================================================================
// COPYRIGHT Dassault Systemes 2016/06/28
//===================================================================
// CATVidCtlCKEditor.cpp
// Header definition of class CATVidCtlCKEditor
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016/06/28 Creation: Code generated by the 3DS wizard *SGA8
//===================================================================

#ifndef CATVidCtlCKEditor_H
#define CATVidCtlCKEditor_H

#include "CATVidCtlWebViewer.h"
#include "CATVidJSMessageEventArgs.h"

/**
 * This widget provides a rich text editor.
 * <b>Role</b>:
 * This widget consists of command used for editing text documents. It contains commands from basic commands like Bold, Italic, Underline
 * to advanced commands like inserting tables, special characters and images.
 * <br>
 * Use factory function @ref #CreateCKEditor to create an instance of the editor. Do not use the constructor for instance creation.
 *
 * @ingroup VIDControls
 */

class ExportedByVisuDialog CATVidCtlCKEditor: public CATVidCtl
{
  CATDeclareClass;
  DeclareResource(CATVidCtlCKEditor, CATVidCtl);

  /**
  * Default CATVidCtlCKEditor Constructor. DO NOT USE THIS.
  * Instead use static factory @ref #CreateCKEditor.
  */
  CATVidCtlCKEditor();
  
public:

  /**
   * Constructs a CATVidCtlCKEditor with standard style.
   * @param i_pParent
   *   The parent of the widget.
   * @param i_pIdentifier
   *   The name of the widget.
   * @param i_bReplaceDefaultSpecialChars
   *   Optional parameter. Determines the special character replace mode.
   *   Possible Values @c false & @c true.
   *   Default Value: @c false.
   *   @c false means the user provided special characters  in  CATNls (named "VidCKEditor_SpecialCharacters_" + widgetName) 
   *   will append the default special characters.
   *   @c true means the user provided special characters  in  CATNls (named "VidCKEditor_SpecialCharacters_" + widgetName) 
   *   will replace the default special characters.
   *   For example if there is a file named "VidCKEditor_SpecialCharacters_CkEditorTester.CATNls", it should finally be placed in 
   *   resources/msgcatalog directory, it should have  a key named SpecialCharacters with its value as special character. 
   *   Sample content of file:
   *   <meta charset="UTF-8"/>
   *   SpecialCharacters="∏,±,≠,≥,≤,µ,€,∞,∆,√,Ø,£,Ω,α,β";
   *
   * @param i_toolbarPlugins
   *   Optional parameter, If parameter is not provided then default toolbar will be loaded.
   *   Comma(',') seperated string containing list of toolbars to be attached to the editor. 
   *   Example: @c "document,styles,basicstyles,colors,clipboard,align,paragraph".
   *   All possible toolbars and their contained commands are as below:.
   *   document        :       Print, Templates.
   *   clipboard       :       Cut, Copy, Paste, PasteText, PasteFromWord, Undo, Redo.
   *   editing         :       Find, Replace.
   *   basicstyles     :       Bold, Italic, Underline, Strike, Subscript, Superscript, CopyFormatting, RemoveFormat.
   *   align           :       JustifyLeft, JustifyCenter, JustifyRight, JustifyBlock.
   *   paragraph       :       NumberedList, BulletedList.
   *   direction       :       BidiLtr, BidiRtl.
   *   links           :       Link, Unlink, Anchor.
   *   insert          :       SpecialChar, Image, Table, HorizontalRule.
   *   styles          :       Font, FontSize.
   *   colors          :       TextColor, BGColor.
   *
   *   The order of the toolbars in string, determine the order of the toolbars in the editor 
   *   To use all of the available toolbars pass the value "all" 
   * 
   * Editor fires Ready Event once it is completely loaded and is ready for I/O opetations. Call SetText/RequestText after Ready event is fired.
   * 
   * </B>Creation using SYPStyle:</B>
   * <CATVidCtlCKEditor Name="CKEditor_Name" ReplaceDefaultSpecialChars="1" ToolbarPlugins="styles,basicstyles" />
   * 
   */
  static CATVidCtlCKEditor* CreateCKEditor(CATCommand *i_pParent, const CATString & i_pIdentifier, const CATBoolean i_bReplaceDefaultSpecialChars = false, const CATUnicodeString& i_toolbarPlugins = "styles,basicstyles,colors,clipboard,align");

  /**
   * Sets text in the editor. Use this function to set the text only without any formatting.
   * If your data contains bold, italic, images, tables or other rich text use @ref #SetXHTMLText instead.
   * @param i_text Plain Text to be set. 
   * Editor fires Ready Event once it is completely loaded and is ready for I/O opetations. 
   * Call SetText after Ready event is fired.
   */
  void SetText(const CATUnicodeString& i_text);

  /**
  *   ||**********************************************************||
  *  ||------------------GetText() is DEPRECATED-------------------||
  * ||------------------Use RequestText() instead-------------------||
  *||****************************************************************||
  */
  void GetText();

  /**
   * Gets text of the editor. Use this function to get the text without formatting only.
   * If your data contains Images, tables or other rich text use @ref #RequestXHTMLText instead.
   * This function donot return the requested text.l
   * You need to add EventHandler for @c TextRequested Event and add a callback function where editor 
   * text will be passed in as @c CATSYPStringDataEventArgs argument
   * Editor fires Ready Event once it is completely loaded and is ready for I/O opetations. 
   * Call RequestText after Ready event is fired.
   */
  void RequestText();
  
  /**
   * Sets rich text in XHTML format in the editor.
   * If your data contains bold, italic, images, tables or other rich text use this function.
   * @param iText XHTML Text to be set. 
   * Editor fires Ready Event once it is completely loaded and is ready for I/O opetations. 
   * Call SetXHTMLText after Ready event is fired.
   */
  void SetXHTMLText(const CATUnicodeString& iText);

  /**
  * Gets XHTML text of the editor. Use this function to get the rich formatted text from the editor.
  * If your data contains Images, tables or other rich text use this function.
  * This function donot return the requested text.
  * You need to add EventHandler for @c XHTMLTextRequested Event and add a callback function where editor
  * text will be passed in as @c CATSYPStringDataEventArgs argument
  * Editor fires Ready Event once it is completely loaded and is ready for I/O opetations.
  * Call RequestXHTMLText after Ready event is fired.
  * Default <!Doctype> and <html> provided is:
  * <!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'> <html xmlns='http://www.w3.org/1999/xhtml'> .
  */
  void RequestXHTMLText();

  /**
  *   ||**********************************************************||
  *  ||------------------GetXHTMLText() is DEPRECATED-------------------||
  * ||------------------Use RequestXHTMLText() instead-------------------||
  *||****************************************************************||
   */
  void GetXHTMLText();
  
  /*
   * Function for internal Use only
   * Sets _bReplaceDefaultSpecialChars.
   * @param i_bReplaceDefaultSpecialChars.
   *   Determines the special character replace mode.
   *   Possible Values @c false & @c true.
   *   @c false means the user provided special characters  in  CATNls (named "VidCKEditor_SpecialCharacters_" + widgetName) 
   *   will <b>append</b> the default special characters.
   *   @c true means the user provided special characters  in  CATNls (named "VidCKEditor_SpecialCharacters_" + widgetName) 
   *   will <b>replace</b> the default special characters.     
   */
  void SetReplaceDefaultSpecialChars(const CATBoolean& i_bReplaceDefaultSpecialChars);

  /*
   * Function for internal Use only
   * Gets _bReplaceDefaultSpecialChars.
   * @return _bReplaceDefaultSpecialChars.
   * For more info see @ref #SetReplaceDefaultSpecialChars.     
   */
  CATBoolean GetReplaceDefaultSpecialChars();

  /*
   * Function for internal Use only
   * Sets _pToolbarPlugins.
   * @param i_toolbarPlugins
   *   Comma(',') seperated string containing list of toolbars to be attached to the editor. 
   *   Example: @c "document,styles,basicstyles,colors,clipboard,align,paragraph".
   *   For more info see @ref #CreateCKEditor.
   */
  void SetToolbarPlugins(const CATUnicodeString& i_toolbarPlugins);
  
  /*
   * Function for internal Use only
   * Gets _pToolbarPlugins.
   * @return _pToolbarPlugins
   *   Comma(',') seperated string containing list of toolbars to be attached to the editor.
   * For more info see @ref #SetToolbarPlugins.     
   */
  CATUnicodeString GetToolbarPlugins();

  /**
  * Gets whether Editor is ready for interactions or not.
  * @return _bEditorReady.
  * Return Values:
  * 0->Editor Not Ready for interactions
  * 1->Editor ready for interactions
  */
  CATBoolean GetEditorReady();

  /**
  * Translator to convert the XHTML output generated by CATVidCtlCKEditor to the XHTML compatible with CATVidCtlNotepad.
  * It is a static translator. Can be used without creating object of CKEditor.
  * @param i_pInputXHTMLStr
  *   XHTML generated by CKEditor 
  @param i_bCreateNewParaOnEnter
  *  Bool which specify whether to create new paragraph on Enter or insert <br/> 
  *  Possible values : @c TRUE @c FALSE
  *  Default value : @c TRUE
  *  @c TRUE : creates p tag
  *  @c FALSE : craetes br tag
  * @return Notepad compatible CATUnicodeString.
  */
  static CATUnicodeString GetNotepadCompatibleXHTML(CATUnicodeString i_pInputXHTMLStr, CATBoolean i_bCreateNewParaOnEnter = TRUE);

  /**
   * Get the @c TextRequested event.
   * The @c TextRequested event is emitted after @ref #RequestText function is called and plain text is returned by the editor
   * in event arguments.
   * @par EventProperties
   *   - Name: @c "TextRequested"
   *   - Type of propagation: @c NoPropagation
   *   - Type of argument: @ref CATSYPStringDataEventArgs
   * 
   * @return the event instance. @c AddRef has NOT been called on the returned pointer.
   * For more info on usage see @ref #RequestText.
   */
  static CATSYPEvent* TextRequested();

  /**
   * Get the @c XHTMLTextRequested event.
   * The @c XHTMLTextRequested event is emitted after @ref #RequestXHTMLText function is called and XHTML text is returned by the editor
   * in event arguments.
   * @par EventProperties
   *   - Name: @c "XHTMLTextRequested"
   *   - Type of propagation: @c NoPropagation
   *   - Type of argument: @ref CATSYPStringDataEventArgs
   * 
   * @return the event instance. @c AddRef has NOT been called on the returned pointer.
   * For more info on usage see @ref #RequestXHTMLText.
   */
  static CATSYPEvent* XHTMLTextRequested();

  /**
   * Emitted whenever the editor is ready to use
   * @par EventProperties
   *   - Name: @c "Ready"
   *   - Type of propagation: @c NoPropagation
   *   - Type of argument: @ref CATSYPEventArgs
   */
  static CATSYPEvent* Ready();

  protected:
 /**
  * CATVidCtlCKEditor Destructor.
  */
  virtual ~CATVidCtlCKEditor ();

private:
  
  // Copy constructor and assignment operator
  // ----------------------------------------
  CATVidCtlCKEditor (CATVidCtlCKEditor &);
  CATVidCtlCKEditor& operator=(CATVidCtlCKEditor&);
  
  virtual void TemplateDataUpdated();
  CATUnicodeString GetEditorRscPath();
  CATUnicodeString GetEditorPackagePath();
  void URLEncode(CATUnicodeString& ioUrl);
  HRESULT URLDecode(const CATUnicodeString& iUrl, CATUnicodeString& oUrl);
  void HTMLCharEncode(CATUnicodeString& data);
  void HTMLCharDecode(CATUnicodeString& data);
  void CallJSOnEditor(const CATUnicodeString & iFunction);
  void SendCommand(const CATUnicodeString& iCommand, const CATUnicodeString& iCommandData);
  void SetCKArg(const CATUnicodeString& i_Arg, const CATUnicodeString& i_Attribute, const CATUnicodeString& i_Value);
  void HandleCEFEvent(CATBaseUnknown* i_pSender, CATVidJSMessageEventArgs* i_spArgs);
  void HandleDomReadyEvent(CATBaseUnknown* i_pSender, CATSYPEventArgs* i_spArgs);
  void OnJavaScriptNotification(const CATUnicodeString& i_CommandArgs);
  void HandleJavaScriptCommand(const CATUnicodeString& i_Command);
  CATUnicodeString XHTMLBuilder(const CATUnicodeString& iData);
  void PreInitialization();
  void ConfigToolbar();
  void SetFontList();
  CATUnicodeString GetSystemFontsList();
  void AddSpecialCharacterNlsAPI();
  CATUnicodeString GetSpecialCharacterFromNls();

  /*
  * Sets whether Editor is ready for interactions or not.
  * Sets _bEditorReady.
  * @param i_EditorReady.
  * Param Values:
  * 0->Editor Not Ready for interactions
  * 1->Editor ready for interactions
  */
  void SetEditorReady(CATBoolean i_EditorReady);

  CATVidCtlWebViewer* _pWebViewer;
  CATUnicodeString _pDefaultXHTMLHeader;
  //false(default)--> Append to Default Special chars, true--> Replace Default Special Chars
  CATBoolean _bReplaceDefaultSpecialChars;
  CATUnicodeString _pSystemFontsList;
  CATUnicodeString _pToolbarPlugins;
  CATUnicodeString _pSpecialCharacters;
  CATBoolean _bEditorReady;
};
#endif
