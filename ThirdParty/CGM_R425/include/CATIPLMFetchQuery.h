// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMFetchQuery.h
// Define the CATIPLMFetchQuery interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Apr 2004  Creation: Code generated by the CAA wizard  jsy
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMFetchQuery_H
#define CATIPLMFetchQuery_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMFetchQuery;
#else
extern "C" const IID IID_CATIPLMFetchQuery ;
#endif

#define R209_FULLTEXTSEARCH

/**
 * @level Protected
 * @usage U5
 */
#include "CATListOfCATUnicodeString.h"

class CATIPLMQueryFilter;
class CATIPLMRecordReadSet;
class CATUnicodeString;

/**
* CATIPLMFetchQuery provides access on page results of a Fetch Query.
*
* CATIPLMFetchQuery Interface has to be implemented only by Provider which supports Fetch Query. 
* The goal of this interface is to retreive subset (page) of the complete result.
* The input query should have a PAGESIZE with a valid value (>0).
* 
* The process is in two step:
*  1 - QueryPageIDs : generates the Page Id which will be the page entry point in the server.
*      It also retreives the first page of the result.
*  2 - Access a specific page by calling QueryPage with a valid PageID.
*/
class ExportedByCATPLMServicesItf CATIPLMFetchQuery: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
 
/** Returns all pages (subsets of result) definitions matching the given QueryFilter.
 *  @param iFilter
 *    The query definition
 *  @param oPageIds
 *    The list of page identifiers for this provider as CATUnicodeString (understandable by the server)
 *  @param oFirstPage
 *    The first Result Sub set
 * @return
 *    S_FALSE: if provider doesn’t support Fetch Page definition. 
 *             In that case, the output list is empty.
 *             Access the various Page sequentially by incrementing an index as a PageID.
 */
  virtual HRESULT QueryPageIDs(const CATIPLMQueryFilter  *iFlter,
                               CATListOfCATUnicodeString &oPageIDs, 
                               CATIPLMRecordReadSet  **oFirstPage) = 0;


/** Returns a specific Page (subset of result) matching the Query Criteria. 
 * 
 *  @param iFilter
 *    The query definition
 *  @param iPageId
 *    One of the page identifier retreived by QueryPageIDs.
 *    Use an index "1", "2" ... if the QueryPageIDs method has returned S_FALSE
 *    if iPageID=="", we try to open the next page after the last page opened.
 *  @param ioPageIDs
 *    ioPageIDs should contain the id of the first N pages already opened.
 *    Suppose iPageID=="". Suppose you have already opened N pages. After the call to the current method,
 *    ioPageIDs should contain N+1 page if the N+1 page exists.
 *  @param oPage
 *    The corresponding result sub set.
 * @return S_FALSE:
 *    The PageID was not found. Can occur if using an incrementing index as PageID 
 *    and there is no more page, or if the PageID is not recognized by the server.
 */
 
  virtual HRESULT QueryPage(const CATIPLMQueryFilter *iFlter,
                            const CATUnicodeString   &iPageID,
                            CATIPLMRecordReadSet **oPage) = 0;

#ifdef R209_FULLTEXTSEARCH
  virtual HRESULT QueryPage(const CATIPLMQueryFilter *iFlter,
                            const CATUnicodeString   &iPageID,
                            CATListOfCATUnicodeString & ioPageIDs ,
                            CATIPLMRecordReadSet **oPage) = 0;
#endif
};
//------------------------------------------------------------------
#endif
