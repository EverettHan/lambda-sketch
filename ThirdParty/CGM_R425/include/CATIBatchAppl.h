/** WARNING: YWE 14:12:17 SINGLE-CODE 2013x => NO LOCAL CHANGE EXPECTED - USE IMPORT **/
// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIBatchAppl.h
// Define the CATIBatchAppl interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mar 2004  Creation: Code generated by the CAA wizard  AIY
//===================================================================
#ifndef CATIBatchAppl_H
#define CATIBatchAppl_H

#include "ExportedByDataAdmin.h"
#include "CATBaseUnknown.h"
#include "CATListOfCATUnicodeString.h"

class CATUnicodeString ;
class CATDlgDialog ;       // for UI definition
class CATDlgFrame; 
class CATDlgMultiList ;
class CATIAdpPLMBatchContext;
class CATIAdpPLMBatchUI;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByDataAdmin IID IID_CATIBatchAppl;
#else
extern "C" const IID IID_CATIBatchAppl ;
#endif

//------------------------------------------------------------------
/** @level Protected 
* @usage U1
*/
/**
* <p> CATIBatchAppl interface offers a easy way to develop a batch application, based on `<I>PLMBatch Data Access</I>` platform. 
 *  <P><A HREF=../_GIF/PLMBatch//R202_Infra.jpg><IMG SRC=../_GIF/PLMBatch//R202_Infra.gif WIDTH=350 ALIGN=RIGHT BORDER=0></A>

* <P>The `<I>PLMBatch Data Access</I>` platform provides a unified and homogeneous way of declaring and creating new batch application.
* <UL>
* <LI>Transparent Access to Object to process wherever the storage (through the CATIPLMBatchProvider interface): [File (including full DLName support), TST]
* <LI>Common resources for all applications
* <UL>
* <LI>User interface,
* <LI>Functionalities,
* <LI>Xml format and definition
* <LI>Messages and error management, ...
* </UL>
* <LI>Pre-valuation of input through an .xml file: all application shared a common xml format for input/output data
* <LI>Html report capability<UL>
* <LI>Main page report
* <LI>Object report page
* </UL>
* </UL>
* <P>Then <I>PLMBatch Data Access</I> platform simplifies the code, 
* factorizes functionalities (and then maintenance, Enhancement Request,..), 
* and homogenizes batches applications and User interface inside the standard V5 batch infrastructure BatchMonitor. <UL>
* <LI>The cost of development and maintenance of the batch is less expensive: application is responsible only of its own know how, and no more of the data environment.
* <LI>It's easier for a customer point of view to understand what is Dassault Systemes strategy regarding batch application, and to accept batches limitations.
* </UL>

 *  <p>Here is a list of available PLMBatch for example (click the thumbnail below to see  the full-size picture):<p><CENTER>

 *  <a href="../_GIF/PLMBatch//PLMBatch_CATDUA_001.jpg" ALIGN=LEFT>
 *  <img border="2" src="../_GIF/PLMBatch//PLMBatch_CATDUA_001.jpg" xthumbnail-orig-image="../_GIF/PLMBatch//PLMBatch_CATDUA_001.jpg" Border=0 width=16%></a>


 *  <a href="../_GIF/PLMBatch//PLMBatch_CATDWC_001.jpg" ALIGN=LEFT>
 *  <img border="2" src="../_GIF/PLMBatch//PLMBatch_CATDWC_001.jpg" xthumbnail-orig-image="../_GIF/PLMBatch//PLMBatch_CATDWC_001.jpg" Border=0 width=16%></a>


 *  <a href="../_GIF/PLMBatch//PLMBatch_CATDMU_001.jpg" ALIGN=LEFT>
 *  <img border="2" src="../_GIF/PLMBatch//PLMBatch_CATDMU_001.jpg" xthumbnail-orig-image="../_GIF/PLMBatch//PLMBatch_CATDMU_001.jpg" Border=0 width=16%></a>


 *  <a href="../_GIF/PLMBatch//PLMBatch_CATDXF_001.jpg" ALIGN=LEFT>
 *  <img border="2" src="../_GIF/PLMBatch//PLMBatch_CATDXF_001.jpg" xthumbnail-orig-image="../_GIF/PLMBatch//PLMBatch_CATDXF_001.jpg" Border=0 width=16%></a>


 *  <a href="../_GIF/PLMBatch//PLMBatch_CATDrawingUpdate_001.jpg" ALIGN=LEFT>
 *  <img border="2" src="../_GIF/PLMBatch//PLMBatch_CATDrawingUpdate_001.jpg" xthumbnail-orig-image="../_GIF/PLMBatch//PLMBatch_CATDrawingUpdate_001.jpg" Border=0 width=16%></a>
 *  </CENTER><P>

 *  <A HREF=../_GIF/PLMBatch//PLMBatch_Launcher_001.gif><IMG SRC=../_GIF/PLMBatch//PLMBatch_Launcher_001.gif WIDTH=350 BORDER=0 ALIGN=RIGHT></A>
* <p>&nbsp<p>Once defined, you can launch your PLMBatch application through several commands or specific user interface/interactive menu.
 *  <br>All these commands are reported in the picture below:
* <p>While using the  <i>PLMBatch DataAccess platform</i>, 
* you will have to implement the CATIBatchAppl interface and use the:<ul>
* <li>CATIAdpPLMBatchUI object to get an accesss to <i>PLMBatch Data Access</i> user interface,
* <li>CATIAdpPLMBatchContext object  to get an accesss to <i>PLMBatch Data Access</i> environment,
* <li>PLMBatchServices Tool box to get basics services.
* </ul>


* <p>In a very simple way, CATIBatchAppl interface contains methods, which are mainly prefixed with:<UL>
* <LI><b>Set</B>: for a method which transfers information from the <i>PLMBatch Data Access platform</i> to the CATIBatchAppl implementation.
* <LI><b>Get</b>: for a method which transfers information from the CATIBatchAppl implementation to the <i>PLMBatch Data Access platform</i>.
* </ul>
* <p>&nbsp</p>
*/
class ExportedByDataAdmin CATIBatchAppl: public CATBaseUnknown
{
	CATDeclareInterface;
	
public:
	

/*x
Section General Information about Batch resources and <i>PLMBatch</i> environment
Abstract  Following methods are used to declar the batch resources (name, ..) and main environment
x*/
	


/** 
 * Returns the name of the Batch.
 * <br>This batchName must be the same than the one exported in the batchdesc file (resource file for the BatchMonitor infrastructure).
 * <BR>It is also used 
 *  (see the  <A HREF=../_PLMBatch/_PLMBatch_R202_Architecture.php#SAMPLECODE>sample</A>)
 * by: <ul>
 *  <A HREF=../xGenerated/Code_PLMBatchServices.php#CreateUI>
 * <li> PLMBatchServices::CreateUI
 *  </A>
 * method, to instanciate the User interface application 
 *  <A HREF=../xGenerated/Code_PLMBatchServices.php#Run>
 * <li> PLMBatchServices::Run
 *  </A>
 * method, to launch the batch application 
 * </ul>

 * @return
 * The Batch name.
*/		
	virtual CATUnicodeString GetName        ( void ) = 0;
	


/** 
 * Informs the application with the BatchContext environment. 
 * <br>The CATIAdpPLMBatchContext object allows to share all informations managed by the <i>PLMBatch Data Access</i> platform. 
 * <br>It is advise to store a copy of the <i>PLMBatch Data Access</i> Context object in a data mamber).
 * <br>Then, a standard implementation of this method could be:<p>
 * <TABLE BORDER=1 BGCOLOR=WHITE WIDTH=80%><TR><TD><ul>
 * HRESULT <b><i>MyPLMBatchObject::SetBatchContext</B></I>(CATIAdpPLMBatchContext *& pCtxt)
 * <br> <ul>{ 
 * <ul>HRESULT HR = S_OK;
 *	<br>if (!pCtxt) { return E_FAIL; }
 *	<br><i>_myLocalbatchCtxt</I> = pCtxt;
 *	<br>return HR;
 * </ul>} 
 * </TD></TR></TABLE>
 * @param pCtxt The Batch context
 * @return 
 *    S_OK batch Context is valid
 *  <br>E_FAIL can not use the batch context
 *  
 */
	virtual HRESULT SetBatchContext(CATIAdpPLMBatchContext*& ipCtxt) = 0;


/**
 * Informs the application with the main CATIAdpPLMBatchUI object. 
 * <br>This object will allows the bath to tune/refresh/customize the user interface. 
 * Implementation of this method should look like the SetBatchContext implementation (storing a pointer of the <i>PLMBatch Data Access</i> user Interface object in a data mamber).
 *	@param ipUI  pointer on the main <i>PLMBatch Data Access</i> User interface object's allowing application to: <ul>
 * <li>Manage the "Run" button according to applicative options .
 * <li>	Refresh the global user interface according to applicative options. 
 * <li> Define dynamically a particular <ul>
 * <li>the <font color=gray><b><kbd>"target directory"</kbd></b></font>, 
 * <li> the name of the global report, 
 * <li> the current <font color=gray><b><kbd>"Object Location"</kbd></b></font>, 
 * <li>....</ul>

 * </ul>
 */
	virtual HRESULT  SetPLMUI  (CATIAdpPLMBatchUI  *ipUI) = 0; 



/** 
 * Make unavailable a list of PDM types. 
 * <br>By default, all the input PLMBatch providers (the adhesion of CATIPLMBatchProvider interface) are available. i.e. [File, TST, PLM1, ...]
 *  <A HREF=../_GIF/PLMBatch//PLMBATCH_Default_InputProvider.jpg><IMG SRC=../_GIF/PLMBatch//PLMBATCH_Default_InputProvider.jpg WIDTH=350 xHEIGHT=100 ALIGN=RIGHT BORDER=0></A>
 * <br>For a user interface point of view, in case of several possible Input PLbatch providers, 
 * a Combo <kbd><font color=gray>Object Location</font></kbd> appears at the top of the <kbd><font color=gray>Selected Objects</font></kbd> frame allowing to select the desired input PLMBatch provider.
 * <br>You can define the default PLMBatch provider by exporting the
 *  <A HREF=../_PLMBatch/PLMBATCHV6_EnvirVariable.php#PLMBATCH_Default_InputProvider>PLMBATCH_Default_InputProvider</A> 
 * variable.

 * @param iList <ul>
 * <li>all PDM are available when iList is empty
 * <li>Application should append the list of 'not supported' PDM to the iList.
 * <br>Possible values are:<ul>
 * <li>TST
 * <li>File
 * <li>VPM1
 * <li>DXP (3DXML)
 * <li>PLMx (MatrixOne)
 * <li>IPD
 * <li>TeamPDM
 * </ul>
 * </ul>
 * @return
 * <UL>
 *  <LI> S_OK: Successful.</LI>  
 *  <LI> E_FAIL: no PLMBatch provider supported by application.</LI>  
 * </UL>
*/
	virtual HRESULT LockPDMTyp (CATListOfCATUnicodeString &iList) = 0;


/*x
Section User Interface definition
Abstract  Following methods are used to define the applicative user interface
x*/

/**
 * Informs that the application has a specific User interface.
 *  <A HREF=../_GIF/PLMBatch//PLMBatch_XXXXXX_001.jpg><IMG SRC=../_GIF/PLMBatch//PLMBatch_XXXXXX_001.jpg WIDTH=350 ALIGN=RIGHT></A> 
 * <br>A batch application based on the <i>PLMBatch data Access</i> platform can defined its own user interface to capitalize 
 * the activity of the batch.
 * @return
 * <Br>=0: has no user interface
 * <BR>=1: has a user interface. 
 * <br>Then <i>PLMBatch Data Access</i> will get a pointer of the applicative User interface using the following CATIBatchAppl::<A HREF=#GetUI>GetUI</A> method, and will isntanciate your User interface when building the main panel.

 */
	virtual int    HasanUI (  ) = 0 ; 


	
/** 
 *  Provides the definition of the applicative User Interface of the Batch. 
 * <br>	This User interface will allow the end user to specify the application parameters, if any. 
 *  If no user interface is needed, oFrame is set to NULL.
 * This method will be called by <i>PLMBatch Data Access</i> monitor if CATIBatchAppl::<A HREF=#HasanUI>HasanUI</A> method's returns a non null value.
 * @param iDialogFather
 * The father dialog object on which the UI is created/attached.
 * @param oFrame
 * user interface object containing the definition of User Interface of the batch.
 * If no User Interface is needed, this is set to NULL.
 * @return
 * <UL>
 *  <LI> E_FAIL: Error while getting the applicative User Interface.</LI>
 *  <LI> S_OK: Generation of the applicative User Interface successful.</LI>  
 * </UL>
 */		
	virtual HRESULT GetUI ( CATDlgDialog * iDialogFather,CATDlgFrame*& oFrame ) = 0 ; 



/** 
 *  Defines the attachment of applicative User Interface
 * <br>The `<I>PLMBatch Data Access</I>` user interface is composed with 3 main frames:<OL>
 * <LI>The Object Selection frame (taken into account the File, ENOVIA LCA location)
 *  <BR><A HREF=../_GIF/PLMBatch//PLMBatch_DocumentLocation_003.jpg><IMG SRC=../_GIF/PLMBatch//PLMBatch_DocumentLocation_003.jpg WIDTH=50% BORDER=0></A>
 * <LI>The Output option frame (containing the target directory definition, the name of the report, ..)
 *  <BR><A HREF=../_GIF/PLMBatch//R202_PLMBatch_OutputFrm_Fmt001.jpg><IMG SRC=../_GIF/PLMBatch//R202_PLMBatch_OutputFrm_Fmt001.jpg  WIDTH=50% BORDER=0></A>
 * <LI>And (if any) the Applicative user interface (defined with the method GetUI)
 *  <BR><A HREF=../_GIF/PLMBatch/PLMBATCH_ApplicativeFrame_001.gif><IMG SRC=../_GIF/PLMBatch/PLMBATCH_ApplicativeFrame_001.gif WIDTH=50% BORDER=0></A>
 * </OL>

 * @param oAttachMode
 * defines the position of the applicative UI frame.<UL>
 * <TABLE BORDER=0>
 * <TR><TD ROWSPAN=4 VALIGN=TOP BGCOLOR=EEEAAA><LI><FONT SIZE=-1><I>=1 (default value)
 * <TR><TD BGCOLOR=GREN COLSPAN=3><CENTER><FONT SIZE=-1><I>Object Selection 
 * <TR><TD BGCOLOR=ORANGE COLSPAN=3><CENTER><FONT SIZE=-1><I>ApplicativeUI 
 * <TR><TD BGCOLOR=EAEAEA COLSPAN=3><CENTER><FONT SIZE=-1><I>Output Options
 * 
 * <TR><TD ROWSPAN=4 VALIGN=TOP BGCOLOR=AAAEEE><LI><FONT SIZE=-1><I>=2 
 * <TR><TD BGCOLOR=ORANGE COLSPAN=3><CENTER><FONT SIZE=-1><I>ApplicativeUI  
 * <TR><TD BGCOLOR=GREN COLSPAN=3><CENTER><FONT SIZE=-1><I>Object Selection  
 * <TR><TD BGCOLOR=EAEAEA COLSPAN=3><CENTER><FONT SIZE=-1><I>Output Options
 *
 * <TR><TD ROWSPAN=4 VALIGN=TOP BGCOLOR=EEEAAA><LI><FONT SIZE=-1><I>=3 
 * <TR><TD BGCOLOR=GREN COLSPAN=3><CENTER><FONT SIZE=-1><I>Object Selection  
 * <TR><TD BGCOLOR=EAEAEA COLSPAN=3><CENTER><FONT SIZE=-1><I>Output Options 
 * <TR><TD BGCOLOR=ORANGE COLSPAN=3><CENTER><FONT SIZE=-1><I>ApplicativeUI  
 *
 * <TR><TD ROWSPAN=1 BGCOLOR=AAAEEE><LI><FONT SIZE=-1><I>=-1 
 *   <TD BGCOLOR=GREN><CENTER><FONT SIZE=-1><I>Object Selection 
 *   <TD BGCOLOR=ORANGE><CENTER><FONT SIZE=-1><I>ApplicativeUI 
 *   <TD BGCOLOR=EAEAEA><CENTER><FONT SIZE=-1><I>Output Options
 *   <TD ROWSPAN><FONT SIZE=-1><I> same iAttacheMode=1 but displayed in a Tab Container
 * <TR><TD ROWSPAN=1 BGCOLOR=EEEAAA><LI><FONT SIZE=-1><I>=-2
 *   <TD BGCOLOR=ORANGE><CENTER><FONT SIZE=-1><I>ApplicativeUI 
 *   <TD BGCOLOR=GREN><CENTER><FONT SIZE=-1><I>Object Selection 
 *   <TD BGCOLOR=EAEAEA><CENTER><FONT SIZE=-1><I>Output Options
 *   <TD ROWSPAN><FONT SIZE=-1><I>  same iAttacheMode=2 but displayed in a Tab Container
 *
 * <TR><TD ROWSPAN=1 BGCOLOR=AAAEEE><LI><FONT SIZE=-1><I>=-3 
 *   <TD BGCOLOR=GREN><CENTER><FONT SIZE=-1><I>Object Selection 
 *   <TD BGCOLOR=EAEAEA><CENTER><FONT SIZE=-1><I>Output Options
 *   <TD BGCOLOR=ORANGE><CENTER><FONT SIZE=-1><I>ApplicativeUI 
 *   <TD ROWSPAN><FONT SIZE=-1><I> same iAttacheMode=3 but displayed in a Tab Container
 * </TABLE>
 * </UL>
 */
	virtual HRESULT SetUIAttachment (int& oAttachMode) = 0;


/**
 * Defines an applicative Selected Object list
 * <bR>This method allows an application to manage a multilist synchronized with the main <kbd><font color=gray>Selected Object</Font></kbd> multi list. 
 * And then manage applicative informations attached to each selected object.
 * <P>For a user interface point of view, defining an applicative multilist leads to a new multilist in <kbd><font color=gray>Selected Onjects</font></kbd> user interface.
 *  <P><A HREF=../_GIF/PLMBatch/R15_AppliList_002.gif><IMG SRC=../_GIF/PLMBatch/R15_AppliList_002.gif WIDTH=350 BORDER=0 ALIGN=RIGHT></A>

 * <br>Once defined, an application can synchronize its applicative multilist through the CATIBatchAppl::<A HREF=#UICBInputOptionsChanged>UICBInputOptionsChanged</A> method events. 
 * @param iFather
 * The dialog which is the father of the current dialog.
 * @param oList
 * The new CATDlgMultiList created in iFatherFrame. Application can define as many columns to the list as needed.
 *  @param oSynchro defines the synchronization mode:  <ul>
 *  <li>= 0 (default) Scrollbar is not  synchronized with the main <kbd><font color=gray>Selected Object</Font></kbd>multi list.
 *  <li>= 1 applicative multi list scrollbar is synchronized with the main list </ul>
 * @param oAttach defines the position regarding  the main <kbd><font color=gray>Selected Object</Font></kbd>multi list: <ul>
 *  <li>= 1 (default) before the main list 
 *  <li>= 2 after the main list 
 * </ul>
 * @return
 * <UL>
 *  <LI> E_FAIL: if no multilist (then ouput are ignored).</LI>
 *  <LI> S_OK: if application declars a multilist. Then oList is not NULL .</LI>  
 *  <LI> S_FALSE: if application declars a multilist, but hidden. Then oList is not NULL .</LI>  
 * </UL>
*/

        virtual HRESULT ApplicativeDocumentList (CATDlgFrame *iFather, CATDlgMultiList *&oList, int & oSynchro, int & oAttach) = 0 ;



/**
 * Informs when a modification occurs in the Selected Objects area
 * <br>This method allows an application to refresh its applicative multi list according to a list of specific events.
 * @param ievent the specific event code: <ul>
 * <li>= 0: Object location has changed. 
 *           <xbr>In that case, the list of selected Objects is automatically emptied if any. 
 *           <DD>iPosIndex is NULL ;</DD>
 * <li>= 1: Objects have been added in the Selected Object list.
 *           <DD>iPosIndex contains the list of index in the UI multilist which are added:  
 *           a consecutive list of index from [istart to GetLineCount()[</DD>
 * <li>= 2: Objects have been removed from the Selected Object list.
 *           <DD>iPosIndex contains the list of index in the UI multilist which have been removed:
 *           values in [0, GetLineCount()[</DD>
 * <li>= 3: Objects have been selected from the Selected Object list.
 *           <DD>iPosIndex contains the list of index in the UI multilist which have been selected: 
 *           values in [0, GetLineCount()[</DD>
 * <li>= 4: Objects have been activated (double click) from the Selected Object list.
 *           <DD>iPosIndex contains the list of index in the UI multilist which have been activated: 
 *           values in [0, GetLineCount()[</DD>
 * </ul>
 * @param iPosIndex
 * The index for adding the Objects in the list. See the possible 'event' values for more information regarding iPosIndex values.
 * @return
 * <UL>
 *  <LI> E_FAIL: An Error has occured.</LI>
 *  <LI> S_OK: Successful.</LI>  
 * </UL>
*/
	virtual HRESULT UICBInputOptionsChanged ( int ievent , CATListOfInt * iPosIndex) = 0 ; 
	
/*x
Section Selected Objects managment
Abstract  Following methods are used to declar the Selected Objects resources
x*/

/** 
 * Informs the PLMBatch engine with the requested 'Open' operation 
 * <BR>This method aims defining which kind of access is requested on selected objects and limits the number of possible object. It tunes the User interface when querying objects (number of possible objects) and also the PLMBatch engine when processing the selected objects (number o possible objects, how they are opened).
 * @param oReadmode
 * Acces to the object in read operation, the values are: <ul>
 * <LI><B><I>oReadMode=-12:</I></B> End user can select several objects (from 1 to n). The selection is not mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available even if no objects are selected.
 * <BR>When processed, objects are not opened by the default PLMBatch Data Access mechanism. It is up to the PLMBatch application to provide the open code in its  
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation.
 * <BR>This mode corresponds to a new functionality introduced with R204.

 * <P><LI><B><I>oReadMode=-11:</I></B> End user can select only one object (error panel when trying to select more than one). 
 * The selection is not mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available even if no object is selected.
 * <BR>When processed, object is not opened by the default PLMBatch Data Access mechanism. It is up to the PLMBatch application to provide the open code in its  
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation.
 * <BR>This mode corresponds to a new functionality introduced with R204.

 * <P><LI><B><I>oReadMode=-2:</I></B> End user can select several objects (from 1 to n). The selection is not mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available even if no objects are selected.
 * <BR>When processed, objects are opened by the default PLMBatch Data Access mechanism. In a 'one per one' session, PLMBatch application can retrieve a pointer on the opened object in its
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#GetCurrentObject>GetCurrentObject</A> 
 * <BR>This mode corresponds to a new functionality introduced with R204.

 * <P><LI><B><I>oReadMode=-1:</I></B> End user can select only one object (error panel when trying to select more than one).
 * The selection is not mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available even if no object is selected.
 * <BR>When processed, object is opened by the default PLMBatch Data Access mechanism. 
 * PLMBatch application can retrieve a pointer on the opened object in its
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#GetCurrentObject>GetCurrentObject</A>.
 * <BR>In that case it is strongly advised to define a SessionMode to 'One per One', rather than 'Global Session'.
 * <BR>This mode corresponds to a new functionality introduced with R204.

 * <P><LI><B><I>oReadMode=0:</I></B> No object need to be selected. The user interface does not offer the <FONT COLOR=GRAY><KBD><B>Object Selection</B></KBD></FONT> list.
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available.
 * Depending on the CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#WriteObjectMode>WriteObjectMode</A> value, 
 * <FONT COLOR=GRAY><KBD><B>Object Managment</B></KBD></FONT> panel can be opened for Write option definition, but no query is possible in the panel.
 * <BR><I>This mode was covered with oReadMode=-1 in a previous version.</I>

 * <P><LI><B><I>oReadMode=1:</I></B> End user can select only one object (error panel when trying to select more than one). 
 * The selection is mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available only if one object is selected.
 * <BR>When processed, object is opened by the default PLMBatch Data Access mechanism. 
 * PLMBatch application can retrieve a pointer on the opened object in its
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#GetCurrentObject>GetCurrentObject</A>.
 * <BR>In that case it is strongly advised to define a SessionMode to 'One per One', rather than 'Global Session'.
 * <BR>This mode was already available in the previous version.

 * <P><LI><B><I>oReadMode=2:</I></B> End user can select several objects (from 1 to n). 
 * The selection is mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is not available until almost one object has been selected.
 * <BR>When processed, objects are opened by the default PLMBatch Data Access mechanism. In a 'one per one' session, PLMBatch application can retrieve a pointer on the opened object in its
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#GetCurrentObject>GetCurrentObject</A> 
 * <BR>This mode was already available in the previous version.

 * <P><LI><B><I>oReadMode=11:</I></B> End user can select only one object (error panel when trying to select more than one). 
 * The selection is mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is available only if one object is selected.
 * <BR>When processed, object is not opened by the default PLMBatch Data Access mechanism. It is up to the PLMBatch application to provide the open code in its  
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation.
 * <BR>This mode corresponds to a new functionality introduced with R204.

 * <P><LI><B><I>oReadMode=12:</I></B> End user can select several objects (from 1 to n). 
 * The selection is mandatory. 
 * The <FONT COLOR=GRAY><KBD><B>Run</B></KBD></FONT> button is not available until almost one object has been selected.
 * <BR>When processed, objects are not opened by the default PLMBatch Data Access mechanism. It is up to the PLMBatch application to provide the open code in its  
 * CATIBatchAppl::<A HREF=../xGenerated/Code_CATIBatchAppl.php#Execute>Execute</A> implementation.
 * <BR><I>This mode was covered with oReadMode=0 in a previous version.</I>

 * </ul>
 * @return
 * <UL>
 *  <LI> E_FAIL: An Error has occured.</LI>
 *  <LI> S_OK: Successful.</LI>  
 * </UL>
 * <P>A simple overview of the possible values and fuctionalities can be summarized as follow:
 * <CENTER><A HREF=../_GIF/PLMBatch/R204_Infra_ExtendedSelectedObjectsMode2.gif><IMG SRC=../_GIF/PLMBatch/R204_Infra_ExtendedSelectedObjectsMode2.gif WIDTH=75% BORDER=0></A></CENTER>
 */
	virtual HRESULT  ReadObjectMode(int& oReadMode)=0;

/** 
 * Informs the PLMBatch engine with the requested 'Save' operation 
 * <br>	 PLMBatch enfine manage three kinds of batches: <OL>
 * <LI>The one which loads an object, analyze it, and do not need to save it after process. 
 * For example:
 * <ul>
 * <li>CheckRepresentation in check mode, 
 * <li>PRINT. 
 * </ul>
 *	<LI>The one which loads an object, modify it, and write it. For example:
 * <ul>
 * <li>CheckRepresentation in clean mode. 
 * <li>Drawing Update
 * </ul>
 *	<LI>The one which loads an object, create new objects from this one, and write the new objects. For example: <UL>
 *	<LI>CATDownardCompatibility creates a new CATPart on disk. 
 *	<LI>IGES creates new PartRef in database  
 *	</UL>
 *	These new objects have no existence on disk or in database, and should be managed differently.
 *	<br>For instance, in a PDM context, we need specifics declarations/input to describe where they will be written and/or attached to which object.
 *	<br>In a file context, they need to be differently managed (no replace at the same location option, ..) 
 * Then, application has to use the CATIPLMBatchProvider->SaveAttachedDocument method to write the new objects according to ouput options (rename, target directory, SaveonDisk, attributes naming, mapping, ...)
 *	</OL>

 * @param oWriteMode specify in which of these 3 cases we are, with following input values. <UL>
 *	<LI>=0: no write requested: object will not be written by the PLMBatch engine 
 *	<LI>=1: write requested: a new object will be written by the PLMBatch engine. 
 *	<LI>=2: write requested: the object will be written by the PLMBatch engine, if modified by the operation. 
 *  </UL>
 * if the standard <i>PLMBatch engine</I> does not satisfy application needs, application can write objects using its own code in Execute method.
 * @return
 * <UL>
 *  <LI> E_FAIL: An Error has occured.</LI>
 *  <LI> S_OK: Successful.</LI>  
 * </UL></ul>
 * <p>The values of <b>oReadMode</b> and <b>oWritemode</B> parameters may depend of the batch parameters.
 * <br>This method is called to specify the Object selection user interface. 
 * According to oWritemode value, some functionalities are proposed, or not.
 * <br>It is also called when processing the document.
 * <p>For a user interface point of view, the oWritemode tunes the Object selection panels (for File and Enovia LCA).
 *  <BR>For instance, in case of File->File PLMBatchProvider: <UL>&nbsp<p>
 *  <TABLE BORDER=1 WIDTH=90% CELLSPACING=0 BORDERCOLOR=BLACK BGCOLOR=WHITE><TR><TD>
 *  <TABLE BORDER=0 WIDTH=100% CELLSPACING=10>
 *  <TR><TD VALIGN=TOP WIDTH=100% COLSPAN=3 BGCOLOR=ORANGE><HR COLOR=RED><CENTER><B><FONT SIZE=+1>File to File <HR COLOR=RED><TR>
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 0: </CENTER>
 *  <br>As no document will be written in any target directory, the Rename and the Output frames are not proposed. 
 *  The File selection panels looks like: 
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 1: </CENTER>
 *  <br>As new documents will be written after processed in the specified target directory, the Rename and the Output frames are proposed, with a limted functionalities (no "save at the same location", ..). 
 *  The File selection panels looks like: 
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 2: </CENTER>
 *  <br>As documents will be written after processed if modified in the specified target directory, the Rename and the Output frames are proposed. 
 *  The File selection panels looks like: 
 *  <TR>
 *  <TD VALIGN=TOP><CENTER><A HREF=../_GIF/PLMBatch/PLMBATCH_FILE_002.gif><IMG SRC=../_GIF/PLMBatch/PLMBATCH_FILE_002.gif WIDTH=250 BORDER=0></A> 
 *  <TD VALIGN=TOP><CENTER><A HREF=../_GIF/PLMBatch/PLMBATCH_FILE_001.gif><IMG SRC=../_GIF/PLMBatch/PLMBATCH_FILE_001.gif WIDTH=250 BORDER=0></A> 
 *  <TD VALIGN=TOP><CENTER><A HREF=../_GIF/PLMBatch/PLMBATCH_FILE_003.gif><IMG SRC=../_GIF/PLMBatch/PLMBATCH_FILE_003.gif WIDTH=250 BORDER=0></A> 
 *  <TR><TD VALIGN=TOP WIDTH=100% COLSPAN=3 BGCOLOR=ORANGE><HR COLOR=RED><CENTER><B><FONT SIZE=+1>Enovia to Enovia  ... TO BE REFRESHED<HR COLOR=RED><TR>
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 0: </CENTER>
 *  <br>As no document will be written in any target directory, or back in database, 
the entire Output frame is hidden. 
 *  <BR>The Enovia LCA selection panels looks like:
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 1: </CENTER>
 *  <br>As new documents will be written after processed in the specified target directory, Output frame is forced to "Save documents in target directory". 
 *  The <A HREF=../_PES/DLC_029.doc>"Naming"</A> button is proposed. 
 *  The "No Automatic lock" option is not. 
 *  <BR>The Enovia LCA selection panels looks like:
 *  <TD VALIGN=TOP WIDTH=33%><FONT SIZE=-1>
 *  <CENTER> oWritemode = 2: </CENTER>
 *  <br>As documents will be written after processed if modified in the specified target directory or back in database, 
 *  the entire Output frame is hidden. 
 *  <BR>The Enovia/3DEXPERIENCE selection panels looks like:
 *  <TR>
 *  </TABLE>
 *  </TABLE>



 */
	virtual HRESULT WriteObjectMode(int& oWriteMode)=0;

/** 
 *  Informs the type of objects supported by the application. 
 *  Does not support customer types. Because we want to prevent applications to be custo dependent. 
 <BR>Information depends on PLMBatch Provider Type.
 * <br>This list inherits of File constraint and define the supported objects according to its extension.<br> 
 * <br>This list can be dynamically updated. 
 * As a batch can manage different extension according to application parameter, this method is called after each UI modification.
 * <br>For instance, DownardCompatibility supports all Objects in Info mode, but only Part/Ref in Convert mode.
 * The list is a list of ".extension" ("." is mandatory!, and * (All files) is not requested). 
 * <br>If empty, no test on extension are run. 
 * <br>When a list of extension is valuated, the Dialog selection box offers only the list of extension (+ All files).
 * <P>When PLMBatch Provider == File, this list has a specific <B>and mandatory</B> format as follow:<ul>
 *  <li>list [2j-1] = extension (with or without *) - list [2j] = NLS tag<br>
 * </ul>for instance: <ul>
 *   <li>list [2j-1] = "*.CATPart" - list [2j] = "CATPart (*.CATPart)"</ul>
 * <BR>Note that a particular extension such as <A HREF=PLMBATCHV6_File_prt_asm_Specificity.php>*.prt.* and *.asm.*</A> is supported.
 * <P>When PLMBatch Provider == Non-File like TST, PLM1, IPD ..., 
 * the list has no specific format and is a simple list of PLMCoreTyp objects: PLMCoreRepReference, PLMCoreReference, PLMConnection, ...
 * 	<br>for instance: <ul>
 *  <LI>list [j] = PLMCoreReference <LI>list [j+1] = PLMCoreRepReference ; <LI> ... 
 * </ul> 
 * @return
 * The list of the document extension.

 */			
	virtual CATListOfCATUnicodeString DocumentExtensionManaged ( void ) = 0 ;
	
/*x
Section Access to specific parameters
Abstract  Following methods are used to communicate specific applicative parameters with the xml file
x*/

/** 
 *  Returns the list of the specifics parameters of the Batch. 
 * <br>These parameters are the tags that can be found in the xml file. 
 * They are CATUnicodeStrings, without &lt; nor &gt; characters.
 * <BR>In order to promote a consistent proposal where all tags are different (unique), 
 * it is strongly recommended to prefix every tag with the name of the application. 
 *  @return
 *  The list of the parameters of the batch.

 */			
	virtual CATListOfCATUnicodeString GetListOfTagParameter ( void ) = 0 ;
	
 /** 
 * Returns the list of the specifics parameters to write in the xml.
 * <br>These parameters are the tags that will be written in the xml file. 
 * They are CATUnicodeStrings, without &lt; nor &gt; characters.
 * The list is a subset of the list returned by the
 *  <A HREF=#GetListOfTagParameter>
 * GetListOfTagParameter
 *  <A> 
 * method.
 *  @return
 *  The list of the parameters of the batch  that will be written in the xml file. 
 */	
	virtual CATListOfCATUnicodeString  GetListOfValuatedTags(void) = 0; 
	

/**
 * Informs the <i>PLMBatch</i> engine with a the value of a dedicated parameter.
 * <br> This couple parameter/values will be written in the BatchMonitor xml file.
 * @param iTag
 * The tag or name of the parameter.
 * @param oMsg
 * This parameter is used for getting the error messages in case of any error
 * @return
 * The list containing the values of the parameter.
*/			
	virtual CATListOfCATUnicodeString GetParameterValue ( CATUnicodeString iTag ,CATUnicodeString * oMsg ) = 0;
	
/** 
 * Informs a parameter with its value read in the BatchMonitor xml file.<br>
 * The value may be used in the user interface or for initialization.
 * @param iTag
 * The name or tag of the parameter.
 * @param iListOfValue
 * The value of the tag parameter.
 * @param oMsg
 * This parameter is used for getting the error messages in case of any error.
 * @return
 *  <UL>
 *  <LI>0 if everything goes well.</LI>
 *  <LI>1 if an error happened (oMsg is displayed if not null).</LI>
 *  </UL>
 *  
 */				
virtual int SetParameterValue ( CATUnicodeString iTag, CATListOfCATUnicodeString iListOfValue, CATUnicodeString * oMsg ) = 0;
	
/*x
Section Execution of the application
Abstract  Following methods are used to launch the PLMBatch application
x*/

/** 
 * Checks the conditions to launch the application are successful
 * <br>This method allows an application certifying all conditions regarding options valuations, dependant options are satisifed (parameters fully defined..)
 * @param PLMBatchProviderName The name of the selected Object Location [file, TST]
 * @param oMsg
 * This parameter is used for getting the error messages in case of any error.
 * @return <ul>
 * <li>HRESULT = S_OK: ready to execute  
 * <li>HRESULT = E_FAIL: parameter is missing (oMsg is displayed if not null)
 *  </ul>
 * <kbd><font color=gray><b>Run</b></font></kbd> button is disabled when method returns a non S_OK HRESULT.
 */
	virtual HRESULT IsReadyToExecute ( CATUnicodeString PLMBatchProviderName,	CATUnicodeString * oMsg ) = 0;

/**	
 * Launch the execution of the application.
 * <BR>Depending on the iSessionMode value of the 
 * CATIAdpPLMBatchToolBox::<A HREF=../xGenerated/Code_PLMBatchServices.php#Run>Run</A> method, selected objects will be processed:
 * <ul>
 * <li> in a sequential reference mode (selected objects are expanded in memory one by one - Session management)
 * <li> in a global reference mode (all selected objects are expanded in memory - Session management)
 * </UL>

 * <br>In any case, the execution is separated in two steps ("Before" and "After"), with an intermediate <i>
PLMBatch Data Access</i> internal step.
 * This separation allows having more flexibility and tune the operation in several phasis.<UL>
 * <LI>Application can compare data with reference data stored in a XML file defined with the
 * <A HREF=#GetReferenceDoc>GetReferenceDoc</A>
 * method ( ex Inertia Tensor, Mass gravity, links, number of entities, ..) 
 * <LI>Execute the application in "after mode"
 * <LI>Application can compare data with reference data or data generated during "before" step</UL>
 * As a result, the Execute method will be called twice on each selected object.

 * @param  iKey: Execution step. <ul>
 *      <li>= "Before": execution before the <i>PLMBatch Data Access</i> internal step 
 *      <li>= "After": execution after the <i>PLMBatch Data Access</i> internal step </ul>
 * @param  oactivity (output)<ul>
 *  <li>= 0: Checker successfully processed (default value)
 *  <li>= 1: Checker successfully processed + object modified (write requested)
 *  <li>= 2: Nothing to do
 *  <li>= 3: Object not supported 
 *  <li>= 4: Checker need to be recalled </ul>
 * @return <ul>
 * <li>HRESULT = S_OK: execution OK     (oactivity  { 0;4 })  
 * <li>HRESULT = E_FAIL: execution failed (oactivity = ReturnCode)
 * <BR>In that case, application can define the complete object return code using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#SetObjectReturnCode>SetObjectReturnCode</A>
 * </ul>
 * </ul>
 *  <P><IMG SRC=../_GIF/ZWork.gif BORDER=0 ALIGN=LEFT WITDH=30><UL>
 *  An application which decides to use only one step can desactivate the second with following outputs (S_OK and oactivity=2)
 *  
 */
	virtual HRESULT Execute (CATUnicodeString iKey,int& oactivity ) = 0;


/*x
Section Reference Parameter file management
Abstract Following methods are used to declar/use and create reference xml files 
x*/
	
/** 
 * The path or URL of a the Reference Document. 
 * <br>Based on an xml file format, an application can associate (from a previous session) a reference data to every selected object.. 
 * These data can be used as reference data in the execution ("Before" and "After") steps.
 * Reference data are described as a listofReportTag and for each tag a ListofTagValues.

 * @param iDoc Object for which we get the set of reference tags/values
 * @param oDoc path of the reference xml file
 * @return unused
 *  
 */	
	virtual int GetReferenceDoc ( CATUnicodeString iDoc ,CATUnicodeString &oDoc ) = 0; 
	
/** 
 * The List of the specifics tags we can be found in a reference document. 
 * <br>They are CATUnicodeStrings, without &lt; nor &gt; characters.
 * This list may change according to the step [Refer, Before, After]. 
 * The list is used:<UL>
 * <LI>To decode the Refer document,
 * <LI>To code the "Before" and "After" document. </ul>
* If the list is empty, no "Before" and "After" reference documents are created, else, the "Before" and "After" reference documents, named NameOfDoc.iKey.xml, are created under the Output target directory.
* These output Reference Document can be used in an ulterior batch, as reference document, 
 * or in the current batch as comparison document with the input Reference (defined with GetReferenceDoc method).
</UL>

 * @param  iKey: Execution step. <ul>
 *      <li>= "Refer": access to the reference document 
 *      <li>= "Before": execution before the <i>PLMBatch Data Access</i> internal step 
 *      <li>= "After": execution after the <i>PLMBatch Data Access</i> internal step </ul>
 * @return The list of reference parameters that can be found in the reference document.

 *  
 */	
	virtual CATListOfCATUnicodeString GetListOfReferenceTagParameter(CATUnicodeString iKey ) = 0 ;
	
/** 
 * Values of a dedicated Report Parameter. 
 * This couple Parameters/values will be written in the Report xml file after execute
 * @param  iKey: Execution step. <ul>
 *      <li>= "Before": execution before the <i>PLMBatch Data Access</i> internal step 
 *      <li>= "After": execution after the <i>PLMBatch Data Access</i> internal step </ul>
 * @param iTag
 * The name or tag of the parameter.
 * @param oMsg
 * This parameter is used for getting the error messages in case of any error.
 * @return  The list of values of a dedicated reference parameter that can be found in the reference document.
 *  
 */	
	virtual CATListOfCATUnicodeString GetReferenceParameterValue  ( CATUnicodeString iKey , CATUnicodeString iTag , CATUnicodeString * oMsg ) = 0;
	
/** 
 * Values of a dedicated report Parameter read in a Report.xml file
 * @param  iKey: Execution step. <ul>
 *      <li>= "Refer": access to the reference document 
 *      <li>= "Before": execution before the <i>PLMBatch Data Access</i> internal step 
 *      <li>= "After": execution after the <i>PLMBatch Data Access</i> internal step </ul>
 * @param iTag
 * The name or tag of the parameter.
 * @param iListOfValue
 * The value of the tag parameter.
 * @param oMsg
 * This parameter is used for getting the error messages in case of any error.
 * @return
 *  
 */	
virtual int SetReferenceParameterValue  ( CATUnicodeString iKey , CATUnicodeString iTag, CATListOfCATUnicodeString iListOfValue, CATUnicodeString * oMsg ) = 0;
/*x
Section Report Managment
Abstract  Following methods are used to customize the <i>PLMBatch Data Access</i> main report
x*/

/** 
 * Writes applicative information in the main report 
 *  <A HREF=../_GIF/PLMBatch//R202_MainResult.htm><IMG SRC=../_GIF/PLMBatch//R202_MainResult.jpg WIDTH=300 xHEIGHT=100 ALIGN=RIGHT BORDER=0></A>
 * <br><I>PLMBatch Data Access</I> generates a main html report which default name is GlobalResult.htm
 * By default, this main report contains information regarding the execution of the `<I>PLMBatch Data Access</I>` execution, including:
 * <UL>
 *	<LI>PLM environment,
 *	<LI>for each processed object, a global status (OK/KO) which correspond to object successfully loaded (and written when needed)
 *	<LI>a global status and return Code:<UL>
 *		<LI>0: OK
 *		<LI>4: Partially processed (some objects have been fully processed, but other aborts)
 *		<LI>8: Aborts: no object process
 *              <LI>Any other applicative return Code, that application can define using the 
 * CATIAdpPLMBatchContext::<A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#SetReturnCode>SetReturnCode</A>
 *		</UL>
 * </UL>
 * This method allows an application creating all needed information in the main report using the CATIAdpPLMBatchContext::
 *  <A HREF=../xGenerated/Code_CATIAdpPLMBatchContext.php#AddCommentAdmReport>
 * AddCommentAdmReport
 *  </A>
 * method. 
 * <br>Then information are collected by <i>PLMBatch Data Access</i> platform at the end of the process using the GenerateReport method.
 * <P><B>Specific case of global session mamagment</b>:<UL>
 * <BR>This mode is activated while valuating the iSessionMode=3 in 
 * CATIAdpPLMBatchToolBox::<A HREF=../xGenerated/Code_PLMBatchServices.php#Run>Run</A> method. Then  selected objects will be processed
 * in a global reference mode (all selected objects are expanded in memory - Session management)
 * <BR>In that particular case, it is up to the application to generate also its own Object report within the GenerateReport method.
 * A basic code sample could be:
 * <TABLE BORDER=1 BORDERCOLOR=BLACK CELLPADDING=5 CELLSPACING=0 BGCOLOR=WHITE><TR><TD><PRE><FONT SIZE=-1>
 * <BR>      HRESULT MyPLMBatchPLM::GenerateReport  ()  { 
 * <BR>      if ( ! _AdpBatchCtxt )  { 
 * <BR>         return E_FAIL; }  
 * <BR>      if ( ! _MainReport.Size() ) return S_OK; 
 * <BR>      int iFormat = 2; 
 * <BR>      HRESULT HR = S_OK; 
 * <BR> // <B>As the application is based on a 'Global Session', </B>
 * <BR> // its up to the application to define, for each processed objects: 
 * <BR> //  - the Object return code,  
 * <BR> //  - the Object report. 
 * <BR>      CATListValCATBaseUnknown_var lpObj; 
 * <BR>      int nbObjSel = _AdpBatchCtxt->GetListOfSelectedObjects(lpObj); 
 * <BR>      int ReturnCode = 0;	// for setting returncode and severity 
 * <BR>      int SeverityError = 0; 
 * <BR>      CATBaseUnknown * pObj = NULL; 
 * <BR>      CATUnicodeString DisplayName ("");
 * <BR>      for ( int iloop = 1 ; iloop <= nbObjSel ; iloop++ ) { 
 * <BR> // <B>Generate Object report for each processed objects </B>
 * <BR>            DisplayName = ""; 
 * <BR>            ReturnCode = 0; 
 * <BR>            pObj=lpObj[iloop]; 
 * <BR>            CATUnicodeString oIerMsg("");   
 * <BR>            _AdpBatchCtxt->SetObjectReturnCode(pObj,ReturnCode,SeverityError,oIerMsg); 
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, "RESET"); // Initialize a report  
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, "\n"); 
 * <BR>            CATUnicodeString BG ("&lt;TD BGCOLOR=GREN>"); 
 * <BR>            if ( ReturnCode > 0 ) BG="&lt;TD BGCOLOR=RED>"; 
 * <BR>            else if ( ReturnCode < 0 ) BG="&lt;TD BGCOLOR=YELLOW>"; 
 * <BR>            CATUnicodeString Msg("This is MyPLMBatch applicative message for object: "); 
 * <BR>            DisplayName=_AdpBatchCtxt->GetObjectDisplayName(pObj); 
 * <BR>            Msg.Append(DisplayName); 
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, Msg); 
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, "&lt;BR>&lt;TABLE>&lt;TR>&lt;TH>Applicative Result:"); 
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, BG); 
 * <BR>            _AdpBatchCtxt->AddCommentAdmReport(iFormat, "APPLICATIVEMESSAGE&lt;/TABLE>"); 
 * <BR>            HR = _AdpBatchCtxt->SetObjectReport(pObj, iFormat); 
 * <BR>      }      
 * <BR> // <B>Generate the Main report    </B>
 * <BR>      _AdpBatchCtxt->AddCommentAdmReport(iFormat, "RESET"); // Initialize the main report  
 * <BR>      CATUnicodeString MyHtmlformatDeb (""); // add the htm tags (color, size, ..) 
 * <BR>      CATUnicodeString MyHtmlformatEnd (""); // add the htm tags 
 * <BR>      _AdpBatchCtxt->AddCommentAdmReport( iFormat ,MyHtmlformatDeb); 
 * <BR>      for ( int kk = 1 ; kk <= _MainReport.Size() ; kk ++ ) {  
 * <BR>         _AdpBatchCtxt->AddCommentAdmReport(iFormat , _MainReport[kk]); }  
 * <BR>      CATUnicodeString Msg="Execution Successful"; 
 * <BR>      _AdpBatchCtxt->AddCommentAdmReport(iFormat ,Msg); 
 * <BR>      _AdpBatchCtxt->AddCommentAdmReport(iFormat ,MyHtmlformatEnd); 
 * <BR>      return S_OK; 
 * <BR>      } </PRE></TABLE>
 * </UL>
 * <P><IMG SRC=../_GIF/ZWork.gif BORDER=0 ALIGN=LEFT WITDH=30><UL>
 * <br>As of today, only htm format is supported for GlobalResult.
 * </ul>
 * @return
 * <UL>
 *  <LI> E_FAIL: Error in the generation of report.</LI>
 *  <LI> S_OK: Report generation successful.</LI>  
 * </UL>
*/	
	virtual HRESULT          GenerateReport ( void ) = 0;
	
};

//------------------------------------------------------------------

#endif
