//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2011/01/03
//===================================================================
// CATPLMComponentData.cpp
// Header definition of class CATPLMComponentData
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/01/03 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Protected
* @usage U1  
*/
#ifndef CATPLMComponentData_H
#define CATPLMComponentData_H

#include "CATBaseUnknown.h"
#include "CATPLMIntegrationAccess.h"
#include "CATOmxSR.h"
class CATPLMComponentDataImpl;
class CATPLMID;
class CATIAdpPLMIdentificator;
class CATListPtrCATIPLMComponent;

//-----------------------------------------------------------------------


/**
 * This class represents a set of Components available in a Dataspace.
 * The data available in this set are only Components being seen as "alive" in the Session. Deleted Components
 * cannot be seen through this API.
 */
class ExportedByCATPLMIntegrationAccess CATPLMComponentData
{
protected:
  CATOmxSR<CATPLMComponentDataImpl> _pCompDataImpl;
public:
// Standard constructors and destructors
// -------------------------------------
CATPLMComponentData ();
virtual ~CATPLMComponentData ();

  /**
  * Iterator on a chosen IID. Iterate until you get S_FALSE as return
  * <pre>
  * use with : while (S_OK == MyObj.Next(...))
  * </pre>
  * 
  * @param iIID
  *        IID to cast to
  * @param oComponent [out, CATBaseUnknown#Release]
  *        Element casted. Use : (void**)&oComponent
  * @return
  *        S_OK    : there are more elements to iterate through
  *        S_FALSE : end of iteration, no more element
  *        E_FAIL  : if failure
  */
HRESULT Next(const IID                &  iIID  ,
             void                     **  oComponent);

  /*
  * Get a component corresponding to a PLMID passed as input.
  * To get the full set of components, use the iterator.
  *
  * @param iPLMID
  *        PLMID from which we want the corresponding component
  * @param iIID
  *        IID to cast to
  * @param oComponent [out, CATBaseUnknown#Release]
  *        Element casted. Use : (void**)&oComponent
  * @return
  *        S_OK   : element found
  *        S_FALSE: element not found
  *        E_FAIL : if failure
  */
HRESULT GetComponent(const CATPLMID           &  iPLMID, 
                     const IID                &  iIID  ,
                     void                     ** oComponent) const;

  /*
  * Get a component corresponding to AdpId passed as input.
  * To get the full set of components, use the iterator.
  *
  * @param iId
  *        AdpIndentifier from which we want the corresponding component
  * @param iIID
  *        IID to cast to
  * @param oComponent [out, CATBaseUnknown#Release]
  *        Element casted. Use : (void**)&oComponent
  * @return
  *        S_OK   : element found
  *        S_FALSE: element not found
  *        E_FAIL : if failure
  */
HRESULT GetComponent(      CATIAdpPLMIdentificator *  iId, 
                     const IID                     &  iIID  ,
                     void                          ** oComponent) const ;
 /*
  * Get every components in a CATIPLMComponent list.
  *
  * @param oOpenedComponents
  *        Element CATLISTP
  * @return
  *        S_OK   : no issue
  *        E_FAIL : if failure
  */
HRESULT GetList(CATListPtrCATIPLMComponent & oOpenedComponents);
  /*
  * Size of the components in the set.
  */
int Size();

  /*
  * Reset the iterator
  */
HRESULT Rewind();

CATPLMComponentData (const CATPLMComponentData &);
CATPLMComponentData& operator=(const CATPLMComponentData&);

private:
  friend class CATAdpComponentData;
};

//-----------------------------------------------------------------------

#endif
