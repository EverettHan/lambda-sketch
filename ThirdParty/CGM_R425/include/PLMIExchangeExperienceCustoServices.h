//=======================================================================================
// WARNING: YWE 18:09:24 SINGLE-CODE 2015x => NO LOCAL CHANGE EXPECTED - USE IMPORT  
//=======================================================================================
//===================================================================
// COPYRIGHT Dassault Systemes 2013/12/09
//===================================================================
// PLMIExchangeExperienceCustoServices.cpp
// Header definition of class PLMIExchangeExperienceCustoServices
//===================================================================
//
// Usage notes: Object used to propose some service methods
//    to facilitate the customization.
//    
//
//===================================================================
//  2013/12/09 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef PLMIExchangeExperienceCustoServices_H
#define PLMIExchangeExperienceCustoServices_H

#include "PLMExchangeInterfaces.h"
#include "PLMExchangeExperienceDictionary.h"
#include "CATBaseUnknown.h"


extern ExportedByPLMExchangeInterfaces  IID IID_PLMIExchangeExperienceCustoServices ;

class PLMIExchangeExperienceDesignInfo;
class PLMIExchangeExperienceObjSearchCriterion;
class CATUnicodeString;
class CATError;
class ExportedByPLMExchangeInterfaces PLMIExchangeExperienceCustoServices: public CATBaseUnknown
{
CATDeclareInterface;

public:

 /** 
   * SetDesignInfoFromCatalog : Set the properties set in the design info accordingly to the information found in a Rsc or NLS catalog.
   * The given input iCatalogKeyStr is contructed from the information key inside the catalog and the catalog name itself.
   * i.e : "PLMExchangeExportExperienceDesign.Status.Exchanged" where PLMExchangeExportExperienceDesign is the catalog name and 'Status.Exchanged' is the message key inside it.
   * The method will parse through all the properties defined inside the design info and look for the corresponding property key in the catalog :
   *  - If the property is defined as String, then we will search in a NLS catalog.
   *  - If the property is defined as Integer, then we will search in a Rsc catalog.   
   *
   * @param iCatalogKeyStr (in)
   * input CATUnicodeString corresponding to the catalog and the key where the info are.     
   *
   * @param iopDesignInfoItf (in)
   * Input/output design info. This object will be set accordingly to the info in the catalog file.
   *
   * @return
   *  <ul>
   *     <li><code>S_OK</code> The method succeeded </li>
   *     <li><code>E_FAIL</code> Issue with Rsc/NLS catalog (ie. does not exist or is not accessible) </li>
   *  </ul>
   */
   virtual HRESULT SetDesignInfoFromCatalog( const CATUnicodeString & iCatalogKeyStr, PLMIExchangeExperienceDesignInfo * & iopDesignInfoItf) = 0;

 /** 
   * CreateObjectSearchCriterion : Create the object used to set criterion on the session object to search for, in the current session.   
   * Please release the pointer after use.
   *
   * @param opObjSearchCrit [out, CATBaseUnknown#Release]
   * output pointer on the object to use when setting search criterion.   
   *
   * @return
   *  <ul>
   *     <li><code>S_OK</code> The method succeeded </li>
   *     <li><code>E_FAIL</code> </li>
   *  </ul>
   */
   virtual HRESULT CreateObjectSearchCriterion( PLMIExchangeExperienceObjSearchCriterion * & opObjSearchCrit) = 0;

      
   /**
   * <b> RaiseNotification</b> : Raise and display a notification to the user.   
   * The type and behavior of the notification is defined by the input : iNotificationTypeMask, built from the enum : PLMExchangeExperienceNotificationMask (PLMExchangeExperienceDictionary.h)
   *
   * @param iStrTitle (in)
   * input string corresponding to the notification title.
   *
   * @param iStrMessageToDisplay (in)
   * input string corresponding to the message to display.
   *
   * @param iNotificationTypeMask (in)
   * input int corresponding to a mask built from the enum PLMExchangeExperienceNotificationMask.
   * The given mask must at least be built with a notification type.
   * ie : ExperienceNotification_Type_Warning | ExperienceNotification_Severity_High
   *
   * @return
   * <dt><tt>1</tt><dd> The OK button has been pressed. </dd></dt>   
   * <dt><tt>2</tt><dd> The Yes button has been pressed. </dd></dt>
   * <dt><tt>3</tt><dd> The No button has been pressed. </dd></dt>
   * 
   */ 
   virtual int RaiseNotification(CATUnicodeString iStrTitle, CATUnicodeString iStrMessageToDisplay, int iNotificationTypeMask) = 0;
       
   /**
   * <b> RaiseNotification</b> : Raise and display a notification to the user based on a CATError.   
   * The raised notification will be of type error and will display the information defined in the CATerror.
   *
   * @param ipError (in)
   * input CATError to use when creating the error notification.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds.    
   *                   E_FAIL 
   */ 
   virtual HRESULT RaiseNotification(CATError * & ipError) = 0;

   /**
   * <b> WriteIntegerValuesInSysRepository :</b> Write a list of integer in the given repository.   
   *
   * 
   * @param iListOfValueToSet (in)
   * input list of integer to write.
   *
   * @param iSysRepositoryType (in)
   * input corresponding to the type of the system repository to save option to.
   * Type PLMExchangeExperienceSysRepositoryType is defined in the header : PLMExchangeExperienceDictionary.h.
   * Example of possible values : SysRepositoryType_Preference, SysRepositoryType_Setting.
   *
   * @param iStrSysRepoName (in)
   * input string corresponding to the repository name to use. 
   *
   * @param iStrSysRepoAttrName (in)
   * input string corresponding to the attribute name under which the option's values will be saved (from the specified repository).
   *
   * @return
   *    Legal values:  S_OK if the method succeeds.    
   *                   E_FAIL 
   */    
   virtual HRESULT WriteIntegerValuesInSysRepository( CATListOfInt & iListOfValueToSet, PLMExchangeExperienceSysRepositoryType iTypeOfSysRepo, const CATUnicodeString & iStrSysRepoName, const CATUnicodeString & iStrSysRepoAttr) =0;
   
  /**
   * <b> ReadIntegerValuesFromSysRepository :</b> From the given system repository, read and return the integer values for the given repository name and attribute.        
   *
   * @param iSysRepositoryType (in)
   * input corresponding to the type of the system repository to set the option with.
   * Type PLMExchangeExperienceSysRepositoryType is defined in the header : PLMExchangeExperienceDictionary.h.
   * Example of possible values : SysRepositoryType_Preference, SysRepositoryType_Setting.
   *
   * @param iStrSysRepoName (in)
   * input string corresponding to the repository name to use. 
   *
   * @param iStrSysRepoAttrName (in)
   * input string corresponding to the attribute name under which the option's values will be read (from the specified repository).
   *
   * @param oListOfValue (in)
   * output list with the retrieved interger value.
   *
   * @return
   *    Legal values:  S_OK if the method succeeds. 
   *                   S_FALSE, if no available information was found to set the given option. 
   *                   E_FAIL 
   */ 
   virtual HRESULT ReadIntegerValuesFromSysRepository( PLMExchangeExperienceSysRepositoryType iTypeOfSysRepo, const CATUnicodeString & iStrSysRepoName, const CATUnicodeString & iStrSysRepoAttr, CATListOfInt & oListOfValue)=0;

  /**
   * <b> RequestDesignUpdate :</b> Request a design update for the given input.        
   * This will update the UI counterpart of each object Id given as an input.
   * The input list : iListOfModifiedId, must hold ids used when creating experience object of type : option, option group, and execution.
   * If a status has been updated and a visual refresh is needed, then please set the input ibStatusUpdate to TRUE.
   *
   * @param iListOfModifiedId (in)
   * input list of experience object ids of type : option, group or execution, on which a design update is required.
   *
   * @param ipbStatusUpdate (in)
   * input boolean on whether or not we need to update the design related to status type of object. 
   *
   * @return
   *    Legal values:  S_OK if the method succeeds.    
   *                   E_FAIL 
   */ 
   virtual HRESULT RequestDesignUpdate(CATListOfCATUnicodeString & iListOfModifiedId, CATBoolean ibStatusUpdate = FALSE )=0;
};

//-----------------------------------------------------------------------

#endif
 
