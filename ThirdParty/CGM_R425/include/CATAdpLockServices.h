// COPYRIGHT Dassault Systemes 2005
//===================================================================
//
// CATAdpLockServices.h
// Header definition of CATAdpLockServices
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  July 2005  Creation: Code generated by the CAA wizard  EBN
//===================================================================
/**
* @CAA2Level L1
* @CAA2Usage U1  
*/
#ifndef CATAdpLockServices_H
#define CATAdpLockServices_H

#include "CATPLMIntegrationAccess.h"

#include "IUnknown.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"
#include "CATCollec.h"

class CATListPtrCATBaseUnknown ;
class CATListPtrCATIAdpPLMIdentificator ;
class CATLISTP(CATAdpLockInformation);
class CATIAdpPLMErrorReviewer;

//-----------------------------------------------------------------------

/**
 * Class to manage Lock services  in CATIA session.
 *
 * <br><b>Role</b>: Provides all basic functions to lock or unlock data.
 * <ul>
 * <li> To process a lock operation, you will need a PLM identificator, @href CATIAdpPLMIdentificator interface pointer. 
 * You can use @href CATAdpQueryServices to retrieve it, or use the @href CATIPLMComponent#GetAdpID method if 
 * your component is already in session.</li>
 * </ul>
 */
class ExportedByCATPLMIntegrationAccess CATAdpLockServices
{

  public:

/**
 * Performs a lock.
 * <br><b>Role:</b>This method locks a component. This method is not recursive.
 * @param iToBeProceed [in]
 *   The list of PLM identificator to lock.
 * @param iopErrorReviewer [inout]
 *   The ErrorReviewer dedicated to store and handle all PLM Errors raised during the execution of this service.
 * @return
 *   <ul>
 *   <li><tt>S_OK</tt> The components have all been locked.</li> 
 *   <li><tt>S_FALSE</tt> At least one of the components holds a warning
 *   <li><tt>E_FAIL</tt> A fatal error happened during the lock operation. Nothing was done during the operation.</li>
 *   </ul>
 */
   static HRESULT Lock( CATListPtrCATIAdpPLMIdentificator & iToBeProceed, CATIAdpPLMErrorReviewer *  iopErrorReviewer = NULL );
	 
/**
 * Performs a unlock.
 * <br><b>Role:</b>This method unlocks a list of components. This method is not recursive.
 *                 It may fetch other components in order to ensure consistency between unlocked objects.
 * @param iToBeProceed [in]
 *   The list of PLM identificator to unlock.
 * @param iopErrorReviewer [inout]
 *   The ErrorReviewer dedicated to store and handle all PLM Errors raised during the execution of this service.
 * @return
 *   <ul>
 *   <li><tt>S_OK</tt> The components have all been unlocked.</li> 
 *   <li><tt>S_FALSE</tt> At least one of the components holds a warning
 *   <li><tt>E_FAIL</tt> A fatal error happened during the unlock operation. Nothing was done during the operation.</li>
 *   </ul>
 */
   static HRESULT Unlock( CATListPtrCATIAdpPLMIdentificator & iToBeProceed, CATIAdpPLMErrorReviewer *  iopErrorReviewer = NULL );
	 
/** 
 * Gets the lock status of components.
 *
 * <br><b>Role:</b>Queries the database to retrieve the lock status of a set of components.
 *
 * @param iComponents [in]
 *   The identifiers of components which lock status is required.
 * @param oLockInformations [out]
 *   Returned lock informations of components (can be read with @href CATAdpLockInformation). 
 * <ul>
 * <li> The list is emptied by the beginning of the method.</li> 
 * <li> You must delete the elements of the list when useless.</li> 
 * <li> Objects are identified through @href CATIAdpPLMIdentificator by using the @href CATAdpLockInformation#GetIdentifier method.</li>
 * </ul>
 * @param iopErrorReviewer [inout]
 *   The ErrorReviewer dedicated to store and handle all PLM Errors raised during the execution of this service.
 *
 * @return
 *   <ul>
 *   <li><code>S_OK</code> if the lock informations could be retrieved in the database.</li>
 *   <li><code>E_INVALIDARG</code> if an invalid set of components was provided (empty set).</li>
 *   <li><code>E_FAIL</code> if a fatal error occured during the operation. The blocking error can be accessed through @href CATIAdpPLMErrorReviewer or @href CATError#CATGetLastError method.</li>
 *   </ul>
 */
   static HRESULT IsLocked( const CATLISTP(CATIAdpPLMIdentificator) & iComponents, CATLISTP(CATAdpLockInformation) & oLockInformations, CATIAdpPLMErrorReviewer *  iopErrorReviewer = NULL );
	 
  
};

//-----------------------------------------------------------------------

#endif
