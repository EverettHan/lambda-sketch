#ifndef CATIASettingController_IDL
#define CATIASettingController_IDL
/*IDLNOGEN*/
/*IDLREP*/

// COPYRIGHT DASSAULT SYSTEMES 2003
/**
 * @CAA2Level L1
 * @CAA2Usage U6
 */

#include "CATIABase.idl"
#include "CATVariant.idl"
#include "CATSafeArray.idl"

/**
 * Represents the base object for setting controllers.
 * <b>Role</b>: A setting controller manages all or
 * only a part of the parameters available in a property page of the dialog
 * displayed using the Options command of the Tools menu.
 * Each setting parameter may be represented by one or several setting attribute 
 * in the underlying setting repository.
 * <p>All setting controllers share the five methods of the SettingController 
 * object to deal with the whole set, or a subset of the setting attributes:</p>
 * <ul>
 *  <li><code>Commit</code> to make a memory copy of the setting attribute values</li>
 *  <li><code>Rollback</code> to restore the last memory copy of the setting attribute values</li>
 *  <li><code>ResetToAdminValues</code> to restore the administered values of all the attributes</li>
 *  <li><code>ResetToAdminValuesByName</code> to restore the administered values of a subset of the attributes</li>
 *  <li><code>SaveRepository</code> to make a persistent copy of the setting attribute values on file.</li>
 * </ul>
 * <p>In addition, each setting controller exposes four methods per setting parameter:
 * two methods to access the setting attribute values, that usually make up a 
 * read/write property if the setting parameter is represented by a single setting
 * attribute, a method to manage the setting parameter lock, and a method to 
 * retrieve the state of the setting parameter. The first two methods are 
 * parameter-specific and are fully described in the setting controller object 
 * that managing the setting parameter. 
 * The last two methods have always the same signature and the same behavior 
 * whatever the setting parameter.
 * They are described below.
 * PARAMETER is used in place of the actual setting parameter name.</p>
 * <ul>
 * <li><b>Managing the Setting Parameter Lock</b>
 * <pre>HRESULT SetPARAMETERLock(in  boolean iLocked);</pre> 
 * <p>Locks or unlocks the PARAMETER setting parameter.
 * <br><b>Role</b>: Locking a setting parameter prevents the end user, or the 
 * administrators below the current one, from changing the setting parameter value.
 * Locking or unlocking the PARAMETER setting parameter is an administrator task 
 * and is possible  when running a session in the administration mode only.</p>
 * <dl>
 * <dt><b>Parameters</b></dt>
 * <dd>
 * <dl>
 * <dt><code>iLocked</code></dt>
 * <dd>[in] A flag to indicate whether the PARAMETER setting parameter
 *   should be locked.
 *   <br><b>Legal values</b>: <code>True</code> to lock, and <code>False</code> to unlock.</dd>
 * </dl>
 * </dl>
 * </li>
 * <br>
 * <li><b>Retrieving the Setting Parameter State</b>
 * <pre>HRESULT GetPARAMETERInfo (inout CATBSTR ioAdminLevel,
 *                                inout CATBSTR ioLocked,
 *                                out  &#47;&#42;IDLRETVAL&#42;&#47; boolean oModified);</pre>
 * <p>Retrieves information about the PARAMETER setting parameter.
 * <br><b>Role</b>: This information defines the state of the setting parameter and is made up of:</p>
 * <ul>
 * <li>The administration level that sets the current value or the value used to reset it</li>
 * <li>The administration level that has locked the setting parameter.</li>
 * <li>A flag to indicate whether the setting parameter was modified.</li>
 * </ul>
 * <dl>
 * <dt><b>Parameters</b></dt>
 * <dd>
 * <dl>
 * <dt><code>ioAdminLevel</code></dt>
 * <dd>[inout]
 *   The administration leve that defines the value used when resetting the
 *   setting parameter.
 *   <p><b>Legal values</b>:</p>
 *   <ul>
 *     <li><b>Default value</b> if the setting parameter has never been explicitly
 *         set in the administration concatenation.</li>
 *	   <li><b>Set at Admin Level n</b> if the setting parameter has been 
 *         administered, <br>where n is an integer starting from 0 representing 
 *         the rank of the administration level.</li>
 *   </ul>
 * </dd>
 * <dt><code>ioLocked</code></dt>
 * <dd>[inout]
 *   A character string to indicate whether the parameter is locked and the level
 *   of administration where the locking has been proceeded.
 *   <br><b>Legal values</b>: 
 *   <ul>
 *     <li><b>Locked at Admin Level n</b> if the setting parameter is locked by 
 *            then administration level n, <br>where n is an integer starting 
 *            from 0. The setting parameter can not be modified at the current
 *            level.
 *     <li><b>Locked</b> if the setting parameter is locked by the current 
 *            administration level. Only an admistrator can get this value.</li>
 *     <li><b>Unlocked</b> if the setting parameter is not locked</li>
 *   </ul>
 * </dd>
 * </dl>
 * <dt><b>Returns</b></dt>
 * <dd><b>True</b> to indicate that the setting parameter value has been 
 *    explicitely modified  at the current administrator or user level.
 *    This is only possible with unlocked parameters.
 *    <b>False</b> means that it inherits the administered value.</dd>
 * </dl>
 * </li>
 * </ul>
 */

interface CATIASettingController : CATIABase
{	
/**
 * Makes a memory copy of the setting attribute values.
 * <br><b>Role</b>: <code>Commit</code> saves the current values of the setting 
 * attributes managed by the setting controller in a specific memory area.
 * Successive calls to <code>Commit</code> overwrite the memory area.
 * The values saved by the last call to <code>Commit</code> can be restored from 
 * that memory area using the @href #Rollback method.
 */
    HRESULT Commit();

/**
 * Restores the last memory copy of the setting attribute values.
 * <br><b>Role</b>: <code>Rollback</code> restores the values of the 
 * setting attributes managed by the setting controller from the
 * memory area.
 * All values of the 
 * setting attributes managed by the setting controller modified since the last 
 * call to @href #Commit are restored to the values they had when this last 
 * @href #Commit was called.
 */
    HRESULT Rollback();	

/**
 * Restores the administrated values of the all attributes.
 * <br><b>Role</b>: <code>ResetToAdminValues</code> restores all
 * the values of the setting attributes managed by the setting controller       
 * to either the values set by the setting administrator, or to their default 
 * values if the setting administrator did not change them. 
 */
    HRESULT ResetToAdminValues();

/**
 * Restores the administrated values of a subset of the attributes.
 * <br><b>Role</b>: <code>ResetToAdminValuesByName</code> restores the values of 
 * a subset of the setting attributes managed by the setting controller to either
 *  the values set by the setting administrator, or to their default values
 * if the setting administrator did not change them. 
 * @param iAttList
 *  The attribute subset to which the administrated values are to be restored
 */
    HRESULT ResetToAdminValuesByName(in CATSafeArrayVariant iAttList);

/**
 * Makes a persistent copy of the setting attribute values on file.
 * <br><b>Role</b>: <code>SaveRepository</code> saves the current values of the
 * setting attributes managed by the setting controller in a setting repository 
 * file.
 * To avoid inconsistencies, <code>SaveRepository</code> first saves the values in
 * the memory area used by the @href #Commit method by calling @href #Commit 
 * before writing the values in the setting repository file.
 */
    HRESULT SaveRepository();
};

// Interface Name : CATIASettingController
#pragma ID CATIASettingController "DCE:12ce8949-0ca6-4564-8c5fdab2710e4d69"
#pragma DUAL CATIASettingController

// VB Object Name : SettingController
#pragma ID SettingController "DCE:e9b31f03-5bfa-4134-97877be4c555d966"
#pragma ALIAS CATIASettingController SettingController
#endif
