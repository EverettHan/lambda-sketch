// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIDroppableInViewerEmptiness.h
// Define the CATIDroppableInViewerEmptiness interface
//
//===================================================================
//
// Usage notes:
//   Use only CATEDroppableInViewerEmptiness adapter to implement this interface
//
//===================================================================
//
//  Jul 2008  Creation: Code generated by the CAA wizard  ers
//===================================================================
#ifndef CATIDroppableInViewerEmptiness_H
#define CATIDroppableInViewerEmptiness_H

#include "CATInteractiveInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATBoolean.h"

class CATDrop;
class CATPreDrop;
class CATBeginPreDrop;
class CATEndPreDrop;
class CATDlgCancelDragNotification;
class CATViewer;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATInteractiveInterfaces IID IID_CATIDroppableInViewerEmptiness;
#else
extern "C" const IID IID_CATIDroppableInViewerEmptiness ;
#endif

//------------------------------------------------------------------

/**
* Interface representing drag and drop management on viewer backgrounds.
*
* <br><b>Role</b>: Manages drag and drop on viewer backgrounds.
* <p>
* Use only CATEDroppableInViewerEmptiness adapter to implement this interface.
* <p>
* Use CATIDroppableInViewerEmptiness interface only to manage drag and drop on viewer backgrounds,
* do not use CATIDroppableInViewerEmptiness interface to manage drag and drop on dialogs or graphic objects.
  * <br>
  * <br> Here follows the way your object will be called on this interface:
  * <br> Begin of drag: DragBegins(notif, sourceEditor, sourceEditor)
  * <br> Drag on emptyness: DragInProgress(notif)
  * <br> Entering a graphic rep: DragEnds(NULL)
  * <br> Leaving the graphic rep: DragBegins(notif, sourceEditor, currentEditor)
  * <br> Entering an immersive dialog: DragEnds(notif)
  * <br> Leaving the immersive dialog: DragBegins(notif, sourceEditor, currentEditor)
  * <br> Entering an element of the specs graph: DragEnds(notif)
  * <br> Leaving the element of the specs graph: DragBegins(NULL, sourceEditor, currentEditor)
  * <br> Leaving the current window: DragEnds(notif)
  * <br> Entering a window: DragBegins(notif, sourceEditor, currentEditor)
  * <br> Dropping outside of a viewer:DragCanceled(notif)
  * <br> Dropping in a viewer, on a rep in specs graph: DragCanceled(NULL)
  * <br> Dropping in a viewer, on a graphic rep: DragCanceled(NULL)
  * <br> Dropping in a viewer, on an immersive dialog: DragCanceled(notif)
  * <br> Dropping in a viewer, on nothing: DropInViewerEmptyness(notif)
*/
class ExportedByCATInteractiveInterfaces CATIDroppableInViewerEmptiness: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * This method allows to determine if an object is droppable. It will be called each time before
     * the other action.<br>
     */
     virtual CATBoolean IsDroppable() = 0;

     /**
     * Model object has been dropped on a viewer background.
     *   @param ipDropNotif
     *      The drop notification. Should give any necessary information about the drop action.
     */
    virtual void DropInViewerEmptiness (CATDrop * ipDropNotif) = 0;

    /**
     * A Drag of the Model object is starting, or restarting.
     *   @param ipBeginPreDropNotif
     *      The drag notification. Should give any necessary information about the drag action.
     *   @param ipSourceViewer
     *      The Viewer where the drag began.
     *   @param ipCurrentViewer
     *      The Viewer where the drag is currently being done.
     */
    virtual void DragBegins (CATBeginPreDrop * ipBeginPreDropNotif, CATViewer * ipSourceViewer, CATViewer * ipCurrentViewer) = 0;

    /**
     * Model object is being dragged.
     * Called only when dragging on viewer emptyness. Other means exist to subscribe to drag over objects.
     *   @param ipPreDropNotif
     *      The drag notification. Should give any necessary information about the drag action.
     */
    virtual void DragInProgress (CATPreDrop * ipPreDropNotif) = 0;

    /**
     * A Drag is ending on a Model object.
     *   @param ipEndPreDropNotif
     *      The drag notification. Should give any necessary information about the drag action.
     */
    virtual void DragEnds (CATEndPreDrop * ipendPreDropNotif) = 0;

    /**
     * Drag action canceled.
     * <br> A drop occurred in a forbidden place.
     *   @param ipCancelDragNotif
     *      The cancel notification.
     */
    virtual void DragCanceled (CATDlgCancelDragNotification * ipCancelDragNotif) = 0;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
