// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATSYPTimeline.h
// Header definition of CATSYPTimeline
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Mar 2007  Creation: Code generated by the CAA wizard  jov
//===================================================================
#ifndef CATSYPTimeline_H
#define CATSYPTimeline_H

#include <IntroInfra.h>
#include <CATBaseUnknown.h>
#include <CATBoolean.h>
#include <CATSYPDuration.h>
#include <CATSYPRepeatBehavior.h>
#include <CATBaseUnknown_WR.h>

//----------------------------------------------------------------
// Class CATSYPTimeline             
//----------------------------------------------------------------
/**
 * Base class for timelines.
 * <b>Role</b>:
 * Provides base functionnalities (duration, begin time, repeat behaviour, ...) for both animations and group of animations.
 * <br/>
 * A timeline can be an animation or a group of animations.
 *
 * <b>Wiki article :</b>
 * <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure"><b>CodeWiki -> Animations</b></a>
 *
 * @ingroup groupCIDIntrospection
 * @htmlinclude CATSYPTimeline.sypintro.html
 */
class ExportedByIntroInfra CATSYPTimeline: public CATBaseUnknown
{
  CATDeclareClass;

public:
  /**
  * The state of the timeline.
  * @see SetBeginTime
  */
  enum AnimationState{
    /**
    * The timeline has not been started, or begin time is not yet elapsed
    */
    ToBegin=0,
    ToInit,
    /**
    * The timeline is currently started
    */
    OnGoing,
    ToStop,
    /**
    * The timeline is stopped
    */
    Stopped,
    /**
    * In case of RepeatBehavior, indicates if a new iteration starts
    */
    OnLoop
  };
  /**
  * Standard constructor.
  */
  CATSYPTimeline ();
  /**
  * Sets duration of the timeline.
  * The duration is in second, but as CATSYPDuration constructor takes a float,
  * you can specify times as precise as milliseconds.
  * @code
  * pTimeline->SetDuration(CATSYPDuration(15.35f));
  * @endcode
  * @attention If an animation have a father (i.e. is in a group of timelines),
  * its duration and repeat behavior will be for now limited by the duration of its father.
  * @param i_duration
  *   The duration to set.
  * @see CATSYPDuration
  */
  void SetDuration (const CATSYPDuration& i_duration);
  /**
  * @return the duration of the timeline 
  * @see CATSYPDuration
  * @see SetDuration
  */
  CATSYPDuration GetDuration () const;
  /**
   * Sets the transitionTimelineFlag.
   * It indicates if the timeline is only used for a transition (make things appear slowly) 
   * or if it has a real meaning (tooltips need to be appears after a while).
   * @param i_transitionTimelineFlag the flag to set
   */
  void SetTransitionTimelineFlag (const CATBoolean& i_transitionTimelineFlag);
  /**
  * @return the transitionTimelineFlag of the timeline
  * @see SetTransitionTimelineFlag 
  */
  CATBoolean GetTransitionTimelineFlag () const;
  /**
  * Sets the begin time of the timeline.
  * The begin time is in second, but since CATSYPDuration constructor takes a float,
  * you can specify times as precise as milliseconds<br/>
  * When the timeline is launched, it will actually start after its begin time.
  * @code
  * pTimeline->SetBeginTime(CATSYPDuration(0.55f));
  * @endcode
  * @endcode
  * @attention If an animation have a father (i.e. is in a group of timelines),
  * its duration and repeat behavior will be for now limited by the duration of its father.
  * @param i_beginTime
  *   The begin time to set.
  * @see CATSYPDuration
  */
  void SetBeginTime (const CATSYPDuration& i_beginTime);
  /**
  * @return the begin time of the timeline 
  * @see CATSYPDuration
  * @see SetBeginTime
  */
  CATSYPDuration GetBeginTime () const;
  /**
  * Returns the ratio of time elapsed since the begin of the animation.
  * It is a float between 0 and 1<br/>
  * When the animation has started and has not yet ended, @c ElapsedTimeRatio is basically <tt>time elapsed / duration</tt><br/>
  * If the animation is in reversed mode (see #SetAutoReverseFlag), @c ElapsedTimeRatio is <tt>(1 - ElapsedTimeRatio)</tt>
  * <br/><br/>
  * @c ElapsedTimeRatio is 0 if : 
  *   <ul>
  *   <li>The animation has not been started
  *   <li>The begin time is not yet elapsed
  *   </ul>
  * @return the ratio of time elapsed since the begin of the animation.
  */
  float GetElapsedTimeRatio() const;
  /**
  * Resets the timeline.
  * Sets the state to @c ToBegin and the <tt>elasped time</tt> to @c 0
  * All animations are then stopped.
  */
  void Reset();
  /**
  * Sets the AutoReverse flag.
  * <b>FALSE :</b>
  *   If the timeline is repeated, when the timeline ends it will start back with the same starting value.<br/>
  * <b>TRUE :</b>
  *   If the timeline is repeated, when the timeline ends it will start back with the value to which it stopped.<br/>
  * Default is FALSE
  * @note If the timeline is not repeated, the AutoReverse flag will have no influence.<br/>
  *
  * @param i_flag
  *   The AutoReverse flag to set.<br/>
  *   Legal values : @c TRUE, @c FALSE
  * @see CATSYPTimeline::SetRepeatBehavior
  * @see CATSYPRepeatBehavior
  * @see <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure#Repeat_Behaviour"><b>CodeWiki -> Animations -> Repeat Behaviour</b></a>
  */
  void SetAutoReverseFlag(CATBoolean i_flag);
  /**
  * @return the AutoReverse flag : TRUE or FALSE.
  * @see SetAutoReverseFlag
  */
  CATBoolean GetAutoReverseFlag() const;
  /**
  * Sets the repeat behavior.
  * A repeat behavior is either a user-defined number of time, or forever, i.e. a never ending repetition.<br/>
  * It defines the way the animation repeats itself.
  * <br/><br/>
  * @attention If an animation have a father (i.e. is in a group of timelines), its duration and repeat behavior will be for now limited by the duration od its father.
  * 
  * @param i_repeatBehavior the repeat behavior.
  * @see CATSYPRepeatBehavior
  * @see CATSYPParallelTimeline
  * @see SetAutoReverseFlag
  * @see <a href="http://codewiki/codewiki/index.php/New_V6_Animation_Infrastructure#Repeat_Behaviour"><b>CodeWiki -> Animations -> Repeat Behaviour</b></a>
  */
  void SetRepeatBehavior(const CATSYPRepeatBehavior& i_repeatBehavior);
  /**
  * @return the repeat behavior.
  * @see CATSYPRepeatBehavior
  * @see SetRepeatBehavior
  */
  const CATSYPRepeatBehavior& GetRepeatBehavior() const;
  /**
  * @return the animation state : <tt>ToBegin (default), OnGoing or Stopped</tt>
  * @see CATSYPTimeline::AnimationState
  * @see SetCurrentState
  */
  CATSYPTimeline::AnimationState GetCurrentState() const;
  /**
   * @return the elapsed time.
   */
  float GetElapsedTimeInSec() const;
  
protected:
  /**
  * Destructor.
  */
	virtual ~CATSYPTimeline ();
  /** 
  * Computes the new value and updates it, depending on the current time.
  * This function is called internally at a certain interval, by the timer launched with the timeline.
  */
  virtual void UpdateCurrentValue(){};
  /**
  * Internal function. Do not call this method, do not overload.
  * @param i_elapsedTimeInSec elapsed time in second.
  */
  virtual void SetElapsedTimeInSec(float i_elapsedTimeInSec);
  /**
   * @return if a duration has been defined. Depending of the type of the timeline, 
   * a default behavior is implemented.
   * AnimationTimeline : default duration value (1s)is applied.
   * ParallelTimeline, Storyboard : sums the timing of the children.
   */
  CATBoolean GetUndeterminedDurationFlag() const;
  /**
   * 
   */
  void SetCurrentState(CATSYPTimeline::AnimationState i_state);

private:
  /**
  * Copy constructor.
  */
  CATSYPTimeline (CATSYPTimeline &);
  /**
  * Equal operator
  */
  CATSYPTimeline& operator=(CATSYPTimeline&);

   /**
  * Sets the parent timeline.
  * @param i_parent
  *   The parent timeline to set.
  * @see CATSYPTimeline
  */
  void SetParent(CATSYPTimeline* i_parent);
  /**
  * @return the parent timeline or NULL if no parent has been found
  * @see CATSYPTimeline::SetParent
  */
  CATSYPTimeline* GetParent();

  // Sets the internal duration 
  void _SetDuration(const CATSYPDuration& i_duration);

  // Update the duration if needed (see CATSYPParallelTimeline)
  virtual void _UpdateDuration(){};

  CATBoolean _transitionTimelineFlag;
  float _elapsedTimeRatio;
  float _elapsedTime;
  CATBoolean _autoreverseFlag;
  CATBoolean _undeterminedDurationFlag;
  CATSYPDuration _duration;
  CATSYPDuration _beginTime;
  CATSYPRepeatBehavior _repeatBehavior;
  CATBaseUnknown_WR _parent; 
  friend class CATSYPAbstractClock;
  friend class CATSYPParallelTimeline;
  friend class CATSYPStoryboard;
  friend class CATSYPTimeManagerAbstract;
  CATSYPTimeline::AnimationState _currentState;
  int _currentLoop; 
};
//-----------------------------------------------------------------------

#endif
