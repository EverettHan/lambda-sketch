//===================================================================
// COPYRIGHT Dassault Systemes 2015/07/17
//===================================================================
// CATAsyncVVSTasksFactory.cpp
// Header definition of class CATAsyncVVSTasksFactory
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2015/07/17 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncVVSTasksFactory_H
#define CATAsyncVVSTasksFactory_H

#include "CATAsyncStreamRequests.h"
#include "CATAsyncTasksFactory_NG.h"
#include "CATAsyncTaskID_NG.h"
#include "CATListOfCATOmyCioUrlUsageCtx.h"
#include "CATAsyncBasicTypes.h"
#include "CATAsyncSplittableRequest.h"

struct ExportedByCATAsyncStreamRequests CATAsyncVVSRequestBase : public CATAsyncSplittableRequest
{
  enum ECacheOrder { Commit, Abort, Standby };
  CATAsyncVVSRequestBase(const Params& iParams, CATBoolean ibFinal):CATAsyncSplittableRequest(CATAsyncRequest_VVS, CATAsyncAnswer_Undefined, ibFinal, iParams){}
  struct ProgressData : public CATAsyncRequest::ProgressData
  {
    ProgressData():StreamsCachedCount(-1),StreamsDownloadedCount(-1),StreamsToDownloadCount(-1),DataDownloadedCount(-1),DataToDownloadCount(-1){}
    CATLONG64 StreamsCachedCount;     // CATAsyncTaskContext.ProgressionData[0] ; -1 is not relevant
    CATLONG64 StreamsDownloadedCount; // CATAsyncTaskContext.ProgressionData[1] ; -1 is not relevant
    CATLONG64 StreamsToDownloadCount; // CATAsyncTaskContext.ProgressionData[2] ; -1 is not relevant
    CATLONG64 DataDownloadedCount;    // CATAsyncTaskContext.ProgressionData[3] ; in Byte ; -1 is not relevant
    CATLONG64 DataToDownloadCount;    // CATAsyncTaskContext.ProgressionData[4] ; in Byte ; -1 is not relevant
  };

  struct Result : public CATAsyncRequest::Result
  {
    Result():CacheOrder(Standby){ }
    ECacheOrder CacheOrder;
  };
};

class CATAsyncVVSRequest;

//-----------------------------------------------------------------------

class ExportedByCATAsyncStreamRequests CATAsyncVVSTasksFactory: public CATAsyncTasksFactory_NG
{
public:
  // Standard constructors and destructors
  // -------------------------------------
  CATAsyncVVSTasksFactory ();
  virtual ~CATAsyncVVSTasksFactory ();

  /**
  * Creates an Asynchronous VVS Task.
  * This task has a physical task behavior @see usage note.
  *
  * If the MP Platform is used, A VVS physical task executes the service :
  *   <code>CATPLMAsyncServices::ExecuteTask(const CATListOfCATOmyCioUrlUsageCtx& iSelection,...)</code>
  *
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iSelection : list of URLs to download from(/upload to) the server
  * <br/> [in] ibStreamsDownloadedNotication : notify the progression of donwloaded streams
  * <br/> [in] iAsyncTaskCompletionCallBack : callback that is called when task is completed
  * <br/> [in][opt] iAsyncTaskParentId : Logical Task on which the new created Physical Task will be attached
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncVVSTask( CATAsyncTaskID & oAsyncTaskId,
                              const CATListOfCATOmyCioUrlUsageCtx& iSelection,
                              CATBoolean ibStreamsDownloadedNotication,
                              CATIAsyncTaskCompletionCallBackBase& iAsyncTaskCompletionCallBack,
                              const CATAsyncTaskID & iAsyncTaskParentId = CATAsyncTaskID_Null );

  HRESULT CreateAsyncVVSTask( CATAsyncTaskID & oAsyncTaskId,
                              const CATOmxList<CATOmyCioUrlUsageCtx>& iSelection,
                              CATBoolean ibStreamsDownloadedNotication,
                              CATIAsyncTaskCompletionCallBackBase& iAsyncTaskCompletionCallBack,
                              const CATAsyncTaskID & iAsyncTaskParentId = CATAsyncTaskID_Null );

  /**
  * Creates a VVS Tasks Builder.
  * This task has a tasks builder behavior @see usage note.
  *
  * The builder creates automatically simple VVS Physical tasks depending on some optimization (according to the URLs requested)
  * If the builder is attached to a Logical Task, the Logical Task will have a Never Ending behavior until the service TasksBuilderCompleted is called
  * @see CATAsyncTasksServices::TasksBuilderCompleted
  *
  * @param
  * <br/> [out] oAsyncTaskId : id of the task
  * <br/> [in] iBuilderSettings : Async Tasks Builder Setting (@see CATAsyncTasksUtils)
  * <br/> [in] iCustomUrlSplitCount : Split Count
  * <br/> [in] iAsyncTaskCompletionCallBack : callback that is called when tasks are completed (all VVS tasks automatically created will call this callback)
  * <br/> [in][opt] iAsyncTaskParentId : Logical Task on which the new created Task Builder will be attached
  * <br/> [in][opt] iCustomUrlSplitCount : custom vvs url split count. If passed 0, the request will use its default one
  * @return
  * <code>S_OK</code>: the task has been created successfully
  * <code>E*</code>: unexpected error: task has not been created
  *
  */
  HRESULT CreateAsyncVVSTasksBuilder( CATAsyncTaskID & oAsyncTaskId,
                                      const AsyncTasksBuilderSettings& iBuilderSettings,
                                      CATIAsyncTaskCompletionCallBackBase& iAsyncTaskCompletionCallBack,
                                      const CATAsyncTaskID & iAsyncTaskParentId = CATAsyncTaskID_Null,
                                      const int iCustomUrlSplitCount=0);

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CATAsyncVVSTasksFactory (CATAsyncVVSTasksFactory &);
  CATAsyncVVSTasksFactory& operator=(CATAsyncVVSTasksFactory&);

  // Basic Tasks Creator for Tasks Builders
  // ---------------------------------
  CATAsyncTaskID _VVSTaskCreator( CATAsyncVVSRequest& iAsyncRequest,
                                  CATIAsyncTaskCompletionCallBackBase& iAsyncTaskCompletionCallBack,
                                  const CATAsyncTaskID& iAsyncBuilderId );

};

//-----------------------------------------------------------------------

#endif
