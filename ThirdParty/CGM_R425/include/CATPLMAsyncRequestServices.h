//===================================================================
// COPYRIGHT Microsoft 2012/02/09
//===================================================================
// CATPLMAsyncRequestServices.cpp
// Header definition of class CATPLMAsyncRequestServices
//===================================================================
//
// /!\ This service only works on WINDOWS /!\
//
// Use PLMAdapter QueryFilter to be platform independent.
//
//===================================================================
//  2015/01/19 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATPLMAsyncRequestServices_H
#define CATPLMAsyncRequestServices_H

// ObjectModelerCollection
#include "CATOmxAny.h"
#include "CATOmxArray.h"
#include "CATOmxKeyString.h"
#include "CATOmxList.h"
#include "CATOmxSharable.h"
#include "CATOmxSR.h"

// CATVirtualVaultSystem
#include "CATVVSTransaction.h"
#include "CATVVSUrl.h"
// CATPLMIdentificationAccess
#include "CATPLMID.h"
// CATPLMServices
#include "CATPLMAsyncRequestServicesLimitedAccess.h"
#include "CATPLMStreamDescriptor.h"
#include "CATXMQLRequestType.h"
#include "CATPLMRepositoryDef.h"
#include "CATXMQLRequestBase.h"
#include "CATXMQLRequestJSProcedure.h"

#include "CATAsyncTaskCompletionCallBack_NG.h"

class CATPLMTypeH;

/////////////////////////////////////////
/// Massive Link - FCS Url Definition ///
/////////////////////////////////////////
struct ExportedByCATPLMAsync CATFCSUrlDefinition
{
  CATPLMID PLMID;
  CATOmxSR<CATPLMStreamDescriptor> spStreamDescriptor;
  CATUnicodeString Store;
};

/////////////////////////////////////////
/// Massive Link - UrlLink Definition ///
/////////////////////////////////////////
struct ExportedByCATPLMAsync CATVVSUrlLinkDefinition
{
  CATUnicodeString V5UrlPath;
  CATUnicodeString V6Store;
  CATUnicodeString V6Location;
  CATPLMID PLMID;
  CATOmxSR<CATPLMStreamDescriptor> spStreamDescriptor;
};

///////////////////////////////////////// 
/// Generic Interface XMQL - Callback ///
/////////////////////////////////////////
class ExportedByCATPLMAsync CATIXMQLAnswer : public CATOmxSharable
{
  friend class CATPLMxBasicParallelQueryBuilder;
  friend class CATXMQLOpenInternalCallBack;
public:
  virtual HRESULT GetNextRow(CATOmxKeyString& oLabel, CATOmxKeyValueBlock& oRow) = 0;

protected:
  // NOT IMPLEMENT BY DEFAULT
  virtual HRESULT GetNextRow(CATA5::CsvRow*& oRow);
};

class ExportedByCATPLMAsync CATIXMQLCallBack : public CATOmxSharable
{

  /**
  This Call Back allows to treat the rows  by retrieving CATIXMQLAnswer as one goes along.
  Example :
  Let's assume we havea total of  10 rows to retrieve. R1, ..., R10.
  A CATIXMQLAnswer contains 1 or several row(s).

  sceanrio 1 :
  R1, ..., R10 -> OnTaskCompleted

  scenation 2 :
  R1, R2 -> OnTaskProgressed
  R3, R4, R5, R6 -> OnTaskProgressed
  R7, R8, R9, R10 ->OnTaskCompleted

  A call to 'OnTaskProgressed' could not be done after a call of 'OnTaskCompleted'.
  'OnTaskCompleted' marks that the rows are the last remaining rows.
  The following scenario is NOT valid :
    R1, R2 -> OnTaskProgressed
  R3, R4, R5, R6 -> OnTaskCompleted
  R7, R8, R9, R10 ->OnTaskProgressed
  */
public:

  /**
  *
  * <br><b>
  This function is called with the last rows which are going to be given to the callback.
  When this function is called, that means there will be no more calls to 'OnTaskProgressed' or 'OnTaskCompleted' again.
  </b>:
  * @param iXMQLAnswer
  * The last remaining rows to treat
  */
  virtual HRESULT OnTaskCompleted(CATIXMQLAnswer& iXMQLAnswer) = 0;

  /**
  *
  * <br><b>
  This function allows to give a subset of rows to the callback
  This function could be called 0, 1 or N times.
  This function should not be called after a call to 'OnTaskProgressed' or 'OnTaskFailed'
  </b>:
  * @param iXMQLAnswer
  * a subset of rows to treat
  */
  virtual HRESULT OnTaskProgressed(CATIXMQLAnswer& iXMQLAnswer) = 0;

  /**
  *
  * <br><b>
  A call to this function notify that an error has occured.
  */
  virtual HRESULT OnTaskFailed() = 0;
};

class ExportedByCATPLMAsync CATIJSONCallBack : public CATOmxSharable
{
public:
  virtual HRESULT OnTaskCompleted(const CATOmxAny& iAnswer) = 0;
  virtual HRESULT OnTaskProgressed(const CATOmxAny& iAnswer) = 0;
  virtual HRESULT OnTaskFailed() = 0;
};

////////////////////////////////////////
/// Generic Interface XMQL - Service ///
////////////////////////////////////////
class ExportedByCATPLMAsync CATPLMAsyncRequestServices
{
  friend class xMQLBasicQueryParallel;
public:
  CATPLMAsyncRequestServices();
  virtual ~CATPLMAsyncRequestServices();

  ////////////////////////////////////////////////////////////////////////////////////
  // This factories construct the corresponding request
  ////////////////////////////////////////////////////////////////////////////////////

  /**
  * Create a Query Business Object request.
  *
  * @param oRequest [out, CATOmxSharable#Release] :
  *          The constructed request
  * @param iSelectors [in] :
  *          Request selectors (see CATXMQLRequestSelector)
  * @param iObjectIdsList [in] :
  *          List of object id on which fetch attributes defined in the selectors
  * @param iWhereClause [in] :
  *          Optional Where clause
  */
  static HRESULT RequestQueryBusFactory(CATXMQLRequestQueryBus*& oRequest,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATOmxArray<CATUuid> &iObjectIdsList,
    const CATUnicodeString& iWhereClause);

  /**
  * Create a Query Business Object request (Basic Query).
  *
  * @param oRequest [out, CATOmxSharable#Release] :
  *          The constructed request
  * @param iType [in] :
  *          Type searched
  * @param iSelectors [in] :
  *          Request selectors (see CATXMQLRequestSelector)
  * @param iWhereClause [in] :
  *          Optional Where clause
  */
  static HRESULT RequestQueryBusFactory(CATXMQLRequestQueryBus*& oRequest,
    const CATPLMTypeH& iType,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATUnicodeString& iWhereClause);

  static HRESULT RequestQueryBusFactory(CATXMQLRequestQueryBus*& oRequest,
    const CATPLMTypeH& iType,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATUnicodeString& iWhereClause,
    const CATOmxArray<CATUnicodeString>& iVaults);

  /**
  * Create a Query Connection (aka Relationship) request.
  *
  * @param oRequest [out, CATOmxSharable#Release] :
  *          The constructed request
  * @param iSelectors [in] :
  *          Request selectors (see CATXMQLRequestSelector)
  * @param iObjectIdsList [in] :
  *          List of object id on which fetch attributes defined in the selectors
  * @param iWhereClause [in] :
  *          Optional Where clause
  */
  static HRESULT RequestQueryConnFactory(CATXMQLRequestQueryConn*& oRequest,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATOmxArray<CATUuid> &iObjectIdsList,
    const CATUnicodeString& iWhereClause);

  /**
  * Create a Query Connection (aka Relationship) request. (Basic Query).
  *
  * @param oRequest [out, CATOmxSharable#Release] :
  *          The constructed request
  * @param iType [in] :
  *          Type searched
  * @param iSelectors [in] :
  *          Request selectors (see CATXMQLRequestSelector)
  * @param iWhereClause [in] :
  *          Optional Where clause
  */
  static HRESULT RequestQueryConnFactory(CATXMQLRequestQueryConn*& oRequest,
    const CATPLMTypeH& iType,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATUnicodeString& iWhereClause);

  static HRESULT RequestQueryConnFactory(CATXMQLRequestQueryConn*& oRequest,
    const CATPLMTypeH& iType,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors,
    const CATUnicodeString& iWhereClause,
    const CATOmxArray<CATUnicodeString>& iVaults);

  /**
  * Create a List Policy request.
  *
  * @param oRequest [out, CATOmxSharable#Release] :
  *          The constructed request
  * @param iSelectors [in] :
  *          Request selectors (see CATXMQLRequestSelector)
  */
  static HRESULT RequestListPolicyFactory(CATXMQLRequestListPolicy*& oRequest,
    const CATOmxArray<CATXMQLRequestSelector>& iSelectors);

  /**
  * Execute a set of XMQL requests
  *
  * @param
  * <br/> [in] iRequests : XMQL requests to execute
  * <br/> [in] ipCB : callback that is called when task is completed
  * <br/> [in] isAsync : wheter the async request is made in async mode or sync
  * @return
  * <code>S_OK</code>: the request has been successfully scheduled/executed
  * <code>E*</code>: unexpected error
  *
  */
  HRESULT ExecuteXMQLQueries(CATXMQLRequestBase* ipRequest,
    CATIXMQLCallBack* ipCB,
    CATBoolean isAsync = FALSE);

  HRESULT ExecuteXMQLQueries(CATOmxList<CATXMQLRequestBase>& iRequests,
    CATIXMQLCallBack* ipCB,
    CATBoolean isAsync = FALSE);

  /**
  * Execute a set of XMQL requests
  *
  *    _____  ______ _____  _____  ______ _____       _______ ______ _____
  *   |  __ \|  ____|  __ \|  __ \|  ____/ ____|   /\|__   __|  ____|  __ \
  *   | |  | | |__  | |__) | |__) | |__ | |       /  \  | |  | |__  | |  | |
  *   | |  | |  __| |  ___/|  _  /|  __|| |      / /\ \ | |  |  __| | |  | |
  *   | |__| | |____| |    | | \ \| |___| |____ / ____ \| |  | |____| |__| |
  *   |_____/|______|_|    |_|  \_\______\_____/_/    \_\_|  |______|_____/
  *
  *
  * @param
  * <br/> [in] iRequests : XMQL requests to execute
  * <br/> [in] iCB : callback that is called when task is completed
  * <br/> [in] isAsync : wheter the async request is made in async mode or sync
  * @return
  * <code>S_OK</code>: the request has been successfully scheduled/executed
  * <code>E*</code>: unexpected error
  *
  */
  HRESULT ExecuteXMQLQueries(CATXMQLRequestBase* ipRequest,
    CATIXMQLCallBack& iCB,
    CATBoolean isAsync = FALSE);

  HRESULT ExecuteXMQLQueries(CATOmxList<CATXMQLRequestBase>& iRequests,
    CATIXMQLCallBack& iCB,
    CATBoolean isAsync = FALSE);

  /**
  * Execute a set of XMQL requests
  *
  *    _____  ______ _____  _____  ______ _____       _______ ______ _____
  *   |  __ \|  ____|  __ \|  __ \|  ____/ ____|   /\|__   __|  ____|  __ \
  *   | |  | | |__  | |__) | |__) | |__ | |       /  \  | |  | |__  | |  | |
  *   | |  | |  __| |  ___/|  _  /|  __|| |      / /\ \ | |  |  __| | |  | |
  *   | |__| | |____| |    | | \ \| |___| |____ / ____ \| |  | |____| |__| |
  *   |_____/|______|_|    |_|  \_\______\_____/_/    \_\_|  |______|_____/
  *
  *
  * @param
  * <br/> [in] iArgs : XMQL request args (TCL parser included)
  * <br/> [in] iCB : callback that is called when task is completed
  * <br/> [in] iQueryTag : tag used to identify request [deprecated]
  * <br/> [in] isAsync : whether the async request is made in async mode or sync
  * @return
  * <code>S_OK</code>: the request has been successfully scheduled/executed
  * <code>E*</code>: unexpected error
  *
  */
  HRESULT ExecuteXMQLQueries(xMQLRequest::Args& iArgs,
    CATIXMQLCallBack& iCB,
    CATUnicodeString& iQueryTag,
    CATBoolean isAsync = FALSE);

  /**
  * Create a FCS url
  *
  * @param
  * <br/> [out] oUrls : Array of FCS urls created
  * <br/> [in] iUrlDefinitions : Fcs urls definitions (see CATFCSUrlDefinition)
  * @return
  * <code>S_OK</code>: FCS urls successfully created
  * <code>E*</code>: unexpected error: FCS urls have not been created
  *
  */
  HRESULT CreateFCSUrls(const ArrayOfCATFCSUrlDefinition iUrlDefinitions, CATOmxArray<CATVVSUrl>& oUrls);

  /**
  * Execute a MassiveLink request
  *
  * @param
  * <br/> [in] iUrlDefinitions : MassiveLink urls definitions (see CATVVSUrlLinkDefinition)
  * <br/> [in] ipTransaction : VVS transaction associated with MassiveLink (it will be filled with the returned data by
  *                            the server call (basically receipt and store information)
  * @return
  * <code>S_OK</code>: MassiveLink has been successfully executed
  * <code>E*</code>: unexpected error
  *
  */

  HRESULT MassiveLink(const ArrayOfCATVVSUrlLinkDefinition iUrlDefinitions, CATVVSTransaction*  ipTransaction);


  HRESULT RepositoryInit(const CATUnicodeString& repoName, const CATUnicodeString& contentType, const CATUnicodeString& branchName,
    RepositoryBranchDef& oInit);

  HRESULT RepositoryCheckout(const RepositoryBranchDef& iCheckout, RepositoryCheckoutResult& oCheckOut);
  HRESULT RepositoryCheckout(const CATOmxArray<RepositoryBranchDef>& iCheckout, CATOmxArray<RepositoryCheckoutResult>& oCheckOut);

  HRESULT RepositoryCheckin(const RepositoryCheckinInput& iCheckIn, RepositoryBranchDef& oCheckIn);
  HRESULT RepositoryCheckin(const CATOmxArray<RepositoryCheckinInput>& iCheckIn, CATOmxArray<RepositoryBranchDef>& oCheckIn);

  HRESULT RepositoryCommit(const RepositoryBranchDef& iCommit, RepositoryBranchDef& oCommit);
  HRESULT RepositoryCommit(const CATOmxArray<RepositoryBranchDef>& iCommit, CATOmxArray<RepositoryBranchDef>& oCommit);

  HRESULT RepositoryBranch(const RepositoryBranchDef& iBranch,
    const CATUnicodeString& iBranchName,
    const CATUnicodeString& iIntent,
    RepositoryBranchDef& oBranch);

  HRESULT RepositoryGetContentid(const CATOmxArray<CATUuid>& iPhysicalIds,
    CATOmxArray<RepositoryItemDef>& oItems);

  HRESULT RepositoryLoadSession(const CATUnicodeString& iSessionName,
    CATOmxArray<RepositoryBranchDef>& oSession);

  /**
  * Execute the given JSProcedure request.
  *
  * @param ioRequest [int, out] :
  *   The JS Procedure request to execute
  *
  * @return
  *   <code>S_OK</code>   : the request has been successfully executed
  *   <code>E*</code>     : unexpected error
  */
  HRESULT ExecuteJSProcedure(CATXMQLRequestJSProcedure& ioRequest);

private:
  HRESULT _ExecuteQueries(CATOmxList<CATXMQLRequestBase>& iRequests,
    CATAsyncTaskCompletionCallBackBase& ipPlatformCompletionCallBack,
    CATBoolean isAsync);

  HRESULT _ExecuteQueries(xMQLRequest::Args& iArgs,
    CATAsyncTaskCompletionCallBackBase& ipPlatformCompletionCallBack,
    CATUnicodeString& iQueryTag,
    CATBoolean isAsync);

  void SetVVSTransactionParameters(CATVVSTransaction*  ipTransaction,
    int iStoreNumber,
    CATUnicodeString& iStoreName,
    CATUnicodeString& iReceipt);

  HRESULT ExtractFileInfos(const ArrayOfCATVVSUrlLinkDefinition iUrlDefinitions,
    const CATOmxAny& iIndexes,
    CATAsyncFileInfoArray& oFileInfos);
};
#endif
