// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIPLMSaveScope.h
// Define the CATIPLMSaveScope interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Sep 2004  Creation: Code generated by the CAA wizard  son 
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMSaveScope_H
#define CATIPLMSaveScope_H

#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMSaveScope;
#else
extern "C" const IID IID_CATIPLMSaveScope ;
#endif



class CATListValCATComponentId;
class CATComponentId;
class CATListPtrCATBaseUnknown;
class CATIPLMListConsultation;



//------------------------------------------------------------------

/**
* The scope is a the PLM components set encompassing the Save Roots list given by the save command.
* <br><b>Role</b>:
* Save Scope = the elements belonging to the TOS (but necessary to the LOG) that would be in sent to the save if they were in the LOG 
*/
class ExportedByCATPLMIntegrationInterfaces CATIPLMSaveScope: public CATBaseUnknown
{
  CATDeclareInterface;

  public:



/**
* This methods computes and gives a tools to scan the Exposed Save Scope. 
* @param  iSaveCmdRoots 
*   The list of the objects on which we want to simulate/perform the save
* @param  oScopeIterator [out, CATBaseUnknown#Release]
*   Allows to scan the plm components that would be sent to the save if they were in the LOG 
* @param iGlobalMode
*   If this parameter is set to TRUE, the method computes a GLOBAL scope, else it computes an OPTIMAL scope.
*   Default value is TRUE.
* @return 
* <br><b>Legal values</b>
*   <dt>S_OK</dt>  
*   <dd>The scope computing succeeded and the exposed scope is not empty</dd>
*   <dt>S_FALSE</dt>  
*   <dd>The scope computing succeeded but there is no element in the exposed scope</dd>
*   <dt>E_FAIL</dt>  
*   <dd>Failure situation. </dd>
*   <dt>E_INVALIDARG</dt>  
*   <dd>Invalid arguments</dd>
* <p>The situation data are not kept in memory between 2 ComputeSaveScope's calls
* <br>
*/
virtual HRESULT ComputeSaveScope (const CATListValCATComponentId & iSaveCmdRoots, CATIPLMListConsultation ** oScopeIterator, CATBoolean iGlobalMode = TRUE ) =0 ;

/**
* This methods computes and gives a tools to scan the auto-excluded component for the Save Scope.
* @param  oImpactedObjects [out]
* The list of components which sohuld be auto-excluded.
*/
virtual HRESULT GetImpactedObjectsInScope (CATListValCATComponentId & oImpactedObjects ) = 0 ;


  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

//------------------------------------------------------------------

#endif
