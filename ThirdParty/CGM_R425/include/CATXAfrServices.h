
//===================================================================
// COPYRIGHT Microsoft 2011/04/07
//===================================================================
// CATXAfrServices.cpp
// Header definition of class CATXAfrServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2011/04/07 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATXAfrServices_H
#define CATXAfrServices_H

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
//---------------------------------------------------------------- System
#include "CATListPV.h"
#include "CATUnicodeString.h"
//---------------------------------------------------------------------- System
#include "CATGetEnvValue.h"
#include "CATBaseUnknown_WR.h"
//---------------------------------------------------------------- UIVCoreTools
#include "CATSYPArray.h"
//-----------------------------------------------------------------------
class CATAfrModelView;
class CATSysSimpleHashTable;
class CATVizViewer;

/** Return TRUE if the code is build for IOS or AfrIOSSource_Simul environment variable is valuated to 1*/
ExportedByCATAfrItf CATBoolean CATAfrIsMobileSource();
/** Return TRUE if the setting multitouch is activated FALSE otherwise*/
ExportedByCATAfrItf CATBoolean CATAfrIsMultitouchActivated();

#define CATXAFR_LOG_USE_VAR(var) static void CATXAFR_LOG_MSG (const CATUnicodeString & imessage);         \
static CATBoolean CATXAFR_LOG_IS_ACTIVE(const char * iVar);                                               \
static CATBoolean CATXAfrLogVar = CATXAFR_LOG_IS_ACTIVE(#var);                                              \
 CATBoolean CATXAFR_LOG_IS_ACTIVE (const char * i_##var)                                                   \
{                                                                                                          \
  static CATBoolean s_var = CATGetEnv((char*) i_##var) != nullptr;                                                \
  return s_var;                                                                                            \
}                                                                                                          \
void CATXAFR_LOG (const CATUnicodeString & imessage)                                                       \
{                                                                                                          \
  if (CATXAfrLogVar) printf("%s \n",imessage.ConvertToChar());                                             \
}
#define  CATXAFR_LOG_MSG(iMessage)\
  CATXAFR_LOG (iMessage)    
/**
*Class which provides static method for the X-Afr infrastructure
*/
class ExportedByCATAfrItf CATXAfrServices: public CATBaseUnknown

{
CATDeclareClass;

public:

// Standard constructors and destructors
// -------------------------------------
CATXAfrServices ();
virtual ~CATXAfrServices ();



/**
*
* <br><b>Role</b>: Append an attach presenter related to a representation type.
* @param iRepresentationType : the related representation type 
* 
* @param iPresenter : the presenter to attach to the representation type.
* 
* 
*/
//static void AppendAttachedXAfrPresenter(const  CATUnicodeString & iRepresentationType,  CATBaseUnknown * ipXAfrView);
//static void RemoveAttachedXAfrPresenter(const  CATUnicodeString & iRepresentationType, CATBaseUnknown * iPresenter);
//static void ConnectXAfrRepresentation (const  CATUnicodeString & iRepresentationType,  CATBaseUnknown * ipXAfrView);
//static void RegisterXAfrRepresentation (const  CATUnicodeString & iRepresentationType,  CATBaseUnknown * ipXAfrView);
//static void UnRegisterXAfrRepresentation (const  CATUnicodeString & iRepresentationType,  CATBaseUnknown * ipXAfrView);

void RegisterXAfrView (const  CATString & iIdXafrView,  CATAfrModelView * ipXAfrView);
void UnRegisterXAfrView (const  CATString & iIdXafrView,  CATAfrModelView * ipXAfrView);
static CATXAfrServices * GetXAfrServices();
static int CleanUp(int iRc);
void ConnectXAfrView (const  CATString & iIdXafrView,  CATBaseUnknown * ipXAfrView);
void DisconnectXAfrView (const  CATString & iIdXafrView);
void DisconnectXAfrView (CATBaseUnknown * ipXAfrView);
static CATBoolean IsModeDebug();

static void Log(const CATUnicodeString & imessage);


/**
*
* Return the density from the given viewer
* @param i_pViewer
* 
* @return the density
* 
*/
static float GetDensityFromViewer(CATVizViewer * i_pViewer);
/**
  * This flag activates the touch-ready mode in CID. When activated, the size of all CID frames
  * and widgets will be multiplied by the touch factor to allow for easier touch interaction.
  *
  * Default value is @c FALSE.
  *
  * @return @c TRUE if CID is in touch-ready mode, @c FALSE else.
  *
  * @see CATVidGetTouchFactor
  */

static CATBoolean GetTouchFlag() ;

/**
* @param i_flag @c TRUE if CID is in touch-ready mode, @c FALSE else.
*
* @see GetTouchFlag
*/
static void SetTouchFlag(const CATBoolean& i_flag);

/**
  * When the touch flag is activated, the size of all CID frames 
  * and widgets will be multiplied by the touch factor.
  *
  * Default value is <tt>1.25</tt>.
  *
  * @return the current touch factor
  *
  * @see CATVidGetTouchFlag
  */
static  float GetTouchFactor() ;

/**
* @param i_factor multiplying factor for the size of widgets and frames in touch-ready mode.
*
* @see CATVidGetTouchFactor
*/
static void SetTouchFactor(float i_factor) ;
#if !defined(CNEXT_CLIENT) && defined(_AFR_MLK_TOOLS)
    static void AddRef(CATAfrModelView * i_model) ;
    static void RemoveRef(CATAfrModelView * i_model);
    static CATSYPDynArray<CATBaseUnknown_WR> references;//CATSYPArray
    //static CATSYPDynArray<CATAfrModelView *> references;//CATSYPArray
#else
    static void AddRef(CATAfrModelView * i_model){};
    static void RemoveRef(CATAfrModelView * i_model){};
#endif


private:
// Copy constructor and equal operator
// -----------------------------------
CATXAfrServices (CATXAfrServices &);
CATXAfrServices& operator=(CATXAfrServices&);

static CATXAfrServices * _pXafrServices;
static     void  CleanRefs();
static unsigned int HashXAfrConnectorValue( void* ipObject );
//class Attachement
//{
//public:
//  Attachement(const  CATUnicodeString & iRepresentationType, CATBaseUnknown * ipTarget, CATBaseUnknown * ipSource = NULL, const CATBoolean & initNotConsummed = FALSE ) : 
//    _repType(iRepresentationType), 
//      _pTargetObject(ipTarget),
//      _pSourceObject(ipSource),
//      _initNotConsummed(initNotConsummed)
//  {
//  };
//  CATUnicodeString _repType;
//  CATBaseUnknown * _pTargetObject;
//  CATBaseUnknown * _pSourceObject;
//  CATBoolean       _initNotConsummed;
//};
//static Attachement * LocateFromRepresentationType(const  CATUnicodeString & iRepresentationType, CATBaseUnknown * ipPresenter = NULL, const CATBoolean & useSourceObject = FALSE);
//
//
//
//static CATListPV _attachments;
CATSysSimpleHashTable*        _pHashTable;
static CATString XAfrModeDebug;
friend class CATAfrSYPContainerView;
};

//-----------------------------------------------------------------------

#endif

