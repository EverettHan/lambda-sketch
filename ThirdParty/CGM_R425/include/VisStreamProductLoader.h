//===================================================================
// COPYRIGHT Dassault Systemes 2021/02/05
//===================================================================
// VisStreamProductLoader.cpp
// Header definition of class VisStreamProductLoader
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/02/05 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef VisStreamProductLoader_H
#define VisStreamProductLoader_H

#include "VisuProductLoaderManager.h"
#include "CATEventSubscriber.h"
#include "CATBaseUnknown.h"

class VisuProductLoader;
class CAT3DBagRep;
class CATGraphicWindow;
class CATUnicodeString;
class CATRep;



/**
* @class VisStreamProductLoader is dedicated for the service VisStream which isn't located in the BSF.
* If you modify this API, please guarranty the compatibility!
*/
class ExportedByVisuProductLoaderManager VisStreamProductLoader : public CATBaseUnknown
{
  CATDeclareClass;
public:
  /**
  * @struct Parameters lists the different uses of @class VisNativeProductLoader
  * Only derivated structs which follow can be instanciated
  */
  struct Configuration {
    friend struct VisStreamProductLoader;
    void DownloadMaterial(bool downloadMaterial) { m_DownloadMaterial = downloadMaterial; }
  private:
    Configuration() = default;
  private:
    bool m_DownloadMaterial = false; // load the textures and apply them to the SG
  };

  struct Synchronously : public Configuration {
    Synchronously() {  }
  };

public:
  /*!
  * \Brief Builder, a product loader is linked to a Windows
  * \param iWindow: The CATGraphicWindow where the model will be inserted
  */
  static VisStreamProductLoader* CreateProductLoader(CATGraphicWindow* iWindow, const Configuration& iConfiguration = Synchronously());

  
  /*!
  * \Brief Use to give connection information to product loader
  * \param iPassportUrl: URL to passport service
  * \param iSpaceUrl:URL to space service
  * \param iTenant: Tenant of the User, if empty or OnPremise, we will be on OnPremise mode
  */
  void SetAuthentication(const CATUnicodeString& iPassportUrl, const CATUnicodeString& iSpaceUrl, const CATUnicodeString& iTenant);

  /*!
  * \Brief Register a Product
  * \param iRep:  the CAT3DBagRep containing CATCompRepIdentifierImpl with the BOID. If you want to set PGP, it must be a CAT3DFilterBagRep.
  * \warning We don't add the rep inside the scenegraph. it is blocking until all the CGR are Dowload and attach to the iRep
  */
  HRESULT RegisterProduct(CAT3DBagRep* iRep);

  /*!
  * \Brief UnRegister a Product
  * \param iRep:  the CAT3DBagRep containing CATCompRepIdentifierImpl with the BOID.
  * \warning we don't remove the rep from the scenegraph
  */
  HRESULT UnRegisterProduct(CATRep* iRep);


public: // FDT1: methods which will becom protected or disapear

  /*! DEPRECATED: Rather use the builder method
  * \Brief Constuctor, a product loader is linked to a Windows
  * \param iWindow: The CATGraphicWindow where the model will be inserted
  */
  VisStreamProductLoader(CATGraphicWindow* iWindow);

  /*!
   * \Brief Destructor
   */
  ~VisStreamProductLoader();
  
protected:
  /*!
   * \Brief Constuctor
   */
  VisStreamProductLoader() = default;

  /*!
   * \Brief Initialize after creation
   */
  HRESULT Init(CATGraphicWindow* iWindow, const Configuration& iConfiguration = Synchronously());

  /**
   * Adds a callback for a given event subscriber to the product loader and a given event.
   * <b>Role</b>:
   * This function makes the event subscriber subscribe to a given event that is published
   * by a given event publisher.
   * Whenever this event is published by this event publisher,
   * the method declared when subscribing is called, along with possible useful data.
   * @param iEventSubscriber
   *   The event subscriber, that is the object that features the
   *   <tt>iMethodToCall</tt> method called whenever <tt>iEventPublisher</tt> publishes
   *   <tt>iPublishedEvent</tt>
   * @param iPublishedEvent
   *   The event in question published by <tt>iEventPublisher</tt>.
   *   It is mainly used to catch CATBadAuthenticationNotification event
   * @param iMethodToCall
   *   The subscriber's method to call whenever <tt>iEventPublisher</tt>
   *   publishes <tt>iPublishedEvent</tt>.
   * @param iClientData
   *   Useful data to pass as an argument of <tt>iMethodToCall</tt>.
   * @return The identifier of the created callback.
   */  
  CATCallback AddCallback(CATBaseUnknown* iEventSubscriber, CATCallbackEvent  iPublishedEvent, CATSubscriberMethod  iMethodToCall, CATSubscriberData  iClientData = NULL);

private:
  VisStreamProductLoader(const VisStreamProductLoader&) = delete;
  VisStreamProductLoader& operator=(const VisStreamProductLoader&) = delete;

protected:
  VisuProductLoader* m_Impl;
};

//-----------------------------------------------------------------------

#endif
