// COPYRIGHT Dassault Systemes 2006
//===================================================================
//
// PLMPSIConfigSessionHelpers.h
// Define the PLMPSIConfigSessionHelpers 
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Apr 2006  Creation: Code generated by the CAA wizard  llv
//===================================================================

/** 
 * @level Protected
 * @usage U1
 */

#ifndef PLMPSIConfigSessionHelpers_H
#define PLMPSIConfigSessionHelpers_H

#include "PLMPSISessionInterfaces.h"

#include "CATBoolean.h"
#include "CATBaseUnknown.h"

//------------------------------------------------------------------

/**
* Class managing configuration session data.
* <b>Role</b>: This class handles itself with a singleton which is retrieved with the method @href#GetConfigSessionHelpers
* It allows to keep some session information :
* <ul>
*  <li>the current effectivity (if any)</li>
*  <li>the Configuration Status (Y/N) </li>
* </ul>
*/

class CATICfgOperationInput;
class ExportedByPLMPSISessionInterfaces PLMPSIConfigSessionHelpers
{
public:

	/**
	* Retrieves the Config Session Helpers.
	* @param opConfigSessionHelper
	*   returned session helpers.
	* <b>Do not release the returned singleton.</b>
	* @return
	*  <ul>
	* 	 <li> E_FAIL  if an error occurred </li> 
	* 	 <li> S_OK if the session helpers are returned </li>
	*  </ul>
	*/
	static HRESULT GetConfigSessionHelpers (PLMPSIConfigSessionHelpers *& opConfigSessionHelper); 


	/**
	* Sets the current input of the CATIA session for operations on configuration expressions 
	* @param ipiCfgOperationInput
	*   The input for operations on configuration expressions to be set as current.
	* @return
	*  <ul>
	* 	 <li> E_INVALIDARG  if input <tt>ipiCfgOperationInput</tt> is not supported by the session </li>
	* 	 <li> E_FAIL  if an error occurred </li> 
	* 	 <li> S_OK if the current input for operations on configuration expressions is successfully set</li>
	*  </ul>
	*/
	HRESULT SetCurrentConfigOperationInput (CATBaseUnknown *ipiCfgOperationInput);

	/**
	* Gets the current input of the CATIA session for operations on configuration expressions 
	* @param iIID 
  *   interface asked on the returned pointer
  * @param opiCfgOperationInput
	*   The current input for operations on configuration expressions.
	* @return
	*  <ul>
	* 	 <li> E_FAIL  if an error occurred </li> 
	*	 <li> S_OK if opiCfgOperationInput is valuated with valid value </li>
	*	 <li> S_FALSE if opiCfgOperationInput is valuated with NULL (no current input) </li>
	*  </ul>
	*/
	HRESULT GetCurrentConfigOperationInput (const IID& iIID, void **opiCfgOperationInput);


	/**
	* Sets the Configuration Status to specify whether or not configuration will be taken into account for 
	* upcoming authoring operations.
	* @param iWorkWithConfig
	*   Boolean to specify whether or not CATIA session will be in configured context from now on.
	* @return
	*  <ul>
	* 	 <li> E_INVALIDARG  if <tt>ipIEffectivity</tt> is not supported by the session </li>
	* 	 <li> E_FAIL  if an error occurred </li> 
	* 	 <li> S_OK	the current effectivity is set </li>
	*  </ul>
	*/
	HRESULT SetConfigStatus(CATBoolean iWorkWithConfig);

	/**
	* Get the Configuration Status to know whether or not configuration will be taken into account for 
	* upcoming authoring operations, i.e. if authoring session is configured from now on.
	* @param oWorkWithConfig
	*   Boolean to know whether or not CATIA session will be in configured context from now on.
	* @return
	*  <ul>
	* 	 <li> E_FAIL if an error occurred </li> 
	*	 <li> S_OK if configuration context is successfully retrieved.</li>
	*  </ul>
	*/

	HRESULT GetConfigStatus (CATBoolean & oWorkWithConfig);

private :

	CATBoolean _ConfigStatus;

	CATBaseUnknown * _pICurrentOperationInput;

	static PLMPSIConfigSessionHelpers _PLMPSIConfigSessionHelpers;

	/**
	* Default Constructor.
	*/	 
	PLMPSIConfigSessionHelpers();

	/**
	* Copy Constructor.
	*/
	PLMPSIConfigSessionHelpers (const PLMPSIConfigSessionHelpers &);

	/**
	* Destructor. 
	*/
	~PLMPSIConfigSessionHelpers();

};

//------------------------------------------------------------------

#endif
