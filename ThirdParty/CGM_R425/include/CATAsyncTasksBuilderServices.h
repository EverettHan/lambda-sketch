//===================================================================
// COPYRIGHT Dassault Systemes 2013/10/29
//===================================================================
// CATAsyncTasksBuilderServices.cpp
// Header definition of class CATAsyncTasksBuilderServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/10/29 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAsyncTasksBuilderServices_H
#define CATAsyncTasksBuilderServices_H

#include "CATAsyncTasksPlatform_NG.h"
#include "CATAsyncTaskID_NG.h"

#include "CATAsyncTasksUtils.h"
//-----------------------------------------------------------------------

class ExportedByCATAsyncTasksPlatform CATAsyncTasksBuilderServices
{
  
public:
  
  /**
  * Flush Async Tasks builder, meaning all elements contained in the builder
  * If at least one element is contained in the builder, appropriate number of requests will be created and executed
  *
  * /!\ if this method is called before the Builder start and new elements are added directly after,
  *     those elements will be flushed as well the already present elements when the Builder will start
  *
  * @param
  * <br/> [in] iTaskId: the id of the async tasks builder
  * @return
  * <code>S_OK</code>: the Async Tasks Builder is correctly flushed
  * <code>E_INVALIDARG</code>: the task is not a tasks builder
  * <code>E_*</code>: an error occured
  */
  HRESULT FlushAsyncTasksBuilder(const CATAsyncTaskID& iAsyncTasksBuilderID);

  /**
  * Complete the Async Tasks builder, meaning no element will no more be added
  * All requests having to be executed will be executed
  *
  * @param
  * <br/> [in] iTaskId: the id of the async tasks builder
  * @return
  * <code>S_OK</code>: the Async Tasks Builder is correctly completed
  * <code>E_INVALIDARG</code>: the task is not a tasks builder
  * <code>E_*</code>: an error occured
  */
  HRESULT CompleteAsyncTasksBuilder(const CATAsyncTaskID& iAsyncTasksBuilderID);

  /**
  * Ask to the platform if the task does exist
  * If the task exists, oAsyncTaskType indicates the task type (@see CATAsyncTasksUtils)
  *
  * @param
  * <br/> [in] iTaskId: the async task to check existence
  * <br/> [out] oAsyncTaskType: Task type if it exists
  * @return
  * <code>S_OK</code>: The Task does exist
  * <code>S_FALSE</code>: The Task does not exist
  * <code>E*</code>: an error occured
  */
  HRESULT IsTaskBuilderExisting(const CATAsyncTaskID & iTaskId, CATAsyncTask_Type & oAsyncTaskType);

protected:

  HRESULT _AddElements( const CATAsyncTaskID& iAsyncTasksBuilderID,
                        CATAsyncRequest_Type iRequestType,
                        AsyncBuilderElements iElements );

};

//-----------------------------------------------------------------------

#endif
