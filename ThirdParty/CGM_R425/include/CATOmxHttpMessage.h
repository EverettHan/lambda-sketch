//===================================================================
// COPYRIGHT Dassault Systemes 2018/05/16
//===================================================================
// CATOmxHttpMessage.cpp
// Header definition of class CATOmxHttpMessage
//===================================================================
//
// Usage notes:
//
// HTTP messages consist of requests from client to server and responses from server to client. 
// HTTP messages use the generic message format of RFC 822 for transferring entities (the payload of the message).
// Both types of message consist of a start-line, zero or more header fields (also known as "headers"), an empty line (i.e., a line with nothing preceding the CRLF) indicating the end of the header fields, and possibly a message-body.
//
// See also:
//  CATOmxHttpConstants     -> Bundle of contants which can be used to valuate headers
//  CATOmxHttpContentType   -> Bundle of well known of content-type's value
//
// Adapted from apache http: http://hc.apache.org/httpcomponents-core-ga/httpcore/apidocs/org/apache/http/HttpMessage.html
//
//===================================================================
//  2018/05/16 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATOmxHttpMessage_H
#define CATOmxHttpMessage_H

#include "CATOmxHttp.h"
#include "CATOmxSharable.h"
#include "CATOmxHttpHeader.h"
#include "CATOmxCollecManager.h"
#include "CATOmxArray.h"
#include "CATOmxOMap.h"
#include "CATOmxKeyString.h"

template<> CATOmxCollecManager& CATOmxDefaultCollecManager<CATOmxArray<CATOmxHttpHeader> >::manager();

class ExportedByCATOmxHttp CATOmxHttpMessage: public CATOmxSharable
{
public:
  virtual ~CATOmxHttpMessage();

  /*
  * Adds a header to this message. The header will be appended to the end of the list.
  */
  void AddHeader(const CATOmxHttpHeader& iHeader);

  /*
  * Adds a header to this message. The header will be appended to the end of the list.
  */
  void AddHeader(const CATOmxKeyString& iName, const CATUnicodeString& iValue);

  /*
  * Checks if a certain header is present in this message. Header values are ignored.
  */
  bool ContainsHeader(const CATOmxKeyString& iName) const;

  /*
  * Returns all the headers of this message. Headers are orderd in the sequence they will be sent over a connection.
  */
  CATOmxArray<CATOmxHttpHeader> GetAllHeaders() const;

  /*
  * Returns all the headers with a specified name of this message. Header values are ignored. Headers are orderd in the sequence they will be sent over a connection.
  */
  CATOmxArray<CATOmxHttpHeader> GetHeaders(const CATOmxKeyString& iName) const;

  /*
  * Removes all headers from this message.
  */
  void RemoveAllHeaders();

  /*
  * Removes a header from this message.
  */
  void RemoveHeader(const CATOmxHttpHeader& iHeader);

  /*
  * Removes all headers with a certain name from this message.
  */
  void RemoveHeaders(const CATOmxKeyString& iName);

private:
  CATOmxOMap<CATOmxKeyString, CATOmxArray<CATOmxHttpHeader> > _Headers;
};

#endif
