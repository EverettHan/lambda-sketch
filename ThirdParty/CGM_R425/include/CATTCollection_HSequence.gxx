
// ----------------------------------------------------------------------
// Copyright: 	Matra-Datavision 1992
// File:	CATTCollection_HSequence.gxx
// Created:	Nov, 24 1992
// Author:      Mireille MERCIEN
// ----------------------------------------------------------------------

// ----------------------------------
// Clear : Clear the Current HSequence
// ----------------------------------
void CATTCollection_HSequence::Clear()
{
   mySequence.Clear();
}

// -------------------------------------------------
// Append : Push an item  at the end of the sequence
// -------------------------------------------------
void CATTCollection_HSequence::Append(const Item& T)
{
   mySequence.Append(T);   
}

// ---------------------------------------------------
// Append : Push a Sequence at the end of the sequence
// ---------------------------------------------------
void CATTCollection_HSequence::Append(const Handle(CATTCollection_HSequence)& S)
{
  CATStandard_Integer i,l = S->Length();
  for (i = 1; i <= l; i++) mySequence.Append(S->Value(i));
}

// ---------------------------------------------------------
// Prepend : Push an element at the begining of the sequence
// ---------------------------------------------------------
void CATTCollection_HSequence::Prepend(const Item& T)
{
   mySequence.Prepend(T);   
}

// ---------------------------------------------------------
// Prepend : Push an element at the begining of the sequence
// ---------------------------------------------------------
void CATTCollection_HSequence::Prepend(const Handle(CATTCollection_HSequence)& S)
{
  CATStandard_Integer i,l = S->Length();
  for (i = 0; i < l; i++) mySequence.Prepend(S->Value(S->Length()-i));
}

// ---------------------------------------------------------
// Reverse : Reverse the order of a given sequence
// ---------------------------------------------------------
void CATTCollection_HSequence::Reverse()
{
   mySequence.Reverse();   
}

// -------------------------------------------------------------------
// InsertBefore : Insert an item before a given index in the sequence
// --------------------------------------------------------------------
void CATTCollection_HSequence::InsertBefore(const CATStandard_Integer Index, 
					 const Item& T)
{
   mySequence.InsertBefore(Index,T);   
}

// ----------------------------------------------------------------------
// InsertBefore : Insert a sequence before a specific index in a HSequence
// ----------------------------------------------------------------------
void CATTCollection_HSequence::InsertBefore(const CATStandard_Integer Index , 
					 const Handle(CATTCollection_HSequence)& S)
{   
  CATStandard_Integer i,l = S->Length();
  for (i = 1; i <= l; i++) mySequence.InsertBefore(Index+i-1,S->Value(i));
}

// -----------------------------------------------------------------
// InsertAfter : Insert an element after a given index in a sequence
// -----------------------------------------------------------------
void CATTCollection_HSequence::InsertAfter(const CATStandard_Integer Index, 
					const Item& T)
{
   mySequence.InsertAfter(Index,T);   
}

// -------------------------------------------------------------------
// InsertAfter : Insert a sequence after a given index in the sequence
// -------------------------------------------------------------------
void CATTCollection_HSequence::InsertAfter(const CATStandard_Integer Index, 
					const Handle(CATTCollection_HSequence)& S)
{
  CATStandard_Integer i,l = S->Length();
  for (i = 1; i <= l; i++) mySequence.InsertAfter(Index+i-1,S->Value(i));
}

// ----------------------------------------
// Exchange : Exchange two elements in the sequence
// ----------------------------------------
void CATTCollection_HSequence::Exchange(const CATStandard_Integer I, 
                                   const CATStandard_Integer J)
{
   mySequence.Exchange(I,J);   
}

// ---------------------------------------------
// Split : Split a sequence in two sub-sequences
// ---------------------------------------------
Handle (CATTCollection_HSequence) 
            CATTCollection_HSequence::Split(const CATStandard_Integer Index)
{
  TheSequence SS;
  mySequence.Split(Index,SS);
  Handle(CATTCollection_HSequence) NS = new CATTCollection_HSequence();
  CATStandard_Integer i,l = SS.Length();
  for (i=1; i<= l; i++) NS->Append(SS(i));
  return NS;
}

// ----------------------------------------------------------
// SetValue : Change the element of a given index in a sequence
// ----------------------------------------------------------
void CATTCollection_HSequence::SetValue(const CATStandard_Integer Index, 
                                   const Item& T)
{
  mySequence(Index) = T;   
}

// -----------------------------------------
// Value : Return the value of a given index
// -----------------------------------------
const Item& CATTCollection_HSequence::Value(const CATStandard_Integer Index) const
{
   return (mySequence(Index));   
}

// -----------------------------------------
// ChangeValue : Return the value of a given index
// -----------------------------------------
Item& CATTCollection_HSequence::ChangeValue(const CATStandard_Integer Index)
{
   return (mySequence(Index));   
}

// -------------------------------------
// Remove : Remove an item in a sequence
// -------------------------------------
void CATTCollection_HSequence::Remove(const CATStandard_Integer Index)
{
   mySequence.Remove(Index);
}

// ---------------------
// Remove a set of items
// --------------------- 
void CATTCollection_HSequence::Remove(const CATStandard_Integer From,
				   const CATStandard_Integer To)
{
   mySequence.Remove(From,To);   
}

// ---------------------------------------------------------------------
// ShallowCopy
// ---------------------------------------------------------------------
Handle(CATTCollection_HSequence) CATTCollection_HSequence::ShallowCopy() const
{
   Handle (CATTCollection_HSequence) TheCopy = new CATTCollection_HSequence();

   CATStandard_Integer i;
   for (i=1; i <= mySequence.Length(); i++) TheCopy->Append(mySequence(i));
   return TheCopy;
}

// ----------------------------------------------------------------------------
// IsSamestate
// ----------------------------------------------------------------------------
// CATStandard_Boolean CATTCollection_HSequence::IsSameState
//   (const Handle(CATTCollection_HSequence)& other) const
// {
//   Handle(CATTCollection_HSequence) Seq = 
//     Handle(CATTCollection_HSequence)::DownCast(other);
//   if (Seq->Length() != Length()) return CATStandard_False;
//   for (CATStandard_Integer I = 1; I<= Length(); I++) {
//     if ( !(Value(I) == Seq->Value(I)) ) return CATStandard_False;
//   }
//   return CATStandard_True;   
// }





	
	



