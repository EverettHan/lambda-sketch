//===================================================================
// COPYRIGHT Dassault Systemes 2022-11-09
//===================================================================
// CAT3DProjectionBagRep.cpp
// Header definition of class CAT3DProjectionBagRep
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022-11-09 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CAT3DProjectionBagRep_H
#define CAT3DProjectionBagRep_H

#include "SGInfra.h"
#include "CAT3DBagRep.h"

class CATViewpoint;

//-----------------------------------------------------------------------

class ExportedBySGInfra CAT3DProjectionBagRep : public CAT3DBagRep
{
  CATDeclareClass;

public:

  static CAT3DProjectionBagRep* CreateRep();

  // Standard constructors and destructors
  // -------------------------------------
  virtual ~CAT3DProjectionBagRep();

  // --------------------------------------------------------------
  // set and get relative position and size
  // limits [0.f-1.f]
  void SetRelativePosition(float iFromLeftRatio, float iFromTopRatio);
  void GetRelativePosition(float &oFromLeftRatio, float &oFromTopRatio);

  // must be > 0.f
  void SetRelativeScale(float iScale);
  float GetRelativeScale();
  // --------------------------------------------------------------

  void DrawShading(CATRender& ioRender, int iInside) override final;
  void DrawPath(CATRender& ioRender, int iInside, CATRepPath& ioPath) override final;

  void AddBoundingElement(const CAT3DBoundingSphere& bsphere) override final;
  void SetBoundingElement(const CAT3DBoundingSphere& bound_elt) override final;

protected:
  CAT3DProjectionBagRep();

private:
  // Copy constructor and equal operator
  // -----------------------------------
  CAT3DProjectionBagRep(CAT3DProjectionBagRep&);
  CAT3DProjectionBagRep& operator=(CAT3DProjectionBagRep&);

  void UpdatePositionMatrix(CATRender& ioRender);

  float m_fromLeftRatio = 0.5f;
  float m_fromTopRatio = 0.5f;
  float m_scaleRatio = 1.f;
};

//-----------------------------------------------------------------------

#endif
