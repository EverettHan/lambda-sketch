// COPYRIGHT Dassault Systemes 2008
//===================================================================
//
// CATIPLMValueReader.h
// Define the CATIPLMValueReader interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2008  Creation: Code generated by the CAA wizard  BAG
//===================================================================
#ifndef CATIPLMValueReader_H
#define CATIPLMValueReader_H


/**
 * @level Protected
 * @usage U3
 */



#include "CATPLMIntegrationInterfaces.h"
#include "CATBaseUnknown.h"


class CATUnicodeString;
class CATTime;
class CATBinary;
class CATOmxAny;



#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMIntegrationInterfaces IID IID_CATIPLMValueReader;
#else
extern "C" const IID IID_CATIPLMValueReader;
#endif

//------------------------------------------------------------------

/**
 * Interface that gives access to the values of the couple attribute/values of the refresh process
 * It provides a unique access to values that can be of different types.
 *
 *
 * @example
 *  Component::Method(CATIPLMValueReader* piReader)
 *  {
 *    CATIPLMValueReader::Type r_type=piReader->GetType();
 *    switch (r_type)
 *    {
 *      case CATIPLMValueReader::undefined :
 *        CATSysLogAbend(); // error
 *      case CATIPLMValueReader::integer_val :
 *        int size=0;
 *        HRESULT hr_size=piReader->GetSize(size);
 *        if(hr_size == S_OK)
 *        {
 *          HRESULT hr_multi=piReader->IsMultiValuated();
 *          if(S_OK==hr_multi)
 *          {
 *            CATListOfInt myvalues;
 *            for ( int it=1; it<=size; it++)
 *            {
 *              int tmpval=0;
 *              if(SUCCEEDED(piReader->GetIntValue(tmpval, it)))
 *                myvalues.Append(tmpval);
 *              else CATSysLogAbend(); // error
 *            }
 *            dosomework
 *          }
 *          else
 *          {
 *            int myValue;
 *            if(SUCCEEDED(piReader->GetIntValue(myValue)) )
 *              dosomework
 *            else CATSysLogAbend(); // error
 *          }
 *        }
 *        elseif (hr_size == S_FALSE)
 *        {  // the attribute is not set      }
 *        else CATSysLogAbend();// error
 *      break;
 *      case CATIPLMValueReader::string_val :
 *       ...
 *    }
 *  }
 *
 */


class ExportedByCATPLMIntegrationInterfaces CATIPLMValueReader : public CATBaseUnknown
{
  CATDeclareInterface;

  /**
   * These are the different types the CATIPLMValueReader can be.
   */

  enum Type
  {
    integer_val,
    double_val,
    string_val,
    time_val,
    binary_val,
    boolean_val,
    userdefined_val,
    undefined
  };

public:

/**
 * Returns the type of the value
 * If the value is Multivaluated (#IsMultiValuated) and #GetSize gives 0, the type returned can be undefined.
 */
  virtual Type GetType() = 0;

  /**
   * Provides the information if the value is valuated and the size of the value.
   * Here, the size is the number of values for this CATPLMValue.
   * What we call here "monovaluated" is a value of 1, "multivaluated" is the number of underlying values
   * when set by a SetValue method which is a list.
   * @return S_OK if the value is valuated
   *         S_FALSE if the value is not valuated, oSize==0 in that case.
   *         E_FAIL if a problem occured
   * @param oSize [out]
   *        If the value is multivaluated  (@see #IsMultiValuated), oSize is the number of the multivaluated values.
   *        If the value is not multivaluated, it's 1. Even for binaries.
   *        It can be from 0 to n.
   */
  virtual HRESULT GetSize(unsigned int & oSize) = 0;

  /**
   * Tells if the value is multivaluated or not.
   * If it is multivaluated, the total number of values is given by #GetSize.
   * @return S_OK if it is multivaluated
   *         S_FALSE if it not multivaluated (only one value)
   *         E_FAIL a problem occured
   */
  virtual HRESULT IsMultiValuated() = 0;


  /**
   * Gets the value of an integer.
   * @param oValue [out] the integer value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured. For example if the value is not an integer_val.
   */
  virtual HRESULT GetIntValue(int & oValue, unsigned int index = 1) = 0;

  /**
   * Gets the value of a double.
   * @param oValue [out] the double value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured. For example the value is not a double_val.
   */
  virtual HRESULT GetDoubleValue(double & oValue, unsigned int index = 1) = 0;

  /**
   * Gets the value of a string.
   * @param oValue [out] the string value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured. For example the value is not a string_val.
   */
  virtual HRESULT GetStringValue(CATUnicodeString & oValue, unsigned int index = 1) = 0;

  /**
   * Gets the value of a time.
   * @param oValue [out] the CATTime value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured. For example the value is not a time_val.
   */
  virtual HRESULT GetTimeValue(CATTime & oValue, unsigned int index = 1) = 0;

  /**
   * Gets the value of a binary.
   * @param oValue [out] the CATBinary value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_FAIL if a problem occured. For example the value is not a binary_val.
   */
  virtual HRESULT GetBinaryValue(CATBinary & oValue, unsigned int index = 1) = 0;

  /**
   * Gets the value of a boolean.
   * @param oValue [out] the boolean value
   * @param index [in] the index of the multivaluated value. Must be between 1 and the size given by #GetSize
   * @return S_OK if success
   *         E_INVALIDARG if the index is out of range
   *         E_FAIL if a problem occured. For example the value is not an boolean_val.
   */
  virtual HRESULT GetBooleanValue(CATBoolean & oValue, unsigned int index = 1) = 0;

  /**
   * To know if the value must be unset (NOT reset, but unset)
   * @ return TRUE if will be unset
   *          FALSE if must be set
   */
  virtual CATBoolean IsUnset() = 0;


  /**
  * Gets the value as a CATOmxAny (multivaluated or not)
  * @param oValue [out] the value as CATOmxAny
  * @return S_OK if success
  *         E_INVALIDARG if the index is out of range
  *         E_FAIL if a problem occured. For example the value is not an boolean_val.
  */
  virtual HRESULT GetOmxAny(CATOmxAny &oValue) = 0;

};

//------------------------------------------------------------------


#include "CATLISTP_Clean.h"
#define CATLISTP_Append
#define CATLISTP_Size
#define CATLISTP_RemoveAll
#include "CATLISTP_Declare.h"

#undef CATCOLLEC_ExportedBy
#define CATCOLLEC_ExportedBy ExportedByCATPLMIntegrationInterfaces

CATLISTP_DECLARE(CATIPLMValueReader);



#endif
