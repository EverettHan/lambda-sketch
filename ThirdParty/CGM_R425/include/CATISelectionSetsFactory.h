// COPYRIGHT Dassault Systemes 2001
//===================================================================
//
// CATISelectionSetsFactory.h
// Define the CATISelectionSetsFactory interface
//
//===================================================================
//
// Usage notes:
//   Create, find et remove Selection Sets in a PLM Representation Reference
//
//===================================================================
//
//  Oct 2001  Creation: Code generated by the CAA wizard  CLE
//===================================================================
/**
 * @CAA2Level L1
 * @CAA2Usage U3
 */

#ifndef CATISelectionSetsFactory_H
#define CATISelectionSetsFactory_H

#include "UIModelInterfaces.h"
#include "CATBaseUnknown.h"
#include "CATUnicodeString.h"
#include "CATListOfCATISelectionSet_var.h"

class CATISelectionSet;
class CATPathElement;
class CATDlgDialog;

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByUIModelInterfaces IID IID_CATISelectionSetsFactory;
#else
extern "C" const IID IID_CATISelectionSetsFactory ;
#endif

//------------------------------------------------------------------
/**
  *   The Selection Set mode.
  *   <br><b>Role:</b> The Selection Set mode is used in the @href CATISelectionSetsFactory#FindSelectionSets , 
  *   @href CATISelectionSetsFactory#ListSelectionSets , @href CATISelectionSetsFactory#FindOwningSets methods to specify if the path 
  *   of the Selection Set is a relative path in the PLM Representation Reference or a path that contains all the PLM component.
  *   @param CATSelSetModeCurrent
  *      To retrieve current PLM Representation Reference Selection Sets.
  *   @param CATSelSetModeRecursive
  *      To retrieve the Selection Set of all PLM component contained in the input path. 
*/
typedef unsigned long CATSelectionSetMode;
/**
  * @nodoc
*/
#define CATSelSetModeCurrent   (0)
/**
  * @nodoc
*/
#define CATSelSetModeRecursive (1 <<  0)
//------------------------------------------------------------------

/**
 * Interface to manage the Selection Sets in a PLM Representation Reference.
 * <br><b>Role:</b> This interface, implemented by the PLM Representation Reference, enables you to create, find and
 *                  delete Selection Set (@href CATISelectionSet ) in a PLM Representation Reference. 
 *                  <br>Several Selection Sets can be created, and one can be defined as the current one.
 *                  <br>Several Selection Sets can have the same name.
 *                  <br>A Selection Set contains elements (@href CATISelectionSetElement )
 */
class ExportedByUIModelInterfaces CATISelectionSetsFactory: public CATBaseUnknown
{
  CATDeclareInterface;

  public:
  /**
    *   Creates a new Selection Set.
    * <br><b>Role:</b> This method creates a new Selection Set.
    *   @param iName
    *      The name of Selection Set to create.
    *   @param oNewSet
    *      The created Selection Set.
    *   @return
    *      The error code of function.
    *   <ul>
    *      <li> S_OK if the Selection Set is created </li>
    *      <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT CreateSelectionSet (const CATUnicodeString& iName, 
                                      CATISelectionSet*& oNewSet) = 0 ;
  /**
    *   Retrieves the list of Selection Sets from his name.
    *   <br><b>Role:</b> Retrieves the list of Selection Sets from his name.
    *   @param iName
    *      The name of Selection Set to retrieve.
    *   @param iMode
    *      The find mode.
    *   @param oSetList
    *      The list of retrieved Selection Sets.
    *   @return
    *      The error code of function.
    *   <ul>
    *      <li> S_OK if found</li>
    *      <li> S_FALSE if no Set is found</li>
    *      <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT FindSelectionSets (const CATUnicodeString        & iName,
                                     const CATSelectionSetMode       iMode,
                                     CATListOfCATISelectionSet_var*& oSetList) = 0 ;

  /**
    *   Retrieves all Selection Sets.
    *   <br><b>Role:</b> This method lists all Selection Sets.
    *   @param iMode
    *      The list mode.
    *   @param oSetList
    *      The list of retrieved Selection Sets
    *   @return
    *      The error code of function.
    *   <ul>
    *      <li> S_OK if found</li>
    *      <li> S_FALSE if no Set is found</li>
    *      <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT ListSelectionSets (const CATSelectionSetMode       iMode,
                                     CATListOfCATISelectionSet_var*& oSetList) = 0 ;

  /**
    *   Removes a Selection Set.
    *   <br><b>Role:</b> This method removes a Selection Set and all it contents.
    *   @param ioSelectionSetToDelete
    *      The Selection Set to delete. The inout argument is set to NULL.
    *   @param oNLSErrorMessage
    *      The error message if E_FAIL
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the method succeeded</li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT DeleteSelectionSet (CATISelectionSet*& ioSelectionSetToDelete,
                                      CATUnicodeString & oNLSErrorMessage) = 0 ;

  /**
    *   Current Selection Set management.
    *   <br><b>Role:</b> To set the current Selection Set.
    *   @param iSelectionSet
    *      The current SelectionSet
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the method succeeded</li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT SetCurrent (CATISelectionSet*  iCurrentSelectionSet) = 0 ;

  /**
    *   Current Selection Set management.
    *   <br><b>Role:</b> Retrieves the current Set. The result can be NULL if the Set has been deleted.
    *   @param oCurrentSelectionSetToDelete
    *      The current Selection Set.
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the method succeeded</li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT GetCurrent (CATISelectionSet*& oCurrentSelectionSet) = 0 ;


    /**
    *   Finds all the Selection Sets that contain the searched element.
    *   <br><b>Role:</b> 
    *   If several calls to this method are needed, call first the @href #BeginFindOwningSets method 
    *   and the @href #EndFindOwningSets after so that the treatment will be optimized (data structure loaded in memory).
    *   @param iPath
    *      The path of the selected element
    *   @param iMode
    *      The find mode.
    *   @param oOwningSetsList
    *      The list of Sets to which the input element belongs
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the input element belongs to at least one Set </li>
    *        <li> S_FALSE if no Sets were found (in this case, the output list is reset to NULL) </li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT FindOwningSets (CATPathElement * iPath,
                                    const CATSelectionSetMode iMode,
                                    CATListOfCATISelectionSet_var *& oOwningSetsList) = 0;

  /**
    *   Starts a transaction with several FindOwningSets calls.
    *   <br><b>Role:</b> If several @href #FindOwningSets calls are needed, call first this method 
    *   and the @href #EndFindOwningSets after so that the treatment will be optimized (data structure loaded in memory).
    *   Do not forget to call @href #EndFindOwningSets to clean memory.
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the method succeeded</li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT BeginFindOwningSets() = 0 ;

  /**
    *   Ends a transaction with several FindOwningSets calls.
    *   <br><b>Role:</b> If several @href #FindOwningSets calls are needed, call first @href #BeginFindOwningSets
    *   method and this method after so that the treatment will be optimized (data structure loaded in memory).
    *   @return
    *      The error code of function :
    *   <ul>
    *        <li> S_OK if the method succeeded</li>
    *        <li> E_FAIL if a problem occurred </li>
    *   </ul>
    */
	virtual HRESULT EndFindOwningSets() = 0 ;

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------
};

CATDeclareHandler (CATISelectionSetsFactory, CATBaseUnknown);

//------------------------------------------------------------------

#endif
