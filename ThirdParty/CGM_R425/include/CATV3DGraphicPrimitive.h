//===================================================================
// COPYRIGHT DASSAULT SYSTEMES 2012/05/15
//===================================================================
//  2012/05/15 Creation: Code generated by jov
//===================================================================

#ifndef CATV3DGraphicPrimitive_H
#define CATV3DGraphicPrimitive_H

#include <VisuImmersive3D.h>
#include <CATV3DWidget.h>
#include <CATUnicodeString.h>
#include <CATV3DAdjustment.h>
#include <CATMathPointf.h>
#include <CATV3DManipulatorParameters.h>

class CAT4x4Matrix;
class CATSYPEvent;

/**
 * Base class for V3D graphic primitive widgets. 
 * 
 * @par Role
 * The classes inheriting @c CATV3DGraphicPrimitive are the final node of the V3D widget tree.
 *
 * @ingroup V3DGP
 */
class ExportedByVisuImmersive3D CATV3DGraphicPrimitive: public CATV3DWidget
{
  CATDeclareClass;
public:
  CATV3DGraphicPrimitive ();

  /** Adjusts the 3D position of the GP using @c CATV3DAdjustment */
  void SetAdjustment(const CATV3DAdjustment& i_adjustment);
  /** @return the @c CATV3DAdjustment of the GP */
  CATV3DAdjustment GetAdjustment()const;

  /** 
   * Enables or not the manipulation of the 3D GP
   */
  void SetUseManipulatorFlag(const CATBoolean i_useManipulatorFlag);
  /** @return the flag that indicates if the 3D GP can be manipulated*/
  CATBoolean GetUseManipulatorFlag() const;

  /** 
   * Enables or not the manipulation of the 3D GP
   */
  void SetUseMiddleMouseFlag(const CATBoolean i_useMiddleMouseFlag);
  /** @return the flag that indicates if the 3D GP can be manipulated*/
  CATBoolean GetUseMiddleMouseFlag() const;

  /** Sets the parameters of the 3D manipulator associated to this graphic primitive @see CATV3DManipulatorParameters*/
  void SetManipulatorParameters(const CATV3DManipulatorParameters& i_pConstraints);
  /** @return the parameters of the 3D manipulator associated to this graphic primitive */
  CATV3DManipulatorParameters GetManipulatorParameters() const;

  /*@}*/ 

  /** @name Propagating Events
   * The propagating events dispatched by @ref CATV3DGraphicPrimitive instances.
   */
  /**@{*/

  /**
   * Get the @c Translate event.
   *
   * The @c Translate event is dispatched on the GP when the left button is
   * pressed and the mouse is dragged.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATManipulate.
   *
   * @par EventProperties
   *   - Name: @c "Translate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DTranslationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Translate();

  /**
   * Get the @c Rotate event.
   *
   * The @c Rotate event is dispatched on the GP when the left button is
   * pressed and the mouse is dragged.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATManipulate.
   *
   * @par EventProperties
   *   - Name: @c "Rotate"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATV3DRotationEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Rotate();

  /**
   * Get the @c Entry event.
   *
   * The @c Entry event is dispatched on the GP when the mouse enters
   * over the GP.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATPreactivate.
   *
   * @par EventProperties
   *   - Name: @c "Entry"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Entry();

  /**
   * Get the @c Leave event.
   *
   * The @c Leave event is dispatched on the GP when the mouse leaves
   * the GP.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEndPreactivate.
   *
   * @par EventProperties
   *   - Name: @c "Leave"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Leave();

  /**
   * Get the @c Press event.
   *
   * The @c Press event is dispatched on the GP when the user press
   * the left button of the mouse over a GP. Note that pressing twice
   * the button may generate a @ref #DoubleClick event instead if the
   * second press is quick enough.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATActivate.
   *
   * @par EventProperties
   *   - Name: @c "Press"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Press();

  /**
   * Get the @c BeginDrag event.
   *
   * The @c BeginDrag event is dispatched on the GP when the left button is
   * pressed and the mouse starts to drag.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATBeginManipulate.
   *
   * @par EventProperties
   *   - Name: @c "BeginDrag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *BeginDrag();

  /**
   * Get the @c Drag event.
   *
   * The @c Drag event is dispatched on the GP when the left button is
   * pressed and the mouse is dragging.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATManipulate.
   *
   * @par EventProperties
   *   - Name: @c "Drag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *Drag();

  /**
   * Get the @c EndDrag event.
   *
   * The @c EndDrag event is dispatched on the GP when the left button is
   * pressed and the mouse ends the drag.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEndManipulate.
   *
   * @par EventProperties
   *   - Name: @c "EndDrag"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *EndDrag();

  /**
   * Get the @c ReleaseEvt event.
   *
   * The @c ReleaseEvt event is dispatched on the GP when the left
   * button of the mouse is released.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEndManipulate.
   *
   * @par Event Name Specificity
   * The function name is @c ReleaseEvt but the name seen by
   * introspection (i.e. returned by @ref
   * CATSYPEventDescriptor#GetName) and the debug name of the returned
   * event (i.e. returned by @ref CATSYPEvent#GetName) is @c
   * "Release".
   *
   * @par
   * This bypass was necessary since this event existed before the
   * creation of @ref CATSYPEvent events. As a consequence this was
   * not an issue when it was introduced to give it the name of an
   * existing function. Since the introspection name is used in @c
   * .sypstyle files it can't be changed easily. And the debug name
   * returned by @ref CATSYPEvent#GetName is used by @ref
   * CATSYPEventCompatHandler and can't also be changed.
   *
   * @par EventProperties
   *   - Name: @c "Release". Note that it is different than the 
   *     function name since @c Release is already a member function 
   *     of @ref CATBaseUnknown class. See above.
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *ReleaseEvt();

  /**
   * Get the @c DoubleClick event.
   *
   * The @c DoubleClick event is dispatched on the GP when the user
   * double-click with the left button of the mouse on a GP.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEdit.
   *
   * @par EventProperties
   *   - Name: @c "DoubleClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *DoubleClick();

  /**
   * Get the @c DoubleRelease event.
   *
   * The @c DoubleRelease event is dispatched on the GP when the user
   * release the left button of the mouse on a GP after a
   * double-click.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEndEdit.
   *
   * @par EventProperties
   *   - Name: @c "DoubleRelease"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *DoubleRelease();

  /**
   * Get the @c MoveOver event.
   *
   * The @c MoveOver event is dispatched on the GP when the mouse
   * pointer moves over a GP if the left mouse button is not clicked.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATMove.
   *
   * @par EventProperties
   *   - Name: @c "MoveOver"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *MoveOver();

  /**
   * Get the @c RightClick event.
   *
   * The @c RightClick event is dispatched on the GP when the right
   * mouse button is pressed over a GP.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATContext.
   *
   * @par EventProperties
   *   - Name: @c "RightClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATVidMouseEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *RightClick();

  /**
   * Get the @c EndRightClick event.
   *
   * The @c EndRightClick event is dispatched on the GP when the dialog
   * contextual menu displayed on the @ref #RightClick event is
   * closed.
   *
   * This event is issued from the @ref CATManipulator event @ref
   * CATManipulator#GetCATEndContext.
   *
   * @par EventProperties
   *   - Name: @c "EndRightClick"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *EndRightClick();

  /**
   * Get the @c MultiplePress event.
   *
   * The @c MultiplePress event is dispatched on the GP when the left
   * mouse button is kept pressed on a GP. This event is emitted every
   * 100ms by a timer.
   *
   * @par EventProperties
   *   - Name: @c "MultiplePress"
   *   - Type of propagation: @c OriginToRoot
   *   - Type of argument: @ref CATSYPEventArgs
   *
   * @return the event instance. @c AddRef has NOT been called on
   * the returned pointer.
   */
  static CATSYPEvent *MultiplePress();

  /**@}*/

protected:
  /** Constructor */
  CATV3DGraphicPrimitive (CreateV3DLetterFunc i_pCreateLetterFunc);
  /** Destrcutor */
  virtual ~CATV3DGraphicPrimitive ();

private:
  CATV3DGraphicPrimitive (CATV3DGraphicPrimitive &);
  CATV3DGraphicPrimitive& operator=(CATV3DGraphicPrimitive&);

};

#endif
