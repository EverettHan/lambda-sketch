// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATIPLMCompTransactionService.h
// Define the CATIPLMCompTransactionService interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Dec 2003  Creation: Code generated by the CAA wizard  jvm
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompTransactionService_H
#define CATIPLMCompTransactionService_H

#include "CATPLMServicesItf.h"

#include "CATPLMID.h"

// I need this one because there are no forward declaration of enum in C++ - for CATPLMEditabilityLockMode
#include "CATIPLMCompCheckEditTransaction.h"
#include "CATListOfCATUnicodeString.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompTransactionService;
#else
extern "C" const IID IID_CATIPLMCompTransactionService ;
#endif

class CATIPLMCompSaveTransaction;
class CATIPLMCompNewVersionTransaction;
class CATIPLMCompImportTransaction;
class CATIPLMCompLockUnlockTransaction;
class CATIPLMCompCloneTransaction;
class CATIPLMCompDeleteRefTransaction;
class CATIPLMCompCopyTransaction;
class CATIPLMCompWorkspaceMngtTransaction;
//class CATIPLMCompCheckEditTransaction;
class CATUnicodeString;
class CATIPLMCompRefreshTransaction;
class CATIPLMCompTransferOwnershipTransaction;
class CATIPLMCompIterationTransaction;
class CATIPLMCompWspReservationTransaction;
class CATIPLMCompForkTransaction;

//------------------------------------------------------------------

/**
 * Interface belonging to the <b>Component services</b>.
 * Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
 * 
 * When you want to modify Data inside the PDM, you want to do it under the control of a transaction of the PDM(s).
 * By calling on  the CATIPLMCompTransactionService the method CreateTransaction(...), you are able to get a CATIPLMCompSaveTransaction Object
 * CATIPLMCompSaveTransaction  manages the list of record (the table of data).
*/
class ExportedByCATPLMServicesItf CATIPLMCompTransactionService: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
  /**
  * Creates a CATIPLMSaveTransaction object to modify Data inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompSaveTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateSaveTransaction(CATUnicodeString *iTransactionName, CATIPLMCompSaveTransaction** oppTransaction,
                                        CATUnicodeString* iTransactionComment=NULL, CATPLMID* iAction=NULL, CATPLMID* iWorkspace=NULL) = 0;

  /**
  * Creates a CATIPLMSaveTransaction object to modify Data inside the PDM.
  * @param  iTransactionName
  *     The transaction name. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return CATBaseUnknown#Release
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual CATIPLMCompSaveTransaction* CreateSaveTransaction(const CATUnicodeString& iTransactionName,
    const CATUnicodeString& iTransactionComment = "", const CATPLMID& iAction = CATPLMID_Null, const CATPLMID& iWorkspace = CATPLMID_Null) = 0;

  /**
  * Creates a Transaction object to import Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompImportTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateImportTransaction(CATUnicodeString* iTransactionName, CATIPLMCompImportTransaction** oppTransaction,
                                          CATUnicodeString* iTransactionComment = NULL,CATPLMID* iAction = NULL) = 0;

  /**
  * Creates a Transaction object to import Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @return CATBaseUnknown#Release
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual CATIPLMCompImportTransaction* CreateImportTransaction(const CATUnicodeString& iTransactionName,
    const CATUnicodeString& iTransactionComment = "", const CATPLMID& iAction = CATPLMID_Null) = 0;

  /**
  * Creates a Transaction object to lock or unlock Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompLockUnlockTransaction object.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateLockUnlockTransaction(CATUnicodeString *iTransactionName, CATIPLMCompLockUnlockTransaction ** oTransaction) =0;

  /**
  * Creates a Transaction object to version Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompNewVersionTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateNewVersionTransaction(CATUnicodeString* iTransactionName, CATIPLMCompNewVersionTransaction** oTransaction,
    CATUnicodeString* iTransactionComment = NULL, CATPLMID* iAction = NULL, CATPLMID* iWorkspace = NULL) = 0;

  /**
  * Creates a Transaction object to clone Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompCloneTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateCloneTransaction(CATUnicodeString *iTransactionName, CATIPLMCompCloneTransaction ** oTransaction,
                                         CATUnicodeString* iTransactionComment=NULL,CATPLMID* iAction=NULL, CATPLMID* iWorkspace=NULL) =0;

  /**
  * Creates a Transaction object to copy Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompCopyTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateCopyTransaction(  CATUnicodeString *iTransactionName           ,
                                          CATUnicodeString* iTransactionComment        ,
                                          CATIPLMCompCopyTransaction ** oTransaction   ,
                                          CATPLMID* iAction=NULL                       ,
                                          CATPLMID* iWorkspace=NULL) =0;

  /**
  * Creates a Transaction object to Delete Reference inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompDeleteRefTransaction object.
  * @param  iTransactionComment
  *     A comment for the transaction. Used mainly in log.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateDeleteRefTransaction(CATUnicodeString *iTransactionName, CATIPLMCompDeleteRefTransaction ** oTransaction,
                                             CATUnicodeString* iTransactionComment=NULL,CATPLMID* iAction=NULL, CATPLMID* iWorkspace=NULL) =0;

  /**
  * Creates a Transaction object to Check Editabilitys of Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompCheckEditTransaction object.
  * @param  iLockMode [in]
  *     The Lock Mode of the Check Edit transaction.
  * @param  iAction
  *     Used for change management, an action can be required for some elements of the transaction.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateCheckEditTransaction(CATUnicodeString* iTransactionName, CATIPLMCompCheckEditTransaction ** oTransaction, CATPLMEditabilityLockMode iLockMode, CATPLMID* iAction=NULL) =0;

  /**
  * Type of workspace management transaction.
  */
  enum PLMWspMngtTrnsType 
  {
  /**
  * The transaction is a synchronisation from the reference.
  */
    PLMWspMngt_Synchronize = 1
  /**
  * The transaction is a delivery to the reference.
  */
   ,PLMWspMngt_Deliver     = 2
  };

  /**
  * Creates a Transaction object to synchronize or deliver Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompWorkspaceMngtTransaction object.
  * @param  iTransactionType [in]
  *     The transaction can be either a synchronization either a delivery, but not both at the same time.
  * @param  iWorkspace
  *     Used for Workspace management.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateWorkspaceMngtTransaction(CATUnicodeString* iTransactionName, CATListOfCATUnicodeString& iHeaderParams, CATIPLMCompWorkspaceMngtTransaction ** oTransaction, CATIPLMCompTransactionService::PLMWspMngtTrnsType iTransactionType, CATPLMID* iWorkspace=NULL) =0;

  /**
  * Creates a Refresh transaction to override an object from a source object.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompRefreshTransaction object.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateRefreshTransaction(CATUnicodeString* iTransactionName, CATIPLMCompRefreshTransaction ** oTransaction) =0;

  /**
  * Creates a Transfer Ownership transaction to override an object from a source object.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompTransferOwnershipTransaction object.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateTransferOwnershipTransaction(CATUnicodeString *iTransactionName, CATIPLMCompTransferOwnershipTransaction **oTransaction, CATUnicodeString* iTransactionComment=NULL, CATPLMID* iAction=NULL) =0;

  /**
  * Creates a Transaction object to lock or unlock Objects inside the PDM.
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  oTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompIterationTransaction object.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateIterationTransaction(CATUnicodeString *iTransactionName, CATIPLMCompIterationTransaction ** oTransaction) =0;

  /**
  * Creates a Transaction object to change the reservation status for any number of objects in a workspace.
  * 
  * @param  iTransactionName
  *     The transaction name. It can be NULL. This name can be used by error software to index the error stack (see CATIPLMErrorStack.h)
  * @param  opTransaction [out, CATBaseUnknown#Release]
  *     The new CATIPLMCompWspReservationTransaction object.
  * @param  iWorkspaceId
  *     The ID of the workspace in which to apply the reservation status changes.
  * @return
  *     Error code of function :
  *   <dl>
  *     <dt>S_OK</dt>
  *     <dd>create is successfully.</dd>
  *     <dt>E_FAIL </dt>
  *     <dd>A problem occurs during the creation. Get further information by using CATIPLMErrorStack</dd>
  *   </dl>
  */
  virtual HRESULT CreateWspReservationTransaction(const CATUnicodeString & iTransactionName, CATListOfCATUnicodeString& iHeaderParams, CATIPLMCompWspReservationTransaction *& opTransaction, const CATPLMID & iWorkspaceId) = 0;

  /**
   * Create a fork transaction
   */
  virtual HRESULT CreateForkTransaction(CATIPLMCompForkTransaction*& oTransaction) = 0;
};

//------------------------------------------------------------------

#endif
