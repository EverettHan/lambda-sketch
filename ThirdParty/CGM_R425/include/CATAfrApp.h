
//===================================================================
// COPYRIGHT Dassault Systemes 2013/10/30
//===================================================================
// CATAfrApp.cpp
// Header definition of class CATAfrApp
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2013/10/30 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATAfrApp_H
#define CATAfrApp_H

#include "CATAfrFoundation.h"
#include "CATBaseUnknown.h"
//---------------------------------------------------------------------- System
#include "CATString.h"
#include "CATCollec.h"
#include "CATUnicodeString.h"
//---------------------------------------------------------------- UIVCoreTools
#include "UIVCoreToolsInline.h"
//--------------------------------------------------------------- AfrInterfaces
#include "CATAfrAppEnum.h"

class l_CATAfrApp; 


//-----------------------------------------------------------------------
/**
*Class that contain informations on an app. 
*An app is retrieved either by the MyApps Server or Packaging information.
*/
class ExportedByCATAfrFoundation CATAfrApp: public CATBaseUnknown

{
CATDeclareClass;

public:
     
    
    
 // Standard constructors and destructors
// -------------------------------------
CATAfrApp ();
virtual ~CATAfrApp ();


/**
*
* <br><b>Role</b>: Returns the current app. 
Can return NULL if no app has been launched since the rich client starts 

* @return Returns the last launched app
* 
*/
static CATAfrApp * GetCurrentApp() ;

/**
*
* <br><b>Role</b>: Returns the app with its id.
* @param iApp the id of the app
* 
* @return the related app 
* 
*/

static CATAfrApp * GetApp(const CATString & iApp);


/**
*
* <br><b>Role</b>: Reload the list of apps if some changes occured in this list. For performance reason, use this call sparingly. 
* @return 
* <dl>
* <dt><code>S_OK</code> <dd>
* <dt><code>E_FAIL</code> <dd>
* </dl>
*/

static HRESULT ReloadAllApps();




/**
*
* <br><b>Role</b>: Return the name of the app
* @return the name of the app
* 
*/

CATString GetName() const;


/**
*
* <br><b>Role</b>: Return the title of the app. Can be empty essentially when the origin is different of MyApps Server.
* @return the title of the app
* 
* 
*/
CATUnicodeString GetTitle() const;


/**
*
* <br><b>Role</b>: Return the tooltip of the app
* @return the tooltip of the app
* 
* 
*/
CATUnicodeString GetTooltip() const;


/**
*
* <br><b>Role</b>: Return the brand of the app. Can be empty when the origin is different of MyApps Server.
* @return the brand of the app
* 
*/
CATString GetBrand() const ;


/**
*
* <br><b>Role</b>: Return the quadrant of the app
* @return the quadrant of the app
* 
*/
CATAfrAppEnum::Quadrant GetQuadrant() const ;


/**
*
* <br><b>Role</b>: Returns the type of the app
* @return the type of the app
* 
*/
const CATAfrAppEnum::Type & GetType() const;

/**
*
* <br><b>Role</b>: Return the launch infos url of the app (if the app is a Web app)
* @return the launch infos of the app
* 
* 
*/
CATUnicodeString GetLaunchInfos() const;
/**
*
* <br><b>Role</b>: Returns the type of section of the app

* @return the type of section of the app
* 
*/
const CATAfrAppEnum::TypeSection & GetSection() const;


/**
*
* <br><b>Role</b>: Returns the origin of the app
* @return the origin of the app
* 
*/
const CATAfrAppEnum::Origin & GetOrigin() const;


/**
*
* <br><b>Role</b>: Returns the list of workbenches related with this app. Can be empty (Web app ?).
* @return the list of workbenches in this app
* 
*/

CATListOfCATString GetListOfWorkbench() const;

/**
*
* <br><b>Role</b>: Return the current workbench if the app is Native. In case of Multi workbenches, returns the last started workbench.
* 
* @return the current workbench if 
* 
*/
CATString GetCurrentWorkbench() const;


/**
*
* <br><b>Role</b>: Sets the current workbench if the app is Native. The id should be in the list of GetListOfWorkbench
* @param i_id the id of the new current workbench
* 
*/

void SetCurrentWorkbench(const CATString & i_id) ;

/**
* @return the internal component l_CATAfrApp.
*/
INLINE l_CATAfrApp & GetLetter() const;







private:
// Copy constructor and equal operator
// -----------------------------------
CATAfrApp (CATAfrApp &);
CATAfrApp& operator=(CATAfrApp&);


l_CATAfrApp * _letter;

friend class CATAfrAppsSAXParser;
};

INLINE l_CATAfrApp & CATAfrApp::GetLetter() const
{
  return *_letter;
}

//-----------------------------------------------------------------------

#endif

