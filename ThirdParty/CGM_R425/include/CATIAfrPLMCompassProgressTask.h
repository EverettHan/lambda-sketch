//===================================================================
// COPYRIGHT Microsoft 2012/09/12
//===================================================================
// CATIAfrPLMCompassProgressTask.cpp
// Header definition of class CATIAfrPLMCompassProgressTask
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2012/09/12 Creation: Code generated by the 3DS wizard
//===================================================================
#ifndef CATIAfrPLMCompassProgressTask_H
#define CATIAfrPLMCompassProgressTask_H

#include "CATAfrItf.h"
#include "CATBaseUnknown.h"
//---------------------------------------------------------------------- System
#include "CATUnicodeString.h"
#include "CATCommand.h"

extern ExportedByCATAfrItf  IID IID_CATIAfrPLMCompassProgressTask ;


class ExportedByCATAfrItf CATIAfrPLMCompassProgressTask: public CATBaseUnknown
{
CATDeclareInterface;

public:






  /**
  *
  * <br><b>Role</b>: Set the comment text display near the compass during the progress task
  * @param iCommentText
  * 
  * 
  */
  virtual void SetCommentText(const CATUnicodeString & iCommentText) = 0;



  /**
  *
  * <br><b>Role</b>: Get the comment text display near the compass during the progress task
  * 
  * @return the comment text display near the compass during the progress task
  * 
  */
  virtual const CATUnicodeString & GetCommentText() const = 0;


  
/**
*
* <br><b>Role</b>: Get the loading flag.
* @return FALSE, the loading has not started, TRUE, otherwise
* 
*/
virtual const CATBoolean & GetLoadingFlag() const = 0;

  
/**
*
* <br><b>Role</b>: Set the loading flag, starts the loading
* @param i_loadingFlag, FALSE, the loading should stop, TRUE, the loading should start
* 
* 
*/
virtual void SetLoadingFlag(const CATBoolean & i_loadingFlag) = 0;


  /**
  * Restricted use for InfiniteProgressTask.
  * Adds a callback when the ^rpgress task is cancelled by the user
  *
  * N.B : So as to avoid problems using the interface as data member in the scope 
  * of the method, you have to give as iUsefulData (the second parameter) this pointer casted.
  * ex : ... ->AddCancelProgressTaskCB( (CATCommandMethod)&MyClass::MyMethodCalledOnCB.., 
  (CATCommandClientData*)this) = 0 ;
  *
  *
  * ex : 
  * MyClass * pMyClassptr = (MyClass *) iUsefulData
  * if (pMyClassptr)
  * { 

  *    // Finally , I can now do my treatment by using the class pointer.
  *
  * @param iMethodToExecute
  *   The method to execute 
  * @param iUsefulData
  *   Data to pass to <tt>iMethodToExecute</tt> and that can be useful
  *   to this method
  * @return
  *   The added callback
  */
  virtual CATCallback AddCancelProgressTaskCB(CATCommandMethod iMethodToExecute, CATCommandClientData iUsefulData) = 0;

};

//-----------------------------------------------------------------------
CATDeclareHandler( CATIAfrPLMCompassProgressTask, CATBaseUnknown );

#endif
