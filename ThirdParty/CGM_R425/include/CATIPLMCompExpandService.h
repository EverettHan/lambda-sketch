// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMCompExpandService.h
// Define the CATIPLMCompExpandService interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  May 2007  Creation: Code generated by the CAA wizard  jvm
//===================================================================
#ifndef CATIPLMCompExpandService_H
#define CATIPLMCompExpandService_H

#include "CATPLMServicesItf.h"
#include "CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompExpandService;
#else
extern "C" const IID IID_CATIPLMCompExpandService ;
#endif

/**
 * @level Protected
 * @usage U3
 */

class CATIPLMQueryFilter;
class CATIPLMExpandResultHandler;
class CATAdpExpandSpecification;
/**
* Interface to Expand. Interface belonging to the Component services.<br>
* To retrieve a valid pointer on this interface, use the static method 
* @href CATPLMComponentServices#GetExpandService .<br>
*
* This Expand PLMAdapter protocol is an pseudo event-driven push model for processing data with callback mechanism. 
* It differs from Statement Service because instead of using a callback mechanism, The Statement pattern returns events as requested by the application. 
* Each call Next() done by application returns Element of message to read. 
*/
class ExportedByCATPLMServicesItf CATIPLMCompExpandService: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /** 
    * Creates an Expand Filter 
    * @param oFilter [out, CATBaseUnknown#Release]
    *    a CATIPLMQueryFilter interface provides access to the specific filter
    *
    * @return
    *    Error code of function :
    *   <dl>
    *     <dt>S_OK</dt>
    *     <dd>Creation of Filter is successfully.</dd>
    *     <dt>E_FAIL </dt>
    *   </dl>
    */
    virtual HRESULT CreateExpandFilter (CATIPLMQueryFilter ** oFilter) = 0;

    /**
    * Execute an Expand.
    * The Expand PLMAdapter protocol is an pseudo event-driven push model for processing data with callback mechanism. 
    * You have to implement CATIPLMExpandResultHandler interface. @href CATIPLMExpandResultHandler.
    * @param iFilter
    *    a CATIPLMQueryFilter interface specifying the request . 
    * @param iFilter
    *    a CATIPLMExpandResultHandler interface processing the result. 
    * @param iopExpandParameters
    *    this object can contain usefull parameters.
    *    for example, if you do an expand using the plm index, this object can contain
    *    the time of the last build of the plm index
    * @return
    *    Error code of function :
    *   <dl>
    *     <dt>S_OK</dt>
    *     <dd>Expand is successfully.</dd>
    *     <dt>E_FAIL </dt>
    *     <dd>A problem occurs during the query. get further information by using CATIPLMErrorStack</dd>
    *   </dl>
    */
    virtual HRESULT Expand( CATIPLMQueryFilter * iFilter                        ,
                            CATIPLMExpandResultHandler * iExpandHandler) = 0; 

    /**
    * Creates an Expand Filter.
    */
    virtual HRESULT CreateExpandFilterFromSpecification(const CATAdpExpandSpecification & iSpec, CATIPLMQueryFilter *& oFilter) = 0;

};

#endif
