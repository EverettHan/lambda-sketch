// COPYRIGHT Dassault Systemes 2003
//===================================================================
//
// CATSamOctree.h
// Header definition of CATSamOctree
//
//===================================================================
//
// Usage notes : virtual base class for octree with a maximum
//               number of entities per node in the tree.
//
//               Note that the octree IS NOT the owner of the
//               entities and that whenever an operation on it
//               fails, it is freed ( ::Reset () ) so be sure
//               to keep a pointer to the entities to avoid
//               memory leaks.
//
//===================================================================
//
//  Feb 2003  Creation: Code generated by the CAA wizard  jup
//===================================================================
#ifndef CATSamOctree_H
#define CATSamOctree_H

#include "CATELFMathKernel.h"

// OS
#include "string.h"

// System
#include "CATBoolean.h"
#include "CATErrorDef.h"

// SpecialAPI
#include "CATDataType.h"

// Mathematics
#include "CATMathLimits.h"

// CATELFMathKernel
class CATSamOctant;
class CATSamOctinfo;
//class CATListPtrCAT3DRep;

// VisualizationBase
class CAT3DBagRep;

class ExportedByCATELFMathKernel CATSamOctree
{

  friend class CATSamOctant;

public :

  CATSamOctree ();
  virtual ~CATSamOctree ();

  HRESULT Build ( const void * const ipEntities, const CATULONG32 iNbEntities, const CATULONG32 iMaxNbEntities,
                  const CATBoolean iaFlags[] = NULL, const double iMinDiag = 1.e-12, const CATULONG32 iMaxNbLevels = 0xFFFFFFFFU );
  void Reset ();

  inline const void * GetEntities () const;
  inline const CATBoolean * GetFlags () const;
  inline CATULONG32 GetNbEntities () const;
  CATULONG32 GetNbValidEntities () const;
  inline CATULONG32 GetMaxNbEntities () const;
  
  inline const CATSamOctant * GetRoot () const;
  inline double GetMinDiag () const;
  inline CATULONG32 GetNbLevels () const;
  inline CATULONG32 GetMaxNbLevels () const;

  inline void GetSizes ( double & oXsize, double & oYsize, double & oZsize ) const;
  void GetCenter ( double & oXcenter, double & oYcenter, double & oZcenter ) const;
  void GetBoundingBox ( double & oXmin, double & oYmin, double & oZmin,
                        double & oXmax, double & oYmax, double & oZmax ) const;

  /*HRESULT GetOctreeRep ( CAT3DBagRep *& opOctreeRep,
                         CATListPtrCAT3DRep ** oppLeafPtReps = NULL,
                         CATListPtrCAT3DRep ** oppLeafBBReps = NULL,
                         CATListPtrCAT3DRep *** opapLevelReps = NULL );*/

protected :

  CATULONG32 GetLevelMaxNbOctants ( const CATULONG32 iLevel ) const;
  CATULONG32 GetTreeMaxNbOctants ( const CATULONG32 iNbLevels ) const;

private :

  double             _Xsize,
                     _Ysize,
                     _Zsize,
                     _MinDiag;
  CATSamOctant *     _Root;
  const void *       _Entities;      //"void *" to allow multiple kinds of storage
  const CATBoolean * _Flags;
  CATULONG32         _NbEntities,
                     _MaxNbEntities,
                     _NbLevels,
                     _MaxNbLevels;

  void InitLimits ();
  HRESULT InitRootAndSizes ();

  virtual HRESULT CreateOctant ( CATSamOctant *& opOctant ) const;
  virtual HRESULT GetEntityPoint ( CATSamOctinfo & iEntityInfo ) const = 0;

  CATSamOctree ( const CATSamOctree & iOctree );
  CATSamOctree & operator= ( const CATSamOctree & iOctree );

};

inline const void * CATSamOctree::GetEntities () const
{
  return _Entities;
}

inline const CATBoolean * CATSamOctree::GetFlags () const
{
  return _Flags;
}

inline CATULONG32 CATSamOctree::GetNbEntities () const
{
  return _NbEntities;
}

inline CATULONG32 CATSamOctree::GetMaxNbEntities () const
{
  return _MaxNbEntities;
}

inline const CATSamOctant * CATSamOctree::GetRoot () const
{
  return ( (const CATSamOctant *) _Root );
}

inline double CATSamOctree::GetMinDiag () const
{
  return _MinDiag;
}

inline CATULONG32 CATSamOctree::GetNbLevels () const
{
  return _NbLevels;
}

inline CATULONG32 CATSamOctree::GetMaxNbLevels () const
{
  return _MaxNbLevels;
}

inline void CATSamOctree::GetSizes ( double & oXsize, double & oYsize, double & oZsize ) const
{
  oXsize = _Xsize; oYsize = _Ysize; oZsize = _Zsize;
}

#endif
