// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMCompImportRecordWrite.h
// Define the CATIPLMCompImportRecordWrite interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//  Mai 2007  Creation: Code generated by the CAA wizard  tbf
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMCompImportRecordWrite_H
#define CATIPLMCompImportRecordWrite_H

#include "CATPLMServicesItf.h"
#include "CATIPLMCompRecordWrite.h"

#include "CATIAV5Level.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMCompImportRecordWrite;
#else
extern "C" const IID IID_CATIPLMCompImportRecordWrite;
#endif

//------------------------------------------------------------------

class CATPLMID;
class CATVVSUrl;
class CATPLMStreamDescriptor;
class CATPLMRepoPrivilege;
class CATPLMCEStamp;
class CATPLMSDId;
class CATPLMType;

/**
* Used during Import.
*/
typedef enum {
  /**
  * The object will be flagged as deleted.
  */
  Deleted,
  /**
  * The object will be flagged as created.
  */
  Created,
  /**
  * The object will be flagged as updated.
  */
  Updated,
  /**
  * The object will be flagged as updated.
  * No automatic remove of Stream / SemanticRelation
  */
  UpdatedAttributeOnly
} TransactionType;

/**
* The Preservation mode of extension.
* To use for Updated and UpdatedAttributeOnly import mode.
*/
typedef enum {
  /**
  * Default mode.
  * All extensions will be deleted before importing the object with new definition.
  */
  None = 0,
  /**
  * Preserve customer extensions.
  * Customer extension will be updated with new values found in the message. No deletion is performed on them.
  * DS Extension will be either deleted if not found in the recordWrite or only updated if an attribute is given (no deletion in this case).
  */
  CustomerOnly = 1,
  /**
  * Preserve all extensions.
  * Extension will be updated with new values found in the message. No deletion is performed on any extension.
  */
  All = 2
} PLMExtensionPreservationMode;

/**
 * Preservation mode of stream descriptors
 * By default all streams descriptors (SD) are replaced by the ones given through AddStream.
 */
enum PLMStreamDescriptorPreservationMode {
  /**
   * Rewrite (default mode)
   * All sds are replaced by the ones given through AddStream.
   */
  Rewrite = 0,
  /**
   * AddOrOverwrite
   * The existing SDs are kept and may be updated if added through AddStream
   * New SDs added through AddStream are added to the component.
   */
   AddOrOverWrite
};

// WARNING:
// If you want to KEEP existing SR(s), existing stream(s) and existing extension(s), you must use:
// - UpdatedAttributeOnly on Import method.
// - All on PreserveExtensionMode method (default mode is None for this method and it is NOT what is expected for this scenario).

// WARNING:
// If you want to KEEP existing SR(s), existing stream(s) and DELETE existing extension(s), you must use:
// - UpdatedAttributeOnly on Import method.
// - None on PreserveExtensionMode method (default mode is None for this method and it is what is expected for this scenario).

/**
* Interface belonging to the <b>Component services</b>.
* Using this level of abstraction you manipulate only Componet Id without knowing the PDM it belongs to.<br>
*
* Provides methods in order to Create/Delete/Replace or Update current object.
* This operation can be done under the control of a transaction of the PDM(s).
* Update/Create/Delete or Replace operations are inserted in it.
*
*/
class ExportedByCATPLMServicesItf CATIPLMCompImportRecordWrite : public CATIPLMCompRecordWrite
{
  CATDeclareInterface;

public:
  /**
  * Set the RepoPrivilege of this Record.
  * <b>Note :</b> Only used with ImportObject - SetRepoPrivilege is taken into account by server only at "import create" step - At "import update" step, please use ChgRepoObject
  * @param  iRepoPrivilege
  *    The RepoPrivilege of the object to modify.
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT SetRepoPrivilege(const CATPLMRepoPrivilege& iRepoPrivilege) = 0;

  /**
  * Only retrieve specific information on object.
  * <b>Note :</b> Use instead of ImportObjet / DetachObject / ChgRepoObject .
  *
  * @param  iInfoToRetrieve
  *    The informations to retrieve.
  *    Values :
  *        1 - URL
  *        2 - CEStamp
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT RequestObject(int iUrls) = 0;

  /**
  * Deletes the object from import tables.
  * <b>Note :</b> Use instead of ImportObjet / ChgRepoObject / RequestObject.
  *
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT DetachObject() = 0;

  /**
  * Modify the RepoPrivilege of this Record.
  * <b>Note :</b> SetRepoPrivilege is taken into account by server only at "import create" step - At "import update" step, please use ChgRepoObject
  * @param  iRepoPrivilege
  *    The RepoPrivilege of the object to modify.
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT ChgRepoObject(const CATPLMRepoPrivilege& iRepoPrivilege) = 0;

  /**
  * Create the object already identified.
  * <b>Note :</b> Use instead of DetachObject / ChgRepoObject / RequestObject.
  *
  * WARNING:
  * If creation of minor version of current RecordWrite is authorized (<Property Name="NewMinorRevisionAvailability" Value="Yes"/>) and if object inherits from PLMReference, please use CATIPLMCompDeleteRefTransaction.
  * Don't use current method CATIPLMCompImportRecordWrite::ImportObject(CATIPLMCompImportRecordWrite::Deleted).
  *
  * @param  iHint
  *    The TransactionType of the object to modify.
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT ImportObject(TransactionType iHint) = 0;

  /**
  * Add a stream to the record.
  * <b>Note :</b> Only used with ImportObject.
  *
  * @param  iStreamDesc
  *   The stream description to add.
  * @param  iVVSUrl
  *   The URL associated to the stream.
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>A problem occurs during the operation.</dd>
  *   </dl>
  */
  virtual HRESULT AddStream(const CATPLMStreamDescriptor& iStreamDesc, const CATVVSUrl& iVVSUrl) = 0;

  /**
  * Sets the behavior for stream descriptors given through AddStream.
  * <b>Note :</b> Default mode is Rewrite (replace all existing sds).
  * <b>Note :</b> Should be called before AddStream.
  * <b>Note :</b> Only used with ImportObject.
  *
  * @param  iSDMode
  *   The mode to use.
  * @return
  *   <dl>
  *     <dt>S_OK</dt><dd>Success.</dd>
  *     <dt>E_FAIL </dt><dd>AddStream had been previously called</dd>
  *   </dl>
  */
  virtual HRESULT SetSDPreservationMode(const PLMStreamDescriptorPreservationMode iSDPreservationMode) = 0;
  /**
  * Tell the record write to preserve some extension during Updated and UpdatedAttributeOnly mode.
  *
  * @param  iExtToPreserve
  *   The mode of preservation of extensions. Default is None.
  */
  virtual HRESULT PreserveExtensionMode(PLMExtensionPreservationMode iEPMode = None) = 0;

};

//------------------------------------------------------------------

#endif
