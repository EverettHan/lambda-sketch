// COPYRIGHT Dassault Systemes 2004
//===================================================================
//
// CATIVOFactory.h
// Defines the CATIVOFactory interface.
//
//===================================================================
//  Sep 2004  Creation: Code generated by the CAA wizard  dem
//===================================================================

#ifndef CATIVOFactory_H
#define CATIVOFactory_H

/**
 * @level Private
 * @usage U5
 */

#include "CATOmbLnkVO.h"
#include "CATBaseUnknown.h"

class CATUnicodeString;
class CATOmbVOUpdateFlavour;

#include "CATLISTP_CATBaseUnknown.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATOmbLnkVO IID IID_CATIVOFactory;
#else
extern "C" const IID IID_CATIVOFactory ;
#endif

//------------------------------------------------------------------

/**
 * <p>
 * Interface for factories of Virtual Objects.
 * <b>Role:</b> This interface enables to retrieve or create a VO from a list of <tt>CATBaseUnknown</tt> and 
 * an update behavior.
 * <br>Reciprocally, it can retrieve the list of <tt>CATBaseUnknown</tt> and the update behavior of a VO.
 * <br>All <tt>CATBaseUnknown</tt> of these lists have to implement the <tt>CATILinkableObject</tt> interface.
 * <br>There is one factory per late type of VO.
 * @see CATIVO
 */

class ExportedByCATOmbLnkVO CATIVOFactory: public CATBaseUnknown
{
  CATDeclareInterface;
  
public:
  
    /**
     * Retrieves or creates a VO.
		 * <br><b>Role:</b>The factory has to manage the unicity of VO: for a given list of <tt>CATBaseUnknon</tt>
		 * and a given update behavior, there should be only one existing VO.
     *
     * @param iList
     *    The list of instances (simple objects) of which the VO is made.
     * @param iFlavour
     *    The update behavior of the VO.
		 *    <br><b>Legal values</b>: the update flavour <tt>NA</tt> is not supported.
     * @param oVO
     *    The returned VO.
     * @return
		 * <dl>  
     * <dt> E_FAIL if the VO can't be built.
		 * <dt> S_OK else.
		 * </dl>
		 * @see CATOmbVOUpdateFlavour 
     */
  
  virtual HRESULT GetVOForList(const CATLISTP(CATBaseUnknown)& iList, const CATOmbVOUpdateFlavour& iFlavour, CATBaseUnknown*&  oVO) const =0;
  
    /**
     * Retrieves the list of instances and the update behavior of a VO.
		 * <br><b>Role:</b> For a given VO, there should be only one list of <tt>CATBaseUnknown</tt> and one corresponding
		 * update behavior during the whole life cycle of the VO.
     *       
     * @param iVO
     *    The VO.
     * @param oList
     *    The retrieved list of <tt>CATBaseUnknown</tt> of which the VO is made. 
     * @param oFlavour
     *    The retrieved update behavior of the VO.
     * @return
		 * <dl>
     * <dt> E_FAIL if the VO can't be decomposed.
		 * <dt> S_OK else.
     * </dl>
     * @see CATOmbVOUpdateFlavour 
     */

  virtual HRESULT GetListForVO(CATBaseUnknown* iVO, CATLISTP(CATBaseUnknown)& oList,CATOmbVOUpdateFlavour& oFlavour) const =0;
  
    /**
     * Retrieves the name of the factory.
     *            
     * @param oId
     *    The name of the factory which is its late type.
     * @return
     * <dl>
     * <dt> E_FAIL if internal error.
		 * <dt> S_OK else.
     * </dl>
     */

  virtual HRESULT GetName(CATUnicodeString& oId) const =0;

      /**
     * Retrieves or creates a new VO. Check if the given list is a valid one.
		 * <br><b>Role:</b>The factory has to manage the unicity of VO: for a given list of <tt>CATBaseUnknon</tt>
		 * and a given update behavior, there should be only one existing VO.
     *
     * @param iList
     *    The list of instances (simple objects) of which the VO is made.
     * @param iFlavour
     *    The update behavior of the VO.
		 *    <br><b>Legal values</b>: the update flavour <tt>NA</tt> is not supported.
     * @param oVO
     *    The returned VO.
     * @return
		 * <dl>  
     * <dt> E_FAIL if the VO can't be built.
		 * <dt> S_OK else.
		 * </dl>
		 * @see CATOmbVOUpdateFlavour 
     */


       virtual HRESULT CreateVOForList (const CATLISTP(CATBaseUnknown) &iList,
                              const CATOmbVOUpdateFlavour    &iFlavour,
                              CATBaseUnknown                *&oVO )  =0;

  
};

//------------------------------------------------------------------

#endif


