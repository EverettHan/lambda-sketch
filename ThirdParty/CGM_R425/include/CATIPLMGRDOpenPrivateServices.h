//===================================================================
// COPYRIGHT [!output company] 2010/01/13
//===================================================================
// CATIPLMGRDOpenPrivateServices.cpp
// Header definition of class CATIPLMGRDOpenPrivateServices
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2010/01/13 Creation: Code generated by the 3DS wizard
//===================================================================
/**
* @level Private
* @usage U1
*/


#ifndef CATIPLMGRDOpenPrivateServices_H
#define CATIPLMGRDOpenPrivateServices_H

#include "CATBaseUnknown.h"
#include "CATPLMServicesItf.h"
#include "CATOmxSR.h"
#include "CATIOmyTransactionsManager.h"

extern ExportedByCATPLMServicesItf  IID IID_CATIPLMGRDOpenPrivateServices ;


class ExportedByCATPLMServicesItf CATIPLMGRDOpenPrivateServices: public CATBaseUnknown
{
CATDeclareInterface;

public:

 /**
   * Inits the next merge, then do the merge
   * @param [in] iTransManager, the transaction manager which implements what to do with the local save transaction
   * @return S_OK if the initialization succeeded
   *         E_FAIL if it failed.
   */
  virtual HRESULT PrepareOpenTransactions(const CATOmxSR<CATIOmyTransactionsManager> &iTransManager) =0;

  /**
  *
  * As the provider is static, we must explicitely call the release. This is done by RAII in GRD.
  *
  */
  virtual HRESULT ReleaseTransactionsManager() = 0;
  
};
CATDeclareHandler(CATIPLMGRDOpenPrivateServices,CATBaseUnknown);
//-----------------------------------------------------------------------
#endif
