// COPYRIGHT Dassault Systemes 2007
//===================================================================
//
// CATIPLMImportRecordWriteSet.h
// Define the CATIPLMImportRecordWriteSet interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Mai 2007  Creation: Code generated by the CAA wizard  tbf
//===================================================================
/**
* @level Protected
* @usage U3
*/
#ifndef CATIPLMImportRecordWriteSet_H
#define CATIPLMImportRecordWriteSet_H

#include "CATPLMServicesItf.h"
#include "CATIPLMRecordWriteSet.h"
#include "CATIPLMCompImportRecordWrite.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByCATPLMServicesItf IID IID_CATIPLMImportRecordWriteSet;
#else
extern "C" const IID IID_CATIPLMImportRecordWriteSet ;
#endif

//------------------------------------------------------------------

class CATPLMID;
class CATIPLMCompImportRecordWrite;

/**
* CATIPLMImportRecordWriteSet  manages the list of record (the table of data).
* The save message can be seen as a set of Record. <br>

* The <code>Next(..)</code> method is used to move to the next record of the RecordSet, making the next record become the current record.
* you will perform all your Updates/Creations/Deletions in the current record.
* When you will be finished, you will close Commit() on CATIPLMImportTransaction.
*/
class ExportedByCATPLMServicesItf CATIPLMImportRecordWriteSet: public CATIPLMRecordWriteSet
{
	CATDeclareInterface;

public:
	/**
	* Creates the next RecordWrite corresponding to the given CATPlmID, making this record become the current record.
	*	@param  iId
	*			The CATPlmID of the object to modify.
	* @param pWrite [out, CATBaseUnknown#Release]
	*         next record
	* @return
	*   Error code of function :
	*   <dl>
	*     <dt>S_OK</dt>
	*     <dd>successfully</dd>
	*     <dt>E_FAIL </dt>
	*     <dd>A problem occurs during the operation. get further information by using CATIImmErrorStack</dd>
	*   </dl>
	*/
	virtual HRESULT Next (const CATPLMID & iId, CATIPLMCompImportRecordWrite **pWrite) = 0;

	/**
  * @nodoc
	*/
  virtual HRESULT Next (const CATPLMID & iId, CATIPLMCompImportRecordWrite **pWrite, int iUrls) = 0;
};

//------------------------------------------------------------------

#endif
