<?xml version='1.0' encoding='UTF-8' ?>
<DSxDevCodeGen><Content ModuleName = "DI0PANV2"><ExportData Inheritable = "false" LightSimulationOnly = "false" Name = "CATDlgLabel" Version = "1.0">
      <Behavior Model = "Label"/>
      <Toolbox Category = "DS Dialog Component" DisplayName = "CATDlgLabel" IconName = "IDDTbxLabel">
        <Description><![CDATA[
Class to add an information text to a control.
Role: Adds an information text to a control. The label is dedicated to add an information text or an image to controls and to other objects as well. The text can be parameterized with data coming from the application. Some controls, such as a push button, a radio button, or a check button, and frames, have a text companion you can set using its Title resource. On the opposite, a combo or a spinner doesn't display its title. You can then use labels to inform the end user of what the combo or spinner is intended to do, or which variable it can set. The labels in the figure beside are associted with a combo (Form Name), and editors. The other texts are either frame titles, push button titles, or a bitmap combo line mixing a bitmap and the text "User". 
]]></Description>
      </Toolbox>
      <MetaModel>
        <Properties>
          <Justification Category = "Style" Default = "Left" Description = "Justification of the text." Mergeable = "true" Type = "DLGJustification"/>
          <Framed Category = "Style" Default = "false" Description = "Sets whether the label text is framed." Mergeable = "true" Type = "bool"/>
          <Magnitude Category = "General" Default = "None" Description = "Sets the magnitude to be used for the value displayed" Mergeable = "true" Type = "CATDlgMagnitude"/>
          <Precision Category = "General" Default = "-1" Description = "Sets the precision to be used for the value displayed" Mergeable = "true" Type = "int"/>
          <UseDecimalPrecision Category = "General" Default = "false" Description = "TRUE if the precision gives the number of digits to appear after the decimal point character, FALSE if the precision gives the number of significative digits" Mergeable = "true" Type = "bool"/>
          <Unit Category = "General" Default = "None" Description = "Sets the unit to be used for the value displayed" Mergeable = "true" Type = "CATDlgUnit"/>
          <Enabled Category = "General" Default = "true" Description = "Sets whether the widget is enabled." Mergeable = "true" Type = "bool"/>
          <Visible Category = "General" Default = "true" Description = "Sets whether the widget is visible." Mergeable = "true" Type = "bool"/>
          <Title Category = "Text Resources" Default = "" Description = "Title or text content of the widget." Mergeable = "true" Type = "string"/>
          <Accelerator Category = "Text Resources" Default = "" Description = "The accelerator of the dialog object as a CATUnicodeString instance." Mergeable = "true" Type = "string"/>
          <Help Category = "Text Resources" Default = "" Description = "The help message displayed in the message area of the status bar." Mergeable = "true" Type = "string"/>
          <ShortHelp Category = "Text Resources" Default = "" Description = "The short help message (or tooltip) of the dialog object." Mergeable = "true" Type = "string"/>
          <LongHelp Category = "Text Resources" Default = "" Description = "The message is displayed in a box when the What's This command is used." Mergeable = "true" Type = "string"/>
          <IconNormal Category = "Icons" Default = "" Description = "The name of the icon in its default state" Mergeable = "true" Type = "DLGIcon"/>
          <IconSelected Category = "Icons" Default = "" Description = "The name of the icon when the dialog object is selected" Mergeable = "true" Type = "DLGIcon"/>
          <IconFocussed Category = "Icons" Default = "" Description = "The name of the icon when the dialog object is on focus" Mergeable = "true" Type = "DLGIcon"/>
        </Properties>
        <Callbacks>
          <DragCancel Category = "Common" Description = "Sent whenever a mouse drag mechanism stops." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragButton Category = "Common" Description = "Sent whenever a mouse drag mechanism starts on a button." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragEnter Category = "Common" Description = "Sent whenever a mouse drag enters the window." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragLeave Category = "Common" Description = "Sent whenever a mouse drag leaves the window." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragOver Category = "Common" Description = "Sent whenever a mouse drag rolls over the window." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragDrop Category = "Common" Description = "Sent whenever a mouse drop happens. This notification is sent by the target of the drag&amp;drop operation." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragDropEnd Category = "Common" Description = "Sent whenever a mouse drop happens.This notification is sent by the source of the drag&amp;drop operation." Mergeable = "true" Type = "CATCommandMethod"/>
          <HelpRequested Category = "Common" Description = "Sent whenever the object is selected using the What's This command." Mergeable = "true" Type = "CATCommandMethod"/>
          <Resized Category = "Common" Description = "Sent whenever the object is resized." Mergeable = "true" Type = "CATCommandMethod"/>
          <DragStart Category = "Common" Description = "Sent whenever a mouse drag mechanism begins." Mergeable = "true" Type = "CATCommandMethod"/>
          <VisibilityChanged Category = "Common" Description = "Sent whenever the object visibility is modified." Mergeable = "true" Type = "CATCommandMethod"/>
        </Callbacks>
      </MetaModel>
      <Production>
        <Instantiation>
          <Code><![CDATA[
<@int flags;
if ${Justification/IsDefault}=="false" {
flags|=${final:Justification};
}
if $Framed=="true" {
flags|='CATDlgLabFramed';
}@>
$InstanceName=new CATDlgLabel($ParentName,(const char*)${final:Name},<@flags@>);

]]></Code>
        </Instantiation>
        <Build>
          <Code><![CDATA[
<@configuration Generation {
if $DragCancel!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetCancelDragNotification(),(CATCommandMethod)&$ClassName::$DragCancel,NULL);
<@}
if $DragButton!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragButtonNotification(),(CATCommandMethod)&$ClassName::$DragButton,NULL);
<@}
if $DragEnter!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragEnterNotification(),(CATCommandMethod)&$ClassName::$DragEnter,NULL);
<@}
if $DragLeave!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragLeaveNotification(),(CATCommandMethod)&$ClassName::$DragLeave,NULL);
<@}
if $DragOver!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDragOverNotification(),(CATCommandMethod)&$ClassName::$DragOver,NULL);
<@}
if $DragDrop!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetDropNotification(),(CATCommandMethod)&$ClassName::$DragDrop,NULL);
<@}
if $DragDropEnd!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetEndDropNotification(),(CATCommandMethod)&$ClassName::$DragDropEnd,NULL);
<@}
if $HelpRequested!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetHelpNotification(),(CATCommandMethod)&$ClassName::$HelpRequested,NULL);
<@}
if $Resized!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetResizeNotification(),(CATCommandMethod)&$ClassName::$Resized,NULL);
<@}
if $DragStart!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetStartDragNotification(),(CATCommandMethod)&$ClassName::$DragStart,NULL);
<@}
if $VisibilityChanged!="" {@>
AddAnalyseNotificationCB($InstanceName, $InstanceName->GetVisibilityNotification(),(CATCommandMethod)&$ClassName::$VisibilityChanged,NULL);
<@}
}
configuration XAML {@>
if(cmd!=NULL && m_DragCancel!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetCancelDragNotification(),m_DragCancel);
}
if(cmd!=NULL && m_DragButton!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragButtonNotification(),m_DragButton);
}
if(cmd!=NULL && m_DragEnter!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragEnterNotification(),m_DragEnter);
}
if(cmd!=NULL && m_DragLeave!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragLeaveNotification(),m_DragLeave);
}
if(cmd!=NULL && m_DragOver!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDragOverNotification(),m_DragOver);
}
if(cmd!=NULL && m_DragDrop!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetDropNotification(),m_DragDrop);
}
if(cmd!=NULL && m_DragDropEnd!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetEndDropNotification(),m_DragDropEnd);
}
if(cmd!=NULL && m_HelpRequested!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetHelpNotification(),m_HelpRequested);
}
if(cmd!=NULL && m_Resized!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetResizeNotification(),m_Resized);
}
if(cmd!=NULL && m_DragStart!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetStartDragNotification(),m_DragStart);
}
if(cmd!=NULL && m_VisibilityChanged!="") {
cmd->AddCBAnalyse($InstanceName, $InstanceName->GetVisibilityNotification(),m_VisibilityChanged);
}
<@}

if ${/HandleResources}!="true" {
if (${Title/IsDefault}=="false"){@>
$InstanceName->SetTitle(${final:Title});
<@}
if (${Help/IsDefault}=="false"){@>
$InstanceName->SetHelp(${final:Help});
<@}
if (${ShortHelp/IsDefault}=="false"){@>
$InstanceName->SetShortHelp(${final:ShortHelp});
<@}
if (${LongHelp/IsDefault}=="false"){@>
$InstanceName->SetLongHelp(${final:LongHelp});
<@}
if (${Accelerator/IsDefault}=="false"){@>
$InstanceName->SetAcceleratorString(${final:Accelerator});
<@}
if (${IconNormal/IsDefault}=="false") || (${IconSelected/IsDefault}=="false") || (${IconFocussed/IsDefault}=="false") { @>
$InstanceName->SetIconName((const char*)${string:IconNormal},(const char*)${string:IconSelected},(const char*)${string:IconFocussed});
<@}
}
if ${/HandleResources}=="true" {
configuration Simulation {@>
CATUnicodeString catalog = $MsgCatalog;
CATUnicodeString path=$WidgetPath;
CATUnicodeString key=path;
key.Append("Title");

$InstanceName->SetTitle(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));

key=path;
key.Append("Help");
$InstanceName->SetHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("ShortHelp");
$InstanceName->SetShortHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("LongHelp");
$InstanceName->SetLongHelp(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
key=path;
key.Append("Accelerator");
$InstanceName->SetAcceleratorString(CATMsgCatalog::BuildMessage((const char*)catalog, (const char*)key));
CATUnicodeString iconKey=path;
iconKey.Append("Icon");
CATUnicodeString iconSelKey=path;
iconSelKey.Append("IconSel");
CATUnicodeString iconFocusKey=path;
iconFocusKey.Append("IconFocus");

CATString iconName,iconSelName,iconFocusName;
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconKey, iconName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconSelKey, iconSelName);
CATRscCatalog::BuildResource((const char*)catalog, (const char*)iconFocusKey, iconFocusName);
$InstanceName->SetIconName(iconName, iconSelName, iconFocusName);
<@
}
}

if (${Enabled/IsDefault}=="false"){@>
$InstanceName->SetSensitivity(${DLGEnabled:Enabled});
<@}
if (${Visible/IsDefault}=="false"){@>
$InstanceName->SetVisibility(${DLGVisible:Visible});
<@}

if $GridLayoutConstraint!="" {
int gridAnchor;
if ${GridLayoutConstraint/Anchor/AttachedToLeft}=="true" {
gridAnchor|='CATGRID_LEFT';
}
if ${GridLayoutConstraint/Anchor/AttachedToRight}=="true" {
gridAnchor|='CATGRID_RIGHT';
}
if ${GridLayoutConstraint/Anchor/AttachedToTop}=="true" {
gridAnchor|='CATGRID_TOP';
}
if ${GridLayoutConstraint/Anchor/AttachedToBottom}=="true" {
gridAnchor|='CATGRID_BOTTOM';
}
if ${GridLayoutConstraint/Anchor/ConstantWidth}=="true" {
gridAnchor|='CATGRID_CST_WIDTH';
}
if ${GridLayoutConstraint/Anchor/ConstantHeight}=="true" {
gridAnchor|='CATGRID_CST_HEIGHT';
}@>
$InstanceName->SetGridConstraints(${int:GridLayoutConstraint/Row},${int:GridLayoutConstraint/Col},${int:GridLayoutConstraint/Width},${int:GridLayoutConstraint/Height},<@gridAnchor@>);
<@}@>


<@if ${Magnitude/IsDefault}=="false" { @>
$InstanceName->SetMagnitude((CATDlgControl::CATDlgMagnitude)${final:Magnitude});
<@}
if (${Precision/IsDefault}=="false") || (${UseDecimalPrecision/IsDefault}=="false") { @>
$InstanceName->SetPrecision(${final:Precision},${final:UseDecimalPrecision});
<@}
if ${Unit/IsDefault}=="false" { @>
$InstanceName->SetUnit((CATDlgControl::CATDlgUnit)${final:Unit});
<@}@>



]]></Code>
        </Build>
        <Declarations>
          <Code><![CDATA[
class CATDlgLabel;

]]></Code>
        </Declarations>
        <Includes>
          <Code><![CDATA[
#include "CATDlgLabel.h"
<@configuration Simulation {@>#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATRscCatalog.h"
<@}@>
]]></Code>
        </Includes>
      </Production>
    </ExportData></Content></DSxDevCodeGen>
