<meta charset="UTF-8"/>
PackageName="Функции PLM";
CATKnowledge.ListInstances.Description="Перечисляет существующие экземпляры заданной ссылки в заданном контексте. \nЕсли один и тот же экземпляр встречается в контексте несколько раз, будет возвращен только один экземпляр. См. также ListOccurrences ";
CATKnowledge.ListInstances.Sample="let root(VPMReference)\nlet searchInstancesOf(VPMReference)\nlet lInstances(List)\let currentInstance(VPMInstance)\n\n[...]\n\nlInstances = searchInstancesOf->ListInstances(root) \nfor currentInstance inside lInstances\n{ \n	/* Treatment on each instance */ \n}\n";

CATKnowledge.ListOccurrences.Description="Перечисляются все вхождения заданной ссылки в заданном контексте. \nСм. также ListInstances ";
CATKnowledge.ListOccurrences.Sample="let root(VPMReference)\nlet searchOccurrencesOf(VPMReference)\nlet lInstances(List)\let currentOccurrence(ProductOccurrence)\n\n[...]\n\nlInstances = searchOccurrencesOf->ListOccurrences(root) \nfor currentOccurrence inside lOccurrences\n{ \n	/* Treatment on each occurrence */ \n}\n";

CATKnowledge.RefreshEntities.Description="<p><span style=\"font-weight:bold;font-size:12px;\">RefreshEntities</span><span style=\"font-size:12px;\"> выполняет выборочное обновление. </span><//p><p><span style=\"font-weight:bold;font-size:12px;\">Входные данные:</span><//p><p> - <span style=\"font-weight:bold;font-size:12px;\">iPLMEntitylist</span> (список): указывает список объектов для обновления.<//p><p> - <span style=\"font-weight:bold;font-size:12px;\">iIsRecursive</span> (логическая операция): указывает режим обновления: рекусивный (применяется ко всем выбранным объектам и их дочерним элементам) или обычный (применяется только к выбранным объектам). <br/> <//p><p>Возможные входные объекты:<br/> - объекты VPMReference, VPMInstance, VPMRepReference и VPMRepInstance для рекурсивного режима <br/> - объекты VPMReference и VPMRepReference в остальных случаях.<//p><p>Частные объекты VPMRep исключаются из процесса обновления.<//p>";
CATKnowledge.RefreshEntities.Sample="/*Whole assembly refresh */ \nLet lEntities(List) \nlet oRoot,oPrd (VPMReference) \nset oRoot = GetEditorRoots(\"VPMReference\")->GetItem(1) \nlEntities.Append(oRoot) \nRefreshEntities(lEntities,true)\n";
