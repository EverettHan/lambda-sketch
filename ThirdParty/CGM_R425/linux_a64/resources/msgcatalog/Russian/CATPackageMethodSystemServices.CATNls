<meta charset="UTF-8"/>
PackageName="Системные службы";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\"> IsSet</span><span style=\"font-size:12px;\"> указывает, задана переменная или нет.</span><p> <span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\"> iParamToCheck</span>(ObjectType): любая переменная, которую требуется проверить<//p><p> <span style=\"font-weight:bold; font-size:12px;\"> Возвращенное значение:</span><//p><p>- логическое выражение: TRUE (Истина), если значение задано, FALSE (Ложь), если значение не задано<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> открывает текстовый файл.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>(строка): физический путь к файлу на диске.<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>(строка): три различных режима:\nw, чтобы записать в файл и создать его, если его не существует,\na, чтобы добавить текст в конец файла,\nr, чтобы прочитать файл.<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>- TextFile: текстовый файл<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile-> Закрыть</span><span style=\"font-size:12px;\"> закрывает текстовый файл.\nЭту команду необходимо вызывать в конце, чтобы освободить память.</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Write</span><span style=\"font-size:12px;\"> делает запись в текстовый файл. Команда также может записывать параметры в формате, в котором # обозначает параметр, а | — перевод строки.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- (строка): текст для записи или формат для записи параметров.<//p><p>- <span style=\"font-weight:bold;\">Parameters</span>(ObjectType): список параметров (необязательно)<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>Нет<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->Read</span> считывает текстовый файл. Два дополнительных аргумента также позволяют считывать форматированные значения и оценивать список параметров.<//p><p><span style=\"font-weight:bold;\">Входные данные:</span><br/>- <span style=\"font-weight:bold;\">Format</span>(строка): формат записи, где # обозначает параметр, а | — перевод строки (необязательно)<//p><p>- <span style=\"font-weight:bold;\">Parameters</span>(ObjectType): список параметров для оценки значений, считанных из текстового файла (необязательно)<//p><p><span style=\"font-weight:bold;\">Возвращенное значение:</span><//p><p>- Строка: текст, считанный из файла<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="<p>Функция IsEndOfFiles позволяет узнать, достигнут ли конец файла.<br/><br/><span style=\"font-weight:bold;\">Возвращенное значение:</span><br/>- Логическое значение:<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> останавливает выполнение текущего сценария и отображает в отладчике его текущее состояние. Эта функция будет включена, только если включен отладчик знаний.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p> нет<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>нет<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> генерирует уникальный индекс для заданной строки входных данных. Индекс равен либо 1, либо приращению результата последнего вызова.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\">iIdentifier</span>(строка): строка, идентифицирующая текущий индекс.<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p> - Integer: начиная с 1, значение увеличивается с каждым вызовом одного и того же идентификатора<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold; font-size:12px;\">Unset</span> <span style=\"font-size:12px;\"> отменяет установку значения заданной переменной. С помощью метода IsSet проверьте, задан параметр или нет.</span><p> <span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\"> iParamToUnset</span>(ObjectType): это параметр  отмены установки значения<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>нет<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> предоставляет доступ к различной системной информации в виде строковых значений.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>(строка): имя извлекаемой информации. Возможные значения:<//p><p>			     * hostname — имя компьютера, на котором в настоящее время выполняется приложение<br/>     * username — имя пользователя, который в данный момент подключен на платформе 3D Experience<br/>     * securitycontext — контекст безопасности, на основе которого пользователь в настоящий момент подключен<br/>     * catiaversion — внутренний номер версии платформы 3D Experience<br/>     * osname — название текущей операционной системы<br/>     * osversion — текущая версия операционной системы<br/>     * serverurl — текущее имя хоста сервера<br/>     * currenttime — текущее время в формате ММ/ДД/ГГ ЧЧ:ММ:СС<br/> Имя информации не чувствительно к регистру.<br/> <span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><br/>- Строка: информация о компьютерной системе<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> позволяет отключить ошибок оценки на время выполнения некоторых частей кода. Это может быть полезно в том случае, если в процессе ожидается ошибка, но она не должна отображаться пользователю.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Используйте с осторожностью: каждому вызову DisableErrors должен соответствовать вызов EnableErrors.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Эти выходные данные позволяют отключить только ошибки, предупреждения и информация или любую их комбинацию.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>- <span style=\"font-weight:bold;\"> iDisableErrors</span>(логическое значение): по умолчанию имеет значение TRUE; если установлено значение FALSE, ошибки оценки не будут отключены.<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>(логическое значение): по умолчанию имеет значение TRUE; если установлено значение FALSE, предупреждения оценки не будут отключены.<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>(логическое значение): по умолчанию имеет значение TRUE; если установлено значение FALSE, информация об оценке не будет отключена.<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>нет<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span> <span style=\"font-size:12px;\"> повторно включает ошибки оценки после вызова DisableErrors. Также вычисляет список всех ошибок, которые произошли с момента последнего вызова DisableErrors в форме объектов EvaluationError.</span><p><span style=\"font-weight:bold; font-size:12px;\">Входные данные:</span><//p><p>нет<//p><p><span style=\"font-weight:bold; font-size:12px;\">Возвращенное значение:</span><//p><p>- List: список ошибок, которые произошли с момента последнего вызова DisableErrors<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold; font-size:12px;\">clock</span><span style=\"font-size:12px;\"> Возвращает процессорное время, затраченное программой. Чтобы рассчитать фактическое время обработки программы, значение, возвращаемое функцией clock, сравнивается со значением, возвращенным предыдущим вызовом этой же функции.</span><//p>";
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

