<meta charset="UTF-8"/>
PackageName="Services système";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\">IsSet</span><span style=\"font-size:12px;\"> indique si une variable donnée est définie ou non.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">iParamToCheck</span>(ObjectType) :toute variable que vous souhaitez tester<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>- Booléen : VRAI si la valeur est définie, FAUX si la valeur n'est pas définie<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> permet d'ouvrir un fichier texte.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>(Chaîne) : chemin physique du fichier sur le disque.<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>(Chaîne) : trois modes différents possibles :\nw pour écrire dans le fichier et le créer s'il n'existe pas,\na pour ajouter du texte à la fin du fichier,\nr pour lire le fichier.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>- TextFile : le fichier texte<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Fermer</span><span style=\"font-size:12px;\"> permet de fermer un fichier texte. \nCe paramètre doit être appelé à la fin pour libérer la mémoire.</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Ecrire</span><span style=\"font-size:12px;\"> permet d'écrire dans un fichier texte. Permet également d'écrire des paramètres dans un format dans lequel # représente un paramètre et | un flux linéaire.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- (Chaîne) : texte à écrire ou format d'écriture des paramètres.<//p><p>- <span style=\"font-weight:bold;\">Paramètres</span>(ObjectType) : liste de paramètres (facultatif)<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>Aucune<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->Lire</span> permet de lire un fichier texte. Avec deux arguments facultatifs, il permet également de lire des valeurs ayant un certain format et d'évaluer une liste de paramètres.<//p><p><span style=\"font-weight:bold;\">Entrée :</span><br/>- <span style=\"font-weight:bold;\">Format</span>(Chaîne) : format de la fonction Ecrire où # représente un paramètre et | un flux linéaire (facultatif)<//p><p>- <span style=\"font-weight:bold;\">Paramètres</span>(ObjectType) : liste de paramètres permettant d'évaluer avec les valeurs lues dans le fichier texte (facultatif)<//p><p><span style=\"font-weight:bold;\">Valeur renvoyée :</span><//p><p>- Chaîne : le texte lu dans le fichier<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="<p>La fonction FinDesFichiers vous indique si la fin du fichier a été atteinte ou non.<br/><br/><span style=\"font-weight:bold;\">Valeur renvoyée :</span><br/>- Booléen :<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> interrompt l'exécution du script en cours et affiche son état actuel dans le débogueur. Cette fonction n'est possible que lorsque le débogueur Knowledge est activé.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>Aucune<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>Aucune<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> génère un index unique pour une entrée de chaîne donnée. L'index est 1 ou un incrément du résultat du dernier appel.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">Identifiant</span>(Chaîne) : une chaîne identifiant l'index en cours.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>- Entier : un entier, commençant à 1 et incrémenté à chaque appel du même identifiant<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold;font-size:12px;\">Annuler</span><span style=\"font-size:12px;\"> annule la valeur d'une variable donnée. Utilisez la méthode IsSet pour vérifier si un paramètre est défini ou non.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">iParamToUnset</span>(ObjectType) : le paramètre à annuler<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>Aucune<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> permet d'accéder aux informations des différents systèmes sous forme de valeurs de chaînes.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>(Chaîne) : nom des informations à récupérer. Valeurs possibles :<//p><p>			     * nom d'hôte : nom de la machine sur laquelle l'application est actuellement exécutée<br/>     * nom d'utilisateur : - nom de l'utilisateur actuellement connecté sur la plateforme 3D Experience<br/>     * contexte de sécurité : contexte de sécurité dans lequel l'utilisateur est actuellement connecté<br/>     * version catia : numéro de version interne de la plateforme 3D Experience<br/>     * nom SE : nom du système d'exploitation en cours<br/>     * version SE : version du système d'exploitation en cours<br/>     * URL serveur : nom d'hôte du serveur en cours<br/>     * heure actuelle : heure actuelle au format MM/JJ/AA HH:MM:SS<br/>Le nom de l'information n'est pas sensible à la casse.<br/><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><br/>- Chaîne : information système calculée<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> permet de désactiver les erreurs d'évaluation sur une certaine partie de code. Ceci peut être utile lorsqu'une erreur est attendue dans le processus mais ne doit pas être affichée et visible à l'utilisateur.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Utiliser avec précaution : chaque appel vers DisableErrors doit être associé à un appel vers EnableErrors.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Les entrées permettent de désactiver uniquement les erreurs, les avertissements et les informations ou une combinaison de ces éléments.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>- <span style=\"font-weight:bold;\">iDisableErrors</span>(Booléen) : VRAI par défaut, si définies sur FAUX, les erreurs d'évaluation ne seront pas désactivées.<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>(Booléen) : VRAI par défaut, si définis sur FAUX, les avertissements d'évaluation ne seront pas désactivés.<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>(Booléen) : VRAI par défaut, si définies sur FAUX, les informations d'évaluation ne seront pas désactivées.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>Aucune<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span><span style=\"font-size:12px;\"> ré-active les erreurs d'évaluation après un dernier appel à DisableErrors. Calculez également une liste de toutes les erreurs qui se sont produites depuis le dernier appel à DisableErrors sous la forme d'objets EvaluationError.</span><p><span style=\"font-weight:bold;font-size:12px;\">Entrées :</span><//p><p>Aucune<//p><p><span style=\"font-weight:bold;font-size:12px;\">Valeur renvoyée :</span><//p><p>- Liste : liste des erreurs qui se sont produites depuis le dernier appel à DisableErrors<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">clock</span><span style=\"font-size:12px;\"> Renvoie le temps processeur consommé par le programme. Pour calculer le temps de traitement réel d'un programme, la valeur renvoyée par l'horloge doit être comparée à une valeur renvoyée par un précédent appel à la même fonction.</span><//p>";
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

