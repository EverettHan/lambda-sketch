<meta charset="UTF-8"/>
PackageName="Systemservices";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\">IsSet</span><span style=\"font-size:12px;\"> gibt an, ob eine gegebene Variable festgelegt ist oder nicht.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToCheck</span>(ObjectType): Beliebige Variable, die Sie testen möchten<//p><p><span style=\"font-weight:bold;font-size:12px;\">Zurückgegebener Wert:</span><//p><p>- Boolesch: TRUE, wenn der Wert festgelegt ist; FALSE, wenn der Wert nicht festgelegt ist<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> Öffnet eine Textdatei.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>(Zeichenkette): Physischer Pfad zu der Datei auf der Festplatte.<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>(Zeichenkette): Drei verschiedene mögliche Modi:\nw zum Schreiben in die Datei und zum Erstellen dieser, falls sie nicht vorhanden ist,\na zum Einfügen von Text an das Ende der Datei,\nr zum Lesen der Datei.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>– TextFile: die Textdatei<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Close</span><span style=\"font-size:12px;\"> Schließt eine Textdatei.\nDies muss am Ende aufgerufen werden, um den Speicher zu leeren.</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Write</span><span style=\"font-size:12px;\"> Schreibt in eine Textdatei. Auch Parameter mit einem Format können geschrieben werden, wobei # für einen Parameter und | für Vorschub steht.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>– (Zeichenkette): zu schreibender Text oder das Format zum Schreiben der Parameter.<//p><p>– <span style=\"font-weight:bold;\">Parameters</span>(Objekttyp): Liste der Parameter (optional)<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>Keiner<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->Read</span> Liest eine Textdatei. Mit zwei optionalen Argumenten können auch Werte mit einem Format gelesen und eine Parameterliste bewertet werden.<//p><p><span style=\"font-weight:bold;\">Eingaben:</span><br/>- <span style=\"font-weight:bold;\">Format</span>(String): Format der Schreibfunktion, wobei # für einen Parameter und | für Vorschub steht (optional)<//p><p>- <span style=\"font-weight:bold;\">Parameter</span>(ObjectType): Liste der Parameter, die mit Werten aus der Textdatei bewertet werden sollen (optional)<//p><p><span style=\"font-weight:bold;\">Rückgabewert:</span><//p><p>- Zeichenkette: der Text, der in der Datei gelesen wurde<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="Mit der Funktion <p>IsEndOfFiles können Sie prüfen, ob das Dateiende erreicht wurde oder nicht.<br/><br/><span style=\"Font-weight:bold;\"> Rückgabewert:</span><br/>- Boolesch:<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> Stoppt die Ausführung des aktuellen Skripts und zeigt den aktuellen Status im Debugger an. Die Funktion steht nur mit aktiviertem Knowledge-Debugger zur Verfügung.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>Keine<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>Keiner<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> Erzeugt einen einmaligen Index für eine gegebene Zeichenketteneingabe. Der Index ist entweder 1 oder ein Inkrement des Ergebnisses des letzten Aufrufs.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">iIdentifier</span>(Zeichenkette): eine Zeichenkette, die den aktuellen Index kennzeichnet.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>– Integer: eine Ganzzahl, beginnend mit 1, die mit jedem Aufruf für die gleiche Kennung erhöht wird<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold;font-size:12px;\">Unset</span><span style=\"font-size:12px;\"> Nimmt den Wert einer gegebenen Variable zurück. Mit der IsSet-Methode prüfen, ob ein Parameter festgelegt ist oder nicht.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToUnset</span>(Objekttyp): die zurückzunehmenden Parameter<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>Keiner<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> Zugang zu verschiedenen Systeminformationen unter der Form der Zeichenkettenwerte.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>(Zeichenkette): Name der abzurufenden Informationen. Mögliche Werte:<//p><p>			     * hostname: Name des Computers, auf dem die Anwendung derzeit ausgeführt wird<br/>     * username: Name des Benutzers, der derzeit mit der 3D Experience Platform verbunden ist<br/>     * securitycontext: Sicherheitskontext, mit dem der Benutzer derzeit verbunden ist<br/>     * catiaversion: interne Freigabenummer der 3D Experience Platform<br/>     * osname: Name des aktuellen Betriebssystems<br/>     * osversion: Version des aktuellen Betriebssystems<br/>     * serverurl: Name des aktuellen Serverhosts<br/>     * currenttime: aktuelle Zeit im Format MM/TT/JJ hh:mm:ss<br/>Der Infoname unterscheidet nicht zwischen Groß- und Kleinschreibung.<br/><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><br/>– Zeichenkette: die berechnete Systeminformation<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> Ermöglicht die Deaktivierung von Prüfungsfehlern bei einem bestimmen Abschnitt des Codes. Dies kann hilfreich sein, wenn ein Fehler in dem Prozess erwartet wird, dem Benutzer aber nicht angezeigt werden soll.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Vorsicht: jeder Aufruf von DisableErrors muss mit einem Aufruf von EnableErrors zusammenpassen.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Die Eingaben ermöglichen nur Fehler, Warnungen und Informationen oder Kombinationen davon zu deaktivieren.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>- <span style=\"font-weight:bold;\">iDisableErrors</span>(Boolesch): standardmäßig TRUE, bei FALSE werden die Prüfungsfehler nicht deaktiviert.<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>(Boolesch): standardmäßig TRUE, bei FALSE werden die Prüfungswarnungen nicht deaktiviert.<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>(Boolesch): standardmäßig TRUE, bei FALSE werden die Prüfungsinformationen nicht deaktiviert.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>Keiner<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span><span style=\"font-size:12px;\"> Aktiviert die Prüfungsfehler nach dem Aufruf von DisableErrors wieder. Berechnet außerdem eine Liste aller Fehler, die seit dem letzten Aufruf von DisableErrors unter dem Formular der EvaluationError-Objekte aufgetreten sind.</span><p><span style=\"font-weight:bold;font-size:12px;\">Eingaben:</span><//p><p>Keine<//p><p><span style=\"font-weight:bold;font-size:12px;\">Rückgabewert:</span><//p><p>– List: die Liste der Fehler, die seit dem letzten Aufruf von DisableErrors aufgetreten sind<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">Uhr</span><span style=\"font-size:12px;\"> Gibt die vom Programm verbrauchte Prozessorzeit zurück. Um die tatsächliche Bearbeitungszeit eines Programms zu berechnen, sollte der vom Takt zurückgegebene Wert mit einem Wert verglichen werden, der von einem vorherigen Aufruf der gleichen Funktion zurückgegeben wurde.</span><//p>";
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

