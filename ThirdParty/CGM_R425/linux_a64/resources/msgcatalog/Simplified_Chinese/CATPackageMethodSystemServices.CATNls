<meta charset="UTF-8"/>
PackageName="系统服务";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\">IsSet</span><span style=\"font-size:12px;\"> 指示给定变量是否设置。</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToCheck</span>（对象类型）：您想要测试的任何变量<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 布尔值：如果该值已设置，则为 TRUE，如果该值未设置，则为 FALSE<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> 打开文本文件。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>（字符串）：文件在磁盘上的物理路径。<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>（字符串）：有三种不同的可能模式：\nw 写入到文件并创建文件（如果文件尚不存在），\na 在文件的末尾添加文本，\nr 读取文件。<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- TextFile：文本文件<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->关闭</span><span style=\"font-size:12px;\"> 关闭文本文件。\n必须在结束时调用它以释放内存。</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->写入</span><span style=\"font-size:12px;\"> 写入到文本文件。还可使用特定格式写入参数，其中 # 代表参数，| 代表换行符。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- （字符串）：要写入的文本或用于写入参数的格式。<//p><p>- <span style=\"font-weight:bold;\">参数</span>（对象类型）：参数列表（可选）<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>None<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->读取</span>读取文本文件。使用两个可选的参数，它还可以读取格式值并赋值参数列表。<//p><p><span style=\"font-weight:bold;\">输入：</span><br/>- <span style=\"font-weight:bold;\">格式</span>（字符串）：Write 函数的格式，其中 # 代表参数，| 代表换行符（可选）<//p><p>- <span style=\"font-weight:bold;\">参数</span>(ObjectType)：要用文本文件中读取的值进行赋值的参数列表（可选）<//p><p><span style=\"font-weight:bold;\">返回的值：</span><//p><p>-字符串：文件中读取的文本<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="<p>IsEndOfFiles 函数可让您知道是否已到达文件结尾。<br/><br/><span style=\"font-weight:bold;\">返回的值：</span><br/>- 布尔值：<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> 停止当前脚本的执行并在调试器中显示其当前状态。仅当启用知识工程调试器时此函数才可用。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>无<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>无<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> 为给定字符串输入生成唯一的索引。索引为 1 或最后一次调用结果的增量。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- <span style=\"font-weight:bold;\">iIdentifier</span>（字符串）：标识当前索引的字符串。<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 整数：一个整数，从 1 开始，每次调用同一标识符时会递增<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold;font-size:12px;\">Unset</span><span style=\"font-size:12px;\"> 取消设置给定变量的值。使用 IsSet 方法来检查是否设置了某个参数。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- <span style=\"font-weight:bold;\">iParamToUnset</span>（对象类型）：要取消设置的参数<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>无<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> 以字符串值的形式提供各种系统信息的访问权限。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>（字符串）：要检索的信息的名称。可能值：<//p><p>			     * hostname - 当前执行应用程序的计算机的名称<br/>     * username - 当前连接到 3D Experience 平台的用户的名称<br/>     * securitycontext - 当前连接用户的安全上下文<br/>     * catiaversion - 3D Experience 平台的内部版本号<br/>     * osname - 当前操作系统名称<br/>     * osversion - 当前操作系统版本<br/>     * serverurl - 当前服务器主机名<br/>     * currenttime - 当前时间，格式为 MM/DD/YY HH:MM:SS<br/>信息名称不区分大小写。<br/><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><br/>- 字符串：计算的系统信息<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> 允许禁用代码某些部分的赋值错误。当某个错误是进程中的预期错误且不应显示给用户时这将尤为有用。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">请谨慎使用：DisableErrors 的每次调用必须有相匹配的 EnableErrors 调用。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">输入允许仅禁用错误、警告和信息或这些项目的任意组合。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>- <span style=\"font-weight:bold;\">iDisableErrors</span>（布尔值）：默认情况下为 TRUE，如果设为 FALSE，则不会禁用赋值错误。<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>（布尔值）：默认情况下为 TRUE，如果设为 FALSE，则不会禁用赋值警告。<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>（布尔值）：默认情况下为 TRUE，如果设为 FALSE，则不会禁用赋值信息。<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>无<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span><span style=\"font-size:12px;\"> 调用 DisableErrors 之后重新启用赋值错误。同时会以 EvaluationError 对象的形式计算自最后一次调用 DisableErrors 以来发生的所有错误的列表。</span><p><span style=\"font-weight:bold;font-size:12px;\">输入：</span><//p><p>无<//p><p><span style=\"font-weight:bold;font-size:12px;\">返回值：</span><//p><p>- 列表：自最后一次调用 DisableErrors 以来发生的错误的列表<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">clock</span><span style=\"font-size:12px;\"> 返回程序使用的处理器时间。要计算程序的实际处理时间，应将 clock 返回的值与上一次调用相同函数返回的值进行比较。</span><//p>";
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

