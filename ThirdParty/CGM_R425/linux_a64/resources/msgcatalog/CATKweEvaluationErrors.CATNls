<meta charset="UTF-8"/>
ErrorInApplyAccess="Apply : /P1 can not be interpreted.";
ErrorInExtract="Extract : /P1 can not be interpreted.";
ErrorInSort="Sort : /P1 can not be interpreted.";
ErrorInAdvancedSort="AdvancedSort : /P1 can not be interpreted.";
FindError="Error in the method Find.";
FilterError1="Error in the method Filter: first argument (/P1) is not an existing type";
FilterError2="Error in the method Filter: second argument (/P1) is not a syntaxically correct expression";
ApplyError1="Error in the method Apply: first argument (/P1) is not an existing type";
ApplyError2="Error in the method Apply: second argument (/P1) is not a syntaxically correct expression";
ExtractError1="Error in the method Extract: first argument (/P1) is not an existing type";
ExtractError2="Error in the method Extract: second argument (/P1) is not an existing type";
ExtractError3="Error in the method Extract: third argument can not be empty. It must contain a rule that evaluates y variable from x variable";
SortError1="Error in the method Sort: second argument (/P1) is not an existing type";
SortError2="Error in the method Sort: third argument (/P1) is not an existing type";
SortError3="Error in the method Sort: authorized values for first argument (/P1) are < and >";

SubtractError1="Error in the method Subtract: second argument (/P1) is not an existing type";
SubtractError2="Error in the method Subtract: third argument (/P1) is not a syntaxically correct expression";
IntersectError1="Error in the method Intersect: second argument (/P1) is not an existing type";
IntersectError2="Error in the method Intersect: third argument (/P1) is not a syntaxically correct expression";
JunctionError1="Error in the method Junction: second argument (/P1) is not an existing type";
JunctionError2="Error in the method Junction: third argument (/P1) is not an existing type";
JunctionError3="Error in the method Junction: fourth argument can not be empty. It must contain a rule valuated depending on x and y under the form x.attribute == y.attribute";
JunctionError4="Error in the method Junction: fourth argument (/P1) is not a syntaxically correct expression";
SplitError1="Error in the method Split: first argument (/P1) is not an existing type";
SplitError2="Error in the method Split: second argument (/P1) is not an existing type";
SplitError3="Error in the method Split: third argument can not be empty. It must contain a rule that evaluates y variable from x variable";
SplitError4="Error in the method Split: third argument (/P1) is not a syntaxically correct program";
AdvancedSortError1="Error in the method AdvancedSort: first argument (/P1) is not an existing type";
AdvancedSortError2="Error in the method AdvancedSort: third argument (/P1) is not an existing type";
AdvancedSortError3="Error in the method AdvancedSort: authorized values for second argument (/P1) are < and >";
AdvancedSortError4="Error in the method AdvancedSort: fourth argument can not be empty. It must contain a rule that evaluates y variable from x variable";
AdvancedSortListEmpty="Error in the method AdvancedSort: Unable to perform operations because one of the lists given in argument is empty.";
AdvancedSortDifferentSize="Error in the method AdvancedSort: Sizes of the lists given in argument are different.";

FindError1="Error in the method Find: first argument (/P1) is not an existing type";
FindError2="Error in the method Find: second argument (/P1) is not a syntaxically correct expression";
SyntaxError="Syntax error raised at execution stage : ";
SetAttributeDimension="Error in the method SetAttributeDimension: last argument (/P1) is not an existing dimension type";
NewError1="Error in the function new: first argument (/P1) is not an existing type";
NewError2="Error in the function new: first argument (/P1) is not a type that can be instantiated";
NewError3="Error in the function new: impossible to create an object of type /P1 under the object /P2 of type /P3";
NewError4="Error in the function new: you do not have the runtime license to operate a new from the language";
ReplaceError1="Error in the replace: impossible to perform the replace, the type association between the replacing object and the owner object is prohibited â€“ Use an object with authorized type association";
RemoveExtensionError1="Error in the function RemoveExtension: cannot remove an applicative extension";
UnableCreate="Unable to create a dynamic attribute of type /P1";
OperatorPowErrorCase1="Error in ** operator (base taken to a specified power): the base has tYo be different from zero if the exponent is a negative integer.";
OperatorPowErrorCase2="Error in ** operator (base taken to a specified power): the base has to be positive if the exponent is a positive real.";
OperatorPowErrorCase3="Error in ** operator (base taken to a specified power): the base has to be positive (excluding 0) if the exponent is a negative real.";
ResultOfOperationIsUnset="The result of the operation /P1 is unset. Please check the operation.";	

TraceIncorrectLevel="Incorrect level for trace. The level has to be comprised between 1 and 9 (including 1 and 9).";
TraceToCreateFile="Unable to create the file /P1.";
TraceUnableToManipulateFile="Unable to write in file /P1.";
TraceUnableToWriteInFile="Unable to write in file /P1. Please check you have the proper rights on this file/directory.";


UnableToAddItemToList="Unable to add item with index /P1 to the list. Object invalid: Make sure the item you try to add is an existing item.";
UnableToAddItemToListBecauseOfIndex="Unable to add item to the list. Index /P1 is out of range (should be comprised between 0 and /P2).";

UnableToInsertItemToList="Unable to insert item with index /P1 to the list. Object invalid: Make sure the item you try to insert is an existing item.";
UnableToInsertItemToListBecauseOfIndex="Unable to insert item to the list. Index /P1 is out of range (should be comprised between 1 and /P2).";

UnableToAppendItemToList="Unable to append item to the list. Object invalid: Make sure the item you try to insert is an existing item.";

UnableToSetItemToList="Unable to set item with index /P1 to the list. Object invalid: Make sure the item you try to add is an existing item.";
UnableToSetItemToListBecauseOfIndex="Unable to set item to the list. Index /P1 is out of range (should be comprised between 1 and /P2).";

UnableToRemoveItem="Unable to remove item with index /P1 from the list.";	
UnableToRemoveItemFromListBecauseOfIndex="Unable to remove item from the list. Index /P1 is out of range (should be comprised between 1 and /P2).";
UnableToValuateList="Unable to valuate list /P1 with list /P2.";


UnableToRemoveAllItems="Unable to empty the list.";	

ListItemNULL="Item in the list with index /P1 is null.";
ListEmpty="Unable to perform operations on the list: The list is empty.";

UnableToGetItemIndexOutOfRange="Unable to get item in the list. Index /P1 is out of range (should be comprised between 1 and /P2).";

UnableToReorder="Unable to reorder the element with current position /P1 to position /P2.";
UnableToSwap="Unable to reorder the element with current position /P1 to position /P2.";

UnableToCreateList="Unable to create the list.";
UnableToAddItemToNewList="Unable to add item with index /P1 to the new list. Object invalid: Make sure the item you try to add is an existing item.";
NoItemToAddToNewList="No item to add to the new list.";


SumIsNull="No item have been added to the sum. The sum is equal to 0.";

ErrorInComputeWrongTypeInItems="Problem while computing the operation /P1: element /P2 has not been taken into account because it was not of type /P3.";
ErrorInComputeWrongType="Unable to Compute /P1: the type /P2 is not a referenced type.";
ErrorInComputeCanNotBeEvaluated="Unable to Compute /P1: the expression cannot be evaluated (check the type or the syntax).";
BadOperatorInCompute="The operator /P1 is not available for the method Compute";
BadReturnedTypeInCompute="The type /P1 of the computed value is not an authorized type. In the method Compute the computed value must be a Real or a String.";

BadTypeError="Trying to affect a parameter of type /P1 where a parameter of type /P2 is expected";

ObjectModificationInfringement="Modification of object /P1 (through its attribute /P2) is forbidden in this rule context"; 

SolveFailed="The method Update failed on object /P1";
SolveFailedNotImpl="The method Update is not implemented on object /P1";

ListAttributesError1="Error in the method ListAttributes: first argument (/P1) is not an existing type";
AddExtensionError1="Error in the AddExtension method: first argument (/P1) is not an existing type";
AddExtensionError2="Error in the AddExtension method: first argument (/P1) is not a type that can be instantiated";
AddExtensionError3="Error in the AddExtension method: object /P2 of type /P3 can not be extended with a type /P1";
AddExtensionError4="Error in the AddExtension method: you do not have the runtime license to operate a new from the language";

IntegerOverflowError="Integer overflow error.";
ReadAttributeOnNullObject = "Attempt to read the attribut /P1 on an empty variable";
WriteAttributeOnNullObject = "Attempt to write the attribut /P1 on an empty variable";

FunctionNotAllowedInBR="This function or method is not allowed in Business Rule context";
QueryError1="Error in the method Query: first argument (/P1) is not an existing type";
QueryError2="Error in the method Query: second argument (/P1) is not a syntaxically correct expression";
QueryError="Error in the method Query.";
TraceRaised="Trace raised: ";
MessageRaised="Message raised: ";

IsSupportingError="Error in the method IsSupporting: first argument (/P1) is not an existing type";
IsASortOfError="Error in the method IsASortOf: first argument (/P1) is not an existing type";
ValuatePointerError="Error in the method ValuatePointer: third argument (/P1) is not an existing type";
AccessError="Error in the method Access: second argument (/P1) is not an existing type";

SetupDataError1="The string /P1 given as identifier in the function /P2 in the expressional object /P3 is not correct:\nThe system was not able to retrieve the associated resource";
ARMErrorNoTable="The resource /P1 used in the function /P2 in the expressional object /P3 could not be found\nbecause there is no resource table in the representation containing /P3";
ARMErrorResourceNotFound="The resource /P1 used in the function /P2 in the expressional object /P3 could not\nbe found in the resource table defined in the representation containing /P3";
UnstackError="Unable to deactivate /P1 configured resources while only /P2 have been previously activated. Nothing has been deactivated.";
AccessResourceBadType="Error in the method AccessResource: second argument (/P1) is not an existing type";
ImplementsOperation="Error in the method ImplementsOperation: (/P1) is not a valid operation name";
LicCheckERR_0001="License /P1 not granted.";

OpenFilterErrorEmpty="Filtered container /P1 is empty therefore the resource /P2 cannot be found.\nYou might want to change the provided filter.";
ResourceNotFoundInContainer="Cannot find resource /P1 in container /P2.";
ResourceNotFoundInLocalResourceTable="Cannot find resource /P1 in local resource table.";
ResourceNotFoundInDataSetup="Cannot find resource /P1 in /P2 through data setup.";

OpenFilterContainerError="The filter activated doesn't corresponds to the container /P1 selected.\nYou must select a filter corresponding to the container.";

TempGeometryInPersistentList="Unable to add an item in the list /P1. A temporary geometry should not be put in a persistent list.";

NotAValidYear="Not a valid Year given in the date constructor.";
NotAValidMonth="Not a valid Month given in the date constructor.";
NotAValidDay="Not a valid Day given in the date constructor.";
NotAValidDayShort="Not a valid Day for a short Month given in the date constructor.";
NotAValidDayFeb="Not a valid Day for February given in the date constructor.";
NotAValidHour="Not a valid Hour given in the date and time constructor.";
NotAValidMinute="Not a valid Minute given in the date and time constructor.";
NotAValidSecond="Not a valid Second given in the date and time constructor.";
NotAValidDate="Not a valid Date given in the date and time constructor.";
NotAValidDate2="Not a valid Time given in the date and time constructor.";
RemoveAttribute="Impossible to remove attribute /P1 on object /P2 because it is not a dynamically added attribute.";
AccessFederatedExtensionNotExisting="Impossible to access federated extension /P1 because it does not exist.";
AccessFederatedExtensionNotImpl="Impossible to access federated extension /P1 because it does not implement CATIAttributeComputed.";

MatchPatternNotRecognized="Pattern /P1 in Match function cannot be recognized.";	
SystemInfoNotRecognized="/P1 is not a known system information.";	
PatternRegexError="Pattern /P1 cannot be compile to produce a regular expression.";
IndexGroupCaptureError="Index out of bound the index (/P1) needs to be greater or equal to 0 and strictly inferior to the group count (/P2).";

CannotInterrogateOnUpdateStatus="Cannot interrogate /P1 object on its update status.";	

EnableErrors="EnableErrors was called without a matching DisableErors call";	
SilentErrorsMismatch="DisableErrors and EnableErrors were called an unmatching number of times.\nThis might lead to errors being hidden to the user.";	
DebuggerBreakNoDebugger="DebuggerBreak function was called but the current context does not allow debugging. Please attach the Knowledge Debugger first.";

NumbersBetweenWrongNumber="Wrong number of values passed in NumbersBetween function";
NumbersBetweenWrongStep="Wrong step value passed in NumbersBetweenByStep function";

InitPersist="List initialization method can only be called on volatile lists";
QuickSet="The list of provided indexes to access the list element is not valid";

