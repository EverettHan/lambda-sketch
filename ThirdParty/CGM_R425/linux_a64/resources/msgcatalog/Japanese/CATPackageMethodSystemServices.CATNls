<meta charset="UTF-8"/>
PackageName="システム サービス";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\">IsSet</span><span style=\"font-size:12px;\"> は、指定された変数に値が設定されているかどうかを示します。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToCheck</span>(ObjectType): テストする変数<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>- Boolean: 値が設定されている場合は TRUE、値が設定されていない場合は FALSE<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> は、テキスト ファイルを開きます。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>(String): ディスク上のファイルの物理パス。<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>(String): 可能な 3 つのモード:\nファイルに書き込み、存在しない場合に作成するには w\nファイルの終わりにテキストを追加するには a\nファイルを読み取るには r。<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>- TextFile: ファイルのテキスト<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Close</span><span style=\"font-size:12px;\"> は、テキスト ファイルを閉じます。\nメモリを解放するために最後に呼び出す必要があります。</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Write</span><span style=\"font-size:12px;\"> は、テキスト ファイルに書き込みます。# がパラメーターを表し、| がライン フィードを表す形式でパラメーターを記述することもできます。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- (String): 書き込むテキストまたはパラメーターを記述する形式。<//p><p>- <span style=\"font-weight:bold;\">Parameters</span>(ObjectType): パラメーターのリスト (オプション)<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>なし<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->Read</span> は、テキスト ファイルを読み取ります。2 つのオプションの引数があり、書式付きの値を読み取ったり、パラメーター リストを評価したりすることもできます。<//p><p><span style=\"font-weight:bold;\">入力:</span><br/>- <span style=\"font-weight:bold;\">形式</span>(String): Write 関数の形式。# がパラメーターを表し、| がライン フィードを表します (オプション)<//p><p>- <span style=\"font-weight:bold;\">パラメーター</span>(ObjectType): テキスト ファイルで読み取られた値で評価するパラメーターのリスト (オプション)<//p><p><span style=\"font-weight:bold;\">戻り値:</span><//p><p>- String: ファイル内で読み取られたテキスト<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="<p>IsEndOfFiles 関数は、ファイルの終わりに到達したかどうかを返します。<br/><br/><span style=\"font-weight:bold;\">戻り値:</span><br/>- Boolean:<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> は、現行スクリプトの実行を停止し、現行の状態をデバッガに表示します。ナレッジ デバッガが有効になっている場合にのみ機能します。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>なし<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>なし<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> は、指定された文字列入力の一意のインデックスを生成します。インデックスは、1 または前回の呼び出しの結果の増分です。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">iIdentifier</span>(String): 現在のインデックスを識別する文字列。<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>- Integer: 1 から開始し、同じ識別子の呼び出しごとにインクリメントされる整数<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold;font-size:12px;\">Unset</span><span style=\"font-size:12px;\"> は、特定の変数の値を設定解除します。IsSet メソッドを使用して、パラメーターが設定されているかどうかを確認します。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToUnset</span>(ObjectType): 設定解除するパラメーター<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>なし<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> は、さまざまなシステム情報へのアクセス権を文字列値の形式で付与します。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>(String): 取得する情報の名前。可能な値は次のとおりです。<//p><p>			     * hostname - アプリケーションが現在実行されているマシンの名前<br/>     * username - 3DEXPERIENCE Platform に現在接続されているユーザーの名前<br/>     * securitycontext - ユーザーが現在接続されているセキュリティ コンテキスト<br/>     * catiaversion - 3DEXPERIENCE Platform の内部リリース番号<br/>     * osname - 現行のオペレーティング システム名<br/>     * osversion - 現行のオペレーティング システム バージョン<br/>     * serverurl - 現行のサーバー ホスト名<br/>     * currenttime - MM/DD/YY HH:MM:SS の形式の現在の時刻<br/>情報名は大文字と小文字が区別されません。<br/><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><br/>- String: 計算されたシステム情報<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> は、特定のコード部分の評価エラーを無効にできます。これは、プロセスでエラーが予想されるがユーザーに表示しない場合に役立ちます。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">注意して使用してください: DisableErrors の各呼び出しは、EnableErrors の呼び出しに対応している必要があります。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">入力では、エラー、警告、および情報のみ、またはこれらの任意の組み合わせを無効にできます。</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>- <span style=\"font-weight:bold;\">iDisableErrors</span>(Boolean):  デフォルトでは TRUE。FALSE に設定されている場合、評価エラーは無効にされません。<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>(Boolean):  デフォルトでは TRUE。FALSE に設定されている場合、評価警告は無効にされません。<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>(Boolean): デフォルトでは TRUE。FALSE に設定されている場合、評価情報は無効にされません。<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>なし<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span><span style=\"font-size:12px;\"> は、DisableErrors の呼び出し後に評価エラーを再有効化します。EvaluationError オブジェクトの形式で、DisableErrors の前回の呼び出し後に発生したすべてのエラーのリストも計算します。</span><p><span style=\"font-weight:bold;font-size:12px;\">入力:</span><//p><p>なし<//p><p><span style=\"font-weight:bold;font-size:12px;\">戻り値:</span><//p><p>- List: DisableErrors の前回の呼び出し後に発生したエラーのリスト<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">クロック</span><span style=\"font-size:12px;\"> プログラムが消費したプロセッサ時間を返します。プログラムの実際の処理時間を計算するには、クロックで返された値を、同じ関数に対する前回の呼び出しで返された値と比較する必要があります。</span><//p>";
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

