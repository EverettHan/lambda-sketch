<meta charset="UTF-8"/>
PackageName = "System Services";
CATKnowledge.IsSet.Description="<span style=\"font-weight:bold;font-size:12px;\">IsSet</span><span style=\"font-size:12px;\"> indicates whether a given variable is set or not.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToCheck</span>(ObjectType): any variable you want to test<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>- Boolean: TRUE if the value is set, FALSE if the value is unset<//p>";
CATKnowledge.IsSet.Sample="let a(Integer)\n\nif myLength > 10mm\n{\n\ta = 10\n}\n\n\nif IsSet(a)\n{\n\tMessage(\"Value was superior to 10mm\")\n}";

CATKnowledge.OpenTextFile.Description="<span style=\"font-weight:bold;font-size:12px;\">OpenTextFile</span><span style=\"font-size:12px;\"> opens a text file.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">TextFilePath</span>(String): Physical path of the file on disk.<//p><p>- <span style=\"font-weight:bold;\">TextFileMode</span>(String): Three different possible modes:\nw to write in the file and to create it if it does not exist,\na to add text at the end of the file,\nr to read the file.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>- TextFile: the text file<//p>";
CATKnowledge.OpenTextFile.Sample="To open a file in write mode:\nlet file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\nTo add lines at the end of the file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"a\")\nTo read a file:\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"r\")";

CATKnowledge.Close.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Close</span><span style=\"font-size:12px;\"> closes a text file. \nIt must be called at the end to free the memory.</span>";
CATKnowledge.Close.Sample="let file (TextFile)\nset file = OpenTextFile(\"e:\Temp\TextFile1.txt\",\"w\")\n...\nfile->Close()";

CATKnowledge.Write.Description="<span style=\"font-weight:bold;font-size:12px;\">TextFile->Write</span><span style=\"font-size:12px;\"> writes in a text file. It can also write parameters with a format where # stands for a parameter and | for line feed.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- (String): Text to write or the format to write parameters.<//p><p>- <span style=\"font-weight:bold;\">Parameters</span>(ObjectType): List of paramters (optional)<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>None<//p>";
CATKnowledge.Write.Sample="buffer=\"Hello\"\nfile->Write(buffer)\n\nparms.Append('Representation341 -- \Integer.1')\nparms.Append('Represenation341 -- \Length.1')\nformat = \"Integer= # | Length= #\"\nfile->Write(buffer,parms)";

CATKnowledge.Read.Description="<p><span style=\"font-weight:bold;\">TextFile->Read</span> reads a text file. With two optional aguments, it can also read values with a format and valuate a parameters list.<//p><p><span style=\"font-weight:bold;\">Inputs:</span><br/>- <span style=\"font-weight:bold;\">Format</span>(String): Format of Write function where # stands for a parameter and | for line feed (Optional)<//p><p>- <span style=\"font-weight:bold;\">Parameters</span>(ObjectType): List of parameters to valuate with values read in the text file (Optional)<//p><p><span style=\"font-weight:bold;\">Returned value:</span><//p><p>- String: the text read in the file<//p>";
CATKnowledge.Read.Sample="let file (TextFile)\n\n//To open a file in read n=mode:\nset file = OpenTextFile(\"f:[b4ck5l45h]TextFile1.txt\",\"r\")\n\n//To get the data of the file in a buffer:\nlet buffer (String)\nlet i (Integer)\n\nfor i while file->IsEndOfFile() <> TRUE\n{\n\t//Read the file until end is reached, read function reads one line at a time\n\tset buffer = file->Read()\n}";

CATKnowledge.IsEndOfFile.Description="<p>IsEndOfFiles function lets you know whether end of file has been reached or not.<br/><br/><span style=\"font-weight:bold;\">Returned value:</span><br/>- Boolean:<br/><//p>";
CATKnowledge.IsEndOfFile.Sample="@idem CATPackageMethodSystemServices.Read";

CATKnowledge.DebuggerBreak.Description="<span style=\"font-weight:bold;font-size:12px;\">DebuggerBreak</span><span style=\"font-size:12px;\"> stops the execution of the current script and displays its current state into the debugger. The function will only when the Knowledge Debugger is enabled.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>None<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>None<//p>";
CATKnowledge.DebuggerBreak.Sample="";

CATKnowledge.SessionUniqueIndex.Description="<span style=\"font-weight:bold;font-size:12px;\">SessionUniqueIndex</span><span style=\"font-size:12px;\"> generates a unique index for a given String input. The index is either 1 or an increment of the last call's result.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iIdentifier</span>(String): a String identifying the current index.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>- Integer: an integer, starting at 1 and incremented at each call for the same identifier<//p>";
CATKnowledge.SessionUniqueIndex.Sample="// Supposing we are in an action\nlet geoSetDestination(OpenBodyFeature)\nlet createdPoint(Point)\n[...]\n\ncreatedPoint = new(\"Point\",\"PointCreated\"+SessionUniqueIndex(\"PointFromAction\"),geoSetDestination)\n";

CATKnowledge.Unset.Description="<span style=\"font-weight:bold;font-size:12px;\">Unset</span><span style=\"font-size:12px;\"> unsets the value of a given variable. Use the IsSet method to check whether a parameter is set or not.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iParamToUnset</span>(ObjectType): the parameter to unset<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>None<//p>";
CATKnowledge.Unset.Sample="if IsSet(a) AND  a == 10\n{\n\tUnset(a)\n}\nelse\n{\n\ta = a + 1\n}";

CATKnowledge.GetSystemInfo.Description="<span style=\"font-weight:bold;font-size:12px;\">GetSystemInfo</span><span style=\"font-size:12px;\"> gives access to various system information under the form of String values.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iInfoName</span>(String): name of the information to retrieve. Possible values:<//p><p>			     * hostname - the name of the machine on which the application is currently executed<br/>     * username - the name of the user currently connected on the 3D Experience Platform<br/>     * securitycontext - security context on which the user is currently connected<br/>     * catiaversion - nternal release number of the 3D Experience Platform<br/>     * osname - current Operating System name<br/>     * osversion - current Operating System version<br/>     * serverurl - current server host name<br/>     * currenttime - current time under the format MM/DD/YY HH:MM:SS<br/>The info name is not case sensitive.<br/><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><br/>- String: the computed system information<//p>";
CATKnowledge.GetSystemInfo.Sample="// Generate trace infos for current session\n\nTrace(1,\"Host : \" + GetSystemInfo(\"hostname\") + \" User: \"+ GetSystemInfo(\"user\") + \" --- \" + GetSystemInfo(\"currenttime\"))\n";

CATKnowledge.DisableErrors.Description="<span style=\"font-weight:bold;\"></span><p><span style=\"font-weight:bold;font-size:12px;\">DisableErrors</span><span style=\"font-size:12px;\"> allows to disable evaluation errors during a certain portion of code. This can be useful when an error is expected in the process but should not be displayed to the user.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">Use with caution: each call to DisableErrors must be matched by a call to EnableErrors.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-size:12px;\">The inputs allow to disable only errors, warning and informations or any combination of these.</span><br/><span style=\"font-size:12px;\"></span><br/><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>- <span style=\"font-weight:bold;\">iDisableErrors</span>(Boolean):  TRUE by default, if set to FALSE the evaluation errors will not be disabled.<//p><p>- <span style=\"font-weight:bold;\">iDisableWarnings</span>(Boolean):  TRUE by default, if set to FALSE the evaluation warnings will not be disabled.<//p><p>- <span style=\"font-weight:bold;\">iDisableInformations</span>(Boolean): TRUE by default, if set to FALSE the evaluation informations will not be disabled.<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>None<br/><//p>";
CATKnowledge.DisableErrors.Sample="\nlet a,b,c(Integer)\nlet lErrors(List)\nlet evalError(EvaluationError)\nDisableErrors(TRUE,FALSE,FALSE)\nc = a  / b\nlErrors = EnableErrors()\nif lErrors.Size() == 1\n{\n\tevalError = lErrors[1]\n\tif evalError.EmittingFunction == \"/\"\n\t{\n\t\t// Probably a division by 0, let's give c a bogus value value\n\t\tc = -1\n\t}\n}";

CATKnowledge.EnableErrors.Description="<span style=\"font-weight:bold;font-size:12px;\">EnableErrors</span><span style=\"font-size:12px;\"> re-enables the evaluation errors after a call to DisableErrors. Also compute a list of all the errors that have happened since the last call to DisableErrors under the form of EvaluationError objects.</span><p><span style=\"font-weight:bold;font-size:12px;\">Inputs:</span><//p><p>None<//p><p><span style=\"font-weight:bold;font-size:12px;\">Returned value:</span><//p><p>- List: the list of errors that have happened since the last call to DisableErrors<//p>";
CATKnowledge.EnableErrors.Sample="@idem CATPackageMethodSystemServices.DisableErrors";

CATKnowledge.clock.Description="<p><span style=\"font-size:12px;\"></span><//p><p><span style=\"font-weight:bold;font-size:12px;\">clock</span><span style=\"font-size:12px;\"> Returns the processor time consumed by the program. To calculate the actual processing time of a program, the value returned by clock shall be compared to a value returned by a previous call to the same function.</span><//p>";		 
CATKnowledge.clock.Sample="let tic, tac (real)\ntic = clock()\nlet i (integer)\ni = 1\nfor i while i <= 33333\n{\n\ti = i + 1\n}\ntac = clock()\nNotify(\"It took me # milliseconds to run this script.\", tac-tic)";

